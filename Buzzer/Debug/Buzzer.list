
Buzzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c40  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08003dc8  08003dc8  00013dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fc0  08003fc0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08003fc0  08003fc0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fc0  08003fc0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fc0  08003fc0  00013fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fc4  08003fc4  00013fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08003fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000004  08003fcc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08003fcc  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000059f9  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e23  00000000  00000000  00025a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000638  00000000  00000000  00026898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000049d  00000000  00000000  00026ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f7f8  00000000  00000000  0002736d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000046bd  00000000  00000000  00046b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b16f2  00000000  00000000  0004b222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d8c  00000000  00000000  000fc914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000fe6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003db0 	.word	0x08003db0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08003db0 	.word	0x08003db0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <__NVIC_EnableIRQ+0x38>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000cc4:	4907      	ldr	r1, [pc, #28]	; (8000ce4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000cf6:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <LL_DMA_EnableChannel+0x40>)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4413      	add	r3, r2
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <LL_DMA_EnableChannel+0x40>)
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	440a      	add	r2, r1
 8000d0c:	7812      	ldrb	r2, [r2, #0]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	440a      	add	r2, r1
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6013      	str	r3, [r2, #0]
}
 8000d1a:	bf00      	nop
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	08003dc8 	.word	0x08003dc8

08000d2c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000d3c:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <LL_DMA_SetDataTransferDirection+0x4c>)
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	4413      	add	r3, r2
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	4413      	add	r3, r2
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d50:	f023 0310 	bic.w	r3, r3, #16
 8000d54:	4908      	ldr	r1, [pc, #32]	; (8000d78 <LL_DMA_SetDataTransferDirection+0x4c>)
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	440a      	add	r2, r1
 8000d5a:	7812      	ldrb	r2, [r2, #0]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	440a      	add	r2, r1
 8000d62:	4611      	mov	r1, r2
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000d6a:	bf00      	nop
 8000d6c:	371c      	adds	r7, #28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	08003dc8 	.word	0x08003dc8

08000d7c <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <LL_DMA_SetMode+0x48>)
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	4413      	add	r3, r2
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	4413      	add	r3, r2
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f023 0220 	bic.w	r2, r3, #32
 8000da0:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <LL_DMA_SetMode+0x48>)
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	440b      	add	r3, r1
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4619      	mov	r1, r3
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	440b      	add	r3, r1
 8000dae:	4619      	mov	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000db6:	bf00      	nop
 8000db8:	371c      	adds	r7, #28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	08003dc8 	.word	0x08003dc8

08000dc8 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <LL_DMA_SetPeriphIncMode+0x48>)
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	4413      	add	r3, r2
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000dec:	4908      	ldr	r1, [pc, #32]	; (8000e10 <LL_DMA_SetPeriphIncMode+0x48>)
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	440b      	add	r3, r1
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	440b      	add	r3, r1
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000e02:	bf00      	nop
 8000e04:	371c      	adds	r7, #28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	08003dc8 	.word	0x08003dc8

08000e14 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <LL_DMA_SetMemoryIncMode+0x48>)
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	4413      	add	r3, r2
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	4413      	add	r3, r2
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e38:	4908      	ldr	r1, [pc, #32]	; (8000e5c <LL_DMA_SetMemoryIncMode+0x48>)
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	440b      	add	r3, r1
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	440b      	add	r3, r1
 8000e46:	4619      	mov	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000e4e:	bf00      	nop
 8000e50:	371c      	adds	r7, #28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	08003dc8 	.word	0x08003dc8

08000e60 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b087      	sub	sp, #28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <LL_DMA_SetPeriphSize+0x48>)
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	4413      	add	r3, r2
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000e84:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <LL_DMA_SetPeriphSize+0x48>)
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	440b      	add	r3, r1
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	440b      	add	r3, r1
 8000e92:	4619      	mov	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000e9a:	bf00      	nop
 8000e9c:	371c      	adds	r7, #28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	08003dc8 	.word	0x08003dc8

08000eac <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <LL_DMA_SetMemorySize+0x48>)
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	4413      	add	r3, r2
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000ed0:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <LL_DMA_SetMemorySize+0x48>)
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	440b      	add	r3, r1
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	440b      	add	r3, r1
 8000ede:	4619      	mov	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000ee6:	bf00      	nop
 8000ee8:	371c      	adds	r7, #28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	08003dc8 	.word	0x08003dc8

08000ef8 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	4413      	add	r3, r2
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000f1c:	4908      	ldr	r1, [pc, #32]	; (8000f40 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	440b      	add	r3, r1
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	440b      	add	r3, r1
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000f32:	bf00      	nop
 8000f34:	371c      	adds	r7, #28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	08003dc8 	.word	0x08003dc8

08000f44 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <LL_DMA_SetDataLength+0x48>)
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	4413      	add	r3, r2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	4413      	add	r3, r2
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	0c1b      	lsrs	r3, r3, #16
 8000f66:	041b      	lsls	r3, r3, #16
 8000f68:	4908      	ldr	r1, [pc, #32]	; (8000f8c <LL_DMA_SetDataLength+0x48>)
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	440a      	add	r2, r1
 8000f6e:	7812      	ldrb	r2, [r2, #0]
 8000f70:	4611      	mov	r1, r2
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	440a      	add	r2, r1
 8000f76:	4611      	mov	r1, r2
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000f7e:	bf00      	nop
 8000f80:	371c      	adds	r7, #28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	08003dc8 	.word	0x08003dc8

08000f90 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000fa2:	6a3b      	ldr	r3, [r7, #32]
 8000fa4:	2b10      	cmp	r3, #16
 8000fa6:	d114      	bne.n	8000fd2 <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 8000fa8:	4a17      	ldr	r2, [pc, #92]	; (8001008 <LL_DMA_ConfigAddresses+0x78>)
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	4413      	add	r3, r2
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8000fbc:	4a12      	ldr	r2, [pc, #72]	; (8001008 <LL_DMA_ConfigAddresses+0x78>)
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	4413      	add	r3, r2
 8000fca:	461a      	mov	r2, r3
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
  }
}
 8000fd0:	e013      	b.n	8000ffa <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 8000fd2:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <LL_DMA_ConfigAddresses+0x78>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	4413      	add	r3, r2
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 8000fe6:	4a08      	ldr	r2, [pc, #32]	; (8001008 <LL_DMA_ConfigAddresses+0x78>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	60d3      	str	r3, [r2, #12]
}
 8000ffa:	bf00      	nop
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	08003dc8 	.word	0x08003dc8

0800100c <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	33a8      	adds	r3, #168	; 0xa8
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	210f      	movs	r1, #15
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	401a      	ands	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	210f      	movs	r1, #15
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa93 f3a3 	rbit	r3, r3
 800103e:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <LL_DMA_SetPeriphRequest+0x42>
  {
    return 32U;
 800104a:	2320      	movs	r3, #32
 800104c:	e003      	b.n	8001056 <LL_DMA_SetPeriphRequest+0x4a>
  }
  return __builtin_clz(value);
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fab3 f383 	clz	r3, r3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	4619      	mov	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	408b      	lsls	r3, r1
 800105c:	68f9      	ldr	r1, [r7, #12]
 800105e:	31a8      	adds	r1, #168	; 0xa8
 8001060:	4313      	orrs	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << ((Channel) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
}
 8001064:	bf00      	nop
 8001066:	3724      	adds	r7, #36	; 0x24
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 800107e:	4a0c      	ldr	r2, [pc, #48]	; (80010b0 <LL_DMA_EnableIT_TC+0x40>)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	4413      	add	r3, r2
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <LL_DMA_EnableIT_TC+0x40>)
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	440a      	add	r2, r1
 8001094:	7812      	ldrb	r2, [r2, #0]
 8001096:	4611      	mov	r1, r2
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	440a      	add	r2, r1
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6013      	str	r3, [r2, #0]
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	08003dc8 	.word	0x08003dc8

080010b4 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 80010c2:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <LL_DMA_EnableIT_TE+0x40>)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4908      	ldr	r1, [pc, #32]	; (80010f4 <LL_DMA_EnableIT_TE+0x40>)
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	440a      	add	r2, r1
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	4611      	mov	r1, r2
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	440a      	add	r2, r1
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	6013      	str	r3, [r2, #0]
}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	08003dc8 	.word	0x08003dc8

080010f8 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f043 0201 	orr.w	r2, r3, #1
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a1a      	ldr	r2, [r3, #32]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	431a      	orrs	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	621a      	str	r2, [r3, #32]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <LL_TIM_EnableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_EnableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60da      	str	r2, [r3, #12]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <enable_timer3>:
 *  Created on: Mar 14, 2024
 *      Author: patry
 */
#include "main.h"

void enable_timer3(){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	LL_TIM_EnableDMAReq_CC1(TIM3);
 8001160:	4805      	ldr	r0, [pc, #20]	; (8001178 <enable_timer3+0x1c>)
 8001162:	f7ff ffea 	bl	800113a <LL_TIM_EnableDMAReq_CC1>
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 8001166:	2101      	movs	r1, #1
 8001168:	4803      	ldr	r0, [pc, #12]	; (8001178 <enable_timer3+0x1c>)
 800116a:	f7ff ffd5 	bl	8001118 <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM3);
 800116e:	4802      	ldr	r0, [pc, #8]	; (8001178 <enable_timer3+0x1c>)
 8001170:	f7ff ffc2 	bl	80010f8 <LL_TIM_EnableCounter>

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40000400 	.word	0x40000400

0800117c <generate_signal>:


void generate_signal(uint8_t* data, uint32_t data_length){
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af02      	add	r7, sp, #8
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6, (uint32_t)data, (uint32_t)&TIM3->CCR1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	2310      	movs	r3, #16
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <generate_signal+0x3c>)
 800118e:	2105      	movs	r1, #5
 8001190:	480a      	ldr	r0, [pc, #40]	; (80011bc <generate_signal+0x40>)
 8001192:	f7ff fefd 	bl	8000f90 <LL_DMA_ConfigAddresses>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, data_length);
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	2105      	movs	r1, #5
 800119a:	4808      	ldr	r0, [pc, #32]	; (80011bc <generate_signal+0x40>)
 800119c:	f7ff fed2 	bl	8000f44 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 80011a0:	2105      	movs	r1, #5
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <generate_signal+0x40>)
 80011a4:	f7ff ff64 	bl	8001070 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80011a8:	2105      	movs	r1, #5
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <generate_signal+0x40>)
 80011ac:	f7ff fd9c 	bl	8000ce8 <LL_DMA_EnableChannel>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40000434 	.word	0x40000434
 80011bc:	40020000 	.word	0x40020000

080011c0 <dma_init>:


void dma_init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff fd77 	bl	8000cb8 <LL_AHB1_GRP1_EnableClock>
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80011ca:	f7ff fceb 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fd3b 	bl	8000c50 <NVIC_EncodePriority>
 80011da:	4603      	mov	r3, r0
 80011dc:	4619      	mov	r1, r3
 80011de:	2010      	movs	r0, #16
 80011e0:	f7ff fd0c 	bl	8000bfc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80011e4:	2010      	movs	r0, #16
 80011e6:	f7ff fceb 	bl	8000bc0 <__NVIC_EnableIRQ>

  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_5);
 80011ea:	2205      	movs	r2, #5
 80011ec:	2105      	movs	r1, #5
 80011ee:	4816      	ldr	r0, [pc, #88]	; (8001248 <dma_init+0x88>)
 80011f0:	f7ff ff0c 	bl	800100c <LL_DMA_SetPeriphRequest>
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80011f4:	2210      	movs	r2, #16
 80011f6:	2105      	movs	r1, #5
 80011f8:	4813      	ldr	r0, [pc, #76]	; (8001248 <dma_init+0x88>)
 80011fa:	f7ff fd97 	bl	8000d2c <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 80011fe:	2200      	movs	r2, #0
 8001200:	2105      	movs	r1, #5
 8001202:	4811      	ldr	r0, [pc, #68]	; (8001248 <dma_init+0x88>)
 8001204:	f7ff fe78 	bl	8000ef8 <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8001208:	2200      	movs	r2, #0
 800120a:	2105      	movs	r1, #5
 800120c:	480e      	ldr	r0, [pc, #56]	; (8001248 <dma_init+0x88>)
 800120e:	f7ff fdb5 	bl	8000d7c <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001212:	2200      	movs	r2, #0
 8001214:	2105      	movs	r1, #5
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <dma_init+0x88>)
 8001218:	f7ff fdd6 	bl	8000dc8 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	2105      	movs	r1, #5
 8001220:	4809      	ldr	r0, [pc, #36]	; (8001248 <dma_init+0x88>)
 8001222:	f7ff fdf7 	bl	8000e14 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_HALFWORD);
 8001226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800122a:	2105      	movs	r1, #5
 800122c:	4806      	ldr	r0, [pc, #24]	; (8001248 <dma_init+0x88>)
 800122e:	f7ff fe17 	bl	8000e60 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001232:	2200      	movs	r2, #0
 8001234:	2105      	movs	r1, #5
 8001236:	4804      	ldr	r0, [pc, #16]	; (8001248 <dma_init+0x88>)
 8001238:	f7ff fe38 	bl	8000eac <LL_DMA_SetMemorySize>

	LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_6);
 800123c:	2105      	movs	r1, #5
 800123e:	4802      	ldr	r0, [pc, #8]	; (8001248 <dma_init+0x88>)
 8001240:	f7ff ff38 	bl	80010b4 <LL_DMA_EnableIT_TE>

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40020000 	.word	0x40020000

0800124c <__NVIC_SetPriorityGrouping>:
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_SetPriority>:
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	; (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	; (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <LL_RCC_MSI_Enable+0x1c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <LL_RCC_MSI_Enable+0x1c>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000

0800138c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <LL_RCC_MSI_IsReady+0x20>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b02      	cmp	r3, #2
 800139a:	d101      	bne.n	80013a0 <LL_RCC_MSI_IsReady+0x14>
 800139c:	2301      	movs	r3, #1
 800139e:	e000      	b.n	80013a2 <LL_RCC_MSI_IsReady+0x16>
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	40021000 	.word	0x40021000

080013b0 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80013ba:	f043 0308 	orr.w	r3, r3, #8
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000

080013d0 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <LL_RCC_MSI_SetRange+0x24>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013e0:	4904      	ldr	r1, [pc, #16]	; (80013f4 <LL_RCC_MSI_SetRange+0x24>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	40021000 	.word	0x40021000

080013f8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	4904      	ldr	r1, [pc, #16]	; (8001420 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800140e:	4313      	orrs	r3, r2
 8001410:	604b      	str	r3, [r1, #4]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000

08001424 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <LL_RCC_SetSysClkSource+0x24>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f023 0203 	bic.w	r2, r3, #3
 8001434:	4904      	ldr	r1, [pc, #16]	; (8001448 <LL_RCC_SetSysClkSource+0x24>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4313      	orrs	r3, r2
 800143a:	608b      	str	r3, [r1, #8]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	40021000 	.word	0x40021000

0800144c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <LL_RCC_GetSysClkSource+0x18>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 030c 	and.w	r3, r3, #12
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000

08001468 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <LL_RCC_SetAHBPrescaler+0x24>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001478:	4904      	ldr	r1, [pc, #16]	; (800148c <LL_RCC_SetAHBPrescaler+0x24>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4313      	orrs	r3, r2
 800147e:	608b      	str	r3, [r1, #8]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40021000 	.word	0x40021000

08001490 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014a0:	4904      	ldr	r1, [pc, #16]	; (80014b4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	608b      	str	r3, [r1, #8]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	40021000 	.word	0x40021000

080014b8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014c8:	4904      	ldr	r1, [pc, #16]	; (80014dc <LL_RCC_SetAPB2Prescaler+0x24>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	608b      	str	r3, [r1, #8]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40021000 	.word	0x40021000

080014e0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <LL_RCC_PLL_Enable+0x1c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <LL_RCC_PLL_Enable+0x1c>)
 80014ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000

08001500 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <LL_RCC_PLL_IsReady+0x24>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001510:	d101      	bne.n	8001516 <LL_RCC_PLL_IsReady+0x16>
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <LL_RCC_PLL_IsReady+0x18>
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800153c:	4013      	ands	r3, r2
 800153e:	68f9      	ldr	r1, [r7, #12]
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	4311      	orrs	r1, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	0212      	lsls	r2, r2, #8
 8001548:	4311      	orrs	r1, r2
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	4904      	ldr	r1, [pc, #16]	; (8001560 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001550:	4313      	orrs	r3, r2
 8001552:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000
 8001564:	f9ff808c 	.word	0xf9ff808c

08001568 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001576:	60d3      	str	r3, [r2, #12]
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000

08001588 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001594:	4907      	ldr	r1, [pc, #28]	; (80015b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4313      	orrs	r3, r2
 800159a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800159e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4013      	ands	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40021000 	.word	0x40021000

080015b8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015c4:	4907      	ldr	r1, [pc, #28]	; (80015e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4013      	ands	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015d6:	68fb      	ldr	r3, [r7, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40021000 	.word	0x40021000

080015e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <LL_APB2_GRP1_EnableClock+0x2c>)
 80015f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015f4:	4907      	ldr	r1, [pc, #28]	; (8001614 <LL_APB2_GRP1_EnableClock+0x2c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <LL_APB2_GRP1_EnableClock+0x2c>)
 80015fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4013      	ands	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	40021000 	.word	0x40021000

08001618 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <LL_FLASH_SetLatency+0x24>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 0207 	bic.w	r2, r3, #7
 8001628:	4904      	ldr	r1, [pc, #16]	; (800163c <LL_FLASH_SetLatency+0x24>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4313      	orrs	r3, r2
 800162e:	600b      	str	r3, [r1, #0]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40022000 	.word	0x40022000

08001640 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <LL_FLASH_GetLatency+0x18>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0307 	and.w	r3, r3, #7
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40022000 	.word	0x40022000

0800165c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800166c:	4904      	ldr	r1, [pc, #16]	; (8001680 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40007000 	.word	0x40007000

08001684 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001694:	d101      	bne.n	800169a <LL_PWR_IsActiveFlag_VOS+0x16>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <LL_PWR_IsActiveFlag_VOS+0x18>
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40007000 	.word	0x40007000

080016ac <LL_TIM_EnableCounter>:
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	601a      	str	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_TIM_SetCounterMode>:
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	601a      	str	r2, [r3, #0]
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <LL_TIM_DisableARRPreload>:
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	601a      	str	r2, [r3, #0]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <LL_TIM_OC_DisableFast>:
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d028      	beq.n	8001776 <LL_TIM_OC_DisableFast+0x62>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	2b04      	cmp	r3, #4
 8001728:	d023      	beq.n	8001772 <LL_TIM_OC_DisableFast+0x5e>
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2b10      	cmp	r3, #16
 800172e:	d01e      	beq.n	800176e <LL_TIM_OC_DisableFast+0x5a>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2b40      	cmp	r3, #64	; 0x40
 8001734:	d019      	beq.n	800176a <LL_TIM_OC_DisableFast+0x56>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800173c:	d013      	beq.n	8001766 <LL_TIM_OC_DisableFast+0x52>
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001744:	d00d      	beq.n	8001762 <LL_TIM_OC_DisableFast+0x4e>
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800174c:	d007      	beq.n	800175e <LL_TIM_OC_DisableFast+0x4a>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001754:	d101      	bne.n	800175a <LL_TIM_OC_DisableFast+0x46>
 8001756:	2307      	movs	r3, #7
 8001758:	e00e      	b.n	8001778 <LL_TIM_OC_DisableFast+0x64>
 800175a:	2308      	movs	r3, #8
 800175c:	e00c      	b.n	8001778 <LL_TIM_OC_DisableFast+0x64>
 800175e:	2306      	movs	r3, #6
 8001760:	e00a      	b.n	8001778 <LL_TIM_OC_DisableFast+0x64>
 8001762:	2305      	movs	r3, #5
 8001764:	e008      	b.n	8001778 <LL_TIM_OC_DisableFast+0x64>
 8001766:	2304      	movs	r3, #4
 8001768:	e006      	b.n	8001778 <LL_TIM_OC_DisableFast+0x64>
 800176a:	2303      	movs	r3, #3
 800176c:	e004      	b.n	8001778 <LL_TIM_OC_DisableFast+0x64>
 800176e:	2302      	movs	r3, #2
 8001770:	e002      	b.n	8001778 <LL_TIM_OC_DisableFast+0x64>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <LL_TIM_OC_DisableFast+0x64>
 8001776:	2300      	movs	r3, #0
 8001778:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3318      	adds	r3, #24
 800177e:	4619      	mov	r1, r3
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <LL_TIM_OC_DisableFast+0x9c>)
 8001784:	5cd3      	ldrb	r3, [r2, r3]
 8001786:	440b      	add	r3, r1
 8001788:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	4908      	ldr	r1, [pc, #32]	; (80017b4 <LL_TIM_OC_DisableFast+0xa0>)
 8001792:	5ccb      	ldrb	r3, [r1, r3]
 8001794:	4619      	mov	r1, r3
 8001796:	2304      	movs	r3, #4
 8001798:	408b      	lsls	r3, r1
 800179a:	43db      	mvns	r3, r3
 800179c:	401a      	ands	r2, r3
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	601a      	str	r2, [r3, #0]
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	08003dd0 	.word	0x08003dd0
 80017b4:	08003ddc 	.word	0x08003ddc

080017b8 <LL_TIM_OC_EnablePreload>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d028      	beq.n	800181a <LL_TIM_OC_EnablePreload+0x62>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d023      	beq.n	8001816 <LL_TIM_OC_EnablePreload+0x5e>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2b10      	cmp	r3, #16
 80017d2:	d01e      	beq.n	8001812 <LL_TIM_OC_EnablePreload+0x5a>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	2b40      	cmp	r3, #64	; 0x40
 80017d8:	d019      	beq.n	800180e <LL_TIM_OC_EnablePreload+0x56>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017e0:	d013      	beq.n	800180a <LL_TIM_OC_EnablePreload+0x52>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e8:	d00d      	beq.n	8001806 <LL_TIM_OC_EnablePreload+0x4e>
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017f0:	d007      	beq.n	8001802 <LL_TIM_OC_EnablePreload+0x4a>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f8:	d101      	bne.n	80017fe <LL_TIM_OC_EnablePreload+0x46>
 80017fa:	2307      	movs	r3, #7
 80017fc:	e00e      	b.n	800181c <LL_TIM_OC_EnablePreload+0x64>
 80017fe:	2308      	movs	r3, #8
 8001800:	e00c      	b.n	800181c <LL_TIM_OC_EnablePreload+0x64>
 8001802:	2306      	movs	r3, #6
 8001804:	e00a      	b.n	800181c <LL_TIM_OC_EnablePreload+0x64>
 8001806:	2305      	movs	r3, #5
 8001808:	e008      	b.n	800181c <LL_TIM_OC_EnablePreload+0x64>
 800180a:	2304      	movs	r3, #4
 800180c:	e006      	b.n	800181c <LL_TIM_OC_EnablePreload+0x64>
 800180e:	2303      	movs	r3, #3
 8001810:	e004      	b.n	800181c <LL_TIM_OC_EnablePreload+0x64>
 8001812:	2302      	movs	r3, #2
 8001814:	e002      	b.n	800181c <LL_TIM_OC_EnablePreload+0x64>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <LL_TIM_OC_EnablePreload+0x64>
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3318      	adds	r3, #24
 8001822:	4619      	mov	r1, r3
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <LL_TIM_OC_EnablePreload+0x98>)
 8001828:	5cd3      	ldrb	r3, [r2, r3]
 800182a:	440b      	add	r3, r1
 800182c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	4907      	ldr	r1, [pc, #28]	; (8001854 <LL_TIM_OC_EnablePreload+0x9c>)
 8001836:	5ccb      	ldrb	r3, [r1, r3]
 8001838:	4619      	mov	r1, r3
 800183a:	2308      	movs	r3, #8
 800183c:	408b      	lsls	r3, r1
 800183e:	431a      	orrs	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	08003dd0 	.word	0x08003dd0
 8001854:	08003ddc 	.word	0x08003ddc

08001858 <LL_TIM_DisableExternalClock>:
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	609a      	str	r2, [r3, #8]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_TIM_SetClockSource>:
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800188a:	f023 0307 	bic.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	609a      	str	r2, [r3, #8]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <LL_TIM_SetTriggerOutput>:
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	605a      	str	r2, [r3, #4]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_TIM_DisableMasterSlaveMode>:
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	609a      	str	r2, [r3, #8]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_TIM_ConfigETR>:
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f423 423f 	bic.w	r2, r3, #48896	; 0xbf00
 80018fe:	68b9      	ldr	r1, [r7, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4319      	orrs	r1, r3
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	430b      	orrs	r3, r1
 8001908:	431a      	orrs	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	609a      	str	r2, [r3, #8]
}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <LL_TIM_SetOCRefClearInputSource>:
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 0208 	bic.w	r2, r3, #8
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	609a      	str	r2, [r3, #8]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_TIM_ClearFlag_UPDATE>:
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f06f 0201 	mvn.w	r2, #1
 800194e:	611a      	str	r2, [r3, #16]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800197c:	2001      	movs	r0, #1
 800197e:	f7ff fe33 	bl	80015e8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001982:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001986:	f7ff fe17 	bl	80015b8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800198a:	2003      	movs	r0, #3
 800198c:	f7ff fc5e 	bl	800124c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001990:	f7ff fc80 	bl	8001294 <__NVIC_GetPriorityGrouping>
 8001994:	4603      	mov	r3, r0
 8001996:	2200      	movs	r2, #0
 8001998:	210f      	movs	r1, #15
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fcb2 	bl	8001304 <NVIC_EncodePriority>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4619      	mov	r1, r3
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f7ff fc82 	bl	80012b0 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ac:	f000 f80e 	bl	80019cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b0:	f000 f90e 	bl	8001bd0 <MX_GPIO_Init>
  MX_TIM6_Init();
 80019b4:	f000 f8d8 	bl	8001b68 <MX_TIM6_Init>
  MX_TIM3_Init();
 80019b8:	f000 f85a 	bl	8001a70 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  	  dma_init();
 80019bc:	f7ff fc00 	bl	80011c0 <dma_init>
  	  enable_timer3();
 80019c0:	f7ff fbcc 	bl	800115c <enable_timer3>
  	  LedTest();
 80019c4:	f000 fa58 	bl	8001e78 <LedTest>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <main+0x50>
	...

080019cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7ff fe21 	bl	8001618 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 80019d6:	bf00      	nop
 80019d8:	f7ff fe32 	bl	8001640 <LL_FLASH_GetLatency>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d1fa      	bne.n	80019d8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80019e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019e6:	f7ff fe39 	bl	800165c <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 80019ea:	bf00      	nop
 80019ec:	f7ff fe4a 	bl	8001684 <LL_PWR_IsActiveFlag_VOS>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1fa      	bne.n	80019ec <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 80019f6:	f7ff fcb9 	bl	800136c <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 80019fa:	bf00      	nop
 80019fc:	f7ff fcc6 	bl	800138c <LL_RCC_MSI_IsReady>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d1fa      	bne.n	80019fc <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8001a06:	f7ff fcd3 	bl	80013b0 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8001a0a:	2060      	movs	r0, #96	; 0x60
 8001a0c:	f7ff fce0 	bl	80013d0 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001a10:	2000      	movs	r0, #0
 8001a12:	f7ff fcf1 	bl	80013f8 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 16, LL_RCC_PLLR_DIV_2);
 8001a16:	2300      	movs	r3, #0
 8001a18:	2210      	movs	r2, #16
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7ff fd83 	bl	8001528 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001a22:	f7ff fda1 	bl	8001568 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001a26:	f7ff fd5b 	bl	80014e0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001a2a:	bf00      	nop
 8001a2c:	f7ff fd68 	bl	8001500 <LL_RCC_PLL_IsReady>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d1fa      	bne.n	8001a2c <SystemClock_Config+0x60>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001a36:	2003      	movs	r0, #3
 8001a38:	f7ff fcf4 	bl	8001424 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001a3c:	bf00      	nop
 8001a3e:	f7ff fd05 	bl	800144c <LL_RCC_GetSysClkSource>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b0c      	cmp	r3, #12
 8001a46:	d1fa      	bne.n	8001a3e <SystemClock_Config+0x72>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff fd0d 	bl	8001468 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f7ff fd1e 	bl	8001490 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001a54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a58:	f7ff fd2e 	bl	80014b8 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(32000000);
 8001a5c:	4803      	ldr	r0, [pc, #12]	; (8001a6c <SystemClock_Config+0xa0>)
 8001a5e:	f001 f8bd 	bl	8002bdc <LL_Init1msTick>

  LL_SetSystemCoreClock(32000000);
 8001a62:	4802      	ldr	r0, [pc, #8]	; (8001a6c <SystemClock_Config+0xa0>)
 8001a64:	f001 f8c8 	bl	8002bf8 <LL_SetSystemCoreClock>
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	01e84800 	.word	0x01e84800

08001a70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b094      	sub	sp, #80	; 0x50
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001a76:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f001 f8c2 	bl	8002c18 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	611a      	str	r2, [r3, #16]
 8001aa2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001aa4:	2002      	movs	r0, #2
 8001aa6:	f7ff fd87 	bl	80015b8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 32-LL_TIM_IC_FILTER_FDIV1_N2;
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <MX_TIM3_Init+0xf0>)
 8001ab4:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001aba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4828      	ldr	r0, [pc, #160]	; (8001b64 <MX_TIM3_Init+0xf4>)
 8001ac2:	f000 fcc1 	bl	8002448 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001ac6:	4827      	ldr	r0, [pc, #156]	; (8001b64 <MX_TIM3_Init+0xf4>)
 8001ac8:	f7ff fe13 	bl	80016f2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001acc:	2100      	movs	r1, #0
 8001ace:	4825      	ldr	r0, [pc, #148]	; (8001b64 <MX_TIM3_Init+0xf4>)
 8001ad0:	f7ff fed2 	bl	8001878 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	4823      	ldr	r0, [pc, #140]	; (8001b64 <MX_TIM3_Init+0xf4>)
 8001ad8:	f7ff fe6e 	bl	80017b8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001adc:	2360      	movs	r3, #96	; 0x60
 8001ade:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	461a      	mov	r2, r3
 8001af6:	2101      	movs	r1, #1
 8001af8:	481a      	ldr	r0, [pc, #104]	; (8001b64 <MX_TIM3_Init+0xf4>)
 8001afa:	f000 fd39 	bl	8002570 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001afe:	2101      	movs	r1, #1
 8001b00:	4818      	ldr	r0, [pc, #96]	; (8001b64 <MX_TIM3_Init+0xf4>)
 8001b02:	f7ff fe07 	bl	8001714 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM3, LL_TIM_OCREF_CLR_INT_NC);
 8001b06:	2100      	movs	r1, #0
 8001b08:	4816      	ldr	r0, [pc, #88]	; (8001b64 <MX_TIM3_Init+0xf4>)
 8001b0a:	f7ff ff06 	bl	800191a <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM3);
 8001b0e:	4815      	ldr	r0, [pc, #84]	; (8001b64 <MX_TIM3_Init+0xf4>)
 8001b10:	f7ff fea2 	bl	8001858 <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM3, LL_TIM_ETR_POLARITY_NONINVERTED, LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
 8001b14:	2300      	movs	r3, #0
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4812      	ldr	r0, [pc, #72]	; (8001b64 <MX_TIM3_Init+0xf4>)
 8001b1c:	f7ff fee4 	bl	80018e8 <LL_TIM_ConfigETR>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001b20:	2100      	movs	r1, #0
 8001b22:	4810      	ldr	r0, [pc, #64]	; (8001b64 <MX_TIM3_Init+0xf4>)
 8001b24:	f7ff febd 	bl	80018a2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001b28:	480e      	ldr	r0, [pc, #56]	; (8001b64 <MX_TIM3_Init+0xf4>)
 8001b2a:	f7ff fecd 	bl	80018c8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f7ff fd2a 	bl	8001588 <LL_AHB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PA6   ------> TIM3_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001b34:	2340      	movs	r3, #64	; 0x40
 8001b36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b54:	f000 fb7a 	bl	800224c <LL_GPIO_Init>

}
 8001b58:	bf00      	nop
 8001b5a:	3750      	adds	r7, #80	; 0x50
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	fff00020 	.word	0xfff00020
 8001b64:	40000400 	.word	0x40000400

08001b68 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8001b7c:	2010      	movs	r0, #16
 8001b7e:	f7ff fd1b 	bl	80015b8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 31;
 8001b82:	231f      	movs	r3, #31
 8001b84:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8001b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b8e:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001b90:	1d3b      	adds	r3, r7, #4
 8001b92:	4619      	mov	r1, r3
 8001b94:	480d      	ldr	r0, [pc, #52]	; (8001bcc <MX_TIM6_Init+0x64>)
 8001b96:	f000 fc57 	bl	8002448 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8001b9a:	480c      	ldr	r0, [pc, #48]	; (8001bcc <MX_TIM6_Init+0x64>)
 8001b9c:	f7ff fda9 	bl	80016f2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	480a      	ldr	r0, [pc, #40]	; (8001bcc <MX_TIM6_Init+0x64>)
 8001ba4:	f7ff fe7d 	bl	80018a2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8001ba8:	4808      	ldr	r0, [pc, #32]	; (8001bcc <MX_TIM6_Init+0x64>)
 8001baa:	f7ff fe8d 	bl	80018c8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */
 // LL_TIM_SetClockSource(TIM6, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_SetCounterMode(TIM6, LL_TIM_COUNTERMODE_UP);
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4806      	ldr	r0, [pc, #24]	; (8001bcc <MX_TIM6_Init+0x64>)
 8001bb2:	f7ff fd8b 	bl	80016cc <LL_TIM_SetCounterMode>
  LL_TIM_ClearFlag_UPDATE(TIM6);
 8001bb6:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_TIM6_Init+0x64>)
 8001bb8:	f7ff fec2 	bl	8001940 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <MX_TIM6_Init+0x64>)
 8001bbe:	f7ff fd75 	bl	80016ac <LL_TIM_EnableCounter>

  /* USER CODE END TIM6_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40001000 	.word	0x40001000

08001bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8001be6:	2080      	movs	r0, #128	; 0x80
 8001be8:	f7ff fcce 	bl	8001588 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001bec:	2001      	movs	r0, #1
 8001bee:	f7ff fccb 	bl	8001588 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001bf2:	2004      	movs	r0, #4
 8001bf4:	f7ff fcc8 	bl	8001588 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(test_GPIO_Port, test_Pin);
 8001bf8:	2120      	movs	r1, #32
 8001bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfe:	f7ff fead 	bl	800195c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Led_GPIO_Port, Led_Pin);
 8001c02:	2180      	movs	r1, #128	; 0x80
 8001c04:	4812      	ldr	r0, [pc, #72]	; (8001c50 <MX_GPIO_Init+0x80>)
 8001c06:	f7ff fea9 	bl	800195c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = test_Pin;
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(test_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	463b      	mov	r3, r7
 8001c20:	4619      	mov	r1, r3
 8001c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c26:	f000 fb11 	bl	800224c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Led_Pin;
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c32:	2303      	movs	r3, #3
 8001c34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8001c3e:	463b      	mov	r3, r7
 8001c40:	4619      	mov	r1, r3
 8001c42:	4803      	ldr	r0, [pc, #12]	; (8001c50 <MX_GPIO_Init+0x80>)
 8001c44:	f000 fb02 	bl	800224c <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c48:	bf00      	nop
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	48000800 	.word	0x48000800

08001c54 <WS2812_Send>:
	LL_TIM_ClearFlag_UPDATE(TIM6);
	LL_TIM_SetAutoReload(TIM6, czas);
	while(LL_TIM_IsActiveFlag_UPDATE(TIM6) == 0);
}
void WS2812_Send (void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	e036      	b.n	8001cd2 <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8001c64:	4a29      	ldr	r2, [pc, #164]	; (8001d0c <WS2812_Send+0xb8>)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	785b      	ldrb	r3, [r3, #1]
 8001c6e:	041a      	lsls	r2, r3, #16
 8001c70:	4926      	ldr	r1, [pc, #152]	; (8001d0c <WS2812_Send+0xb8>)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	440b      	add	r3, r1
 8001c78:	789b      	ldrb	r3, [r3, #2]
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	4923      	ldr	r1, [pc, #140]	; (8001d0c <WS2812_Send+0xb8>)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	78db      	ldrb	r3, [r3, #3]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8001c8c:	2317      	movs	r3, #23
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	e019      	b.n	8001cc6 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 8001c92:	2201      	movs	r2, #1
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 27;  // 2/3 of 90
 8001ca4:	4a1a      	ldr	r2, [pc, #104]	; (8001d10 <WS2812_Send+0xbc>)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	211b      	movs	r1, #27
 8001caa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001cae:	e004      	b.n	8001cba <WS2812_Send+0x66>
			}

			else pwmData[indx] = 13;  // 1/3 of 90
 8001cb0:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <WS2812_Send+0xbc>)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	210d      	movs	r1, #13
 8001cb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	dae2      	bge.n	8001c92 <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	2b07      	cmp	r3, #7
 8001cd6:	ddc5      	ble.n	8001c64 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	e00a      	b.n	8001cf4 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8001cde:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <WS2812_Send+0xbc>)
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b31      	cmp	r3, #49	; 0x31
 8001cf8:	ddf1      	ble.n	8001cde <WS2812_Send+0x8a>
	}

	generate_signal(pwmData,sizeof(pwmData));
 8001cfa:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8001cfe:	4804      	ldr	r0, [pc, #16]	; (8001d10 <WS2812_Send+0xbc>)
 8001d00:	f7ff fa3c 	bl	800117c <generate_signal>
}
 8001d04:	bf00      	nop
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000040 	.word	0x20000040
 8001d10:	20000060 	.word	0x20000060
 8001d14:	00000000 	.word	0x00000000

08001d18 <Set_Brightness>:
void Set_Brightness (int brightness)  // 0-45
{
 8001d18:	b5b0      	push	{r4, r5, r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b2d      	cmp	r3, #45	; 0x2d
 8001d24:	dd01      	ble.n	8001d2a <Set_Brightness+0x12>
 8001d26:	232d      	movs	r3, #45	; 0x2d
 8001d28:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	e060      	b.n	8001df2 <Set_Brightness+0xda>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8001d30:	4a37      	ldr	r2, [pc, #220]	; (8001e10 <Set_Brightness+0xf8>)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8001d38:	4a36      	ldr	r2, [pc, #216]	; (8001e14 <Set_Brightness+0xfc>)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8001d40:	2301      	movs	r3, #1
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	e04f      	b.n	8001de6 <Set_Brightness+0xce>
		{
			float angle = 90-brightness;  // in degrees
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d54:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f7fe fb99 	bl	8000490 <__aeabi_f2d>
 8001d5e:	a32a      	add	r3, pc, #168	; (adr r3, 8001e08 <Set_Brightness+0xf0>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	f7fe fbec 	bl	8000540 <__aeabi_dmul>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <Set_Brightness+0x100>)
 8001d76:	f7fe fd0d 	bl	8000794 <__aeabi_ddiv>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	f7fe febf 	bl	8000b04 <__aeabi_d2f>
 8001d86:	4603      	mov	r3, r0
 8001d88:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8001d8a:	4a21      	ldr	r2, [pc, #132]	; (8001e10 <Set_Brightness+0xf8>)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	441a      	add	r2, r3
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4413      	add	r3, r2
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fb67 	bl	800046c <__aeabi_i2d>
 8001d9e:	4604      	mov	r4, r0
 8001da0:	460d      	mov	r5, r1
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7fe fb74 	bl	8000490 <__aeabi_f2d>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	ec43 2b10 	vmov	d0, r2, r3
 8001db0:	f000 ff5e 	bl	8002c70 <tan>
 8001db4:	ec53 2b10 	vmov	r2, r3, d0
 8001db8:	4620      	mov	r0, r4
 8001dba:	4629      	mov	r1, r5
 8001dbc:	f7fe fcea 	bl	8000794 <__aeabi_ddiv>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f7fe fe7c 	bl	8000ac4 <__aeabi_d2uiz>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	b2d9      	uxtb	r1, r3
 8001dd0:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <Set_Brightness+0xfc>)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	441a      	add	r2, r3
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4413      	add	r3, r2
 8001ddc:	460a      	mov	r2, r1
 8001dde:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	3301      	adds	r3, #1
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	ddac      	ble.n	8001d46 <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3301      	adds	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b07      	cmp	r3, #7
 8001df6:	dd9b      	ble.n	8001d30 <Set_Brightness+0x18>
		}
	}

#endif

}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bdb0      	pop	{r4, r5, r7, pc}
 8001e02:	bf00      	nop
 8001e04:	f3af 8000 	nop.w
 8001e08:	53c8d4f1 	.word	0x53c8d4f1
 8001e0c:	400921fb 	.word	0x400921fb
 8001e10:	20000020 	.word	0x20000020
 8001e14:	20000040 	.word	0x20000040
 8001e18:	40668000 	.word	0x40668000

08001e1c <Set_LED>:
void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	b2d9      	uxtb	r1, r3
 8001e2e:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <Set_LED+0x58>)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	b2d9      	uxtb	r1, r3
 8001e3a:	4a0e      	ldr	r2, [pc, #56]	; (8001e74 <Set_LED+0x58>)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	460a      	mov	r2, r1
 8001e44:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	b2d9      	uxtb	r1, r3
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <Set_LED+0x58>)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	460a      	mov	r2, r1
 8001e54:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b2d9      	uxtb	r1, r3
 8001e5a:	4a06      	ldr	r2, [pc, #24]	; (8001e74 <Set_LED+0x58>)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	460a      	mov	r2, r1
 8001e64:	70da      	strb	r2, [r3, #3]
}
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000020 	.word	0x20000020

08001e78 <LedTest>:
		LED_Data[i][2] = 0;
		LED_Data[i][3] = 0;
	}
}
void LedTest()
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	Set_LED(0, 255, 0, 0);
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	2200      	movs	r2, #0
 8001e80:	21ff      	movs	r1, #255	; 0xff
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7ff ffca 	bl	8001e1c <Set_LED>
	Set_LED(1, 0, 255, 0);
 8001e88:	2300      	movs	r3, #0
 8001e8a:	22ff      	movs	r2, #255	; 0xff
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2001      	movs	r0, #1
 8001e90:	f7ff ffc4 	bl	8001e1c <Set_LED>
	Set_LED(2, 0, 0, 255);
 8001e94:	23ff      	movs	r3, #255	; 0xff
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	2002      	movs	r0, #2
 8001e9c:	f7ff ffbe 	bl	8001e1c <Set_LED>
	Set_LED(3, 46, 89, 128);
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	2259      	movs	r2, #89	; 0x59
 8001ea4:	212e      	movs	r1, #46	; 0x2e
 8001ea6:	2003      	movs	r0, #3
 8001ea8:	f7ff ffb8 	bl	8001e1c <Set_LED>
	Set_LED(4, 156, 233, 100);
 8001eac:	2364      	movs	r3, #100	; 0x64
 8001eae:	22e9      	movs	r2, #233	; 0xe9
 8001eb0:	219c      	movs	r1, #156	; 0x9c
 8001eb2:	2004      	movs	r0, #4
 8001eb4:	f7ff ffb2 	bl	8001e1c <Set_LED>
	Set_LED(5, 102, 0, 235);
 8001eb8:	23eb      	movs	r3, #235	; 0xeb
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2166      	movs	r1, #102	; 0x66
 8001ebe:	2005      	movs	r0, #5
 8001ec0:	f7ff ffac 	bl	8001e1c <Set_LED>
	Set_LED(6, 47, 38, 77);
 8001ec4:	234d      	movs	r3, #77	; 0x4d
 8001ec6:	2226      	movs	r2, #38	; 0x26
 8001ec8:	212f      	movs	r1, #47	; 0x2f
 8001eca:	2006      	movs	r0, #6
 8001ecc:	f7ff ffa6 	bl	8001e1c <Set_LED>
	Set_LED(7, 255, 200, 0);
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	22c8      	movs	r2, #200	; 0xc8
 8001ed4:	21ff      	movs	r1, #255	; 0xff
 8001ed6:	2007      	movs	r0, #7
 8001ed8:	f7ff ffa0 	bl	8001e1c <Set_LED>
	Set_Brightness(5);
 8001edc:	2005      	movs	r0, #5
 8001ede:	f7ff ff1b 	bl	8001d18 <Set_Brightness>
	WS2812_Send();
 8001ee2:	f7ff feb7 	bl	8001c54 <WS2812_Send>
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eee:	e7fe      	b.n	8001eee <NMI_Handler+0x4>

08001ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <HardFault_Handler+0x4>

08001ef6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efa:	e7fe      	b.n	8001efa <MemManage_Handler+0x4>

08001efc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <BusFault_Handler+0x4>

08001f02 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <UsageFault_Handler+0x4>

08001f08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <SystemInit+0x20>)
 8001f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4a:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <SystemInit+0x20>)
 8001f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f68:	f7ff ffea 	bl	8001f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f6c:	480c      	ldr	r0, [pc, #48]	; (8001fa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f6e:	490d      	ldr	r1, [pc, #52]	; (8001fa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f70:	4a0d      	ldr	r2, [pc, #52]	; (8001fa8 <LoopForever+0xe>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f74:	e002      	b.n	8001f7c <LoopCopyDataInit>

08001f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7a:	3304      	adds	r3, #4

08001f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f80:	d3f9      	bcc.n	8001f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f82:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f84:	4c0a      	ldr	r4, [pc, #40]	; (8001fb0 <LoopForever+0x16>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f88:	e001      	b.n	8001f8e <LoopFillZerobss>

08001f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f8c:	3204      	adds	r2, #4

08001f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f90:	d3fb      	bcc.n	8001f8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f92:	f000 fe49 	bl	8002c28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f96:	f7ff fcef 	bl	8001978 <main>

08001f9a <LoopForever>:

LoopForever:
    b LoopForever
 8001f9a:	e7fe      	b.n	8001f9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001fa8:	08003fc8 	.word	0x08003fc8
  ldr r2, =_sbss
 8001fac:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001fb0:	20000244 	.word	0x20000244

08001fb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fb4:	e7fe      	b.n	8001fb4 <ADC1_2_IRQHandler>

08001fb6 <LL_GPIO_SetPinMode>:
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b08b      	sub	sp, #44	; 0x2c
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	613b      	str	r3, [r7, #16]
  return result;
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001fdc:	2320      	movs	r3, #32
 8001fde:	e003      	b.n	8001fe8 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	2103      	movs	r1, #3
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	61fb      	str	r3, [r7, #28]
  return result;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800200a:	2320      	movs	r3, #32
 800200c:	e003      	b.n	8002016 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	431a      	orrs	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	601a      	str	r2, [r3, #0]
}
 8002024:	bf00      	nop
 8002026:	372c      	adds	r7, #44	; 0x2c
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_GPIO_SetPinOutputType>:
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	43db      	mvns	r3, r3
 8002044:	401a      	ands	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	fb01 f303 	mul.w	r3, r1, r3
 800204e:	431a      	orrs	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	605a      	str	r2, [r3, #4]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_GPIO_SetPinSpeed>:
{
 8002060:	b480      	push	{r7}
 8002062:	b08b      	sub	sp, #44	; 0x2c
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	613b      	str	r3, [r7, #16]
  return result;
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002086:	2320      	movs	r3, #32
 8002088:	e003      	b.n	8002092 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2103      	movs	r1, #3
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	401a      	ands	r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	61fb      	str	r3, [r7, #28]
  return result;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80020b4:	2320      	movs	r3, #32
 80020b6:	e003      	b.n	80020c0 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	fa01 f303 	lsl.w	r3, r1, r3
 80020c8:	431a      	orrs	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	609a      	str	r2, [r3, #8]
}
 80020ce:	bf00      	nop
 80020d0:	372c      	adds	r7, #44	; 0x2c
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_GPIO_SetPinPull>:
{
 80020da:	b480      	push	{r7}
 80020dc:	b08b      	sub	sp, #44	; 0x2c
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	613b      	str	r3, [r7, #16]
  return result;
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002100:	2320      	movs	r3, #32
 8002102:	e003      	b.n	800210c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2103      	movs	r1, #3
 8002110:	fa01 f303 	lsl.w	r3, r1, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	401a      	ands	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	fa93 f3a3 	rbit	r3, r3
 8002122:	61fb      	str	r3, [r7, #28]
  return result;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800212e:	2320      	movs	r3, #32
 8002130:	e003      	b.n	800213a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	431a      	orrs	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	60da      	str	r2, [r3, #12]
}
 8002148:	bf00      	nop
 800214a:	372c      	adds	r7, #44	; 0x2c
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_GPIO_SetAFPin_0_7>:
{
 8002154:	b480      	push	{r7}
 8002156:	b08b      	sub	sp, #44	; 0x2c
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a1a      	ldr	r2, [r3, #32]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	613b      	str	r3, [r7, #16]
  return result;
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800217a:	2320      	movs	r3, #32
 800217c:	e003      	b.n	8002186 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	210f      	movs	r1, #15
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	401a      	ands	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	61fb      	str	r3, [r7, #28]
  return result;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80021a8:	2320      	movs	r3, #32
 80021aa:	e003      	b.n	80021b4 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	431a      	orrs	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	621a      	str	r2, [r3, #32]
}
 80021c2:	bf00      	nop
 80021c4:	372c      	adds	r7, #44	; 0x2c
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_GPIO_SetAFPin_8_15>:
{
 80021ce:	b480      	push	{r7}
 80021d0:	b08b      	sub	sp, #44	; 0x2c
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	613b      	str	r3, [r7, #16]
  return result;
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80021f6:	2320      	movs	r3, #32
 80021f8:	e003      	b.n	8002202 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	210f      	movs	r1, #15
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	401a      	ands	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	61fb      	str	r3, [r7, #28]
  return result;
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002226:	2320      	movs	r3, #32
 8002228:	e003      	b.n	8002232 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	431a      	orrs	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002240:	bf00      	nop
 8002242:	372c      	adds	r7, #44	; 0x2c
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	60fb      	str	r3, [r7, #12]
  return result;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <LL_GPIO_Init+0x26>
    return 32U;
 800226e:	2320      	movs	r3, #32
 8002270:	e003      	b.n	800227a <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800227c:	e048      	b.n	8002310 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	2101      	movs	r1, #1
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d03a      	beq.n	800230a <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d003      	beq.n	80022a4 <LL_GPIO_Init+0x58>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d10e      	bne.n	80022c2 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	461a      	mov	r2, r3
 80022aa:	69b9      	ldr	r1, [r7, #24]
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff fed7 	bl	8002060 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	6819      	ldr	r1, [r3, #0]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	461a      	mov	r2, r3
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff feb7 	bl	8002030 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	461a      	mov	r2, r3
 80022c8:	69b9      	ldr	r1, [r7, #24]
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ff05 	bl	80020da <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d111      	bne.n	80022fc <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2bff      	cmp	r3, #255	; 0xff
 80022dc:	d807      	bhi.n	80022ee <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	461a      	mov	r2, r3
 80022e4:	69b9      	ldr	r1, [r7, #24]
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ff34 	bl	8002154 <LL_GPIO_SetAFPin_0_7>
 80022ec:	e006      	b.n	80022fc <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	461a      	mov	r2, r3
 80022f4:	69b9      	ldr	r1, [r7, #24]
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ff69 	bl	80021ce <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	461a      	mov	r2, r3
 8002302:	69b9      	ldr	r1, [r7, #24]
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff fe56 	bl	8001fb6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3301      	adds	r3, #1
 800230e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	fa22 f303 	lsr.w	r3, r2, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1af      	bne.n	800227e <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3720      	adds	r7, #32
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <LL_TIM_SetPrescaler>:
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_TIM_SetAutoReload>:
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_TIM_SetRepetitionCounter>:
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_TIM_OC_SetCompareCH1>:
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_TIM_OC_SetCompareCH2>:
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <LL_TIM_OC_SetCompareCH3>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_TIM_OC_SetCompareCH4>:
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	641a      	str	r2, [r3, #64]	; 0x40
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_TIM_OC_SetCompareCH5>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <LL_TIM_OC_SetCompareCH6>:
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	615a      	str	r2, [r3, #20]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a3d      	ldr	r2, [pc, #244]	; (8002550 <LL_TIM_Init+0x108>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d013      	beq.n	8002488 <LL_TIM_Init+0x40>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002466:	d00f      	beq.n	8002488 <LL_TIM_Init+0x40>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a3a      	ldr	r2, [pc, #232]	; (8002554 <LL_TIM_Init+0x10c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00b      	beq.n	8002488 <LL_TIM_Init+0x40>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a39      	ldr	r2, [pc, #228]	; (8002558 <LL_TIM_Init+0x110>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d007      	beq.n	8002488 <LL_TIM_Init+0x40>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a38      	ldr	r2, [pc, #224]	; (800255c <LL_TIM_Init+0x114>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d003      	beq.n	8002488 <LL_TIM_Init+0x40>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a37      	ldr	r2, [pc, #220]	; (8002560 <LL_TIM_Init+0x118>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d106      	bne.n	8002496 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a2d      	ldr	r2, [pc, #180]	; (8002550 <LL_TIM_Init+0x108>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01f      	beq.n	80024de <LL_TIM_Init+0x96>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a4:	d01b      	beq.n	80024de <LL_TIM_Init+0x96>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a2a      	ldr	r2, [pc, #168]	; (8002554 <LL_TIM_Init+0x10c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d017      	beq.n	80024de <LL_TIM_Init+0x96>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a29      	ldr	r2, [pc, #164]	; (8002558 <LL_TIM_Init+0x110>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d013      	beq.n	80024de <LL_TIM_Init+0x96>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a28      	ldr	r2, [pc, #160]	; (800255c <LL_TIM_Init+0x114>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00f      	beq.n	80024de <LL_TIM_Init+0x96>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a27      	ldr	r2, [pc, #156]	; (8002560 <LL_TIM_Init+0x118>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00b      	beq.n	80024de <LL_TIM_Init+0x96>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a26      	ldr	r2, [pc, #152]	; (8002564 <LL_TIM_Init+0x11c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d007      	beq.n	80024de <LL_TIM_Init+0x96>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a25      	ldr	r2, [pc, #148]	; (8002568 <LL_TIM_Init+0x120>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d003      	beq.n	80024de <LL_TIM_Init+0x96>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a24      	ldr	r2, [pc, #144]	; (800256c <LL_TIM_Init+0x124>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d106      	bne.n	80024ec <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	4619      	mov	r1, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff ff23 	bl	8002344 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	4619      	mov	r1, r3
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ff0f 	bl	8002328 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a10      	ldr	r2, [pc, #64]	; (8002550 <LL_TIM_Init+0x108>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00f      	beq.n	8002532 <LL_TIM_Init+0xea>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a12      	ldr	r2, [pc, #72]	; (8002560 <LL_TIM_Init+0x118>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d00b      	beq.n	8002532 <LL_TIM_Init+0xea>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a11      	ldr	r2, [pc, #68]	; (8002564 <LL_TIM_Init+0x11c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d007      	beq.n	8002532 <LL_TIM_Init+0xea>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a10      	ldr	r2, [pc, #64]	; (8002568 <LL_TIM_Init+0x120>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d003      	beq.n	8002532 <LL_TIM_Init+0xea>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a0f      	ldr	r2, [pc, #60]	; (800256c <LL_TIM_Init+0x124>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d105      	bne.n	800253e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	4619      	mov	r1, r3
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff11 	bl	8002360 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ff72 	bl	8002428 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40012c00 	.word	0x40012c00
 8002554:	40000400 	.word	0x40000400
 8002558:	40000800 	.word	0x40000800
 800255c:	40000c00 	.word	0x40000c00
 8002560:	40013400 	.word	0x40013400
 8002564:	40014000 	.word	0x40014000
 8002568:	40014400 	.word	0x40014400
 800256c:	40014800 	.word	0x40014800

08002570 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002586:	d045      	beq.n	8002614 <LL_TIM_OC_Init+0xa4>
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800258e:	d848      	bhi.n	8002622 <LL_TIM_OC_Init+0xb2>
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002596:	d036      	beq.n	8002606 <LL_TIM_OC_Init+0x96>
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800259e:	d840      	bhi.n	8002622 <LL_TIM_OC_Init+0xb2>
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a6:	d027      	beq.n	80025f8 <LL_TIM_OC_Init+0x88>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ae:	d838      	bhi.n	8002622 <LL_TIM_OC_Init+0xb2>
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b6:	d018      	beq.n	80025ea <LL_TIM_OC_Init+0x7a>
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025be:	d830      	bhi.n	8002622 <LL_TIM_OC_Init+0xb2>
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d003      	beq.n	80025ce <LL_TIM_OC_Init+0x5e>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b10      	cmp	r3, #16
 80025ca:	d007      	beq.n	80025dc <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80025cc:	e029      	b.n	8002622 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f82d 	bl	8002630 <OC1Config>
 80025d6:	4603      	mov	r3, r0
 80025d8:	75fb      	strb	r3, [r7, #23]
      break;
 80025da:	e023      	b.n	8002624 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f8a6 	bl	8002730 <OC2Config>
 80025e4:	4603      	mov	r3, r0
 80025e6:	75fb      	strb	r3, [r7, #23]
      break;
 80025e8:	e01c      	b.n	8002624 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f923 	bl	8002838 <OC3Config>
 80025f2:	4603      	mov	r3, r0
 80025f4:	75fb      	strb	r3, [r7, #23]
      break;
 80025f6:	e015      	b.n	8002624 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f9a0 	bl	8002940 <OC4Config>
 8002600:	4603      	mov	r3, r0
 8002602:	75fb      	strb	r3, [r7, #23]
      break;
 8002604:	e00e      	b.n	8002624 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fa05 	bl	8002a18 <OC5Config>
 800260e:	4603      	mov	r3, r0
 8002610:	75fb      	strb	r3, [r7, #23]
      break;
 8002612:	e007      	b.n	8002624 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fa62 	bl	8002ae0 <OC6Config>
 800261c:	4603      	mov	r3, r0
 800261e:	75fb      	strb	r3, [r7, #23]
      break;
 8002620:	e000      	b.n	8002624 <LL_TIM_OC_Init+0xb4>
      break;
 8002622:	bf00      	nop
  }

  return result;
 8002624:	7dfb      	ldrb	r3, [r7, #23]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	f023 0201 	bic.w	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0303 	bic.w	r3, r3, #3
 800265e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f023 0202 	bic.w	r2, r3, #2
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f023 0201 	bic.w	r2, r3, #1
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4313      	orrs	r3, r2
 800268c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a22      	ldr	r2, [pc, #136]	; (800271c <OC1Config+0xec>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00f      	beq.n	80026b6 <OC1Config+0x86>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a21      	ldr	r2, [pc, #132]	; (8002720 <OC1Config+0xf0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00b      	beq.n	80026b6 <OC1Config+0x86>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a20      	ldr	r2, [pc, #128]	; (8002724 <OC1Config+0xf4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d007      	beq.n	80026b6 <OC1Config+0x86>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a1f      	ldr	r2, [pc, #124]	; (8002728 <OC1Config+0xf8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d003      	beq.n	80026b6 <OC1Config+0x86>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a1e      	ldr	r2, [pc, #120]	; (800272c <OC1Config+0xfc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d11e      	bne.n	80026f4 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f023 0208 	bic.w	r2, r3, #8
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4313      	orrs	r3, r2
 80026c4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f023 0204 	bic.w	r2, r3, #4
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	4619      	mov	r1, r3
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff fe38 	bl	800237c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40012c00 	.word	0x40012c00
 8002720:	40013400 	.word	0x40013400
 8002724:	40014000 	.word	0x40014000
 8002728:	40014400 	.word	0x40014400
 800272c:	40014800 	.word	0x40014800

08002730 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	f023 0210 	bic.w	r2, r3, #16
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	0212      	lsls	r2, r2, #8
 8002770:	4313      	orrs	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f023 0220 	bic.w	r2, r3, #32
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f023 0210 	bic.w	r2, r3, #16
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a23      	ldr	r2, [pc, #140]	; (8002824 <OC2Config+0xf4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00f      	beq.n	80027bc <OC2Config+0x8c>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a22      	ldr	r2, [pc, #136]	; (8002828 <OC2Config+0xf8>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00b      	beq.n	80027bc <OC2Config+0x8c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a21      	ldr	r2, [pc, #132]	; (800282c <OC2Config+0xfc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d007      	beq.n	80027bc <OC2Config+0x8c>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a20      	ldr	r2, [pc, #128]	; (8002830 <OC2Config+0x100>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d003      	beq.n	80027bc <OC2Config+0x8c>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a1f      	ldr	r2, [pc, #124]	; (8002834 <OC2Config+0x104>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d11f      	bne.n	80027fc <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	019b      	lsls	r3, r3, #6
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	019b      	lsls	r3, r3, #6
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4619      	mov	r1, r3
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff fdc2 	bl	8002398 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40013400 	.word	0x40013400
 800282c:	40014000 	.word	0x40014000
 8002830:	40014400 	.word	0x40014400
 8002834:	40014800 	.word	0x40014800

08002838 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 0303 	bic.w	r3, r3, #3
 8002866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	4313      	orrs	r3, r2
 8002888:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	021b      	lsls	r3, r3, #8
 8002896:	4313      	orrs	r3, r2
 8002898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a23      	ldr	r2, [pc, #140]	; (800292c <OC3Config+0xf4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00f      	beq.n	80028c2 <OC3Config+0x8a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a22      	ldr	r2, [pc, #136]	; (8002930 <OC3Config+0xf8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00b      	beq.n	80028c2 <OC3Config+0x8a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a21      	ldr	r2, [pc, #132]	; (8002934 <OC3Config+0xfc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d007      	beq.n	80028c2 <OC3Config+0x8a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a20      	ldr	r2, [pc, #128]	; (8002938 <OC3Config+0x100>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d003      	beq.n	80028c2 <OC3Config+0x8a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a1f      	ldr	r2, [pc, #124]	; (800293c <OC3Config+0x104>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d11f      	bne.n	8002902 <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	029b      	lsls	r3, r3, #10
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	029b      	lsls	r3, r3, #10
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	015b      	lsls	r3, r3, #5
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	4619      	mov	r1, r3
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff fd4d 	bl	80023b4 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40012c00 	.word	0x40012c00
 8002930:	40013400 	.word	0x40013400
 8002934:	40014000 	.word	0x40014000
 8002938:	40014400 	.word	0x40014400
 800293c:	40014800 	.word	0x40014800

08002940 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800296e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	0212      	lsls	r2, r2, #8
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	031b      	lsls	r3, r3, #12
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	031b      	lsls	r3, r3, #12
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <OC4Config+0xc4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00f      	beq.n	80029cc <OC4Config+0x8c>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a16      	ldr	r2, [pc, #88]	; (8002a08 <OC4Config+0xc8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d00b      	beq.n	80029cc <OC4Config+0x8c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a15      	ldr	r2, [pc, #84]	; (8002a0c <OC4Config+0xcc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d007      	beq.n	80029cc <OC4Config+0x8c>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a14      	ldr	r2, [pc, #80]	; (8002a10 <OC4Config+0xd0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d003      	beq.n	80029cc <OC4Config+0x8c>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a13      	ldr	r2, [pc, #76]	; (8002a14 <OC4Config+0xd4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d107      	bne.n	80029dc <OC4Config+0x9c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	019b      	lsls	r3, r3, #6
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4619      	mov	r1, r3
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff fcee 	bl	80023d0 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	40013400 	.word	0x40013400
 8002a0c:	40014000 	.word	0x40014000
 8002a10:	40014400 	.word	0x40014400
 8002a14:	40014800 	.word	0x40014800

08002a18 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a38:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	041b      	lsls	r3, r3, #16
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	041b      	lsls	r3, r3, #16
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a17      	ldr	r2, [pc, #92]	; (8002acc <OC5Config+0xb4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00f      	beq.n	8002a94 <OC5Config+0x7c>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a16      	ldr	r2, [pc, #88]	; (8002ad0 <OC5Config+0xb8>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d00b      	beq.n	8002a94 <OC5Config+0x7c>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a15      	ldr	r2, [pc, #84]	; (8002ad4 <OC5Config+0xbc>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d007      	beq.n	8002a94 <OC5Config+0x7c>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <OC5Config+0xc0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d003      	beq.n	8002a94 <OC5Config+0x7c>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a13      	ldr	r2, [pc, #76]	; (8002adc <OC5Config+0xc4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d109      	bne.n	8002aa8 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff fc99 	bl	80023ec <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40012c00 	.word	0x40012c00
 8002ad0:	40013400 	.word	0x40013400
 8002ad4:	40014000 	.word	0x40014000
 8002ad8:	40014400 	.word	0x40014400
 8002adc:	40014800 	.word	0x40014800

08002ae0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	0212      	lsls	r2, r2, #8
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	051b      	lsls	r3, r3, #20
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	051b      	lsls	r3, r3, #20
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a16      	ldr	r2, [pc, #88]	; (8002b94 <OC6Config+0xb4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00f      	beq.n	8002b5e <OC6Config+0x7e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a15      	ldr	r2, [pc, #84]	; (8002b98 <OC6Config+0xb8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00b      	beq.n	8002b5e <OC6Config+0x7e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <OC6Config+0xbc>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d007      	beq.n	8002b5e <OC6Config+0x7e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a13      	ldr	r2, [pc, #76]	; (8002ba0 <OC6Config+0xc0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d003      	beq.n	8002b5e <OC6Config+0x7e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <OC6Config+0xc4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d109      	bne.n	8002b72 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	029b      	lsls	r3, r3, #10
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff fc44 	bl	800240c <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40012c00 	.word	0x40012c00
 8002b98:	40013400 	.word	0x40013400
 8002b9c:	40014000 	.word	0x40014000
 8002ba0:	40014400 	.word	0x40014400
 8002ba4:	40014800 	.word	0x40014800

08002ba8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bba:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <LL_InitTick+0x30>)
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <LL_InitTick+0x30>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc6:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <LL_InitTick+0x30>)
 8002bc8:	2205      	movs	r2, #5
 8002bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000e010 	.word	0xe000e010

08002bdc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002be4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff ffdd 	bl	8002ba8 <LL_InitTick>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002c00:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <LL_SetSystemCoreClock+0x1c>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6013      	str	r3, [r2, #0]
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000000 	.word	0x20000000

08002c18 <memset>:
 8002c18:	4402      	add	r2, r0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d100      	bne.n	8002c22 <memset+0xa>
 8002c20:	4770      	bx	lr
 8002c22:	f803 1b01 	strb.w	r1, [r3], #1
 8002c26:	e7f9      	b.n	8002c1c <memset+0x4>

08002c28 <__libc_init_array>:
 8002c28:	b570      	push	{r4, r5, r6, lr}
 8002c2a:	4d0d      	ldr	r5, [pc, #52]	; (8002c60 <__libc_init_array+0x38>)
 8002c2c:	4c0d      	ldr	r4, [pc, #52]	; (8002c64 <__libc_init_array+0x3c>)
 8002c2e:	1b64      	subs	r4, r4, r5
 8002c30:	10a4      	asrs	r4, r4, #2
 8002c32:	2600      	movs	r6, #0
 8002c34:	42a6      	cmp	r6, r4
 8002c36:	d109      	bne.n	8002c4c <__libc_init_array+0x24>
 8002c38:	4d0b      	ldr	r5, [pc, #44]	; (8002c68 <__libc_init_array+0x40>)
 8002c3a:	4c0c      	ldr	r4, [pc, #48]	; (8002c6c <__libc_init_array+0x44>)
 8002c3c:	f001 f8b8 	bl	8003db0 <_init>
 8002c40:	1b64      	subs	r4, r4, r5
 8002c42:	10a4      	asrs	r4, r4, #2
 8002c44:	2600      	movs	r6, #0
 8002c46:	42a6      	cmp	r6, r4
 8002c48:	d105      	bne.n	8002c56 <__libc_init_array+0x2e>
 8002c4a:	bd70      	pop	{r4, r5, r6, pc}
 8002c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c50:	4798      	blx	r3
 8002c52:	3601      	adds	r6, #1
 8002c54:	e7ee      	b.n	8002c34 <__libc_init_array+0xc>
 8002c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c5a:	4798      	blx	r3
 8002c5c:	3601      	adds	r6, #1
 8002c5e:	e7f2      	b.n	8002c46 <__libc_init_array+0x1e>
 8002c60:	08003fc0 	.word	0x08003fc0
 8002c64:	08003fc0 	.word	0x08003fc0
 8002c68:	08003fc0 	.word	0x08003fc0
 8002c6c:	08003fc4 	.word	0x08003fc4

08002c70 <tan>:
 8002c70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002c72:	ec53 2b10 	vmov	r2, r3, d0
 8002c76:	4816      	ldr	r0, [pc, #88]	; (8002cd0 <tan+0x60>)
 8002c78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002c7c:	4281      	cmp	r1, r0
 8002c7e:	dc07      	bgt.n	8002c90 <tan+0x20>
 8002c80:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8002cc8 <tan+0x58>
 8002c84:	2001      	movs	r0, #1
 8002c86:	b005      	add	sp, #20
 8002c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c8c:	f000 b824 	b.w	8002cd8 <__kernel_tan>
 8002c90:	4810      	ldr	r0, [pc, #64]	; (8002cd4 <tan+0x64>)
 8002c92:	4281      	cmp	r1, r0
 8002c94:	dd09      	ble.n	8002caa <tan+0x3a>
 8002c96:	ee10 0a10 	vmov	r0, s0
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f7fd fa98 	bl	80001d0 <__aeabi_dsub>
 8002ca0:	ec41 0b10 	vmov	d0, r0, r1
 8002ca4:	b005      	add	sp, #20
 8002ca6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002caa:	4668      	mov	r0, sp
 8002cac:	f000 fa20 	bl	80030f0 <__ieee754_rem_pio2>
 8002cb0:	0040      	lsls	r0, r0, #1
 8002cb2:	f000 0002 	and.w	r0, r0, #2
 8002cb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002cba:	ed9d 0b00 	vldr	d0, [sp]
 8002cbe:	f1c0 0001 	rsb	r0, r0, #1
 8002cc2:	f000 f809 	bl	8002cd8 <__kernel_tan>
 8002cc6:	e7ed      	b.n	8002ca4 <tan+0x34>
	...
 8002cd0:	3fe921fb 	.word	0x3fe921fb
 8002cd4:	7fefffff 	.word	0x7fefffff

08002cd8 <__kernel_tan>:
 8002cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cdc:	ed2d 8b06 	vpush	{d8-d10}
 8002ce0:	ec5b ab10 	vmov	sl, fp, d0
 8002ce4:	4be0      	ldr	r3, [pc, #896]	; (8003068 <__kernel_tan+0x390>)
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8002cec:	429f      	cmp	r7, r3
 8002cee:	ec59 8b11 	vmov	r8, r9, d1
 8002cf2:	4606      	mov	r6, r0
 8002cf4:	f8cd b000 	str.w	fp, [sp]
 8002cf8:	dc61      	bgt.n	8002dbe <__kernel_tan+0xe6>
 8002cfa:	ee10 0a10 	vmov	r0, s0
 8002cfe:	4659      	mov	r1, fp
 8002d00:	f7fd feb8 	bl	8000a74 <__aeabi_d2iz>
 8002d04:	4605      	mov	r5, r0
 8002d06:	2800      	cmp	r0, #0
 8002d08:	f040 8083 	bne.w	8002e12 <__kernel_tan+0x13a>
 8002d0c:	1c73      	adds	r3, r6, #1
 8002d0e:	4652      	mov	r2, sl
 8002d10:	4313      	orrs	r3, r2
 8002d12:	433b      	orrs	r3, r7
 8002d14:	d112      	bne.n	8002d3c <__kernel_tan+0x64>
 8002d16:	ec4b ab10 	vmov	d0, sl, fp
 8002d1a:	f000 fbef 	bl	80034fc <fabs>
 8002d1e:	49d3      	ldr	r1, [pc, #844]	; (800306c <__kernel_tan+0x394>)
 8002d20:	ec53 2b10 	vmov	r2, r3, d0
 8002d24:	2000      	movs	r0, #0
 8002d26:	f7fd fd35 	bl	8000794 <__aeabi_ddiv>
 8002d2a:	4682      	mov	sl, r0
 8002d2c:	468b      	mov	fp, r1
 8002d2e:	ec4b ab10 	vmov	d0, sl, fp
 8002d32:	b003      	add	sp, #12
 8002d34:	ecbd 8b06 	vpop	{d8-d10}
 8002d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d3c:	2e01      	cmp	r6, #1
 8002d3e:	d0f6      	beq.n	8002d2e <__kernel_tan+0x56>
 8002d40:	4642      	mov	r2, r8
 8002d42:	464b      	mov	r3, r9
 8002d44:	4650      	mov	r0, sl
 8002d46:	4659      	mov	r1, fp
 8002d48:	f7fd fa44 	bl	80001d4 <__adddf3>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	460f      	mov	r7, r1
 8002d52:	2000      	movs	r0, #0
 8002d54:	49c6      	ldr	r1, [pc, #792]	; (8003070 <__kernel_tan+0x398>)
 8002d56:	f7fd fd1d 	bl	8000794 <__aeabi_ddiv>
 8002d5a:	e9cd 0100 	strd	r0, r1, [sp]
 8002d5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002d62:	462e      	mov	r6, r5
 8002d64:	4652      	mov	r2, sl
 8002d66:	462c      	mov	r4, r5
 8002d68:	4630      	mov	r0, r6
 8002d6a:	461d      	mov	r5, r3
 8002d6c:	4639      	mov	r1, r7
 8002d6e:	465b      	mov	r3, fp
 8002d70:	f7fd fa2e 	bl	80001d0 <__aeabi_dsub>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4640      	mov	r0, r8
 8002d7a:	4649      	mov	r1, r9
 8002d7c:	f7fd fa28 	bl	80001d0 <__aeabi_dsub>
 8002d80:	4632      	mov	r2, r6
 8002d82:	462b      	mov	r3, r5
 8002d84:	f7fd fbdc 	bl	8000540 <__aeabi_dmul>
 8002d88:	4632      	mov	r2, r6
 8002d8a:	4680      	mov	r8, r0
 8002d8c:	4689      	mov	r9, r1
 8002d8e:	462b      	mov	r3, r5
 8002d90:	4630      	mov	r0, r6
 8002d92:	4639      	mov	r1, r7
 8002d94:	f7fd fbd4 	bl	8000540 <__aeabi_dmul>
 8002d98:	4bb4      	ldr	r3, [pc, #720]	; (800306c <__kernel_tan+0x394>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f7fd fa1a 	bl	80001d4 <__adddf3>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4640      	mov	r0, r8
 8002da6:	4649      	mov	r1, r9
 8002da8:	f7fd fa14 	bl	80001d4 <__adddf3>
 8002dac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002db0:	f7fd fbc6 	bl	8000540 <__aeabi_dmul>
 8002db4:	4622      	mov	r2, r4
 8002db6:	462b      	mov	r3, r5
 8002db8:	f7fd fa0c 	bl	80001d4 <__adddf3>
 8002dbc:	e7b5      	b.n	8002d2a <__kernel_tan+0x52>
 8002dbe:	4bad      	ldr	r3, [pc, #692]	; (8003074 <__kernel_tan+0x39c>)
 8002dc0:	429f      	cmp	r7, r3
 8002dc2:	dd26      	ble.n	8002e12 <__kernel_tan+0x13a>
 8002dc4:	9b00      	ldr	r3, [sp, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	da09      	bge.n	8002dde <__kernel_tan+0x106>
 8002dca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8002dce:	469b      	mov	fp, r3
 8002dd0:	ee10 aa10 	vmov	sl, s0
 8002dd4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002dd8:	ee11 8a10 	vmov	r8, s2
 8002ddc:	4699      	mov	r9, r3
 8002dde:	4652      	mov	r2, sl
 8002de0:	465b      	mov	r3, fp
 8002de2:	a183      	add	r1, pc, #524	; (adr r1, 8002ff0 <__kernel_tan+0x318>)
 8002de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002de8:	f7fd f9f2 	bl	80001d0 <__aeabi_dsub>
 8002dec:	4642      	mov	r2, r8
 8002dee:	464b      	mov	r3, r9
 8002df0:	4604      	mov	r4, r0
 8002df2:	460d      	mov	r5, r1
 8002df4:	a180      	add	r1, pc, #512	; (adr r1, 8002ff8 <__kernel_tan+0x320>)
 8002df6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002dfa:	f7fd f9e9 	bl	80001d0 <__aeabi_dsub>
 8002dfe:	4622      	mov	r2, r4
 8002e00:	462b      	mov	r3, r5
 8002e02:	f7fd f9e7 	bl	80001d4 <__adddf3>
 8002e06:	f04f 0800 	mov.w	r8, #0
 8002e0a:	4682      	mov	sl, r0
 8002e0c:	468b      	mov	fp, r1
 8002e0e:	f04f 0900 	mov.w	r9, #0
 8002e12:	4652      	mov	r2, sl
 8002e14:	465b      	mov	r3, fp
 8002e16:	4650      	mov	r0, sl
 8002e18:	4659      	mov	r1, fp
 8002e1a:	f7fd fb91 	bl	8000540 <__aeabi_dmul>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	ec43 2b18 	vmov	d8, r2, r3
 8002e26:	f7fd fb8b 	bl	8000540 <__aeabi_dmul>
 8002e2a:	ec53 2b18 	vmov	r2, r3, d8
 8002e2e:	4604      	mov	r4, r0
 8002e30:	460d      	mov	r5, r1
 8002e32:	4650      	mov	r0, sl
 8002e34:	4659      	mov	r1, fp
 8002e36:	f7fd fb83 	bl	8000540 <__aeabi_dmul>
 8002e3a:	a371      	add	r3, pc, #452	; (adr r3, 8003000 <__kernel_tan+0x328>)
 8002e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e40:	ec41 0b19 	vmov	d9, r0, r1
 8002e44:	4620      	mov	r0, r4
 8002e46:	4629      	mov	r1, r5
 8002e48:	f7fd fb7a 	bl	8000540 <__aeabi_dmul>
 8002e4c:	a36e      	add	r3, pc, #440	; (adr r3, 8003008 <__kernel_tan+0x330>)
 8002e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e52:	f7fd f9bf 	bl	80001d4 <__adddf3>
 8002e56:	4622      	mov	r2, r4
 8002e58:	462b      	mov	r3, r5
 8002e5a:	f7fd fb71 	bl	8000540 <__aeabi_dmul>
 8002e5e:	a36c      	add	r3, pc, #432	; (adr r3, 8003010 <__kernel_tan+0x338>)
 8002e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e64:	f7fd f9b6 	bl	80001d4 <__adddf3>
 8002e68:	4622      	mov	r2, r4
 8002e6a:	462b      	mov	r3, r5
 8002e6c:	f7fd fb68 	bl	8000540 <__aeabi_dmul>
 8002e70:	a369      	add	r3, pc, #420	; (adr r3, 8003018 <__kernel_tan+0x340>)
 8002e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e76:	f7fd f9ad 	bl	80001d4 <__adddf3>
 8002e7a:	4622      	mov	r2, r4
 8002e7c:	462b      	mov	r3, r5
 8002e7e:	f7fd fb5f 	bl	8000540 <__aeabi_dmul>
 8002e82:	a367      	add	r3, pc, #412	; (adr r3, 8003020 <__kernel_tan+0x348>)
 8002e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e88:	f7fd f9a4 	bl	80001d4 <__adddf3>
 8002e8c:	4622      	mov	r2, r4
 8002e8e:	462b      	mov	r3, r5
 8002e90:	f7fd fb56 	bl	8000540 <__aeabi_dmul>
 8002e94:	a364      	add	r3, pc, #400	; (adr r3, 8003028 <__kernel_tan+0x350>)
 8002e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9a:	f7fd f99b 	bl	80001d4 <__adddf3>
 8002e9e:	ec53 2b18 	vmov	r2, r3, d8
 8002ea2:	f7fd fb4d 	bl	8000540 <__aeabi_dmul>
 8002ea6:	a362      	add	r3, pc, #392	; (adr r3, 8003030 <__kernel_tan+0x358>)
 8002ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eac:	ec41 0b1a 	vmov	d10, r0, r1
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	4629      	mov	r1, r5
 8002eb4:	f7fd fb44 	bl	8000540 <__aeabi_dmul>
 8002eb8:	a35f      	add	r3, pc, #380	; (adr r3, 8003038 <__kernel_tan+0x360>)
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	f7fd f989 	bl	80001d4 <__adddf3>
 8002ec2:	4622      	mov	r2, r4
 8002ec4:	462b      	mov	r3, r5
 8002ec6:	f7fd fb3b 	bl	8000540 <__aeabi_dmul>
 8002eca:	a35d      	add	r3, pc, #372	; (adr r3, 8003040 <__kernel_tan+0x368>)
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f7fd f980 	bl	80001d4 <__adddf3>
 8002ed4:	4622      	mov	r2, r4
 8002ed6:	462b      	mov	r3, r5
 8002ed8:	f7fd fb32 	bl	8000540 <__aeabi_dmul>
 8002edc:	a35a      	add	r3, pc, #360	; (adr r3, 8003048 <__kernel_tan+0x370>)
 8002ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee2:	f7fd f977 	bl	80001d4 <__adddf3>
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	462b      	mov	r3, r5
 8002eea:	f7fd fb29 	bl	8000540 <__aeabi_dmul>
 8002eee:	a358      	add	r3, pc, #352	; (adr r3, 8003050 <__kernel_tan+0x378>)
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	f7fd f96e 	bl	80001d4 <__adddf3>
 8002ef8:	4622      	mov	r2, r4
 8002efa:	462b      	mov	r3, r5
 8002efc:	f7fd fb20 	bl	8000540 <__aeabi_dmul>
 8002f00:	a355      	add	r3, pc, #340	; (adr r3, 8003058 <__kernel_tan+0x380>)
 8002f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f06:	f7fd f965 	bl	80001d4 <__adddf3>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	ec51 0b1a 	vmov	r0, r1, d10
 8002f12:	f7fd f95f 	bl	80001d4 <__adddf3>
 8002f16:	ec53 2b19 	vmov	r2, r3, d9
 8002f1a:	f7fd fb11 	bl	8000540 <__aeabi_dmul>
 8002f1e:	4642      	mov	r2, r8
 8002f20:	464b      	mov	r3, r9
 8002f22:	f7fd f957 	bl	80001d4 <__adddf3>
 8002f26:	ec53 2b18 	vmov	r2, r3, d8
 8002f2a:	f7fd fb09 	bl	8000540 <__aeabi_dmul>
 8002f2e:	4642      	mov	r2, r8
 8002f30:	464b      	mov	r3, r9
 8002f32:	f7fd f94f 	bl	80001d4 <__adddf3>
 8002f36:	a34a      	add	r3, pc, #296	; (adr r3, 8003060 <__kernel_tan+0x388>)
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	4604      	mov	r4, r0
 8002f3e:	460d      	mov	r5, r1
 8002f40:	ec51 0b19 	vmov	r0, r1, d9
 8002f44:	f7fd fafc 	bl	8000540 <__aeabi_dmul>
 8002f48:	4622      	mov	r2, r4
 8002f4a:	462b      	mov	r3, r5
 8002f4c:	f7fd f942 	bl	80001d4 <__adddf3>
 8002f50:	460b      	mov	r3, r1
 8002f52:	ec41 0b18 	vmov	d8, r0, r1
 8002f56:	4602      	mov	r2, r0
 8002f58:	4659      	mov	r1, fp
 8002f5a:	4650      	mov	r0, sl
 8002f5c:	f7fd f93a 	bl	80001d4 <__adddf3>
 8002f60:	4b44      	ldr	r3, [pc, #272]	; (8003074 <__kernel_tan+0x39c>)
 8002f62:	429f      	cmp	r7, r3
 8002f64:	4604      	mov	r4, r0
 8002f66:	460d      	mov	r5, r1
 8002f68:	f340 8086 	ble.w	8003078 <__kernel_tan+0x3a0>
 8002f6c:	4630      	mov	r0, r6
 8002f6e:	f7fd fa7d 	bl	800046c <__aeabi_i2d>
 8002f72:	4622      	mov	r2, r4
 8002f74:	4680      	mov	r8, r0
 8002f76:	4689      	mov	r9, r1
 8002f78:	462b      	mov	r3, r5
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	f7fd fadf 	bl	8000540 <__aeabi_dmul>
 8002f82:	4642      	mov	r2, r8
 8002f84:	4606      	mov	r6, r0
 8002f86:	460f      	mov	r7, r1
 8002f88:	464b      	mov	r3, r9
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	f7fd f921 	bl	80001d4 <__adddf3>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4630      	mov	r0, r6
 8002f98:	4639      	mov	r1, r7
 8002f9a:	f7fd fbfb 	bl	8000794 <__aeabi_ddiv>
 8002f9e:	ec53 2b18 	vmov	r2, r3, d8
 8002fa2:	f7fd f915 	bl	80001d0 <__aeabi_dsub>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4650      	mov	r0, sl
 8002fac:	4659      	mov	r1, fp
 8002fae:	f7fd f90f 	bl	80001d0 <__aeabi_dsub>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	f7fd f90d 	bl	80001d4 <__adddf3>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4640      	mov	r0, r8
 8002fc0:	4649      	mov	r1, r9
 8002fc2:	f7fd f905 	bl	80001d0 <__aeabi_dsub>
 8002fc6:	9b00      	ldr	r3, [sp, #0]
 8002fc8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8002fcc:	f00a 0a02 	and.w	sl, sl, #2
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	f1ca 0001 	rsb	r0, sl, #1
 8002fd6:	460d      	mov	r5, r1
 8002fd8:	f7fd fa48 	bl	800046c <__aeabi_i2d>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	4629      	mov	r1, r5
 8002fe4:	f7fd faac 	bl	8000540 <__aeabi_dmul>
 8002fe8:	e69f      	b.n	8002d2a <__kernel_tan+0x52>
 8002fea:	bf00      	nop
 8002fec:	f3af 8000 	nop.w
 8002ff0:	54442d18 	.word	0x54442d18
 8002ff4:	3fe921fb 	.word	0x3fe921fb
 8002ff8:	33145c07 	.word	0x33145c07
 8002ffc:	3c81a626 	.word	0x3c81a626
 8003000:	74bf7ad4 	.word	0x74bf7ad4
 8003004:	3efb2a70 	.word	0x3efb2a70
 8003008:	32f0a7e9 	.word	0x32f0a7e9
 800300c:	3f12b80f 	.word	0x3f12b80f
 8003010:	1a8d1068 	.word	0x1a8d1068
 8003014:	3f3026f7 	.word	0x3f3026f7
 8003018:	fee08315 	.word	0xfee08315
 800301c:	3f57dbc8 	.word	0x3f57dbc8
 8003020:	e96e8493 	.word	0xe96e8493
 8003024:	3f8226e3 	.word	0x3f8226e3
 8003028:	1bb341fe 	.word	0x1bb341fe
 800302c:	3faba1ba 	.word	0x3faba1ba
 8003030:	db605373 	.word	0xdb605373
 8003034:	bef375cb 	.word	0xbef375cb
 8003038:	a03792a6 	.word	0xa03792a6
 800303c:	3f147e88 	.word	0x3f147e88
 8003040:	f2f26501 	.word	0xf2f26501
 8003044:	3f4344d8 	.word	0x3f4344d8
 8003048:	c9560328 	.word	0xc9560328
 800304c:	3f6d6d22 	.word	0x3f6d6d22
 8003050:	8406d637 	.word	0x8406d637
 8003054:	3f9664f4 	.word	0x3f9664f4
 8003058:	1110fe7a 	.word	0x1110fe7a
 800305c:	3fc11111 	.word	0x3fc11111
 8003060:	55555563 	.word	0x55555563
 8003064:	3fd55555 	.word	0x3fd55555
 8003068:	3e2fffff 	.word	0x3e2fffff
 800306c:	3ff00000 	.word	0x3ff00000
 8003070:	bff00000 	.word	0xbff00000
 8003074:	3fe59427 	.word	0x3fe59427
 8003078:	2e01      	cmp	r6, #1
 800307a:	d02f      	beq.n	80030dc <__kernel_tan+0x404>
 800307c:	460f      	mov	r7, r1
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4689      	mov	r9, r1
 8003084:	2000      	movs	r0, #0
 8003086:	4917      	ldr	r1, [pc, #92]	; (80030e4 <__kernel_tan+0x40c>)
 8003088:	f7fd fb84 	bl	8000794 <__aeabi_ddiv>
 800308c:	2600      	movs	r6, #0
 800308e:	e9cd 0100 	strd	r0, r1, [sp]
 8003092:	4652      	mov	r2, sl
 8003094:	465b      	mov	r3, fp
 8003096:	4630      	mov	r0, r6
 8003098:	4639      	mov	r1, r7
 800309a:	f7fd f899 	bl	80001d0 <__aeabi_dsub>
 800309e:	e9dd 4500 	ldrd	r4, r5, [sp]
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	ec51 0b18 	vmov	r0, r1, d8
 80030aa:	f7fd f891 	bl	80001d0 <__aeabi_dsub>
 80030ae:	4632      	mov	r2, r6
 80030b0:	462b      	mov	r3, r5
 80030b2:	f7fd fa45 	bl	8000540 <__aeabi_dmul>
 80030b6:	46b0      	mov	r8, r6
 80030b8:	460f      	mov	r7, r1
 80030ba:	4642      	mov	r2, r8
 80030bc:	462b      	mov	r3, r5
 80030be:	4634      	mov	r4, r6
 80030c0:	4649      	mov	r1, r9
 80030c2:	4606      	mov	r6, r0
 80030c4:	4640      	mov	r0, r8
 80030c6:	f7fd fa3b 	bl	8000540 <__aeabi_dmul>
 80030ca:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <__kernel_tan+0x410>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	f7fd f881 	bl	80001d4 <__adddf3>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4630      	mov	r0, r6
 80030d8:	4639      	mov	r1, r7
 80030da:	e665      	b.n	8002da8 <__kernel_tan+0xd0>
 80030dc:	4682      	mov	sl, r0
 80030de:	468b      	mov	fp, r1
 80030e0:	e625      	b.n	8002d2e <__kernel_tan+0x56>
 80030e2:	bf00      	nop
 80030e4:	bff00000 	.word	0xbff00000
 80030e8:	3ff00000 	.word	0x3ff00000
 80030ec:	00000000 	.word	0x00000000

080030f0 <__ieee754_rem_pio2>:
 80030f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030f4:	ed2d 8b02 	vpush	{d8}
 80030f8:	ec55 4b10 	vmov	r4, r5, d0
 80030fc:	4bca      	ldr	r3, [pc, #808]	; (8003428 <__ieee754_rem_pio2+0x338>)
 80030fe:	b08b      	sub	sp, #44	; 0x2c
 8003100:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003104:	4598      	cmp	r8, r3
 8003106:	4682      	mov	sl, r0
 8003108:	9502      	str	r5, [sp, #8]
 800310a:	dc08      	bgt.n	800311e <__ieee754_rem_pio2+0x2e>
 800310c:	2200      	movs	r2, #0
 800310e:	2300      	movs	r3, #0
 8003110:	ed80 0b00 	vstr	d0, [r0]
 8003114:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003118:	f04f 0b00 	mov.w	fp, #0
 800311c:	e028      	b.n	8003170 <__ieee754_rem_pio2+0x80>
 800311e:	4bc3      	ldr	r3, [pc, #780]	; (800342c <__ieee754_rem_pio2+0x33c>)
 8003120:	4598      	cmp	r8, r3
 8003122:	dc78      	bgt.n	8003216 <__ieee754_rem_pio2+0x126>
 8003124:	9b02      	ldr	r3, [sp, #8]
 8003126:	4ec2      	ldr	r6, [pc, #776]	; (8003430 <__ieee754_rem_pio2+0x340>)
 8003128:	2b00      	cmp	r3, #0
 800312a:	ee10 0a10 	vmov	r0, s0
 800312e:	a3b0      	add	r3, pc, #704	; (adr r3, 80033f0 <__ieee754_rem_pio2+0x300>)
 8003130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003134:	4629      	mov	r1, r5
 8003136:	dd39      	ble.n	80031ac <__ieee754_rem_pio2+0xbc>
 8003138:	f7fd f84a 	bl	80001d0 <__aeabi_dsub>
 800313c:	45b0      	cmp	r8, r6
 800313e:	4604      	mov	r4, r0
 8003140:	460d      	mov	r5, r1
 8003142:	d01b      	beq.n	800317c <__ieee754_rem_pio2+0x8c>
 8003144:	a3ac      	add	r3, pc, #688	; (adr r3, 80033f8 <__ieee754_rem_pio2+0x308>)
 8003146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314a:	f7fd f841 	bl	80001d0 <__aeabi_dsub>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	e9ca 2300 	strd	r2, r3, [sl]
 8003156:	4620      	mov	r0, r4
 8003158:	4629      	mov	r1, r5
 800315a:	f7fd f839 	bl	80001d0 <__aeabi_dsub>
 800315e:	a3a6      	add	r3, pc, #664	; (adr r3, 80033f8 <__ieee754_rem_pio2+0x308>)
 8003160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003164:	f7fd f834 	bl	80001d0 <__aeabi_dsub>
 8003168:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800316c:	f04f 0b01 	mov.w	fp, #1
 8003170:	4658      	mov	r0, fp
 8003172:	b00b      	add	sp, #44	; 0x2c
 8003174:	ecbd 8b02 	vpop	{d8}
 8003178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800317c:	a3a0      	add	r3, pc, #640	; (adr r3, 8003400 <__ieee754_rem_pio2+0x310>)
 800317e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003182:	f7fd f825 	bl	80001d0 <__aeabi_dsub>
 8003186:	a3a0      	add	r3, pc, #640	; (adr r3, 8003408 <__ieee754_rem_pio2+0x318>)
 8003188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318c:	4604      	mov	r4, r0
 800318e:	460d      	mov	r5, r1
 8003190:	f7fd f81e 	bl	80001d0 <__aeabi_dsub>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	e9ca 2300 	strd	r2, r3, [sl]
 800319c:	4620      	mov	r0, r4
 800319e:	4629      	mov	r1, r5
 80031a0:	f7fd f816 	bl	80001d0 <__aeabi_dsub>
 80031a4:	a398      	add	r3, pc, #608	; (adr r3, 8003408 <__ieee754_rem_pio2+0x318>)
 80031a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031aa:	e7db      	b.n	8003164 <__ieee754_rem_pio2+0x74>
 80031ac:	f7fd f812 	bl	80001d4 <__adddf3>
 80031b0:	45b0      	cmp	r8, r6
 80031b2:	4604      	mov	r4, r0
 80031b4:	460d      	mov	r5, r1
 80031b6:	d016      	beq.n	80031e6 <__ieee754_rem_pio2+0xf6>
 80031b8:	a38f      	add	r3, pc, #572	; (adr r3, 80033f8 <__ieee754_rem_pio2+0x308>)
 80031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031be:	f7fd f809 	bl	80001d4 <__adddf3>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	e9ca 2300 	strd	r2, r3, [sl]
 80031ca:	4620      	mov	r0, r4
 80031cc:	4629      	mov	r1, r5
 80031ce:	f7fc ffff 	bl	80001d0 <__aeabi_dsub>
 80031d2:	a389      	add	r3, pc, #548	; (adr r3, 80033f8 <__ieee754_rem_pio2+0x308>)
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f7fc fffc 	bl	80001d4 <__adddf3>
 80031dc:	f04f 3bff 	mov.w	fp, #4294967295
 80031e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80031e4:	e7c4      	b.n	8003170 <__ieee754_rem_pio2+0x80>
 80031e6:	a386      	add	r3, pc, #536	; (adr r3, 8003400 <__ieee754_rem_pio2+0x310>)
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	f7fc fff2 	bl	80001d4 <__adddf3>
 80031f0:	a385      	add	r3, pc, #532	; (adr r3, 8003408 <__ieee754_rem_pio2+0x318>)
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	4604      	mov	r4, r0
 80031f8:	460d      	mov	r5, r1
 80031fa:	f7fc ffeb 	bl	80001d4 <__adddf3>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	e9ca 2300 	strd	r2, r3, [sl]
 8003206:	4620      	mov	r0, r4
 8003208:	4629      	mov	r1, r5
 800320a:	f7fc ffe1 	bl	80001d0 <__aeabi_dsub>
 800320e:	a37e      	add	r3, pc, #504	; (adr r3, 8003408 <__ieee754_rem_pio2+0x318>)
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	e7e0      	b.n	80031d8 <__ieee754_rem_pio2+0xe8>
 8003216:	4b87      	ldr	r3, [pc, #540]	; (8003434 <__ieee754_rem_pio2+0x344>)
 8003218:	4598      	cmp	r8, r3
 800321a:	f300 80d8 	bgt.w	80033ce <__ieee754_rem_pio2+0x2de>
 800321e:	f000 f96d 	bl	80034fc <fabs>
 8003222:	ec55 4b10 	vmov	r4, r5, d0
 8003226:	ee10 0a10 	vmov	r0, s0
 800322a:	a379      	add	r3, pc, #484	; (adr r3, 8003410 <__ieee754_rem_pio2+0x320>)
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	4629      	mov	r1, r5
 8003232:	f7fd f985 	bl	8000540 <__aeabi_dmul>
 8003236:	4b80      	ldr	r3, [pc, #512]	; (8003438 <__ieee754_rem_pio2+0x348>)
 8003238:	2200      	movs	r2, #0
 800323a:	f7fc ffcb 	bl	80001d4 <__adddf3>
 800323e:	f7fd fc19 	bl	8000a74 <__aeabi_d2iz>
 8003242:	4683      	mov	fp, r0
 8003244:	f7fd f912 	bl	800046c <__aeabi_i2d>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	ec43 2b18 	vmov	d8, r2, r3
 8003250:	a367      	add	r3, pc, #412	; (adr r3, 80033f0 <__ieee754_rem_pio2+0x300>)
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	f7fd f973 	bl	8000540 <__aeabi_dmul>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4620      	mov	r0, r4
 8003260:	4629      	mov	r1, r5
 8003262:	f7fc ffb5 	bl	80001d0 <__aeabi_dsub>
 8003266:	a364      	add	r3, pc, #400	; (adr r3, 80033f8 <__ieee754_rem_pio2+0x308>)
 8003268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326c:	4606      	mov	r6, r0
 800326e:	460f      	mov	r7, r1
 8003270:	ec51 0b18 	vmov	r0, r1, d8
 8003274:	f7fd f964 	bl	8000540 <__aeabi_dmul>
 8003278:	f1bb 0f1f 	cmp.w	fp, #31
 800327c:	4604      	mov	r4, r0
 800327e:	460d      	mov	r5, r1
 8003280:	dc0d      	bgt.n	800329e <__ieee754_rem_pio2+0x1ae>
 8003282:	4b6e      	ldr	r3, [pc, #440]	; (800343c <__ieee754_rem_pio2+0x34c>)
 8003284:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800328c:	4543      	cmp	r3, r8
 800328e:	d006      	beq.n	800329e <__ieee754_rem_pio2+0x1ae>
 8003290:	4622      	mov	r2, r4
 8003292:	462b      	mov	r3, r5
 8003294:	4630      	mov	r0, r6
 8003296:	4639      	mov	r1, r7
 8003298:	f7fc ff9a 	bl	80001d0 <__aeabi_dsub>
 800329c:	e00e      	b.n	80032bc <__ieee754_rem_pio2+0x1cc>
 800329e:	462b      	mov	r3, r5
 80032a0:	4622      	mov	r2, r4
 80032a2:	4630      	mov	r0, r6
 80032a4:	4639      	mov	r1, r7
 80032a6:	f7fc ff93 	bl	80001d0 <__aeabi_dsub>
 80032aa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80032ae:	9303      	str	r3, [sp, #12]
 80032b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80032b4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	dc02      	bgt.n	80032c2 <__ieee754_rem_pio2+0x1d2>
 80032bc:	e9ca 0100 	strd	r0, r1, [sl]
 80032c0:	e039      	b.n	8003336 <__ieee754_rem_pio2+0x246>
 80032c2:	a34f      	add	r3, pc, #316	; (adr r3, 8003400 <__ieee754_rem_pio2+0x310>)
 80032c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c8:	ec51 0b18 	vmov	r0, r1, d8
 80032cc:	f7fd f938 	bl	8000540 <__aeabi_dmul>
 80032d0:	4604      	mov	r4, r0
 80032d2:	460d      	mov	r5, r1
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4630      	mov	r0, r6
 80032da:	4639      	mov	r1, r7
 80032dc:	f7fc ff78 	bl	80001d0 <__aeabi_dsub>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4680      	mov	r8, r0
 80032e6:	4689      	mov	r9, r1
 80032e8:	4630      	mov	r0, r6
 80032ea:	4639      	mov	r1, r7
 80032ec:	f7fc ff70 	bl	80001d0 <__aeabi_dsub>
 80032f0:	4622      	mov	r2, r4
 80032f2:	462b      	mov	r3, r5
 80032f4:	f7fc ff6c 	bl	80001d0 <__aeabi_dsub>
 80032f8:	a343      	add	r3, pc, #268	; (adr r3, 8003408 <__ieee754_rem_pio2+0x318>)
 80032fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fe:	4604      	mov	r4, r0
 8003300:	460d      	mov	r5, r1
 8003302:	ec51 0b18 	vmov	r0, r1, d8
 8003306:	f7fd f91b 	bl	8000540 <__aeabi_dmul>
 800330a:	4622      	mov	r2, r4
 800330c:	462b      	mov	r3, r5
 800330e:	f7fc ff5f 	bl	80001d0 <__aeabi_dsub>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4604      	mov	r4, r0
 8003318:	460d      	mov	r5, r1
 800331a:	4640      	mov	r0, r8
 800331c:	4649      	mov	r1, r9
 800331e:	f7fc ff57 	bl	80001d0 <__aeabi_dsub>
 8003322:	9a03      	ldr	r2, [sp, #12]
 8003324:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b31      	cmp	r3, #49	; 0x31
 800332c:	dc24      	bgt.n	8003378 <__ieee754_rem_pio2+0x288>
 800332e:	e9ca 0100 	strd	r0, r1, [sl]
 8003332:	4646      	mov	r6, r8
 8003334:	464f      	mov	r7, r9
 8003336:	e9da 8900 	ldrd	r8, r9, [sl]
 800333a:	4630      	mov	r0, r6
 800333c:	4642      	mov	r2, r8
 800333e:	464b      	mov	r3, r9
 8003340:	4639      	mov	r1, r7
 8003342:	f7fc ff45 	bl	80001d0 <__aeabi_dsub>
 8003346:	462b      	mov	r3, r5
 8003348:	4622      	mov	r2, r4
 800334a:	f7fc ff41 	bl	80001d0 <__aeabi_dsub>
 800334e:	9b02      	ldr	r3, [sp, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003356:	f6bf af0b 	bge.w	8003170 <__ieee754_rem_pio2+0x80>
 800335a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800335e:	f8ca 3004 	str.w	r3, [sl, #4]
 8003362:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003366:	f8ca 8000 	str.w	r8, [sl]
 800336a:	f8ca 0008 	str.w	r0, [sl, #8]
 800336e:	f8ca 300c 	str.w	r3, [sl, #12]
 8003372:	f1cb 0b00 	rsb	fp, fp, #0
 8003376:	e6fb      	b.n	8003170 <__ieee754_rem_pio2+0x80>
 8003378:	a327      	add	r3, pc, #156	; (adr r3, 8003418 <__ieee754_rem_pio2+0x328>)
 800337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337e:	ec51 0b18 	vmov	r0, r1, d8
 8003382:	f7fd f8dd 	bl	8000540 <__aeabi_dmul>
 8003386:	4604      	mov	r4, r0
 8003388:	460d      	mov	r5, r1
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4640      	mov	r0, r8
 8003390:	4649      	mov	r1, r9
 8003392:	f7fc ff1d 	bl	80001d0 <__aeabi_dsub>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4606      	mov	r6, r0
 800339c:	460f      	mov	r7, r1
 800339e:	4640      	mov	r0, r8
 80033a0:	4649      	mov	r1, r9
 80033a2:	f7fc ff15 	bl	80001d0 <__aeabi_dsub>
 80033a6:	4622      	mov	r2, r4
 80033a8:	462b      	mov	r3, r5
 80033aa:	f7fc ff11 	bl	80001d0 <__aeabi_dsub>
 80033ae:	a31c      	add	r3, pc, #112	; (adr r3, 8003420 <__ieee754_rem_pio2+0x330>)
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	4604      	mov	r4, r0
 80033b6:	460d      	mov	r5, r1
 80033b8:	ec51 0b18 	vmov	r0, r1, d8
 80033bc:	f7fd f8c0 	bl	8000540 <__aeabi_dmul>
 80033c0:	4622      	mov	r2, r4
 80033c2:	462b      	mov	r3, r5
 80033c4:	f7fc ff04 	bl	80001d0 <__aeabi_dsub>
 80033c8:	4604      	mov	r4, r0
 80033ca:	460d      	mov	r5, r1
 80033cc:	e760      	b.n	8003290 <__ieee754_rem_pio2+0x1a0>
 80033ce:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <__ieee754_rem_pio2+0x350>)
 80033d0:	4598      	cmp	r8, r3
 80033d2:	dd37      	ble.n	8003444 <__ieee754_rem_pio2+0x354>
 80033d4:	ee10 2a10 	vmov	r2, s0
 80033d8:	462b      	mov	r3, r5
 80033da:	4620      	mov	r0, r4
 80033dc:	4629      	mov	r1, r5
 80033de:	f7fc fef7 	bl	80001d0 <__aeabi_dsub>
 80033e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80033e6:	e9ca 0100 	strd	r0, r1, [sl]
 80033ea:	e695      	b.n	8003118 <__ieee754_rem_pio2+0x28>
 80033ec:	f3af 8000 	nop.w
 80033f0:	54400000 	.word	0x54400000
 80033f4:	3ff921fb 	.word	0x3ff921fb
 80033f8:	1a626331 	.word	0x1a626331
 80033fc:	3dd0b461 	.word	0x3dd0b461
 8003400:	1a600000 	.word	0x1a600000
 8003404:	3dd0b461 	.word	0x3dd0b461
 8003408:	2e037073 	.word	0x2e037073
 800340c:	3ba3198a 	.word	0x3ba3198a
 8003410:	6dc9c883 	.word	0x6dc9c883
 8003414:	3fe45f30 	.word	0x3fe45f30
 8003418:	2e000000 	.word	0x2e000000
 800341c:	3ba3198a 	.word	0x3ba3198a
 8003420:	252049c1 	.word	0x252049c1
 8003424:	397b839a 	.word	0x397b839a
 8003428:	3fe921fb 	.word	0x3fe921fb
 800342c:	4002d97b 	.word	0x4002d97b
 8003430:	3ff921fb 	.word	0x3ff921fb
 8003434:	413921fb 	.word	0x413921fb
 8003438:	3fe00000 	.word	0x3fe00000
 800343c:	08003de8 	.word	0x08003de8
 8003440:	7fefffff 	.word	0x7fefffff
 8003444:	ea4f 5628 	mov.w	r6, r8, asr #20
 8003448:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800344c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8003450:	4620      	mov	r0, r4
 8003452:	460d      	mov	r5, r1
 8003454:	f7fd fb0e 	bl	8000a74 <__aeabi_d2iz>
 8003458:	f7fd f808 	bl	800046c <__aeabi_i2d>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4620      	mov	r0, r4
 8003462:	4629      	mov	r1, r5
 8003464:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003468:	f7fc feb2 	bl	80001d0 <__aeabi_dsub>
 800346c:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <__ieee754_rem_pio2+0x404>)
 800346e:	2200      	movs	r2, #0
 8003470:	f7fd f866 	bl	8000540 <__aeabi_dmul>
 8003474:	460d      	mov	r5, r1
 8003476:	4604      	mov	r4, r0
 8003478:	f7fd fafc 	bl	8000a74 <__aeabi_d2iz>
 800347c:	f7fc fff6 	bl	800046c <__aeabi_i2d>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4620      	mov	r0, r4
 8003486:	4629      	mov	r1, r5
 8003488:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800348c:	f7fc fea0 	bl	80001d0 <__aeabi_dsub>
 8003490:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <__ieee754_rem_pio2+0x404>)
 8003492:	2200      	movs	r2, #0
 8003494:	f7fd f854 	bl	8000540 <__aeabi_dmul>
 8003498:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800349c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80034a0:	2703      	movs	r7, #3
 80034a2:	2400      	movs	r4, #0
 80034a4:	2500      	movs	r5, #0
 80034a6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80034aa:	4622      	mov	r2, r4
 80034ac:	462b      	mov	r3, r5
 80034ae:	46b9      	mov	r9, r7
 80034b0:	3f01      	subs	r7, #1
 80034b2:	f7fd faad 	bl	8000a10 <__aeabi_dcmpeq>
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d1f5      	bne.n	80034a6 <__ieee754_rem_pio2+0x3b6>
 80034ba:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <__ieee754_rem_pio2+0x408>)
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	2302      	movs	r3, #2
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	4632      	mov	r2, r6
 80034c4:	464b      	mov	r3, r9
 80034c6:	4651      	mov	r1, sl
 80034c8:	a804      	add	r0, sp, #16
 80034ca:	f000 f821 	bl	8003510 <__kernel_rem_pio2>
 80034ce:	9b02      	ldr	r3, [sp, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	4683      	mov	fp, r0
 80034d4:	f6bf ae4c 	bge.w	8003170 <__ieee754_rem_pio2+0x80>
 80034d8:	e9da 2100 	ldrd	r2, r1, [sl]
 80034dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80034e0:	e9ca 2300 	strd	r2, r3, [sl]
 80034e4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80034e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80034ec:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80034f0:	e73f      	b.n	8003372 <__ieee754_rem_pio2+0x282>
 80034f2:	bf00      	nop
 80034f4:	41700000 	.word	0x41700000
 80034f8:	08003e68 	.word	0x08003e68

080034fc <fabs>:
 80034fc:	ec51 0b10 	vmov	r0, r1, d0
 8003500:	ee10 2a10 	vmov	r2, s0
 8003504:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003508:	ec43 2b10 	vmov	d0, r2, r3
 800350c:	4770      	bx	lr
	...

08003510 <__kernel_rem_pio2>:
 8003510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003514:	ed2d 8b02 	vpush	{d8}
 8003518:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800351c:	f112 0f14 	cmn.w	r2, #20
 8003520:	9306      	str	r3, [sp, #24]
 8003522:	9104      	str	r1, [sp, #16]
 8003524:	4bc2      	ldr	r3, [pc, #776]	; (8003830 <__kernel_rem_pio2+0x320>)
 8003526:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8003528:	9009      	str	r0, [sp, #36]	; 0x24
 800352a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	9b06      	ldr	r3, [sp, #24]
 8003532:	f103 33ff 	add.w	r3, r3, #4294967295
 8003536:	bfa8      	it	ge
 8003538:	1ed4      	subge	r4, r2, #3
 800353a:	9305      	str	r3, [sp, #20]
 800353c:	bfb2      	itee	lt
 800353e:	2400      	movlt	r4, #0
 8003540:	2318      	movge	r3, #24
 8003542:	fb94 f4f3 	sdivge	r4, r4, r3
 8003546:	f06f 0317 	mvn.w	r3, #23
 800354a:	fb04 3303 	mla	r3, r4, r3, r3
 800354e:	eb03 0a02 	add.w	sl, r3, r2
 8003552:	9b00      	ldr	r3, [sp, #0]
 8003554:	9a05      	ldr	r2, [sp, #20]
 8003556:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8003820 <__kernel_rem_pio2+0x310>
 800355a:	eb03 0802 	add.w	r8, r3, r2
 800355e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003560:	1aa7      	subs	r7, r4, r2
 8003562:	ae20      	add	r6, sp, #128	; 0x80
 8003564:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003568:	2500      	movs	r5, #0
 800356a:	4545      	cmp	r5, r8
 800356c:	dd13      	ble.n	8003596 <__kernel_rem_pio2+0x86>
 800356e:	9b06      	ldr	r3, [sp, #24]
 8003570:	aa20      	add	r2, sp, #128	; 0x80
 8003572:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003576:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800357a:	f04f 0800 	mov.w	r8, #0
 800357e:	9b00      	ldr	r3, [sp, #0]
 8003580:	4598      	cmp	r8, r3
 8003582:	dc31      	bgt.n	80035e8 <__kernel_rem_pio2+0xd8>
 8003584:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8003820 <__kernel_rem_pio2+0x310>
 8003588:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800358c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003590:	462f      	mov	r7, r5
 8003592:	2600      	movs	r6, #0
 8003594:	e01b      	b.n	80035ce <__kernel_rem_pio2+0xbe>
 8003596:	42ef      	cmn	r7, r5
 8003598:	d407      	bmi.n	80035aa <__kernel_rem_pio2+0x9a>
 800359a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800359e:	f7fc ff65 	bl	800046c <__aeabi_i2d>
 80035a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80035a6:	3501      	adds	r5, #1
 80035a8:	e7df      	b.n	800356a <__kernel_rem_pio2+0x5a>
 80035aa:	ec51 0b18 	vmov	r0, r1, d8
 80035ae:	e7f8      	b.n	80035a2 <__kernel_rem_pio2+0x92>
 80035b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80035b8:	f7fc ffc2 	bl	8000540 <__aeabi_dmul>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035c4:	f7fc fe06 	bl	80001d4 <__adddf3>
 80035c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80035cc:	3601      	adds	r6, #1
 80035ce:	9b05      	ldr	r3, [sp, #20]
 80035d0:	429e      	cmp	r6, r3
 80035d2:	f1a7 0708 	sub.w	r7, r7, #8
 80035d6:	ddeb      	ble.n	80035b0 <__kernel_rem_pio2+0xa0>
 80035d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80035dc:	f108 0801 	add.w	r8, r8, #1
 80035e0:	ecab 7b02 	vstmia	fp!, {d7}
 80035e4:	3508      	adds	r5, #8
 80035e6:	e7ca      	b.n	800357e <__kernel_rem_pio2+0x6e>
 80035e8:	9b00      	ldr	r3, [sp, #0]
 80035ea:	aa0c      	add	r2, sp, #48	; 0x30
 80035ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80035f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80035f2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80035f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80035f8:	9c00      	ldr	r4, [sp, #0]
 80035fa:	930a      	str	r3, [sp, #40]	; 0x28
 80035fc:	00e3      	lsls	r3, r4, #3
 80035fe:	9308      	str	r3, [sp, #32]
 8003600:	ab98      	add	r3, sp, #608	; 0x260
 8003602:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003606:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800360a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800360e:	ab70      	add	r3, sp, #448	; 0x1c0
 8003610:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8003614:	46c3      	mov	fp, r8
 8003616:	46a1      	mov	r9, r4
 8003618:	f1b9 0f00 	cmp.w	r9, #0
 800361c:	f1a5 0508 	sub.w	r5, r5, #8
 8003620:	dc77      	bgt.n	8003712 <__kernel_rem_pio2+0x202>
 8003622:	ec47 6b10 	vmov	d0, r6, r7
 8003626:	4650      	mov	r0, sl
 8003628:	f000 fac2 	bl	8003bb0 <scalbn>
 800362c:	ec57 6b10 	vmov	r6, r7, d0
 8003630:	2200      	movs	r2, #0
 8003632:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003636:	ee10 0a10 	vmov	r0, s0
 800363a:	4639      	mov	r1, r7
 800363c:	f7fc ff80 	bl	8000540 <__aeabi_dmul>
 8003640:	ec41 0b10 	vmov	d0, r0, r1
 8003644:	f000 fb34 	bl	8003cb0 <floor>
 8003648:	4b7a      	ldr	r3, [pc, #488]	; (8003834 <__kernel_rem_pio2+0x324>)
 800364a:	ec51 0b10 	vmov	r0, r1, d0
 800364e:	2200      	movs	r2, #0
 8003650:	f7fc ff76 	bl	8000540 <__aeabi_dmul>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4630      	mov	r0, r6
 800365a:	4639      	mov	r1, r7
 800365c:	f7fc fdb8 	bl	80001d0 <__aeabi_dsub>
 8003660:	460f      	mov	r7, r1
 8003662:	4606      	mov	r6, r0
 8003664:	f7fd fa06 	bl	8000a74 <__aeabi_d2iz>
 8003668:	9002      	str	r0, [sp, #8]
 800366a:	f7fc feff 	bl	800046c <__aeabi_i2d>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4630      	mov	r0, r6
 8003674:	4639      	mov	r1, r7
 8003676:	f7fc fdab 	bl	80001d0 <__aeabi_dsub>
 800367a:	f1ba 0f00 	cmp.w	sl, #0
 800367e:	4606      	mov	r6, r0
 8003680:	460f      	mov	r7, r1
 8003682:	dd6d      	ble.n	8003760 <__kernel_rem_pio2+0x250>
 8003684:	1e61      	subs	r1, r4, #1
 8003686:	ab0c      	add	r3, sp, #48	; 0x30
 8003688:	9d02      	ldr	r5, [sp, #8]
 800368a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800368e:	f1ca 0018 	rsb	r0, sl, #24
 8003692:	fa43 f200 	asr.w	r2, r3, r0
 8003696:	4415      	add	r5, r2
 8003698:	4082      	lsls	r2, r0
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	aa0c      	add	r2, sp, #48	; 0x30
 800369e:	9502      	str	r5, [sp, #8]
 80036a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80036a4:	f1ca 0217 	rsb	r2, sl, #23
 80036a8:	fa43 fb02 	asr.w	fp, r3, r2
 80036ac:	f1bb 0f00 	cmp.w	fp, #0
 80036b0:	dd65      	ble.n	800377e <__kernel_rem_pio2+0x26e>
 80036b2:	9b02      	ldr	r3, [sp, #8]
 80036b4:	2200      	movs	r2, #0
 80036b6:	3301      	adds	r3, #1
 80036b8:	9302      	str	r3, [sp, #8]
 80036ba:	4615      	mov	r5, r2
 80036bc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80036c0:	4294      	cmp	r4, r2
 80036c2:	f300 809f 	bgt.w	8003804 <__kernel_rem_pio2+0x2f4>
 80036c6:	f1ba 0f00 	cmp.w	sl, #0
 80036ca:	dd07      	ble.n	80036dc <__kernel_rem_pio2+0x1cc>
 80036cc:	f1ba 0f01 	cmp.w	sl, #1
 80036d0:	f000 80c1 	beq.w	8003856 <__kernel_rem_pio2+0x346>
 80036d4:	f1ba 0f02 	cmp.w	sl, #2
 80036d8:	f000 80c7 	beq.w	800386a <__kernel_rem_pio2+0x35a>
 80036dc:	f1bb 0f02 	cmp.w	fp, #2
 80036e0:	d14d      	bne.n	800377e <__kernel_rem_pio2+0x26e>
 80036e2:	4632      	mov	r2, r6
 80036e4:	463b      	mov	r3, r7
 80036e6:	4954      	ldr	r1, [pc, #336]	; (8003838 <__kernel_rem_pio2+0x328>)
 80036e8:	2000      	movs	r0, #0
 80036ea:	f7fc fd71 	bl	80001d0 <__aeabi_dsub>
 80036ee:	4606      	mov	r6, r0
 80036f0:	460f      	mov	r7, r1
 80036f2:	2d00      	cmp	r5, #0
 80036f4:	d043      	beq.n	800377e <__kernel_rem_pio2+0x26e>
 80036f6:	4650      	mov	r0, sl
 80036f8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8003828 <__kernel_rem_pio2+0x318>
 80036fc:	f000 fa58 	bl	8003bb0 <scalbn>
 8003700:	4630      	mov	r0, r6
 8003702:	4639      	mov	r1, r7
 8003704:	ec53 2b10 	vmov	r2, r3, d0
 8003708:	f7fc fd62 	bl	80001d0 <__aeabi_dsub>
 800370c:	4606      	mov	r6, r0
 800370e:	460f      	mov	r7, r1
 8003710:	e035      	b.n	800377e <__kernel_rem_pio2+0x26e>
 8003712:	4b4a      	ldr	r3, [pc, #296]	; (800383c <__kernel_rem_pio2+0x32c>)
 8003714:	2200      	movs	r2, #0
 8003716:	4630      	mov	r0, r6
 8003718:	4639      	mov	r1, r7
 800371a:	f7fc ff11 	bl	8000540 <__aeabi_dmul>
 800371e:	f7fd f9a9 	bl	8000a74 <__aeabi_d2iz>
 8003722:	f7fc fea3 	bl	800046c <__aeabi_i2d>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	ec43 2b18 	vmov	d8, r2, r3
 800372e:	4b44      	ldr	r3, [pc, #272]	; (8003840 <__kernel_rem_pio2+0x330>)
 8003730:	2200      	movs	r2, #0
 8003732:	f7fc ff05 	bl	8000540 <__aeabi_dmul>
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4630      	mov	r0, r6
 800373c:	4639      	mov	r1, r7
 800373e:	f7fc fd47 	bl	80001d0 <__aeabi_dsub>
 8003742:	f7fd f997 	bl	8000a74 <__aeabi_d2iz>
 8003746:	e9d5 2300 	ldrd	r2, r3, [r5]
 800374a:	f84b 0b04 	str.w	r0, [fp], #4
 800374e:	ec51 0b18 	vmov	r0, r1, d8
 8003752:	f7fc fd3f 	bl	80001d4 <__adddf3>
 8003756:	f109 39ff 	add.w	r9, r9, #4294967295
 800375a:	4606      	mov	r6, r0
 800375c:	460f      	mov	r7, r1
 800375e:	e75b      	b.n	8003618 <__kernel_rem_pio2+0x108>
 8003760:	d106      	bne.n	8003770 <__kernel_rem_pio2+0x260>
 8003762:	1e63      	subs	r3, r4, #1
 8003764:	aa0c      	add	r2, sp, #48	; 0x30
 8003766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800376e:	e79d      	b.n	80036ac <__kernel_rem_pio2+0x19c>
 8003770:	4b34      	ldr	r3, [pc, #208]	; (8003844 <__kernel_rem_pio2+0x334>)
 8003772:	2200      	movs	r2, #0
 8003774:	f7fd f96a 	bl	8000a4c <__aeabi_dcmpge>
 8003778:	2800      	cmp	r0, #0
 800377a:	d140      	bne.n	80037fe <__kernel_rem_pio2+0x2ee>
 800377c:	4683      	mov	fp, r0
 800377e:	2200      	movs	r2, #0
 8003780:	2300      	movs	r3, #0
 8003782:	4630      	mov	r0, r6
 8003784:	4639      	mov	r1, r7
 8003786:	f7fd f943 	bl	8000a10 <__aeabi_dcmpeq>
 800378a:	2800      	cmp	r0, #0
 800378c:	f000 80c1 	beq.w	8003912 <__kernel_rem_pio2+0x402>
 8003790:	1e65      	subs	r5, r4, #1
 8003792:	462b      	mov	r3, r5
 8003794:	2200      	movs	r2, #0
 8003796:	9900      	ldr	r1, [sp, #0]
 8003798:	428b      	cmp	r3, r1
 800379a:	da6d      	bge.n	8003878 <__kernel_rem_pio2+0x368>
 800379c:	2a00      	cmp	r2, #0
 800379e:	f000 808a 	beq.w	80038b6 <__kernel_rem_pio2+0x3a6>
 80037a2:	ab0c      	add	r3, sp, #48	; 0x30
 80037a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80037a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80ae 	beq.w	800390e <__kernel_rem_pio2+0x3fe>
 80037b2:	4650      	mov	r0, sl
 80037b4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8003828 <__kernel_rem_pio2+0x318>
 80037b8:	f000 f9fa 	bl	8003bb0 <scalbn>
 80037bc:	1c6b      	adds	r3, r5, #1
 80037be:	00da      	lsls	r2, r3, #3
 80037c0:	9205      	str	r2, [sp, #20]
 80037c2:	ec57 6b10 	vmov	r6, r7, d0
 80037c6:	aa70      	add	r2, sp, #448	; 0x1c0
 80037c8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800383c <__kernel_rem_pio2+0x32c>
 80037cc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80037d0:	462c      	mov	r4, r5
 80037d2:	f04f 0800 	mov.w	r8, #0
 80037d6:	2c00      	cmp	r4, #0
 80037d8:	f280 80d4 	bge.w	8003984 <__kernel_rem_pio2+0x474>
 80037dc:	462c      	mov	r4, r5
 80037de:	2c00      	cmp	r4, #0
 80037e0:	f2c0 8102 	blt.w	80039e8 <__kernel_rem_pio2+0x4d8>
 80037e4:	4b18      	ldr	r3, [pc, #96]	; (8003848 <__kernel_rem_pio2+0x338>)
 80037e6:	461e      	mov	r6, r3
 80037e8:	ab70      	add	r3, sp, #448	; 0x1c0
 80037ea:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80037ee:	1b2b      	subs	r3, r5, r4
 80037f0:	f04f 0900 	mov.w	r9, #0
 80037f4:	f04f 0a00 	mov.w	sl, #0
 80037f8:	2700      	movs	r7, #0
 80037fa:	9306      	str	r3, [sp, #24]
 80037fc:	e0e6      	b.n	80039cc <__kernel_rem_pio2+0x4bc>
 80037fe:	f04f 0b02 	mov.w	fp, #2
 8003802:	e756      	b.n	80036b2 <__kernel_rem_pio2+0x1a2>
 8003804:	f8d8 3000 	ldr.w	r3, [r8]
 8003808:	bb05      	cbnz	r5, 800384c <__kernel_rem_pio2+0x33c>
 800380a:	b123      	cbz	r3, 8003816 <__kernel_rem_pio2+0x306>
 800380c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003810:	f8c8 3000 	str.w	r3, [r8]
 8003814:	2301      	movs	r3, #1
 8003816:	3201      	adds	r2, #1
 8003818:	f108 0804 	add.w	r8, r8, #4
 800381c:	461d      	mov	r5, r3
 800381e:	e74f      	b.n	80036c0 <__kernel_rem_pio2+0x1b0>
	...
 800382c:	3ff00000 	.word	0x3ff00000
 8003830:	08003fb0 	.word	0x08003fb0
 8003834:	40200000 	.word	0x40200000
 8003838:	3ff00000 	.word	0x3ff00000
 800383c:	3e700000 	.word	0x3e700000
 8003840:	41700000 	.word	0x41700000
 8003844:	3fe00000 	.word	0x3fe00000
 8003848:	08003f70 	.word	0x08003f70
 800384c:	1acb      	subs	r3, r1, r3
 800384e:	f8c8 3000 	str.w	r3, [r8]
 8003852:	462b      	mov	r3, r5
 8003854:	e7df      	b.n	8003816 <__kernel_rem_pio2+0x306>
 8003856:	1e62      	subs	r2, r4, #1
 8003858:	ab0c      	add	r3, sp, #48	; 0x30
 800385a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003862:	a90c      	add	r1, sp, #48	; 0x30
 8003864:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003868:	e738      	b.n	80036dc <__kernel_rem_pio2+0x1cc>
 800386a:	1e62      	subs	r2, r4, #1
 800386c:	ab0c      	add	r3, sp, #48	; 0x30
 800386e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003872:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003876:	e7f4      	b.n	8003862 <__kernel_rem_pio2+0x352>
 8003878:	a90c      	add	r1, sp, #48	; 0x30
 800387a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800387e:	3b01      	subs	r3, #1
 8003880:	430a      	orrs	r2, r1
 8003882:	e788      	b.n	8003796 <__kernel_rem_pio2+0x286>
 8003884:	3301      	adds	r3, #1
 8003886:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800388a:	2900      	cmp	r1, #0
 800388c:	d0fa      	beq.n	8003884 <__kernel_rem_pio2+0x374>
 800388e:	9a08      	ldr	r2, [sp, #32]
 8003890:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8003894:	446a      	add	r2, sp
 8003896:	3a98      	subs	r2, #152	; 0x98
 8003898:	9208      	str	r2, [sp, #32]
 800389a:	9a06      	ldr	r2, [sp, #24]
 800389c:	a920      	add	r1, sp, #128	; 0x80
 800389e:	18a2      	adds	r2, r4, r2
 80038a0:	18e3      	adds	r3, r4, r3
 80038a2:	f104 0801 	add.w	r8, r4, #1
 80038a6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80038aa:	9302      	str	r3, [sp, #8]
 80038ac:	9b02      	ldr	r3, [sp, #8]
 80038ae:	4543      	cmp	r3, r8
 80038b0:	da04      	bge.n	80038bc <__kernel_rem_pio2+0x3ac>
 80038b2:	461c      	mov	r4, r3
 80038b4:	e6a2      	b.n	80035fc <__kernel_rem_pio2+0xec>
 80038b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80038b8:	2301      	movs	r3, #1
 80038ba:	e7e4      	b.n	8003886 <__kernel_rem_pio2+0x376>
 80038bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038be:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80038c2:	f7fc fdd3 	bl	800046c <__aeabi_i2d>
 80038c6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80038ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038cc:	46ab      	mov	fp, r5
 80038ce:	461c      	mov	r4, r3
 80038d0:	f04f 0900 	mov.w	r9, #0
 80038d4:	2600      	movs	r6, #0
 80038d6:	2700      	movs	r7, #0
 80038d8:	9b05      	ldr	r3, [sp, #20]
 80038da:	4599      	cmp	r9, r3
 80038dc:	dd06      	ble.n	80038ec <__kernel_rem_pio2+0x3dc>
 80038de:	9b08      	ldr	r3, [sp, #32]
 80038e0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80038e4:	f108 0801 	add.w	r8, r8, #1
 80038e8:	9308      	str	r3, [sp, #32]
 80038ea:	e7df      	b.n	80038ac <__kernel_rem_pio2+0x39c>
 80038ec:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80038f0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80038f4:	f7fc fe24 	bl	8000540 <__aeabi_dmul>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4630      	mov	r0, r6
 80038fe:	4639      	mov	r1, r7
 8003900:	f7fc fc68 	bl	80001d4 <__adddf3>
 8003904:	f109 0901 	add.w	r9, r9, #1
 8003908:	4606      	mov	r6, r0
 800390a:	460f      	mov	r7, r1
 800390c:	e7e4      	b.n	80038d8 <__kernel_rem_pio2+0x3c8>
 800390e:	3d01      	subs	r5, #1
 8003910:	e747      	b.n	80037a2 <__kernel_rem_pio2+0x292>
 8003912:	ec47 6b10 	vmov	d0, r6, r7
 8003916:	f1ca 0000 	rsb	r0, sl, #0
 800391a:	f000 f949 	bl	8003bb0 <scalbn>
 800391e:	ec57 6b10 	vmov	r6, r7, d0
 8003922:	4ba0      	ldr	r3, [pc, #640]	; (8003ba4 <__kernel_rem_pio2+0x694>)
 8003924:	ee10 0a10 	vmov	r0, s0
 8003928:	2200      	movs	r2, #0
 800392a:	4639      	mov	r1, r7
 800392c:	f7fd f88e 	bl	8000a4c <__aeabi_dcmpge>
 8003930:	b1f8      	cbz	r0, 8003972 <__kernel_rem_pio2+0x462>
 8003932:	4b9d      	ldr	r3, [pc, #628]	; (8003ba8 <__kernel_rem_pio2+0x698>)
 8003934:	2200      	movs	r2, #0
 8003936:	4630      	mov	r0, r6
 8003938:	4639      	mov	r1, r7
 800393a:	f7fc fe01 	bl	8000540 <__aeabi_dmul>
 800393e:	f7fd f899 	bl	8000a74 <__aeabi_d2iz>
 8003942:	4680      	mov	r8, r0
 8003944:	f7fc fd92 	bl	800046c <__aeabi_i2d>
 8003948:	4b96      	ldr	r3, [pc, #600]	; (8003ba4 <__kernel_rem_pio2+0x694>)
 800394a:	2200      	movs	r2, #0
 800394c:	f7fc fdf8 	bl	8000540 <__aeabi_dmul>
 8003950:	460b      	mov	r3, r1
 8003952:	4602      	mov	r2, r0
 8003954:	4639      	mov	r1, r7
 8003956:	4630      	mov	r0, r6
 8003958:	f7fc fc3a 	bl	80001d0 <__aeabi_dsub>
 800395c:	f7fd f88a 	bl	8000a74 <__aeabi_d2iz>
 8003960:	1c65      	adds	r5, r4, #1
 8003962:	ab0c      	add	r3, sp, #48	; 0x30
 8003964:	f10a 0a18 	add.w	sl, sl, #24
 8003968:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800396c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8003970:	e71f      	b.n	80037b2 <__kernel_rem_pio2+0x2a2>
 8003972:	4630      	mov	r0, r6
 8003974:	4639      	mov	r1, r7
 8003976:	f7fd f87d 	bl	8000a74 <__aeabi_d2iz>
 800397a:	ab0c      	add	r3, sp, #48	; 0x30
 800397c:	4625      	mov	r5, r4
 800397e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003982:	e716      	b.n	80037b2 <__kernel_rem_pio2+0x2a2>
 8003984:	ab0c      	add	r3, sp, #48	; 0x30
 8003986:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800398a:	f7fc fd6f 	bl	800046c <__aeabi_i2d>
 800398e:	4632      	mov	r2, r6
 8003990:	463b      	mov	r3, r7
 8003992:	f7fc fdd5 	bl	8000540 <__aeabi_dmul>
 8003996:	4642      	mov	r2, r8
 8003998:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800399c:	464b      	mov	r3, r9
 800399e:	4630      	mov	r0, r6
 80039a0:	4639      	mov	r1, r7
 80039a2:	f7fc fdcd 	bl	8000540 <__aeabi_dmul>
 80039a6:	3c01      	subs	r4, #1
 80039a8:	4606      	mov	r6, r0
 80039aa:	460f      	mov	r7, r1
 80039ac:	e713      	b.n	80037d6 <__kernel_rem_pio2+0x2c6>
 80039ae:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80039b2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80039b6:	f7fc fdc3 	bl	8000540 <__aeabi_dmul>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4648      	mov	r0, r9
 80039c0:	4651      	mov	r1, sl
 80039c2:	f7fc fc07 	bl	80001d4 <__adddf3>
 80039c6:	3701      	adds	r7, #1
 80039c8:	4681      	mov	r9, r0
 80039ca:	468a      	mov	sl, r1
 80039cc:	9b00      	ldr	r3, [sp, #0]
 80039ce:	429f      	cmp	r7, r3
 80039d0:	dc02      	bgt.n	80039d8 <__kernel_rem_pio2+0x4c8>
 80039d2:	9b06      	ldr	r3, [sp, #24]
 80039d4:	429f      	cmp	r7, r3
 80039d6:	ddea      	ble.n	80039ae <__kernel_rem_pio2+0x49e>
 80039d8:	9a06      	ldr	r2, [sp, #24]
 80039da:	ab48      	add	r3, sp, #288	; 0x120
 80039dc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80039e0:	e9c6 9a00 	strd	r9, sl, [r6]
 80039e4:	3c01      	subs	r4, #1
 80039e6:	e6fa      	b.n	80037de <__kernel_rem_pio2+0x2ce>
 80039e8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	dc0b      	bgt.n	8003a06 <__kernel_rem_pio2+0x4f6>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	dc39      	bgt.n	8003a66 <__kernel_rem_pio2+0x556>
 80039f2:	d05d      	beq.n	8003ab0 <__kernel_rem_pio2+0x5a0>
 80039f4:	9b02      	ldr	r3, [sp, #8]
 80039f6:	f003 0007 	and.w	r0, r3, #7
 80039fa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80039fe:	ecbd 8b02 	vpop	{d8}
 8003a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a06:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d1f3      	bne.n	80039f4 <__kernel_rem_pio2+0x4e4>
 8003a0c:	9b05      	ldr	r3, [sp, #20]
 8003a0e:	9500      	str	r5, [sp, #0]
 8003a10:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003a14:	eb0d 0403 	add.w	r4, sp, r3
 8003a18:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8003a1c:	46a2      	mov	sl, r4
 8003a1e:	9b00      	ldr	r3, [sp, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f1aa 0a08 	sub.w	sl, sl, #8
 8003a26:	dc69      	bgt.n	8003afc <__kernel_rem_pio2+0x5ec>
 8003a28:	46aa      	mov	sl, r5
 8003a2a:	f1ba 0f01 	cmp.w	sl, #1
 8003a2e:	f1a4 0408 	sub.w	r4, r4, #8
 8003a32:	f300 8083 	bgt.w	8003b3c <__kernel_rem_pio2+0x62c>
 8003a36:	9c05      	ldr	r4, [sp, #20]
 8003a38:	ab48      	add	r3, sp, #288	; 0x120
 8003a3a:	441c      	add	r4, r3
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	2100      	movs	r1, #0
 8003a40:	2d01      	cmp	r5, #1
 8003a42:	f300 809a 	bgt.w	8003b7a <__kernel_rem_pio2+0x66a>
 8003a46:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8003a4a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8003a4e:	f1bb 0f00 	cmp.w	fp, #0
 8003a52:	f040 8098 	bne.w	8003b86 <__kernel_rem_pio2+0x676>
 8003a56:	9b04      	ldr	r3, [sp, #16]
 8003a58:	e9c3 7800 	strd	r7, r8, [r3]
 8003a5c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8003a60:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003a64:	e7c6      	b.n	80039f4 <__kernel_rem_pio2+0x4e4>
 8003a66:	9e05      	ldr	r6, [sp, #20]
 8003a68:	ab48      	add	r3, sp, #288	; 0x120
 8003a6a:	441e      	add	r6, r3
 8003a6c:	462c      	mov	r4, r5
 8003a6e:	2000      	movs	r0, #0
 8003a70:	2100      	movs	r1, #0
 8003a72:	2c00      	cmp	r4, #0
 8003a74:	da33      	bge.n	8003ade <__kernel_rem_pio2+0x5ce>
 8003a76:	f1bb 0f00 	cmp.w	fp, #0
 8003a7a:	d036      	beq.n	8003aea <__kernel_rem_pio2+0x5da>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003a82:	9c04      	ldr	r4, [sp, #16]
 8003a84:	e9c4 2300 	strd	r2, r3, [r4]
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8003a90:	f7fc fb9e 	bl	80001d0 <__aeabi_dsub>
 8003a94:	ae4a      	add	r6, sp, #296	; 0x128
 8003a96:	2401      	movs	r4, #1
 8003a98:	42a5      	cmp	r5, r4
 8003a9a:	da29      	bge.n	8003af0 <__kernel_rem_pio2+0x5e0>
 8003a9c:	f1bb 0f00 	cmp.w	fp, #0
 8003aa0:	d002      	beq.n	8003aa8 <__kernel_rem_pio2+0x598>
 8003aa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	9b04      	ldr	r3, [sp, #16]
 8003aaa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003aae:	e7a1      	b.n	80039f4 <__kernel_rem_pio2+0x4e4>
 8003ab0:	9c05      	ldr	r4, [sp, #20]
 8003ab2:	ab48      	add	r3, sp, #288	; 0x120
 8003ab4:	441c      	add	r4, r3
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	2100      	movs	r1, #0
 8003aba:	2d00      	cmp	r5, #0
 8003abc:	da09      	bge.n	8003ad2 <__kernel_rem_pio2+0x5c2>
 8003abe:	f1bb 0f00 	cmp.w	fp, #0
 8003ac2:	d002      	beq.n	8003aca <__kernel_rem_pio2+0x5ba>
 8003ac4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003ac8:	4619      	mov	r1, r3
 8003aca:	9b04      	ldr	r3, [sp, #16]
 8003acc:	e9c3 0100 	strd	r0, r1, [r3]
 8003ad0:	e790      	b.n	80039f4 <__kernel_rem_pio2+0x4e4>
 8003ad2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003ad6:	f7fc fb7d 	bl	80001d4 <__adddf3>
 8003ada:	3d01      	subs	r5, #1
 8003adc:	e7ed      	b.n	8003aba <__kernel_rem_pio2+0x5aa>
 8003ade:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8003ae2:	f7fc fb77 	bl	80001d4 <__adddf3>
 8003ae6:	3c01      	subs	r4, #1
 8003ae8:	e7c3      	b.n	8003a72 <__kernel_rem_pio2+0x562>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	e7c8      	b.n	8003a82 <__kernel_rem_pio2+0x572>
 8003af0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8003af4:	f7fc fb6e 	bl	80001d4 <__adddf3>
 8003af8:	3401      	adds	r4, #1
 8003afa:	e7cd      	b.n	8003a98 <__kernel_rem_pio2+0x588>
 8003afc:	e9da 8900 	ldrd	r8, r9, [sl]
 8003b00:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8003b04:	9b00      	ldr	r3, [sp, #0]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	4632      	mov	r2, r6
 8003b0c:	463b      	mov	r3, r7
 8003b0e:	4640      	mov	r0, r8
 8003b10:	4649      	mov	r1, r9
 8003b12:	f7fc fb5f 	bl	80001d4 <__adddf3>
 8003b16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4640      	mov	r0, r8
 8003b20:	4649      	mov	r1, r9
 8003b22:	f7fc fb55 	bl	80001d0 <__aeabi_dsub>
 8003b26:	4632      	mov	r2, r6
 8003b28:	463b      	mov	r3, r7
 8003b2a:	f7fc fb53 	bl	80001d4 <__adddf3>
 8003b2e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003b32:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003b36:	ed8a 7b00 	vstr	d7, [sl]
 8003b3a:	e770      	b.n	8003a1e <__kernel_rem_pio2+0x50e>
 8003b3c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003b40:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8003b44:	4640      	mov	r0, r8
 8003b46:	4632      	mov	r2, r6
 8003b48:	463b      	mov	r3, r7
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	f7fc fb42 	bl	80001d4 <__adddf3>
 8003b50:	e9cd 0100 	strd	r0, r1, [sp]
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4640      	mov	r0, r8
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	f7fc fb38 	bl	80001d0 <__aeabi_dsub>
 8003b60:	4632      	mov	r2, r6
 8003b62:	463b      	mov	r3, r7
 8003b64:	f7fc fb36 	bl	80001d4 <__adddf3>
 8003b68:	ed9d 7b00 	vldr	d7, [sp]
 8003b6c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003b70:	ed84 7b00 	vstr	d7, [r4]
 8003b74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b78:	e757      	b.n	8003a2a <__kernel_rem_pio2+0x51a>
 8003b7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003b7e:	f7fc fb29 	bl	80001d4 <__adddf3>
 8003b82:	3d01      	subs	r5, #1
 8003b84:	e75c      	b.n	8003a40 <__kernel_rem_pio2+0x530>
 8003b86:	9b04      	ldr	r3, [sp, #16]
 8003b88:	9a04      	ldr	r2, [sp, #16]
 8003b8a:	601f      	str	r7, [r3, #0]
 8003b8c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8003b90:	605c      	str	r4, [r3, #4]
 8003b92:	609d      	str	r5, [r3, #8]
 8003b94:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003b98:	60d3      	str	r3, [r2, #12]
 8003b9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003b9e:	6110      	str	r0, [r2, #16]
 8003ba0:	6153      	str	r3, [r2, #20]
 8003ba2:	e727      	b.n	80039f4 <__kernel_rem_pio2+0x4e4>
 8003ba4:	41700000 	.word	0x41700000
 8003ba8:	3e700000 	.word	0x3e700000
 8003bac:	00000000 	.word	0x00000000

08003bb0 <scalbn>:
 8003bb0:	b570      	push	{r4, r5, r6, lr}
 8003bb2:	ec55 4b10 	vmov	r4, r5, d0
 8003bb6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8003bba:	4606      	mov	r6, r0
 8003bbc:	462b      	mov	r3, r5
 8003bbe:	b999      	cbnz	r1, 8003be8 <scalbn+0x38>
 8003bc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003bc4:	4323      	orrs	r3, r4
 8003bc6:	d03f      	beq.n	8003c48 <scalbn+0x98>
 8003bc8:	4b35      	ldr	r3, [pc, #212]	; (8003ca0 <scalbn+0xf0>)
 8003bca:	4629      	mov	r1, r5
 8003bcc:	ee10 0a10 	vmov	r0, s0
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f7fc fcb5 	bl	8000540 <__aeabi_dmul>
 8003bd6:	4b33      	ldr	r3, [pc, #204]	; (8003ca4 <scalbn+0xf4>)
 8003bd8:	429e      	cmp	r6, r3
 8003bda:	4604      	mov	r4, r0
 8003bdc:	460d      	mov	r5, r1
 8003bde:	da10      	bge.n	8003c02 <scalbn+0x52>
 8003be0:	a327      	add	r3, pc, #156	; (adr r3, 8003c80 <scalbn+0xd0>)
 8003be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be6:	e01f      	b.n	8003c28 <scalbn+0x78>
 8003be8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003bec:	4291      	cmp	r1, r2
 8003bee:	d10c      	bne.n	8003c0a <scalbn+0x5a>
 8003bf0:	ee10 2a10 	vmov	r2, s0
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	f7fc faec 	bl	80001d4 <__adddf3>
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	460d      	mov	r5, r1
 8003c00:	e022      	b.n	8003c48 <scalbn+0x98>
 8003c02:	460b      	mov	r3, r1
 8003c04:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003c08:	3936      	subs	r1, #54	; 0x36
 8003c0a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003c0e:	4296      	cmp	r6, r2
 8003c10:	dd0d      	ble.n	8003c2e <scalbn+0x7e>
 8003c12:	2d00      	cmp	r5, #0
 8003c14:	a11c      	add	r1, pc, #112	; (adr r1, 8003c88 <scalbn+0xd8>)
 8003c16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c1a:	da02      	bge.n	8003c22 <scalbn+0x72>
 8003c1c:	a11c      	add	r1, pc, #112	; (adr r1, 8003c90 <scalbn+0xe0>)
 8003c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c22:	a319      	add	r3, pc, #100	; (adr r3, 8003c88 <scalbn+0xd8>)
 8003c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c28:	f7fc fc8a 	bl	8000540 <__aeabi_dmul>
 8003c2c:	e7e6      	b.n	8003bfc <scalbn+0x4c>
 8003c2e:	1872      	adds	r2, r6, r1
 8003c30:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003c34:	428a      	cmp	r2, r1
 8003c36:	dcec      	bgt.n	8003c12 <scalbn+0x62>
 8003c38:	2a00      	cmp	r2, #0
 8003c3a:	dd08      	ble.n	8003c4e <scalbn+0x9e>
 8003c3c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003c40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003c44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003c48:	ec45 4b10 	vmov	d0, r4, r5
 8003c4c:	bd70      	pop	{r4, r5, r6, pc}
 8003c4e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003c52:	da08      	bge.n	8003c66 <scalbn+0xb6>
 8003c54:	2d00      	cmp	r5, #0
 8003c56:	a10a      	add	r1, pc, #40	; (adr r1, 8003c80 <scalbn+0xd0>)
 8003c58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c5c:	dac0      	bge.n	8003be0 <scalbn+0x30>
 8003c5e:	a10e      	add	r1, pc, #56	; (adr r1, 8003c98 <scalbn+0xe8>)
 8003c60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c64:	e7bc      	b.n	8003be0 <scalbn+0x30>
 8003c66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003c6a:	3236      	adds	r2, #54	; 0x36
 8003c6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003c70:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8003c74:	4620      	mov	r0, r4
 8003c76:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <scalbn+0xf8>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	e7d5      	b.n	8003c28 <scalbn+0x78>
 8003c7c:	f3af 8000 	nop.w
 8003c80:	c2f8f359 	.word	0xc2f8f359
 8003c84:	01a56e1f 	.word	0x01a56e1f
 8003c88:	8800759c 	.word	0x8800759c
 8003c8c:	7e37e43c 	.word	0x7e37e43c
 8003c90:	8800759c 	.word	0x8800759c
 8003c94:	fe37e43c 	.word	0xfe37e43c
 8003c98:	c2f8f359 	.word	0xc2f8f359
 8003c9c:	81a56e1f 	.word	0x81a56e1f
 8003ca0:	43500000 	.word	0x43500000
 8003ca4:	ffff3cb0 	.word	0xffff3cb0
 8003ca8:	3c900000 	.word	0x3c900000
 8003cac:	00000000 	.word	0x00000000

08003cb0 <floor>:
 8003cb0:	ec51 0b10 	vmov	r0, r1, d0
 8003cb4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cbc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8003cc0:	2e13      	cmp	r6, #19
 8003cc2:	ee10 5a10 	vmov	r5, s0
 8003cc6:	ee10 8a10 	vmov	r8, s0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	dc31      	bgt.n	8003d32 <floor+0x82>
 8003cce:	2e00      	cmp	r6, #0
 8003cd0:	da14      	bge.n	8003cfc <floor+0x4c>
 8003cd2:	a333      	add	r3, pc, #204	; (adr r3, 8003da0 <floor+0xf0>)
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	f7fc fa7c 	bl	80001d4 <__adddf3>
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f7fc febe 	bl	8000a60 <__aeabi_dcmpgt>
 8003ce4:	b138      	cbz	r0, 8003cf6 <floor+0x46>
 8003ce6:	2c00      	cmp	r4, #0
 8003ce8:	da53      	bge.n	8003d92 <floor+0xe2>
 8003cea:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003cee:	4325      	orrs	r5, r4
 8003cf0:	d052      	beq.n	8003d98 <floor+0xe8>
 8003cf2:	4c2d      	ldr	r4, [pc, #180]	; (8003da8 <floor+0xf8>)
 8003cf4:	2500      	movs	r5, #0
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	e024      	b.n	8003d46 <floor+0x96>
 8003cfc:	4f2b      	ldr	r7, [pc, #172]	; (8003dac <floor+0xfc>)
 8003cfe:	4137      	asrs	r7, r6
 8003d00:	ea01 0307 	and.w	r3, r1, r7
 8003d04:	4303      	orrs	r3, r0
 8003d06:	d01e      	beq.n	8003d46 <floor+0x96>
 8003d08:	a325      	add	r3, pc, #148	; (adr r3, 8003da0 <floor+0xf0>)
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	f7fc fa61 	bl	80001d4 <__adddf3>
 8003d12:	2200      	movs	r2, #0
 8003d14:	2300      	movs	r3, #0
 8003d16:	f7fc fea3 	bl	8000a60 <__aeabi_dcmpgt>
 8003d1a:	2800      	cmp	r0, #0
 8003d1c:	d0eb      	beq.n	8003cf6 <floor+0x46>
 8003d1e:	2c00      	cmp	r4, #0
 8003d20:	bfbe      	ittt	lt
 8003d22:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003d26:	4133      	asrlt	r3, r6
 8003d28:	18e4      	addlt	r4, r4, r3
 8003d2a:	ea24 0407 	bic.w	r4, r4, r7
 8003d2e:	2500      	movs	r5, #0
 8003d30:	e7e1      	b.n	8003cf6 <floor+0x46>
 8003d32:	2e33      	cmp	r6, #51	; 0x33
 8003d34:	dd0b      	ble.n	8003d4e <floor+0x9e>
 8003d36:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003d3a:	d104      	bne.n	8003d46 <floor+0x96>
 8003d3c:	ee10 2a10 	vmov	r2, s0
 8003d40:	460b      	mov	r3, r1
 8003d42:	f7fc fa47 	bl	80001d4 <__adddf3>
 8003d46:	ec41 0b10 	vmov	d0, r0, r1
 8003d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d4e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8003d52:	f04f 37ff 	mov.w	r7, #4294967295
 8003d56:	40df      	lsrs	r7, r3
 8003d58:	4238      	tst	r0, r7
 8003d5a:	d0f4      	beq.n	8003d46 <floor+0x96>
 8003d5c:	a310      	add	r3, pc, #64	; (adr r3, 8003da0 <floor+0xf0>)
 8003d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d62:	f7fc fa37 	bl	80001d4 <__adddf3>
 8003d66:	2200      	movs	r2, #0
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f7fc fe79 	bl	8000a60 <__aeabi_dcmpgt>
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	d0c1      	beq.n	8003cf6 <floor+0x46>
 8003d72:	2c00      	cmp	r4, #0
 8003d74:	da0a      	bge.n	8003d8c <floor+0xdc>
 8003d76:	2e14      	cmp	r6, #20
 8003d78:	d101      	bne.n	8003d7e <floor+0xce>
 8003d7a:	3401      	adds	r4, #1
 8003d7c:	e006      	b.n	8003d8c <floor+0xdc>
 8003d7e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003d82:	2301      	movs	r3, #1
 8003d84:	40b3      	lsls	r3, r6
 8003d86:	441d      	add	r5, r3
 8003d88:	45a8      	cmp	r8, r5
 8003d8a:	d8f6      	bhi.n	8003d7a <floor+0xca>
 8003d8c:	ea25 0507 	bic.w	r5, r5, r7
 8003d90:	e7b1      	b.n	8003cf6 <floor+0x46>
 8003d92:	2500      	movs	r5, #0
 8003d94:	462c      	mov	r4, r5
 8003d96:	e7ae      	b.n	8003cf6 <floor+0x46>
 8003d98:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003d9c:	e7ab      	b.n	8003cf6 <floor+0x46>
 8003d9e:	bf00      	nop
 8003da0:	8800759c 	.word	0x8800759c
 8003da4:	7e37e43c 	.word	0x7e37e43c
 8003da8:	bff00000 	.word	0xbff00000
 8003dac:	000fffff 	.word	0x000fffff

08003db0 <_init>:
 8003db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db2:	bf00      	nop
 8003db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db6:	bc08      	pop	{r3}
 8003db8:	469e      	mov	lr, r3
 8003dba:	4770      	bx	lr

08003dbc <_fini>:
 8003dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbe:	bf00      	nop
 8003dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc2:	bc08      	pop	{r3}
 8003dc4:	469e      	mov	lr, r3
 8003dc6:	4770      	bx	lr
