
Buzzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006668  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080067f8  080067f8  000167f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a90  08006a90  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006a90  08006a90  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a90  08006a90  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a90  08006a90  00016a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a94  08006a94  00016a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000060  08006af8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08006af8  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000099e3  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c2b  00000000  00000000  00029ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c38  00000000  00000000  0002b6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000937  00000000  00000000  0002c320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d3d  00000000  00000000  0002cc57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009a37  00000000  00000000  0004f994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba778  00000000  00000000  000593cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003df8  00000000  00000000  00113b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0011793c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067e0 	.word	0x080067e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080067e0 	.word	0x080067e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <__NVIC_GetPriorityGrouping+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f003 0307 	and.w	r3, r3, #7
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db0b      	blt.n	8000c92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 021f 	and.w	r2, r3, #31
 8000c80:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <__NVIC_EnableIRQ+0x38>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	095b      	lsrs	r3, r3, #5
 8000c88:	2001      	movs	r0, #1
 8000c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000e100 	.word	0xe000e100

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db0a      	blt.n	8000cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <__NVIC_SetPriority+0x4c>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ccc:	e00a      	b.n	8000ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4908      	ldr	r1, [pc, #32]	; (8000cf4 <__NVIC_SetPriority+0x50>)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	3b04      	subs	r3, #4
 8000cdc:	0112      	lsls	r2, r2, #4
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	761a      	strb	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f1c3 0307 	rsb	r3, r3, #7
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	bf28      	it	cs
 8000d16:	2304      	movcs	r3, #4
 8000d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d902      	bls.n	8000d28 <NVIC_EncodePriority+0x30>
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3b03      	subs	r3, #3
 8000d26:	e000      	b.n	8000d2a <NVIC_EncodePriority+0x32>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43da      	mvns	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43d9      	mvns	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	4313      	orrs	r3, r2
         );
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3724      	adds	r7, #36	; 0x24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <LL_RCC_SetUSARTClockSource+0x30>)
 8000d6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	0c1b      	lsrs	r3, r3, #16
 8000d72:	43db      	mvns	r3, r3
 8000d74:	401a      	ands	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	4905      	ldr	r1, [pc, #20]	; (8000d90 <LL_RCC_SetUSARTClockSource+0x30>)
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000

08000d94 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000da0:	4907      	ldr	r1, [pc, #28]	; (8000dc0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000daa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4013      	ands	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4013      	ands	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40021000 	.word	0x40021000

08000df4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f043 0201 	orr.w	r2, r3, #1
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	601a      	str	r2, [r3, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	609a      	str	r2, [r3, #8]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69db      	ldr	r3, [r3, #28]
 8000e4c:	f003 0320 	and.w	r3, r3, #32
 8000e50:	2b20      	cmp	r3, #32
 8000e52:	d101      	bne.n	8000e58 <LL_USART_IsActiveFlag_RXNE+0x18>
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e76:	2b40      	cmp	r3, #64	; 0x40
 8000e78:	d101      	bne.n	8000e7e <LL_USART_IsActiveFlag_TC+0x18>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <LL_USART_IsActiveFlag_TC+0x1a>
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9c:	2b80      	cmp	r3, #128	; 0x80
 8000e9e:	d101      	bne.n	8000ea4 <LL_USART_IsActiveFlag_TXE+0x18>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <LL_USART_IsActiveFlag_TXE+0x1a>
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b089      	sub	sp, #36	; 0x24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	e853 3f00 	ldrex	r3, [r3]
 8000ec4:	60bb      	str	r3, [r7, #8]
   return(result);
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	f043 0320 	orr.w	r3, r3, #32
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69fa      	ldr	r2, [r7, #28]
 8000ed2:	61ba      	str	r2, [r7, #24]
 8000ed4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ed6:	6979      	ldr	r1, [r7, #20]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	e841 2300 	strex	r3, r2, [r1]
 8000ede:	613b      	str	r3, [r7, #16]
   return(result);
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1e9      	bne.n	8000eba <LL_USART_EnableIT_RXNE+0x8>
}
 8000ee6:	bf00      	nop
 8000ee8:	bf00      	nop
 8000eea:	3724      	adds	r7, #36	; 0x24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	b2db      	uxtb	r3, r3
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <SavePointer>:
#define LINE_MAX_LENGTH 50
#define ASCII_OFFSET 48

struct led_data *ledData;

void SavePointer(struct led_data *newLedData) {
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    ledData = newLedData;
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <SavePointer+0x1c>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	2000007c 	.word	0x2000007c

08000f50 <_write>:

int _write(int file, uint8_t *buf, int nbytes){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint8_t num_of_byte = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	75fb      	strb	r3, [r7, #23]
  while (num_of_byte <= nbytes - 1){
 8000f60:	e011      	b.n	8000f86 <_write+0x36>
    while (!LL_USART_IsActiveFlag_TXE(USART2));
 8000f62:	bf00      	nop
 8000f64:	4810      	ldr	r0, [pc, #64]	; (8000fa8 <_write+0x58>)
 8000f66:	f7ff ff91 	bl	8000e8c <LL_USART_IsActiveFlag_TXE>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0f9      	beq.n	8000f64 <_write+0x14>
    LL_USART_TransmitData8(USART2, buf[num_of_byte++]);
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	1c5a      	adds	r2, r3, #1
 8000f74:	75fa      	strb	r2, [r7, #23]
 8000f76:	461a      	mov	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4809      	ldr	r0, [pc, #36]	; (8000fa8 <_write+0x58>)
 8000f82:	f7ff ffc5 	bl	8000f10 <LL_USART_TransmitData8>
  while (num_of_byte <= nbytes - 1){
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	dce9      	bgt.n	8000f62 <_write+0x12>
  }
  while (!LL_USART_IsActiveFlag_TC(USART2));
 8000f8e:	bf00      	nop
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <_write+0x58>)
 8000f92:	f7ff ff68 	bl	8000e66 <LL_USART_IsActiveFlag_TC>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0f9      	beq.n	8000f90 <_write+0x40>
  return nbytes;
 8000f9c:	687b      	ldr	r3, [r7, #4]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40004400 	.word	0x40004400

08000fac <decompose_data>:

void decompose_data(uint8_t message[], uint8_t length){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
	extern struct bluetooth_data data;
	extern int time;
	data.check_sum = (message[length - 1] - ASCII_OFFSET) * 10; //48 = ASCII offset
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	0092      	lsls	r2, r2, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	3320      	adds	r3, #32
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b49      	ldr	r3, [pc, #292]	; (80010f8 <decompose_data+0x14c>)
 8000fd2:	70da      	strb	r2, [r3, #3]
	data.check_sum += message[length] - ASCII_OFFSET;
 8000fd4:	4b48      	ldr	r3, [pc, #288]	; (80010f8 <decompose_data+0x14c>)
 8000fd6:	78da      	ldrb	r2, [r3, #3]
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	440b      	add	r3, r1
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	3b30      	subs	r3, #48	; 0x30
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b43      	ldr	r3, [pc, #268]	; (80010f8 <decompose_data+0x14c>)
 8000fea:	70da      	strb	r2, [r3, #3]
	uint8_t sum = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < length - 1; ++i){
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	e00b      	b.n	800100e <decompose_data+0x62>
		sum += message[i] - ASCII_OFFSET;
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	781a      	ldrb	r2, [r3, #0]
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	4413      	add	r3, r2
 8001002:	b2db      	uxtb	r3, r3
 8001004:	3b30      	subs	r3, #48	; 0x30
 8001006:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < length - 1; ++i){
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	3301      	adds	r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	3b01      	subs	r3, #1
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	429a      	cmp	r2, r3
 8001016:	dbee      	blt.n	8000ff6 <decompose_data+0x4a>
	}
	if(data.check_sum != sum){
 8001018:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <decompose_data+0x14c>)
 800101a:	78db      	ldrb	r3, [r3, #3]
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	429a      	cmp	r2, r3
 8001020:	d163      	bne.n	80010ea <decompose_data+0x13e>
		return;
	}
	data.device_address = message[0] - ASCII_OFFSET;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	3b30      	subs	r3, #48	; 0x30
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <decompose_data+0x14c>)
 800102c:	701a      	strb	r2, [r3, #0]
	if(data.device_address == 1){
 800102e:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <decompose_data+0x14c>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d130      	bne.n	8001098 <decompose_data+0xec>
		data.value1 = (message[1] - ASCII_OFFSET) * 10 + message[2] - ASCII_OFFSET;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3301      	adds	r3, #1
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	4413      	add	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	b2da      	uxtb	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3302      	adds	r3, #2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4413      	add	r3, r2
 800104e:	b2db      	uxtb	r3, r3
 8001050:	3b10      	subs	r3, #16
 8001052:	b2da      	uxtb	r2, r3
 8001054:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <decompose_data+0x14c>)
 8001056:	705a      	strb	r2, [r3, #1]
		data.value2 = (message[3] - ASCII_OFFSET) * 10 + message[4] - ASCII_OFFSET;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3303      	adds	r3, #3
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	0092      	lsls	r2, r2, #2
 8001062:	4413      	add	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	b2da      	uxtb	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3304      	adds	r3, #4
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	4413      	add	r3, r2
 8001070:	b2db      	uxtb	r3, r3
 8001072:	3b10      	subs	r3, #16
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <decompose_data+0x14c>)
 8001078:	709a      	strb	r2, [r3, #2]
		HandleTime(data.value1*60+data.value2);
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <decompose_data+0x14c>)
 800107c:	785b      	ldrb	r3, [r3, #1]
 800107e:	461a      	mov	r2, r3
 8001080:	4613      	mov	r3, r2
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	1a9b      	subs	r3, r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	461a      	mov	r2, r3
 800108a:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <decompose_data+0x14c>)
 800108c:	789b      	ldrb	r3, [r3, #2]
 800108e:	4413      	add	r3, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f001 fc2d 	bl	80028f0 <HandleTime>
 8001096:	e024      	b.n	80010e2 <decompose_data+0x136>
	}
	else if(data.device_address == 2){
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <decompose_data+0x14c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d10e      	bne.n	80010be <decompose_data+0x112>
		data.value1 = message[1] - ASCII_OFFSET;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3301      	adds	r3, #1
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	3b30      	subs	r3, #48	; 0x30
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <decompose_data+0x14c>)
 80010ac:	705a      	strb	r2, [r3, #1]
		data.value2 = message[2] - ASCII_OFFSET;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3302      	adds	r3, #2
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	3b30      	subs	r3, #48	; 0x30
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <decompose_data+0x14c>)
 80010ba:	709a      	strb	r2, [r3, #2]
 80010bc:	e011      	b.n	80010e2 <decompose_data+0x136>


	}
	else if(data.device_address == 3){
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <decompose_data+0x14c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d113      	bne.n	80010ee <decompose_data+0x142>
		data.value1 = message[1] - ASCII_OFFSET;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3301      	adds	r3, #1
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	3b30      	subs	r3, #48	; 0x30
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <decompose_data+0x14c>)
 80010d2:	705a      	strb	r2, [r3, #1]
		data.value2 = message[2] - ASCII_OFFSET;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3302      	adds	r3, #2
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	3b30      	subs	r3, #48	; 0x30
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <decompose_data+0x14c>)
 80010e0:	709a      	strb	r2, [r3, #2]
	}
	else {
		return;
	}
	data.flag = 1;
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <decompose_data+0x14c>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	711a      	strb	r2, [r3, #4]
 80010e8:	e002      	b.n	80010f0 <decompose_data+0x144>
		return;
 80010ea:	bf00      	nop
 80010ec:	e000      	b.n	80010f0 <decompose_data+0x144>
		return;
 80010ee:	bf00      	nop
}
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200000b8 	.word	0x200000b8

080010fc <usart_append>:


static void usart_append(uint8_t value){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]

	static char line_buffer_usart[LINE_MAX_LENGTH + 1];
	static uint8_t line_length_usart = 0;

	if(value == '\r')
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b0d      	cmp	r3, #13
 800110a:	d02f      	beq.n	800116c <usart_append+0x70>
		return;

	if(value == '\n'){
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b0a      	cmp	r3, #10
 8001110:	d11a      	bne.n	8001148 <usart_append+0x4c>
		line_buffer_usart[line_length_usart] = '\0';
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <usart_append+0x78>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <usart_append+0x7c>)
 800111a:	2100      	movs	r1, #0
 800111c:	5499      	strb	r1, [r3, r2]
		printf("Received: %s\r\n", line_buffer_usart);
 800111e:	4916      	ldr	r1, [pc, #88]	; (8001178 <usart_append+0x7c>)
 8001120:	4816      	ldr	r0, [pc, #88]	; (800117c <usart_append+0x80>)
 8001122:	f003 fc39 	bl	8004998 <iprintf>
		decompose_data((uint8_t*)line_buffer_usart, line_length_usart-1);
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <usart_append+0x78>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	3b01      	subs	r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4619      	mov	r1, r3
 8001130:	4811      	ldr	r0, [pc, #68]	; (8001178 <usart_append+0x7c>)
 8001132:	f7ff ff3b 	bl	8000fac <decompose_data>
		memset(line_buffer_usart, '\0', LINE_MAX_LENGTH);
 8001136:	2232      	movs	r2, #50	; 0x32
 8001138:	2100      	movs	r1, #0
 800113a:	480f      	ldr	r0, [pc, #60]	; (8001178 <usart_append+0x7c>)
 800113c:	f003 fc81 	bl	8004a42 <memset>
		line_length_usart = 0;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <usart_append+0x78>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	e012      	b.n	800116e <usart_append+0x72>
	}
	else
	{
		if (line_length_usart >= LINE_MAX_LENGTH) {
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <usart_append+0x78>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b31      	cmp	r3, #49	; 0x31
 800114e:	d902      	bls.n	8001156 <usart_append+0x5a>
			line_length_usart = 0;
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <usart_append+0x78>)
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
		}
		line_buffer_usart[line_length_usart++] = value;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <usart_append+0x78>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	b2d1      	uxtb	r1, r2
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <usart_append+0x78>)
 8001160:	7011      	strb	r1, [r2, #0]
 8001162:	4619      	mov	r1, r3
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <usart_append+0x7c>)
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	5453      	strb	r3, [r2, r1]
 800116a:	e000      	b.n	800116e <usart_append+0x72>
		return;
 800116c:	bf00      	nop
	}
}
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000080 	.word	0x20000080
 8001178:	20000084 	.word	0x20000084
 800117c:	080067f8 	.word	0x080067f8

08001180 <USART1_IRQHandler>:
	num_of_byte = 0;
}


void USART1_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	uint8_t received_byte;
	if(LL_USART_IsActiveFlag_RXNE(USART1))
 8001186:	4809      	ldr	r0, [pc, #36]	; (80011ac <USART1_IRQHandler+0x2c>)
 8001188:	f7ff fe5a 	bl	8000e40 <LL_USART_IsActiveFlag_RXNE>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d008      	beq.n	80011a4 <USART1_IRQHandler+0x24>
	{
	  received_byte = LL_USART_ReceiveData8(USART1);
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <USART1_IRQHandler+0x2c>)
 8001194:	f7ff feae 	bl	8000ef4 <LL_USART_ReceiveData8>
 8001198:	4603      	mov	r3, r0
 800119a:	71fb      	strb	r3, [r7, #7]
	  usart_append(received_byte);
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ffac 	bl	80010fc <usart_append>
	}
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40013800 	.word	0x40013800

080011b0 <usart1_init>:

void usart1_init(void){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08e      	sub	sp, #56	; 0x38
 80011b4:	af00      	add	r7, sp, #0

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	619a      	str	r2, [r3, #24]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
 80011d8:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 80011da:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80011de:	f7ff fdbf 	bl	8000d60 <LL_RCC_SetUSARTClockSource>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80011e2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80011e6:	f7ff fded 	bl	8000dc4 <LL_APB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f7ff fdd2 	bl	8000d94 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80011f0:	2002      	movs	r0, #2
 80011f2:	f7ff fdcf 	bl	8000d94 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80011f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011fc:	2302      	movs	r3, #2
 80011fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800120c:	2307      	movs	r3, #7
 800120e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001218:	f002 f96c 	bl	80034f4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800121c:	2340      	movs	r3, #64	; 0x40
 800121e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001220:	2302      	movs	r3, #2
 8001222:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001230:	2307      	movs	r3, #7
 8001232:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4619      	mov	r1, r3
 8001238:	481a      	ldr	r0, [pc, #104]	; (80012a4 <usart1_init+0xf4>)
 800123a:	f002 f95b 	bl	80034f4 <LL_GPIO_Init>

  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800123e:	f7ff fd05 	bl	8000c4c <__NVIC_GetPriorityGrouping>
 8001242:	4603      	mov	r3, r0
 8001244:	2200      	movs	r2, #0
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fd55 	bl	8000cf8 <NVIC_EncodePriority>
 800124e:	4603      	mov	r3, r0
 8001250:	4619      	mov	r1, r3
 8001252:	2025      	movs	r0, #37	; 0x25
 8001254:	f7ff fd26 	bl	8000ca4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001258:	2025      	movs	r0, #37	; 0x25
 800125a:	f7ff fd05 	bl	8000c68 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 9600;
 800125e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001262:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800126c:	2300      	movs	r3, #0
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001270:	230c      	movs	r3, #12
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001274:	2300      	movs	r3, #0
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001278:	2300      	movs	r3, #0
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	4809      	ldr	r0, [pc, #36]	; (80012a8 <usart1_init+0xf8>)
 8001284:	f003 fa12 	bl	80046ac <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001288:	4807      	ldr	r0, [pc, #28]	; (80012a8 <usart1_init+0xf8>)
 800128a:	f7ff fdc3 	bl	8000e14 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <usart1_init+0xf8>)
 8001290:	f7ff fdb0 	bl	8000df4 <LL_USART_Enable>
  LL_USART_EnableIT_RXNE(USART1);
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <usart1_init+0xf8>)
 8001296:	f7ff fe0c 	bl	8000eb2 <LL_USART_EnableIT_RXNE>

}
 800129a:	bf00      	nop
 800129c:	3738      	adds	r7, #56	; 0x38
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	48000400 	.word	0x48000400
 80012a8:	40013800 	.word	0x40013800

080012ac <__NVIC_GetPriorityGrouping>:
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_EnableIRQ>:
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db0b      	blt.n	80012f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 021f 	and.w	r2, r3, #31
 80012e0:	4907      	ldr	r1, [pc, #28]	; (8001300 <__NVIC_EnableIRQ+0x38>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2001      	movs	r0, #1
 80012ea:	fa00 f202 	lsl.w	r2, r0, r2
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000e100 	.word	0xe000e100

08001304 <__NVIC_SetPriority>:
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	; (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <LL_AHB1_GRP1_EnableClock>:
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013cc:	4907      	ldr	r1, [pc, #28]	; (80013ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4013      	ands	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013de:	68fb      	ldr	r3, [r7, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40021000 	.word	0x40021000

080013f0 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80013fe:	4a0c      	ldr	r2, [pc, #48]	; (8001430 <LL_DMA_EnableChannel+0x40>)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4908      	ldr	r1, [pc, #32]	; (8001430 <LL_DMA_EnableChannel+0x40>)
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	440a      	add	r2, r1
 8001414:	7812      	ldrb	r2, [r2, #0]
 8001416:	4611      	mov	r1, r2
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	440a      	add	r2, r1
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6013      	str	r3, [r2, #0]
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	08006808 	.word	0x08006808

08001434 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001442:	4a0c      	ldr	r2, [pc, #48]	; (8001474 <LL_DMA_DisableChannel+0x40>)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	4413      	add	r3, r2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <LL_DMA_DisableChannel+0x40>)
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	440a      	add	r2, r1
 8001458:	7812      	ldrb	r2, [r2, #0]
 800145a:	4611      	mov	r1, r2
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	440a      	add	r2, r1
 8001460:	f023 0301 	bic.w	r3, r3, #1
 8001464:	6013      	str	r3, [r2, #0]
}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	08006808 	.word	0x08006808

08001478 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <LL_DMA_SetDataTransferDirection+0x4c>)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	4413      	add	r3, r2
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800149c:	f023 0310 	bic.w	r3, r3, #16
 80014a0:	4908      	ldr	r1, [pc, #32]	; (80014c4 <LL_DMA_SetDataTransferDirection+0x4c>)
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	440a      	add	r2, r1
 80014a6:	7812      	ldrb	r2, [r2, #0]
 80014a8:	4611      	mov	r1, r2
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	440a      	add	r2, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80014b6:	bf00      	nop
 80014b8:	371c      	adds	r7, #28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	08006808 	.word	0x08006808

080014c8 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b087      	sub	sp, #28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80014d8:	4a0d      	ldr	r2, [pc, #52]	; (8001510 <LL_DMA_SetMode+0x48>)
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	4413      	add	r3, r2
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	4413      	add	r3, r2
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 0220 	bic.w	r2, r3, #32
 80014ec:	4908      	ldr	r1, [pc, #32]	; (8001510 <LL_DMA_SetMode+0x48>)
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	440b      	add	r3, r1
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	440b      	add	r3, r1
 80014fa:	4619      	mov	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
             Mode);
}
 8001502:	bf00      	nop
 8001504:	371c      	adds	r7, #28
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	08006808 	.word	0x08006808

08001514 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001514:	b480      	push	{r7}
 8001516:	b087      	sub	sp, #28
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <LL_DMA_SetPeriphIncMode+0x48>)
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	4413      	add	r3, r2
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	4413      	add	r3, r2
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001538:	4908      	ldr	r1, [pc, #32]	; (800155c <LL_DMA_SetPeriphIncMode+0x48>)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	440b      	add	r3, r1
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	440b      	add	r3, r1
 8001546:	4619      	mov	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4313      	orrs	r3, r2
 800154c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800154e:	bf00      	nop
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	08006808 	.word	0x08006808

08001560 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8001570:	4a0d      	ldr	r2, [pc, #52]	; (80015a8 <LL_DMA_SetMemoryIncMode+0x48>)
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	4413      	add	r3, r2
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	4413      	add	r3, r2
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001584:	4908      	ldr	r1, [pc, #32]	; (80015a8 <LL_DMA_SetMemoryIncMode+0x48>)
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	440b      	add	r3, r1
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4619      	mov	r1, r3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	440b      	add	r3, r1
 8001592:	4619      	mov	r1, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800159a:	bf00      	nop
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	08006808 	.word	0x08006808

080015ac <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80015bc:	4a0d      	ldr	r2, [pc, #52]	; (80015f4 <LL_DMA_SetPeriphSize+0x48>)
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	4413      	add	r3, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	461a      	mov	r2, r3
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	4413      	add	r3, r2
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80015d0:	4908      	ldr	r1, [pc, #32]	; (80015f4 <LL_DMA_SetPeriphSize+0x48>)
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	440b      	add	r3, r1
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	440b      	add	r3, r1
 80015de:	4619      	mov	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80015e6:	bf00      	nop
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	08006808 	.word	0x08006808

080015f8 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <LL_DMA_SetMemorySize+0x48>)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	4413      	add	r3, r2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	4413      	add	r3, r2
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800161c:	4908      	ldr	r1, [pc, #32]	; (8001640 <LL_DMA_SetMemorySize+0x48>)
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	440b      	add	r3, r1
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	440b      	add	r3, r1
 800162a:	4619      	mov	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8001632:	bf00      	nop
 8001634:	371c      	adds	r7, #28
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	08006808 	.word	0x08006808

08001644 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001644:	b480      	push	{r7}
 8001646:	b087      	sub	sp, #28
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8001654:	4a0d      	ldr	r2, [pc, #52]	; (800168c <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	4413      	add	r3, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	4413      	add	r3, r2
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001668:	4908      	ldr	r1, [pc, #32]	; (800168c <LL_DMA_SetChannelPriorityLevel+0x48>)
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	440b      	add	r3, r1
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	440b      	add	r3, r1
 8001676:	4619      	mov	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
             Priority);
}
 800167e:	bf00      	nop
 8001680:	371c      	adds	r7, #28
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	08006808 	.word	0x08006808

08001690 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 80016a0:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <LL_DMA_SetDataLength+0x48>)
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	4413      	add	r3, r2
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	4413      	add	r3, r2
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	0c1b      	lsrs	r3, r3, #16
 80016b2:	041b      	lsls	r3, r3, #16
 80016b4:	4908      	ldr	r1, [pc, #32]	; (80016d8 <LL_DMA_SetDataLength+0x48>)
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	440a      	add	r2, r1
 80016ba:	7812      	ldrb	r2, [r2, #0]
 80016bc:	4611      	mov	r1, r2
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	440a      	add	r2, r1
 80016c2:	4611      	mov	r1, r2
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80016ca:	bf00      	nop
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	08006808 	.word	0x08006808

080016dc <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	2b10      	cmp	r3, #16
 80016f2:	d114      	bne.n	800171e <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 80016f4:	4a17      	ldr	r2, [pc, #92]	; (8001754 <LL_DMA_ConfigAddresses+0x78>)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	4413      	add	r3, r2
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	4413      	add	r3, r2
 8001702:	461a      	mov	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8001708:	4a12      	ldr	r2, [pc, #72]	; (8001754 <LL_DMA_ConfigAddresses+0x78>)
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	4413      	add	r3, r2
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	4413      	add	r3, r2
 8001716:	461a      	mov	r2, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
  }
}
 800171c:	e013      	b.n	8001746 <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 800171e:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <LL_DMA_ConfigAddresses+0x78>)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	4413      	add	r3, r2
 800172c:	461a      	mov	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 8001732:	4a08      	ldr	r2, [pc, #32]	; (8001754 <LL_DMA_ConfigAddresses+0x78>)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4413      	add	r3, r2
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	4413      	add	r3, r2
 8001740:	461a      	mov	r2, r3
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	60d3      	str	r3, [r2, #12]
}
 8001746:	bf00      	nop
 8001748:	371c      	adds	r7, #28
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	08006808 	.word	0x08006808

08001758 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	33a8      	adds	r3, #168	; 0xa8
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	210f      	movs	r1, #15
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	401a      	ands	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	210f      	movs	r1, #15
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	617b      	str	r3, [r7, #20]
  return result;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <LL_DMA_SetPeriphRequest+0x42>
    return 32U;
 8001796:	2320      	movs	r3, #32
 8001798:	e003      	b.n	80017a2 <LL_DMA_SetPeriphRequest+0x4a>
  return __builtin_clz(value);
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	4619      	mov	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	408b      	lsls	r3, r1
 80017a8:	68f9      	ldr	r1, [r7, #12]
 80017aa:	31a8      	adds	r1, #168	; 0xa8
 80017ac:	4313      	orrs	r3, r2
 80017ae:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << ((Channel) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
}
 80017b0:	bf00      	nop
 80017b2:	3724      	adds	r7, #36	; 0x24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6)) ? 1UL : 0UL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017d0:	d101      	bne.n	80017d6 <LL_DMA_IsActiveFlag_TC6+0x1a>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <LL_DMA_IsActiveFlag_TC6+0x1c>
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_DMA_IsActiveFlag_TE6>:
  * @rmtoll ISR          TEIF6         LL_DMA_IsActiveFlag_TE6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE6(DMA_TypeDef *DMAx)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF6) == (DMA_ISR_TEIF6)) ? 1UL : 0UL);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80017f8:	d101      	bne.n	80017fe <LL_DMA_IsActiveFlag_TE6+0x1a>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <LL_DMA_IsActiveFlag_TE6+0x1c>
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800181a:	605a      	str	r2, [r3, #4]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8001836:	4a0c      	ldr	r2, [pc, #48]	; (8001868 <LL_DMA_EnableIT_TC+0x40>)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	4413      	add	r3, r2
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <LL_DMA_EnableIT_TC+0x40>)
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	440a      	add	r2, r1
 800184c:	7812      	ldrb	r2, [r2, #0]
 800184e:	4611      	mov	r1, r2
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	440a      	add	r2, r1
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6013      	str	r3, [r2, #0]
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	08006808 	.word	0x08006808

0800186c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 800187a:	4a0c      	ldr	r2, [pc, #48]	; (80018ac <LL_DMA_EnableIT_TE+0x40>)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	4413      	add	r3, r2
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <LL_DMA_EnableIT_TE+0x40>)
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	440a      	add	r2, r1
 8001890:	7812      	ldrb	r2, [r2, #0]
 8001892:	4611      	mov	r1, r2
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	440a      	add	r2, r1
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	6013      	str	r3, [r2, #0]
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	08006808 	.word	0x08006808

080018b0 <LL_DMA_DisableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80018be:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <LL_DMA_DisableIT_TC+0x40>)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4908      	ldr	r1, [pc, #32]	; (80018f0 <LL_DMA_DisableIT_TC+0x40>)
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	440a      	add	r2, r1
 80018d4:	7812      	ldrb	r2, [r2, #0]
 80018d6:	4611      	mov	r1, r2
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	440a      	add	r2, r1
 80018dc:	f023 0302 	bic.w	r3, r3, #2
 80018e0:	6013      	str	r3, [r2, #0]
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	08006808 	.word	0x08006808

080018f4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	601a      	str	r2, [r3, #0]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1a      	ldr	r2, [r3, #32]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	621a      	str	r2, [r3, #32]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_TIM_EnableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_EnableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	60da      	str	r2, [r3, #12]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <enable_timer3>:
 *  Created on: Mar 14, 2024
 *      Author: patry
 */
#include "main.h"

void enable_timer3(){
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	LL_TIM_EnableDMAReq_CC1(TIM3);
 800195c:	4805      	ldr	r0, [pc, #20]	; (8001974 <enable_timer3+0x1c>)
 800195e:	f7ff ffea 	bl	8001936 <LL_TIM_EnableDMAReq_CC1>
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 8001962:	2101      	movs	r1, #1
 8001964:	4803      	ldr	r0, [pc, #12]	; (8001974 <enable_timer3+0x1c>)
 8001966:	f7ff ffd5 	bl	8001914 <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM3);
 800196a:	4802      	ldr	r0, [pc, #8]	; (8001974 <enable_timer3+0x1c>)
 800196c:	f7ff ffc2 	bl	80018f4 <LL_TIM_EnableCounter>

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40000400 	.word	0x40000400

08001978 <generate_signal>:


void generate_signal(uint8_t* data, uint32_t data_length){
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af02      	add	r7, sp, #8
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6, (uint32_t)data, (uint32_t)&TIM3->CCR1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	2310      	movs	r3, #16
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <generate_signal+0x3c>)
 800198a:	2105      	movs	r1, #5
 800198c:	480a      	ldr	r0, [pc, #40]	; (80019b8 <generate_signal+0x40>)
 800198e:	f7ff fea5 	bl	80016dc <LL_DMA_ConfigAddresses>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, data_length);
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	2105      	movs	r1, #5
 8001996:	4808      	ldr	r0, [pc, #32]	; (80019b8 <generate_signal+0x40>)
 8001998:	f7ff fe7a 	bl	8001690 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 800199c:	2105      	movs	r1, #5
 800199e:	4806      	ldr	r0, [pc, #24]	; (80019b8 <generate_signal+0x40>)
 80019a0:	f7ff ff42 	bl	8001828 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80019a4:	2105      	movs	r1, #5
 80019a6:	4804      	ldr	r0, [pc, #16]	; (80019b8 <generate_signal+0x40>)
 80019a8:	f7ff fd22 	bl	80013f0 <LL_DMA_EnableChannel>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40000434 	.word	0x40000434
 80019b8:	40020000 	.word	0x40020000

080019bc <dma_init>:


void dma_init(void){
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f7ff fcfd 	bl	80013c0 <LL_AHB1_GRP1_EnableClock>
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80019c6:	f7ff fc71 	bl	80012ac <__NVIC_GetPriorityGrouping>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2200      	movs	r2, #0
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fcc1 	bl	8001358 <NVIC_EncodePriority>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4619      	mov	r1, r3
 80019da:	2010      	movs	r0, #16
 80019dc:	f7ff fc92 	bl	8001304 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80019e0:	2010      	movs	r0, #16
 80019e2:	f7ff fc71 	bl	80012c8 <__NVIC_EnableIRQ>

  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_5);
 80019e6:	2205      	movs	r2, #5
 80019e8:	2105      	movs	r1, #5
 80019ea:	4816      	ldr	r0, [pc, #88]	; (8001a44 <dma_init+0x88>)
 80019ec:	f7ff feb4 	bl	8001758 <LL_DMA_SetPeriphRequest>
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80019f0:	2210      	movs	r2, #16
 80019f2:	2105      	movs	r1, #5
 80019f4:	4813      	ldr	r0, [pc, #76]	; (8001a44 <dma_init+0x88>)
 80019f6:	f7ff fd3f 	bl	8001478 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2105      	movs	r1, #5
 80019fe:	4811      	ldr	r0, [pc, #68]	; (8001a44 <dma_init+0x88>)
 8001a00:	f7ff fe20 	bl	8001644 <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2105      	movs	r1, #5
 8001a08:	480e      	ldr	r0, [pc, #56]	; (8001a44 <dma_init+0x88>)
 8001a0a:	f7ff fd5d 	bl	80014c8 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2105      	movs	r1, #5
 8001a12:	480c      	ldr	r0, [pc, #48]	; (8001a44 <dma_init+0x88>)
 8001a14:	f7ff fd7e 	bl	8001514 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	2105      	movs	r1, #5
 8001a1c:	4809      	ldr	r0, [pc, #36]	; (8001a44 <dma_init+0x88>)
 8001a1e:	f7ff fd9f 	bl	8001560 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_HALFWORD);
 8001a22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a26:	2105      	movs	r1, #5
 8001a28:	4806      	ldr	r0, [pc, #24]	; (8001a44 <dma_init+0x88>)
 8001a2a:	f7ff fdbf 	bl	80015ac <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2105      	movs	r1, #5
 8001a32:	4804      	ldr	r0, [pc, #16]	; (8001a44 <dma_init+0x88>)
 8001a34:	f7ff fde0 	bl	80015f8 <LL_DMA_SetMemorySize>

	LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_6);
 8001a38:	2105      	movs	r1, #5
 8001a3a:	4802      	ldr	r0, [pc, #8]	; (8001a44 <dma_init+0x88>)
 8001a3c:	f7ff ff16 	bl	800186c <LL_DMA_EnableIT_TE>

}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40020000 	.word	0x40020000

08001a48 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == 1){
 8001a4c:	480b      	ldr	r0, [pc, #44]	; (8001a7c <DMA1_Channel6_IRQHandler+0x34>)
 8001a4e:	f7ff feb5 	bl	80017bc <LL_DMA_IsActiveFlag_TC6>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d10b      	bne.n	8001a70 <DMA1_Channel6_IRQHandler+0x28>
		LL_DMA_ClearFlag_TC6(DMA1);
 8001a58:	4808      	ldr	r0, [pc, #32]	; (8001a7c <DMA1_Channel6_IRQHandler+0x34>)
 8001a5a:	f7ff fed7 	bl	800180c <LL_DMA_ClearFlag_TC6>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001a5e:	2105      	movs	r1, #5
 8001a60:	4806      	ldr	r0, [pc, #24]	; (8001a7c <DMA1_Channel6_IRQHandler+0x34>)
 8001a62:	f7ff fce7 	bl	8001434 <LL_DMA_DisableChannel>
		LL_DMA_DisableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8001a66:	2105      	movs	r1, #5
 8001a68:	4804      	ldr	r0, [pc, #16]	; (8001a7c <DMA1_Channel6_IRQHandler+0x34>)
 8001a6a:	f7ff ff21 	bl	80018b0 <LL_DMA_DisableIT_TC>
	}
	else if(LL_DMA_IsActiveFlag_TE6(DMA1)){
		//nananana
	}

}
 8001a6e:	e002      	b.n	8001a76 <DMA1_Channel6_IRQHandler+0x2e>
	else if(LL_DMA_IsActiveFlag_TE6(DMA1)){
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <DMA1_Channel6_IRQHandler+0x34>)
 8001a72:	f7ff feb7 	bl	80017e4 <LL_DMA_IsActiveFlag_TE6>
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40020000 	.word	0x40020000

08001a80 <WS2812_Send>:
//
#include "led_set.h"
//
//
void WS2812_Send (struct led_data *led, uint8_t brightness){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	70fb      	strb	r3, [r7, #3]
	uint32_t indx=0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
	uint32_t color;
	Set_Brightness(led, brightness);
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	4619      	mov	r1, r3
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f877 	bl	8001b88 <Set_Brightness>

	for (int i=0; i<50; i++){
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	e00b      	b.n	8001ab8 <WS2812_Send+0x38>
		led->pwmData[indx] = 0;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	3220      	adds	r2, #32
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		indx++;
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<50; i++){
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	61bb      	str	r3, [r7, #24]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2b31      	cmp	r3, #49	; 0x31
 8001abc:	ddf0      	ble.n	8001aa0 <WS2812_Send+0x20>
	}

	for (int i= 0; i<MAX_LED; i++){
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	e03e      	b.n	8001b42 <WS2812_Send+0xc2>
		color = ((led->LED_Mod[i*4 + 1]<<16) | (led->LED_Mod[i*4 + 2]<<8) | (led->LED_Mod[i*4 + 3]));
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	3301      	adds	r3, #1
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad2:	041a      	lsls	r2, r3, #16
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	3302      	adds	r3, #2
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	440b      	add	r3, r1
 8001ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	0092      	lsls	r2, r2, #2
 8001aea:	3203      	adds	r2, #3
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	440a      	add	r2, r1
 8001af0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
		for (int i=23; i>=0; i--){
 8001af8:	2317      	movs	r3, #23
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	e01b      	b.n	8001b36 <WS2812_Send+0xb6>
			if (color&(1<<i))
 8001afe:	2201      	movs	r2, #1
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d006      	beq.n	8001b1e <WS2812_Send+0x9e>
				led->pwmData[indx] = 27;  // 2/3 of 90
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	3220      	adds	r2, #32
 8001b16:	211b      	movs	r1, #27
 8001b18:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001b1c:	e005      	b.n	8001b2a <WS2812_Send+0xaa>
		else
				led->pwmData[indx] = 13;  // 1/3 of 90
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	3220      	adds	r2, #32
 8001b24:	210d      	movs	r1, #13
 8001b26:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			indx++;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]
		for (int i=23; i>=0; i--){
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	613b      	str	r3, [r7, #16]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	dae0      	bge.n	8001afe <WS2812_Send+0x7e>
	for (int i= 0; i<MAX_LED; i++){
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	2b07      	cmp	r3, #7
 8001b46:	ddbd      	ble.n	8001ac4 <WS2812_Send+0x44>
		}
	}
for (int i=0; i<50; i++){
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	e00b      	b.n	8001b66 <WS2812_Send+0xe6>
		led->pwmData[indx] = 0;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	3220      	adds	r2, #32
 8001b54:	2100      	movs	r1, #0
 8001b56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		indx++;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
for (int i=0; i<50; i++){
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3301      	adds	r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b31      	cmp	r3, #49	; 0x31
 8001b6a:	ddf0      	ble.n	8001b4e <WS2812_Send+0xce>
	}

	generate_signal((uint8_t*)led->pwmData, sizeof(led->pwmData));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3340      	adds	r3, #64	; 0x40
 8001b70:	f44f 7112 	mov.w	r1, #584	; 0x248
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff feff 	bl	8001978 <generate_signal>
}
 8001b7a:	bf00      	nop
 8001b7c:	3720      	adds	r7, #32
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	0000      	movs	r0, r0
 8001b84:	0000      	movs	r0, r0
	...

08001b88 <Set_Brightness>:

void Set_Brightness(struct led_data *led, uint8_t brightness){  // 0 - 45
 8001b88:	b5b0      	push	{r4, r5, r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
	if (brightness > 45)
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	2b2d      	cmp	r3, #45	; 0x2d
 8001b98:	d901      	bls.n	8001b9e <Set_Brightness+0x16>
		brightness = 45;
 8001b9a:	232d      	movs	r3, #45	; 0x2d
 8001b9c:	70fb      	strb	r3, [r7, #3]

	for (int i=0; i<MAX_LED; i++){
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e062      	b.n	8001c6a <Set_Brightness+0xe2>
		led->LED_Mod[i*4 + 0] = led->LED_Data[i*4 + 0];
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	009a      	lsls	r2, r3, #2
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	5c89      	ldrb	r1, [r1, r2]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	460a      	mov	r2, r1
 8001bb6:	f883 2020 	strb.w	r2, [r3, #32]
		for (int j=1; j<4; j++){
 8001bba:	2301      	movs	r3, #1
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	e04e      	b.n	8001c5e <Set_Brightness+0xd6>
			float angle = 90-brightness;  // in degrees
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bce:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f7fe fcb0 	bl	8000538 <__aeabi_f2d>
 8001bd8:	a32a      	add	r3, pc, #168	; (adr r3, 8001c84 <Set_Brightness+0xfc>)
 8001bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bde:	f7fe fd03 	bl	80005e8 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <Set_Brightness+0xf8>)
 8001bf0:	f7fe fe24 	bl	800083c <__aeabi_ddiv>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f7fe ffd6 	bl	8000bac <__aeabi_d2f>
 8001c00:	4603      	mov	r3, r0
 8001c02:	60fb      	str	r3, [r7, #12]
			led->LED_Mod[i*4 + j] = (led->LED_Data[i*4 + j])/(tan(angle));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	009a      	lsls	r2, r3, #2
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc7f 	bl	8000514 <__aeabi_i2d>
 8001c16:	4604      	mov	r4, r0
 8001c18:	460d      	mov	r5, r1
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7fe fc8c 	bl	8000538 <__aeabi_f2d>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	ec43 2b10 	vmov	d0, r2, r3
 8001c28:	f003 fd3a 	bl	80056a0 <tan>
 8001c2c:	ec53 2b10 	vmov	r2, r3, d0
 8001c30:	4620      	mov	r0, r4
 8001c32:	4629      	mov	r1, r5
 8001c34:	f7fe fe02 	bl	800083c <__aeabi_ddiv>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	009a      	lsls	r2, r3, #2
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	18d4      	adds	r4, r2, r3
 8001c48:	f7fe ff90 	bl	8000b6c <__aeabi_d2uiz>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4423      	add	r3, r4
 8001c54:	f883 2020 	strb.w	r2, [r3, #32]
		for (int j=1; j<4; j++){
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	ddad      	ble.n	8001bc0 <Set_Brightness+0x38>
	for (int i=0; i<MAX_LED; i++){
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3301      	adds	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b07      	cmp	r3, #7
 8001c6e:	dd99      	ble.n	8001ba4 <Set_Brightness+0x1c>
		}
	}
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	f3af 8000 	nop.w
 8001c80:	40668000 	.word	0x40668000
 8001c84:	53c8d4f1 	.word	0x53c8d4f1
 8001c88:	400921fb 	.word	0x400921fb

08001c8c <Set_LED>:


void Set_LED (struct led_data *led, int LEDnum, int Red, int Green, int Blue){
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
	led->LED_Data[LEDnum*4 + 0] = LEDnum;
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	b2d1      	uxtb	r1, r2
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	54d1      	strb	r1, [r2, r3]
	led->LED_Data[LEDnum*4 + 1] = Green;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	3301      	adds	r3, #1
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	b2d1      	uxtb	r1, r2
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	54d1      	strb	r1, [r2, r3]
	led->LED_Data[LEDnum*4 + 2] = Red;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	3302      	adds	r3, #2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	b2d1      	uxtb	r1, r2
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	54d1      	strb	r1, [r2, r3]
	led->LED_Data[LEDnum*4 + 3] = Blue;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	3303      	adds	r3, #3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	b2d1      	uxtb	r1, r2
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	54d1      	strb	r1, [r2, r3]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <Reset_LED>:


void Reset_LED (struct led_data *led){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	for (int i=0; i<MAX_LED; i++){
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	e01a      	b.n	8001d20 <Reset_LED+0x44>
		led->LED_Data[i*4 + 0] = i;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	b2d1      	uxtb	r1, r2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	54d1      	strb	r1, [r2, r3]
		led->LED_Data[i*4 + 1] = 0;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	2100      	movs	r1, #0
 8001d00:	54d1      	strb	r1, [r2, r3]
		led->LED_Data[i*4 + 2] = 0;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	3302      	adds	r3, #2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	54d1      	strb	r1, [r2, r3]
		led->LED_Data[i*4 + 3] = 0;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	3303      	adds	r3, #3
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	2100      	movs	r1, #0
 8001d18:	54d1      	strb	r1, [r2, r3]
	for (int i=0; i<MAX_LED; i++){
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b07      	cmp	r3, #7
 8001d24:	dde1      	ble.n	8001cea <Reset_LED+0xe>
	}
	WS2812_Send(led, 0);
 8001d26:	2100      	movs	r1, #0
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff fea9 	bl	8001a80 <WS2812_Send>
}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <__NVIC_SetPriorityGrouping>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d54:	4013      	ands	r3, r2
 8001d56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	60d3      	str	r3, [r2, #12]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <__NVIC_GetPriorityGrouping>:
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d84:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <__NVIC_GetPriorityGrouping+0x18>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	f003 0307 	and.w	r3, r3, #7
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <__NVIC_EnableIRQ>:
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	db0b      	blt.n	8001dc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	f003 021f 	and.w	r2, r3, #31
 8001db4:	4907      	ldr	r1, [pc, #28]	; (8001dd4 <__NVIC_EnableIRQ+0x38>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	095b      	lsrs	r3, r3, #5
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000e100 	.word	0xe000e100

08001dd8 <__NVIC_SetPriority>:
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	db0a      	blt.n	8001e02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	490c      	ldr	r1, [pc, #48]	; (8001e24 <__NVIC_SetPriority+0x4c>)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	0112      	lsls	r2, r2, #4
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e00:	e00a      	b.n	8001e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4908      	ldr	r1, [pc, #32]	; (8001e28 <__NVIC_SetPriority+0x50>)
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	3b04      	subs	r3, #4
 8001e10:	0112      	lsls	r2, r2, #4
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	440b      	add	r3, r1
 8001e16:	761a      	strb	r2, [r3, #24]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000e100 	.word	0xe000e100
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <NVIC_EncodePriority>:
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f1c3 0307 	rsb	r3, r3, #7
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	bf28      	it	cs
 8001e4a:	2304      	movcs	r3, #4
 8001e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3304      	adds	r3, #4
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d902      	bls.n	8001e5c <NVIC_EncodePriority+0x30>
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3b03      	subs	r3, #3
 8001e5a:	e000      	b.n	8001e5e <NVIC_EncodePriority+0x32>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	f04f 32ff 	mov.w	r2, #4294967295
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	401a      	ands	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e74:	f04f 31ff 	mov.w	r1, #4294967295
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	43d9      	mvns	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	4313      	orrs	r3, r2
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3724      	adds	r7, #36	; 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <LL_RCC_MSI_Enable>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <LL_RCC_MSI_Enable+0x1c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <LL_RCC_MSI_Enable+0x1c>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000

08001eb4 <LL_RCC_MSI_IsReady>:
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <LL_RCC_MSI_IsReady+0x20>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d101      	bne.n	8001ec8 <LL_RCC_MSI_IsReady+0x14>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <LL_RCC_MSI_IsReady+0x16>
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <LL_RCC_MSI_EnableRangeSelection>:
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8001ee2:	f043 0308 	orr.w	r3, r3, #8
 8001ee6:	6013      	str	r3, [r2, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <LL_RCC_MSI_SetRange>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <LL_RCC_MSI_SetRange+0x24>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f08:	4904      	ldr	r1, [pc, #16]	; (8001f1c <LL_RCC_MSI_SetRange+0x24>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40021000 	.word	0x40021000

08001f20 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	021b      	lsls	r3, r3, #8
 8001f34:	4904      	ldr	r1, [pc, #16]	; (8001f48 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000

08001f4c <LL_RCC_SetSysClkSource>:
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <LL_RCC_SetSysClkSource+0x24>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f023 0203 	bic.w	r2, r3, #3
 8001f5c:	4904      	ldr	r1, [pc, #16]	; (8001f70 <LL_RCC_SetSysClkSource+0x24>)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	608b      	str	r3, [r1, #8]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	40021000 	.word	0x40021000

08001f74 <LL_RCC_GetSysClkSource>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <LL_RCC_GetSysClkSource+0x18>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 030c 	and.w	r3, r3, #12
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000

08001f90 <LL_RCC_SetAHBPrescaler>:
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <LL_RCC_SetAHBPrescaler+0x24>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa0:	4904      	ldr	r1, [pc, #16]	; (8001fb4 <LL_RCC_SetAHBPrescaler+0x24>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <LL_RCC_SetAPB1Prescaler>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <LL_RCC_SetAPB1Prescaler+0x24>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc8:	4904      	ldr	r1, [pc, #16]	; (8001fdc <LL_RCC_SetAPB1Prescaler+0x24>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	608b      	str	r3, [r1, #8]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	40021000 	.word	0x40021000

08001fe0 <LL_RCC_SetAPB2Prescaler>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ff0:	4904      	ldr	r1, [pc, #16]	; (8002004 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	608b      	str	r3, [r1, #8]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	40021000 	.word	0x40021000

08002008 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <LL_RCC_PLL_Enable+0x1c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <LL_RCC_PLL_Enable+0x1c>)
 8002012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000

08002028 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <LL_RCC_PLL_IsReady+0x24>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002034:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002038:	d101      	bne.n	800203e <LL_RCC_PLL_IsReady+0x16>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <LL_RCC_PLL_IsReady+0x18>
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000

08002050 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8002064:	4013      	ands	r3, r2
 8002066:	68f9      	ldr	r1, [r7, #12]
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	4311      	orrs	r1, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	0212      	lsls	r2, r2, #8
 8002070:	4311      	orrs	r1, r2
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	4904      	ldr	r1, [pc, #16]	; (8002088 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8002078:	4313      	orrs	r3, r2
 800207a:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	40021000 	.word	0x40021000
 800208c:	f9ff808c 	.word	0xf9ff808c

08002090 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800209a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800209e:	60d3      	str	r3, [r2, #12]
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000

080020b0 <LL_AHB2_GRP1_EnableClock>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80020ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020bc:	4907      	ldr	r1, [pc, #28]	; (80020dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80020c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4013      	ands	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020ce:	68fb      	ldr	r3, [r7, #12]
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	40021000 	.word	0x40021000

080020e0 <LL_APB1_GRP1_EnableClock>:
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <LL_APB1_GRP1_EnableClock+0x2c>)
 80020ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020ec:	4907      	ldr	r1, [pc, #28]	; (800210c <LL_APB1_GRP1_EnableClock+0x2c>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <LL_APB1_GRP1_EnableClock+0x2c>)
 80020f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4013      	ands	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020fe:	68fb      	ldr	r3, [r7, #12]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	40021000 	.word	0x40021000

08002110 <LL_APB2_GRP1_EnableClock>:
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <LL_APB2_GRP1_EnableClock+0x2c>)
 800211a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800211c:	4907      	ldr	r1, [pc, #28]	; (800213c <LL_APB2_GRP1_EnableClock+0x2c>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4313      	orrs	r3, r2
 8002122:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002126:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4013      	ands	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800212e:	68fb      	ldr	r3, [r7, #12]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	40021000 	.word	0x40021000

08002140 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <LL_FLASH_SetLatency+0x24>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 0207 	bic.w	r2, r3, #7
 8002150:	4904      	ldr	r1, [pc, #16]	; (8002164 <LL_FLASH_SetLatency+0x24>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40022000 	.word	0x40022000

08002168 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <LL_FLASH_GetLatency+0x18>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40022000 	.word	0x40022000

08002184 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002194:	4904      	ldr	r1, [pc, #16]	; (80021a8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4313      	orrs	r3, r2
 800219a:	600b      	str	r3, [r1, #0]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	40007000 	.word	0x40007000

080021ac <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021bc:	d101      	bne.n	80021c2 <LL_PWR_IsActiveFlag_VOS+0x16>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <LL_PWR_IsActiveFlag_VOS+0x18>
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40007000 	.word	0x40007000

080021d4 <LL_TIM_EnableCounter>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f043 0201 	orr.w	r2, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	601a      	str	r2, [r3, #0]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_TIM_SetCounterMode>:
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	601a      	str	r2, [r3, #0]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <LL_TIM_DisableARRPreload>:
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	601a      	str	r2, [r3, #0]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_TIM_SetAutoReload>:
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <LL_TIM_OC_DisableFast>:
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d028      	beq.n	80022ba <LL_TIM_OC_DisableFast+0x62>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b04      	cmp	r3, #4
 800226c:	d023      	beq.n	80022b6 <LL_TIM_OC_DisableFast+0x5e>
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b10      	cmp	r3, #16
 8002272:	d01e      	beq.n	80022b2 <LL_TIM_OC_DisableFast+0x5a>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b40      	cmp	r3, #64	; 0x40
 8002278:	d019      	beq.n	80022ae <LL_TIM_OC_DisableFast+0x56>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002280:	d013      	beq.n	80022aa <LL_TIM_OC_DisableFast+0x52>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002288:	d00d      	beq.n	80022a6 <LL_TIM_OC_DisableFast+0x4e>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002290:	d007      	beq.n	80022a2 <LL_TIM_OC_DisableFast+0x4a>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002298:	d101      	bne.n	800229e <LL_TIM_OC_DisableFast+0x46>
 800229a:	2307      	movs	r3, #7
 800229c:	e00e      	b.n	80022bc <LL_TIM_OC_DisableFast+0x64>
 800229e:	2308      	movs	r3, #8
 80022a0:	e00c      	b.n	80022bc <LL_TIM_OC_DisableFast+0x64>
 80022a2:	2306      	movs	r3, #6
 80022a4:	e00a      	b.n	80022bc <LL_TIM_OC_DisableFast+0x64>
 80022a6:	2305      	movs	r3, #5
 80022a8:	e008      	b.n	80022bc <LL_TIM_OC_DisableFast+0x64>
 80022aa:	2304      	movs	r3, #4
 80022ac:	e006      	b.n	80022bc <LL_TIM_OC_DisableFast+0x64>
 80022ae:	2303      	movs	r3, #3
 80022b0:	e004      	b.n	80022bc <LL_TIM_OC_DisableFast+0x64>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e002      	b.n	80022bc <LL_TIM_OC_DisableFast+0x64>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <LL_TIM_OC_DisableFast+0x64>
 80022ba:	2300      	movs	r3, #0
 80022bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3318      	adds	r3, #24
 80022c2:	4619      	mov	r1, r3
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <LL_TIM_OC_DisableFast+0x9c>)
 80022c8:	5cd3      	ldrb	r3, [r2, r3]
 80022ca:	440b      	add	r3, r1
 80022cc:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	4908      	ldr	r1, [pc, #32]	; (80022f8 <LL_TIM_OC_DisableFast+0xa0>)
 80022d6:	5ccb      	ldrb	r3, [r1, r3]
 80022d8:	4619      	mov	r1, r3
 80022da:	2304      	movs	r3, #4
 80022dc:	408b      	lsls	r3, r1
 80022de:	43db      	mvns	r3, r3
 80022e0:	401a      	ands	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	601a      	str	r2, [r3, #0]
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	08006810 	.word	0x08006810
 80022f8:	0800681c 	.word	0x0800681c

080022fc <LL_TIM_OC_EnablePreload>:
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d028      	beq.n	800235e <LL_TIM_OC_EnablePreload+0x62>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2b04      	cmp	r3, #4
 8002310:	d023      	beq.n	800235a <LL_TIM_OC_EnablePreload+0x5e>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b10      	cmp	r3, #16
 8002316:	d01e      	beq.n	8002356 <LL_TIM_OC_EnablePreload+0x5a>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b40      	cmp	r3, #64	; 0x40
 800231c:	d019      	beq.n	8002352 <LL_TIM_OC_EnablePreload+0x56>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002324:	d013      	beq.n	800234e <LL_TIM_OC_EnablePreload+0x52>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232c:	d00d      	beq.n	800234a <LL_TIM_OC_EnablePreload+0x4e>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002334:	d007      	beq.n	8002346 <LL_TIM_OC_EnablePreload+0x4a>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233c:	d101      	bne.n	8002342 <LL_TIM_OC_EnablePreload+0x46>
 800233e:	2307      	movs	r3, #7
 8002340:	e00e      	b.n	8002360 <LL_TIM_OC_EnablePreload+0x64>
 8002342:	2308      	movs	r3, #8
 8002344:	e00c      	b.n	8002360 <LL_TIM_OC_EnablePreload+0x64>
 8002346:	2306      	movs	r3, #6
 8002348:	e00a      	b.n	8002360 <LL_TIM_OC_EnablePreload+0x64>
 800234a:	2305      	movs	r3, #5
 800234c:	e008      	b.n	8002360 <LL_TIM_OC_EnablePreload+0x64>
 800234e:	2304      	movs	r3, #4
 8002350:	e006      	b.n	8002360 <LL_TIM_OC_EnablePreload+0x64>
 8002352:	2303      	movs	r3, #3
 8002354:	e004      	b.n	8002360 <LL_TIM_OC_EnablePreload+0x64>
 8002356:	2302      	movs	r3, #2
 8002358:	e002      	b.n	8002360 <LL_TIM_OC_EnablePreload+0x64>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <LL_TIM_OC_EnablePreload+0x64>
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3318      	adds	r3, #24
 8002366:	4619      	mov	r1, r3
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <LL_TIM_OC_EnablePreload+0x98>)
 800236c:	5cd3      	ldrb	r3, [r2, r3]
 800236e:	440b      	add	r3, r1
 8002370:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	4907      	ldr	r1, [pc, #28]	; (8002398 <LL_TIM_OC_EnablePreload+0x9c>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	4619      	mov	r1, r3
 800237e:	2308      	movs	r3, #8
 8002380:	408b      	lsls	r3, r1
 8002382:	431a      	orrs	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	601a      	str	r2, [r3, #0]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	08006810 	.word	0x08006810
 8002398:	0800681c 	.word	0x0800681c

0800239c <LL_TIM_DisableExternalClock>:
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	609a      	str	r2, [r3, #8]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_TIM_SetClockSource>:
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80023ce:	f023 0307 	bic.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	609a      	str	r2, [r3, #8]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <LL_TIM_SetTriggerOutput>:
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	605a      	str	r2, [r3, #4]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <LL_TIM_DisableMasterSlaveMode>:
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	609a      	str	r2, [r3, #8]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_TIM_ConfigETR>:
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f423 423f 	bic.w	r2, r3, #48896	; 0xbf00
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4319      	orrs	r1, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	430b      	orrs	r3, r1
 800244c:	431a      	orrs	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	609a      	str	r2, [r3, #8]
}
 8002452:	bf00      	nop
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <LL_TIM_SetOCRefClearInputSource>:
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 0208 	bic.w	r2, r3, #8
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	609a      	str	r2, [r3, #8]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_TIM_ClearFlag_UPDATE>:
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f06f 0201 	mvn.w	r2, #1
 8002492:	611a      	str	r2, [r3, #16]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <LL_TIM_EnableIT_UPDATE>:
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f043 0201 	orr.w	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	60da      	str	r2, [r3, #12]
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	f043 0201 	orr.w	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	615a      	str	r2, [r3, #20]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	4013      	ands	r3, r2
 8002538:	041a      	lsls	r2, r3, #16
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	43d9      	mvns	r1, r3
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	400b      	ands	r3, r1
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	619a      	str	r2, [r3, #24]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  //int* Buzz_Check = 0, Buzz = 0;
  struct led_data ledData;
  SavePointer(&ledData);
 800255c:	463b      	mov	r3, r7
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fce6 	bl	8000f30 <SavePointer>
  time = START_TIME;
 8002564:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <main+0x88>)
 8002566:	f06f 0209 	mvn.w	r2, #9
 800256a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800256c:	2001      	movs	r0, #1
 800256e:	f7ff fdcf 	bl	8002110 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002572:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002576:	f7ff fdb3 	bl	80020e0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800257a:	2003      	movs	r0, #3
 800257c:	f7ff fbdc 	bl	8001d38 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002580:	f7ff fbfe 	bl	8001d80 <__NVIC_GetPriorityGrouping>
 8002584:	4603      	mov	r3, r0
 8002586:	2200      	movs	r2, #0
 8002588:	210f      	movs	r1, #15
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fc4e 	bl	8001e2c <NVIC_EncodePriority>
 8002590:	4603      	mov	r3, r0
 8002592:	4619      	mov	r1, r3
 8002594:	f04f 30ff 	mov.w	r0, #4294967295
 8002598:	f7ff fc1e 	bl	8001dd8 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800259c:	f000 f820 	bl	80025e0 <SystemClock_Config>
  /* USER CO_DE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025a0:	f000 f962 	bl	8002868 <MX_GPIO_Init>
  MX_TIM6_Init();
 80025a4:	f000 f8ea 	bl	800277c <MX_TIM6_Init>
  MX_TIM3_Init();
 80025a8:	f000 f86c 	bl	8002684 <MX_TIM3_Init>
  MX_TIM7_Init();
 80025ac:	f000 f91a 	bl	80027e4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  	  dma_init();
 80025b0:	f7ff fa04 	bl	80019bc <dma_init>
  	  enable_timer3();
 80025b4:	f7ff f9d0 	bl	8001958 <enable_timer3>
  	  TM1637_gpio_init();
 80025b8:	f000 fdf2 	bl	80031a0 <TM1637_gpio_init>
  	  TM1637_Init();
 80025bc:	f000 fc52 	bl	8002e64 <TM1637_Init>
  	  TM1637_SetBrightness(8);
 80025c0:	2008      	movs	r0, #8
 80025c2:	f000 fd5f 	bl	8003084 <TM1637_SetBrightness>
  	  usart1_init();
 80025c6:	f7fe fdf3 	bl	80011b0 <usart1_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	if(1) // nic nie wyslala apka
  	{
  		AutomaticLedMode(&ledData);
 80025ca:	463b      	mov	r3, r7
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 f9bb 	bl	8002948 <AutomaticLedMode>
  	}
  	else
  	{

  	}
  	HandleLed(&ledData);
 80025d2:	463b      	mov	r3, r7
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 f9f9 	bl	80029cc <HandleLed>
  	if(1) // nic nie wyslala apka
 80025da:	e7f6      	b.n	80025ca <main+0x76>
 80025dc:	200000c0 	.word	0x200000c0

080025e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80025e4:	2001      	movs	r0, #1
 80025e6:	f7ff fdab 	bl	8002140 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 80025ea:	bf00      	nop
 80025ec:	f7ff fdbc 	bl	8002168 <LL_FLASH_GetLatency>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d1fa      	bne.n	80025ec <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80025f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80025fa:	f7ff fdc3 	bl	8002184 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 80025fe:	bf00      	nop
 8002600:	f7ff fdd4 	bl	80021ac <LL_PWR_IsActiveFlag_VOS>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1fa      	bne.n	8002600 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 800260a:	f7ff fc43 	bl	8001e94 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 800260e:	bf00      	nop
 8002610:	f7ff fc50 	bl	8001eb4 <LL_RCC_MSI_IsReady>
 8002614:	4603      	mov	r3, r0
 8002616:	2b01      	cmp	r3, #1
 8002618:	d1fa      	bne.n	8002610 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 800261a:	f7ff fc5d 	bl	8001ed8 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 800261e:	2060      	movs	r0, #96	; 0x60
 8002620:	f7ff fc6a 	bl	8001ef8 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8002624:	2000      	movs	r0, #0
 8002626:	f7ff fc7b 	bl	8001f20 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 16, LL_RCC_PLLR_DIV_2);
 800262a:	2300      	movs	r3, #0
 800262c:	2210      	movs	r2, #16
 800262e:	2100      	movs	r1, #0
 8002630:	2001      	movs	r0, #1
 8002632:	f7ff fd0d 	bl	8002050 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8002636:	f7ff fd2b 	bl	8002090 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 800263a:	f7ff fce5 	bl	8002008 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800263e:	bf00      	nop
 8002640:	f7ff fcf2 	bl	8002028 <LL_RCC_PLL_IsReady>
 8002644:	4603      	mov	r3, r0
 8002646:	2b01      	cmp	r3, #1
 8002648:	d1fa      	bne.n	8002640 <SystemClock_Config+0x60>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800264a:	2003      	movs	r0, #3
 800264c:	f7ff fc7e 	bl	8001f4c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002650:	bf00      	nop
 8002652:	f7ff fc8f 	bl	8001f74 <LL_RCC_GetSysClkSource>
 8002656:	4603      	mov	r3, r0
 8002658:	2b0c      	cmp	r3, #12
 800265a:	d1fa      	bne.n	8002652 <SystemClock_Config+0x72>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800265c:	2000      	movs	r0, #0
 800265e:	f7ff fc97 	bl	8001f90 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002662:	2000      	movs	r0, #0
 8002664:	f7ff fca8 	bl	8001fb8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8002668:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800266c:	f7ff fcb8 	bl	8001fe0 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(32000000);
 8002670:	4803      	ldr	r0, [pc, #12]	; (8002680 <SystemClock_Config+0xa0>)
 8002672:	f002 f8b1 	bl	80047d8 <LL_Init1msTick>

  LL_SetSystemCoreClock(32000000);
 8002676:	4802      	ldr	r0, [pc, #8]	; (8002680 <SystemClock_Config+0xa0>)
 8002678:	f002 f8bc 	bl	80047f4 <LL_SetSystemCoreClock>
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	01e84800 	.word	0x01e84800

08002684 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b094      	sub	sp, #80	; 0x50
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800268a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	60da      	str	r2, [r3, #12]
 8002698:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800269a:	f107 031c 	add.w	r3, r7, #28
 800269e:	2220      	movs	r2, #32
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f002 f9cd 	bl	8004a42 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]
 80026b0:	609a      	str	r2, [r3, #8]
 80026b2:	60da      	str	r2, [r3, #12]
 80026b4:	611a      	str	r2, [r3, #16]
 80026b6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80026b8:	2002      	movs	r0, #2
 80026ba:	f7ff fd11 	bl	80020e0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80026c2:	2300      	movs	r3, #0
 80026c4:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 32-LL_TIM_IC_FILTER_FDIV1_N2;
 80026c6:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <MX_TIM3_Init+0xf0>)
 80026c8:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80026ca:	2300      	movs	r3, #0
 80026cc:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80026ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026d2:	4619      	mov	r1, r3
 80026d4:	4828      	ldr	r0, [pc, #160]	; (8002778 <MX_TIM3_Init+0xf4>)
 80026d6:	f001 fbc9 	bl	8003e6c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80026da:	4827      	ldr	r0, [pc, #156]	; (8002778 <MX_TIM3_Init+0xf4>)
 80026dc:	f7ff fd9d 	bl	800221a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80026e0:	2100      	movs	r1, #0
 80026e2:	4825      	ldr	r0, [pc, #148]	; (8002778 <MX_TIM3_Init+0xf4>)
 80026e4:	f7ff fe6a 	bl	80023bc <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 80026e8:	2101      	movs	r1, #1
 80026ea:	4823      	ldr	r0, [pc, #140]	; (8002778 <MX_TIM3_Init+0xf4>)
 80026ec:	f7ff fe06 	bl	80022fc <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80026f0:	2360      	movs	r3, #96	; 0x60
 80026f2:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002700:	2300      	movs	r3, #0
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002704:	f107 031c 	add.w	r3, r7, #28
 8002708:	461a      	mov	r2, r3
 800270a:	2101      	movs	r1, #1
 800270c:	481a      	ldr	r0, [pc, #104]	; (8002778 <MX_TIM3_Init+0xf4>)
 800270e:	f001 fc41 	bl	8003f94 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002712:	2101      	movs	r1, #1
 8002714:	4818      	ldr	r0, [pc, #96]	; (8002778 <MX_TIM3_Init+0xf4>)
 8002716:	f7ff fd9f 	bl	8002258 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM3, LL_TIM_OCREF_CLR_INT_NC);
 800271a:	2100      	movs	r1, #0
 800271c:	4816      	ldr	r0, [pc, #88]	; (8002778 <MX_TIM3_Init+0xf4>)
 800271e:	f7ff fe9e 	bl	800245e <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM3);
 8002722:	4815      	ldr	r0, [pc, #84]	; (8002778 <MX_TIM3_Init+0xf4>)
 8002724:	f7ff fe3a 	bl	800239c <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM3, LL_TIM_ETR_POLARITY_NONINVERTED, LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
 8002728:	2300      	movs	r3, #0
 800272a:	2200      	movs	r2, #0
 800272c:	2100      	movs	r1, #0
 800272e:	4812      	ldr	r0, [pc, #72]	; (8002778 <MX_TIM3_Init+0xf4>)
 8002730:	f7ff fe7c 	bl	800242c <LL_TIM_ConfigETR>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002734:	2100      	movs	r1, #0
 8002736:	4810      	ldr	r0, [pc, #64]	; (8002778 <MX_TIM3_Init+0xf4>)
 8002738:	f7ff fe55 	bl	80023e6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800273c:	480e      	ldr	r0, [pc, #56]	; (8002778 <MX_TIM3_Init+0xf4>)
 800273e:	f7ff fe65 	bl	800240c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002742:	2001      	movs	r0, #1
 8002744:	f7ff fcb4 	bl	80020b0 <LL_AHB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PA6   ------> TIM3_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002748:	2340      	movs	r3, #64	; 0x40
 800274a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800274c:	2302      	movs	r3, #2
 800274e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800275c:	2302      	movs	r3, #2
 800275e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	4619      	mov	r1, r3
 8002764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002768:	f000 fec4 	bl	80034f4 <LL_GPIO_Init>

}
 800276c:	bf00      	nop
 800276e:	3750      	adds	r7, #80	; 0x50
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	fff00020 	.word	0xfff00020
 8002778:	40000400 	.word	0x40000400

0800277c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8002790:	2010      	movs	r0, #16
 8002792:	f7ff fca5 	bl	80020e0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 31999;
 8002796:	f647 43ff 	movw	r3, #31999	; 0x7cff
 800279a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 80027a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027a4:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	480d      	ldr	r0, [pc, #52]	; (80027e0 <MX_TIM6_Init+0x64>)
 80027ac:	f001 fb5e 	bl	8003e6c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 80027b0:	480b      	ldr	r0, [pc, #44]	; (80027e0 <MX_TIM6_Init+0x64>)
 80027b2:	f7ff fd32 	bl	800221a <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 80027b6:	2100      	movs	r1, #0
 80027b8:	4809      	ldr	r0, [pc, #36]	; (80027e0 <MX_TIM6_Init+0x64>)
 80027ba:	f7ff fe14 	bl	80023e6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 80027be:	4808      	ldr	r0, [pc, #32]	; (80027e0 <MX_TIM6_Init+0x64>)
 80027c0:	f7ff fe24 	bl	800240c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */
 // LL_TIM_SetClockSource(TIM6, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_SetCounterMode(TIM6, LL_TIM_COUNTERMODE_UP);
 80027c4:	2100      	movs	r1, #0
 80027c6:	4806      	ldr	r0, [pc, #24]	; (80027e0 <MX_TIM6_Init+0x64>)
 80027c8:	f7ff fd14 	bl	80021f4 <LL_TIM_SetCounterMode>
  LL_TIM_ClearFlag_UPDATE(TIM6);
 80027cc:	4804      	ldr	r0, [pc, #16]	; (80027e0 <MX_TIM6_Init+0x64>)
 80027ce:	f7ff fe59 	bl	8002484 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 80027d2:	4803      	ldr	r0, [pc, #12]	; (80027e0 <MX_TIM6_Init+0x64>)
 80027d4:	f7ff fcfe 	bl	80021d4 <LL_TIM_EnableCounter>

  /* USER CODE END TIM6_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40001000 	.word	0x40001000

080027e4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80027ea:	1d3b      	adds	r3, r7, #4
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 80027f8:	2020      	movs	r0, #32
 80027fa:	f7ff fc71 	bl	80020e0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 32000-LL_TIM_IC_FILTER_FDIV1_N2;
 80027fe:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002802:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002804:	2300      	movs	r3, #0
 8002806:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <MX_TIM7_Init+0x7c>)
 800280a:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	4619      	mov	r1, r3
 8002810:	4814      	ldr	r0, [pc, #80]	; (8002864 <MX_TIM7_Init+0x80>)
 8002812:	f001 fb2b 	bl	8003e6c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 8002816:	4813      	ldr	r0, [pc, #76]	; (8002864 <MX_TIM7_Init+0x80>)
 8002818:	f7ff fcff 	bl	800221a <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 800281c:	2100      	movs	r1, #0
 800281e:	4811      	ldr	r0, [pc, #68]	; (8002864 <MX_TIM7_Init+0x80>)
 8002820:	f7ff fde1 	bl	80023e6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8002824:	480f      	ldr	r0, [pc, #60]	; (8002864 <MX_TIM7_Init+0x80>)
 8002826:	f7ff fdf1 	bl	800240c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  LL_TIM_SetCounterMode(TIM7, LL_TIM_COUNTERMODE_UP);
 800282a:	2100      	movs	r1, #0
 800282c:	480d      	ldr	r0, [pc, #52]	; (8002864 <MX_TIM7_Init+0x80>)
 800282e:	f7ff fce1 	bl	80021f4 <LL_TIM_SetCounterMode>
  LL_TIM_GenerateEvent_UPDATE(TIM7);
 8002832:	480c      	ldr	r0, [pc, #48]	; (8002864 <MX_TIM7_Init+0x80>)
 8002834:	f7ff fe57 	bl	80024e6 <LL_TIM_GenerateEvent_UPDATE>
  LL_TIM_ClearFlag_UPDATE(TIM7);
 8002838:	480a      	ldr	r0, [pc, #40]	; (8002864 <MX_TIM7_Init+0x80>)
 800283a:	f7ff fe23 	bl	8002484 <LL_TIM_ClearFlag_UPDATE>
  NVIC_SetPriority(TIM7_IRQn, 0);
 800283e:	2100      	movs	r1, #0
 8002840:	2037      	movs	r0, #55	; 0x37
 8002842:	f7ff fac9 	bl	8001dd8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 8002846:	2037      	movs	r0, #55	; 0x37
 8002848:	f7ff faa8 	bl	8001d9c <__NVIC_EnableIRQ>
  LL_TIM_EnableIT_UPDATE(TIM7);
 800284c:	4805      	ldr	r0, [pc, #20]	; (8002864 <MX_TIM7_Init+0x80>)
 800284e:	f7ff fe3a 	bl	80024c6 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM7);
 8002852:	4804      	ldr	r0, [pc, #16]	; (8002864 <MX_TIM7_Init+0x80>)
 8002854:	f7ff fcbe 	bl	80021d4 <LL_TIM_EnableCounter>
  /* USER CODE END TIM7_Init 2 */

}
 8002858:	bf00      	nop
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	fff003e8 	.word	0xfff003e8
 8002864:	40001400 	.word	0x40001400

08002868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286e:	463b      	mov	r3, r7
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
 800287c:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 800287e:	2080      	movs	r0, #128	; 0x80
 8002880:	f7ff fc16 	bl	80020b0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002884:	2001      	movs	r0, #1
 8002886:	f7ff fc13 	bl	80020b0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800288a:	2002      	movs	r0, #2
 800288c:	f7ff fc10 	bl	80020b0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, test_Pin|Buzz_Buzz_Pin);
 8002890:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002898:	f7ff fe35 	bl	8002506 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Led_GPIO_Port, Led_Pin);
 800289c:	2140      	movs	r1, #64	; 0x40
 800289e:	4813      	ldr	r0, [pc, #76]	; (80028ec <MX_GPIO_Init+0x84>)
 80028a0:	f7ff fe31 	bl	8002506 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = test_Pin|Buzz_Buzz_Pin;
 80028a4:	f44f 7308 	mov.w	r3, #544	; 0x220
 80028a8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80028aa:	2301      	movs	r3, #1
 80028ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ba:	463b      	mov	r3, r7
 80028bc:	4619      	mov	r1, r3
 80028be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c2:	f000 fe17 	bl	80034f4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Led_Pin;
 80028c6:	2340      	movs	r3, #64	; 0x40
 80028c8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80028ca:	2301      	movs	r3, #1
 80028cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80028da:	463b      	mov	r3, r7
 80028dc:	4619      	mov	r1, r3
 80028de:	4803      	ldr	r0, [pc, #12]	; (80028ec <MX_GPIO_Init+0x84>)
 80028e0:	f000 fe08 	bl	80034f4 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028e4:	bf00      	nop
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	48000400 	.word	0x48000400

080028f0 <HandleTime>:

/* USER CODE BEGIN 4 */
void HandleTime(int val)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	time = val;
 80028f8:	4a04      	ldr	r2, [pc, #16]	; (800290c <HandleTime+0x1c>)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6013      	str	r3, [r2, #0]
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	200000c0 	.word	0x200000c0

08002910 <Damian_Marudzi>:
void Damian_Marudzi(uint32_t czas)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	LL_TIM_GenerateEvent_UPDATE(TIM6);
 8002918:	480a      	ldr	r0, [pc, #40]	; (8002944 <Damian_Marudzi+0x34>)
 800291a:	f7ff fde4 	bl	80024e6 <LL_TIM_GenerateEvent_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIM6);
 800291e:	4809      	ldr	r0, [pc, #36]	; (8002944 <Damian_Marudzi+0x34>)
 8002920:	f7ff fdb0 	bl	8002484 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_SetAutoReload(TIM6, czas);
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4807      	ldr	r0, [pc, #28]	; (8002944 <Damian_Marudzi+0x34>)
 8002928:	f7ff fc87 	bl	800223a <LL_TIM_SetAutoReload>
	while(LL_TIM_IsActiveFlag_UPDATE(TIM6) == 0);
 800292c:	bf00      	nop
 800292e:	4805      	ldr	r0, [pc, #20]	; (8002944 <Damian_Marudzi+0x34>)
 8002930:	f7ff fdb6 	bl	80024a0 <LL_TIM_IsActiveFlag_UPDATE>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f9      	beq.n	800292e <Damian_Marudzi+0x1e>
}
 800293a:	bf00      	nop
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40001000 	.word	0x40001000

08002948 <AutomaticLedMode>:
			}
		break;
	}
}
void AutomaticLedMode(struct led_data* data)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af02      	add	r7, sp, #8
 800294e:	6078      	str	r0, [r7, #4]
	for(int i=0; i< MAX_LED; i++)
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	e030      	b.n	80029b8 <AutomaticLedMode+0x70>
	{
		switch(i%3)
 8002956:	68f9      	ldr	r1, [r7, #12]
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <AutomaticLedMode+0x80>)
 800295a:	fb83 3201 	smull	r3, r2, r3, r1
 800295e:	17cb      	asrs	r3, r1, #31
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	461a      	mov	r2, r3
 8002964:	0052      	lsls	r2, r2, #1
 8002966:	441a      	add	r2, r3
 8002968:	1a8b      	subs	r3, r1, r2
 800296a:	2b02      	cmp	r3, #2
 800296c:	d018      	beq.n	80029a0 <AutomaticLedMode+0x58>
 800296e:	2b02      	cmp	r3, #2
 8002970:	dc1f      	bgt.n	80029b2 <AutomaticLedMode+0x6a>
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <AutomaticLedMode+0x34>
 8002976:	2b01      	cmp	r3, #1
 8002978:	d009      	beq.n	800298e <AutomaticLedMode+0x46>
 800297a:	e01a      	b.n	80029b2 <AutomaticLedMode+0x6a>
		{
			case 0:
				Set_LED(data,i, 255, 0, 0);
 800297c:	2300      	movs	r3, #0
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	2300      	movs	r3, #0
 8002982:	22ff      	movs	r2, #255	; 0xff
 8002984:	68f9      	ldr	r1, [r7, #12]
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff f980 	bl	8001c8c <Set_LED>
			break;
 800298c:	e011      	b.n	80029b2 <AutomaticLedMode+0x6a>
			case 1:
				Set_LED(data,i, 0, 255, 0);
 800298e:	2300      	movs	r3, #0
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	23ff      	movs	r3, #255	; 0xff
 8002994:	2200      	movs	r2, #0
 8002996:	68f9      	ldr	r1, [r7, #12]
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff f977 	bl	8001c8c <Set_LED>
			break;
 800299e:	e008      	b.n	80029b2 <AutomaticLedMode+0x6a>
			case 2:
			Set_LED(data,i, 0, 0, 255);
 80029a0:	23ff      	movs	r3, #255	; 0xff
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	2300      	movs	r3, #0
 80029a6:	2200      	movs	r2, #0
 80029a8:	68f9      	ldr	r1, [r7, #12]
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff f96e 	bl	8001c8c <Set_LED>
			break;
 80029b0:	bf00      	nop
	for(int i=0; i< MAX_LED; i++)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	3301      	adds	r3, #1
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2b07      	cmp	r3, #7
 80029bc:	ddcb      	ble.n	8002956 <AutomaticLedMode+0xe>
		}
	}

}
 80029be:	bf00      	nop
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	55555556 	.word	0x55555556

080029cc <HandleLed>:

void HandleLed(struct led_data* data)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
 80029d2:	af02      	add	r7, sp, #8
 80029d4:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80029d8:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80029dc:	6018      	str	r0, [r3, #0]
	if(time > 0)
 80029de:	4b4e      	ldr	r3, [pc, #312]	; (8002b18 <HandleLed+0x14c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	dd75      	ble.n	8002ad2 <HandleLed+0x106>
	{
		struct led_data tempData = *data;
 80029e6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80029ea:	f5a3 7224 	sub.w	r2, r3, #656	; 0x290
 80029ee:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80029f2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	f44f 7322 	mov.w	r3, #648	; 0x288
 8002a00:	461a      	mov	r2, r3
 8002a02:	f002 f89a 	bl	8004b3a <memcpy>
		Reset_LED(&tempData);
 8002a06:	f107 0308 	add.w	r3, r7, #8
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff f966 	bl	8001cdc <Reset_LED>
		if(time>10)
 8002a10:	4b41      	ldr	r3, [pc, #260]	; (8002b18 <HandleLed+0x14c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b0a      	cmp	r3, #10
 8002a16:	dd08      	ble.n	8002a2a <HandleLed+0x5e>
			{
				Damian_Marudzi(LED_BLINK_TIME*time*2);
 8002a18:	4b3f      	ldr	r3, [pc, #252]	; (8002b18 <HandleLed+0x14c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2264      	movs	r2, #100	; 0x64
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff ff74 	bl	8002910 <Damian_Marudzi>
 8002a28:	e009      	b.n	8002a3e <HandleLed+0x72>
			}
			else
			{
				Damian_Marudzi(25*time);
 8002a2a:	4b3b      	ldr	r3, [pc, #236]	; (8002b18 <HandleLed+0x14c>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	009a      	lsls	r2, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff69 	bl	8002910 <Damian_Marudzi>
			}
			for(int i=0; i< MAX_LED; i++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8002a44:	e040      	b.n	8002ac8 <HandleLed+0xfc>
				{
					if(i!=0)
 8002a46:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HandleLed+0x98>
					{
						Set_LED(&tempData,i-1, 0, 0, 0);
 8002a4e:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002a52:	1e59      	subs	r1, r3, #1
 8002a54:	f107 0008 	add.w	r0, r7, #8
 8002a58:	2300      	movs	r3, #0
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f7ff f914 	bl	8001c8c <Set_LED>
					}
					for(int j=0; j<4;j++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8002a6a:	e01b      	b.n	8002aa4 <HandleLed+0xd8>
					{
						tempData.LED_Data[i*4+j] = data->LED_Data[i*4+j];
 8002a6c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002a70:	009a      	lsls	r2, r3, #2
 8002a72:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002a76:	441a      	add	r2, r3
 8002a78:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002a7c:	0099      	lsls	r1, r3, #2
 8002a7e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002a82:	440b      	add	r3, r1
 8002a84:	f507 7126 	add.w	r1, r7, #664	; 0x298
 8002a88:	f5a1 7125 	sub.w	r1, r1, #660	; 0x294
 8002a8c:	6809      	ldr	r1, [r1, #0]
 8002a8e:	5c89      	ldrb	r1, [r1, r2]
 8002a90:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8002a94:	f5a2 7224 	sub.w	r2, r2, #656	; 0x290
 8002a98:	54d1      	strb	r1, [r2, r3]
					for(int j=0; j<4;j++)
 8002a9a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 8002aa4:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	dddf      	ble.n	8002a6c <HandleLed+0xa0>
					}
					WS2812_Send(&tempData,STANDARD_BRIGHTNESS);
 8002aac:	f107 0308 	add.w	r3, r7, #8
 8002ab0:	2102      	movs	r1, #2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe ffe4 	bl	8001a80 <WS2812_Send>
					Damian_Marudzi(LED_BLINK_TIME);
 8002ab8:	2032      	movs	r0, #50	; 0x32
 8002aba:	f7ff ff29 	bl	8002910 <Damian_Marudzi>
			for(int i=0; i< MAX_LED; i++)
 8002abe:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8002ac8:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002acc:	2b07      	cmp	r3, #7
 8002ace:	ddba      	ble.n	8002a46 <HandleLed+0x7a>
	{
		Reset_LED(data);
		WS2812_Send(data,STANDARD_BRIGHTNESS);
	}

}
 8002ad0:	e01c      	b.n	8002b0c <HandleLed+0x140>
	else if(time>= DISPLAY_BLINK_TIME*-2)
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <HandleLed+0x14c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f113 0f06 	cmn.w	r3, #6
 8002ada:	db08      	blt.n	8002aee <HandleLed+0x122>
		WS2812_Send(data,STANDARD_BRIGHTNESS);
 8002adc:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002ae0:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	f7fe ffca 	bl	8001a80 <WS2812_Send>
}
 8002aec:	e00e      	b.n	8002b0c <HandleLed+0x140>
		Reset_LED(data);
 8002aee:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002af2:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	f7ff f8f0 	bl	8001cdc <Reset_LED>
		WS2812_Send(data,STANDARD_BRIGHTNESS);
 8002afc:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8002b00:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8002b04:	2102      	movs	r1, #2
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	f7fe ffba 	bl	8001a80 <WS2812_Send>
}
 8002b0c:	bf00      	nop
 8002b0e:	f507 7726 	add.w	r7, r7, #664	; 0x298
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200000c0 	.word	0x200000c0

08002b1c <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7) == 1)
 8002b20:	480f      	ldr	r0, [pc, #60]	; (8002b60 <TIM7_IRQHandler+0x44>)
 8002b22:	f7ff fcbd 	bl	80024a0 <LL_TIM_IsActiveFlag_UPDATE>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d117      	bne.n	8002b5c <TIM7_IRQHandler+0x40>
	{
		LL_GPIO_TogglePin(test_GPIO_Port, test_Pin);
 8002b2c:	2120      	movs	r1, #32
 8002b2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b32:	f7ff fcf6 	bl	8002522 <LL_GPIO_TogglePin>
		LL_TIM_ClearFlag_UPDATE(TIM7);
 8002b36:	480a      	ldr	r0, [pc, #40]	; (8002b60 <TIM7_IRQHandler+0x44>)
 8002b38:	f7ff fca4 	bl	8002484 <LL_TIM_ClearFlag_UPDATE>
		if(time>= DISPLAY_BLINK_TIME*-2)
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <TIM7_IRQHandler+0x48>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f113 0f06 	cmn.w	r3, #6
 8002b44:	db07      	blt.n	8002b56 <TIM7_IRQHandler+0x3a>
		{
			UpdateDisplay();
 8002b46:	f000 f80f 	bl	8002b68 <UpdateDisplay>
			time--;
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <TIM7_IRQHandler+0x48>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <TIM7_IRQHandler+0x48>)
 8002b52:	6013      	str	r3, [r2, #0]
		{
	  		TM1637_IdleMode(1);
		}

	}
}
 8002b54:	e002      	b.n	8002b5c <TIM7_IRQHandler+0x40>
	  		TM1637_IdleMode(1);
 8002b56:	2001      	movs	r0, #1
 8002b58:	f000 f9fa 	bl	8002f50 <TM1637_IdleMode>
}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40001400 	.word	0x40001400
 8002b64:	200000c0 	.word	0x200000c0

08002b68 <UpdateDisplay>:

void UpdateDisplay()
{
 8002b68:	b5b0      	push	{r4, r5, r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
	uint32_t displayData = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	607b      	str	r3, [r7, #4]
	if(time>=0)
 8002b72:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <UpdateDisplay+0xb4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db39      	blt.n	8002bee <UpdateDisplay+0x86>
	{
		displayData = floor(time/60)*100+time%60;
 8002b7a:	4b28      	ldr	r3, [pc, #160]	; (8002c1c <UpdateDisplay+0xb4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a28      	ldr	r2, [pc, #160]	; (8002c20 <UpdateDisplay+0xb8>)
 8002b80:	fb82 1203 	smull	r1, r2, r2, r3
 8002b84:	441a      	add	r2, r3
 8002b86:	1152      	asrs	r2, r2, #5
 8002b88:	17db      	asrs	r3, r3, #31
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fd fcc1 	bl	8000514 <__aeabi_i2d>
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <UpdateDisplay+0xbc>)
 8002b98:	f7fd fd26 	bl	80005e8 <__aeabi_dmul>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4614      	mov	r4, r2
 8002ba2:	461d      	mov	r5, r3
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <UpdateDisplay+0xb4>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <UpdateDisplay+0xb8>)
 8002baa:	fb83 1302 	smull	r1, r3, r3, r2
 8002bae:	4413      	add	r3, r2
 8002bb0:	1159      	asrs	r1, r3, #5
 8002bb2:	17d3      	asrs	r3, r2, #31
 8002bb4:	1ac9      	subs	r1, r1, r3
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	1a5b      	subs	r3, r3, r1
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	1ad1      	subs	r1, r2, r3
 8002bc0:	4608      	mov	r0, r1
 8002bc2:	f7fd fca7 	bl	8000514 <__aeabi_i2d>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4620      	mov	r0, r4
 8002bcc:	4629      	mov	r1, r5
 8002bce:	f7fd fb55 	bl	800027c <__adddf3>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f7fd ffc7 	bl	8000b6c <__aeabi_d2uiz>
 8002bde:	4603      	mov	r3, r0
 8002be0:	607b      	str	r3, [r7, #4]
		TM1637_DisplayDecimal(displayData,1);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2101      	movs	r1, #1
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 f944 	bl	8002e74 <TM1637_DisplayDecimal>
 8002bec:	e013      	b.n	8002c16 <UpdateDisplay+0xae>
	}
	else if(time>= DISPLAY_BLINK_TIME*-2)
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <UpdateDisplay+0xb4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f113 0f06 	cmn.w	r3, #6
 8002bf6:	db0e      	blt.n	8002c16 <UpdateDisplay+0xae>
	{
		if(time%2!=0)
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <UpdateDisplay+0xb4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <UpdateDisplay+0xa2>
		{
			dziala();
 8002c04:	f000 f9f6 	bl	8002ff4 <dziala>
		}
		else
		{
			TM1637_DisplayDecimal(displayData,1);
		}
	  	return;
 8002c08:	e004      	b.n	8002c14 <UpdateDisplay+0xac>
			TM1637_DisplayDecimal(displayData,1);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f930 	bl	8002e74 <TM1637_DisplayDecimal>
	  	return;
 8002c14:	bf00      	nop
	}

}
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c1c:	200000c0 	.word	0x200000c0
 8002c20:	88888889 	.word	0x88888889
 8002c24:	40590000 	.word	0x40590000

08002c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c2c:	e7fe      	b.n	8002c2c <NMI_Handler+0x4>

08002c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c32:	e7fe      	b.n	8002c32 <HardFault_Handler+0x4>

08002c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c38:	e7fe      	b.n	8002c38 <MemManage_Handler+0x4>

08002c3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c3e:	e7fe      	b.n	8002c3e <BusFault_Handler+0x4>

08002c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c44:	e7fe      	b.n	8002c44 <UsageFault_Handler+0x4>

08002c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c46:	b480      	push	{r7}
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b086      	sub	sp, #24
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	e00a      	b.n	8002ca6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c90:	f3af 8000 	nop.w
 8002c94:	4601      	mov	r1, r0
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	60ba      	str	r2, [r7, #8]
 8002c9c:	b2ca      	uxtb	r2, r1
 8002c9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	dbf0      	blt.n	8002c90 <_read+0x12>
  }

  return len;
 8002cae:	687b      	ldr	r3, [r7, #4]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ce0:	605a      	str	r2, [r3, #4]
  return 0;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <_isatty>:

int _isatty(int file)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cf8:	2301      	movs	r3, #1
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b085      	sub	sp, #20
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d28:	4a14      	ldr	r2, [pc, #80]	; (8002d7c <_sbrk+0x5c>)
 8002d2a:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <_sbrk+0x60>)
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d34:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <_sbrk+0x64>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <_sbrk+0x64>)
 8002d3e:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <_sbrk+0x68>)
 8002d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d207      	bcs.n	8002d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d50:	f001 fec6 	bl	8004ae0 <__errno>
 8002d54:	4603      	mov	r3, r0
 8002d56:	220c      	movs	r2, #12
 8002d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5e:	e009      	b.n	8002d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <_sbrk+0x64>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <_sbrk+0x64>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	4a05      	ldr	r2, [pc, #20]	; (8002d84 <_sbrk+0x64>)
 8002d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20018000 	.word	0x20018000
 8002d80:	00000400 	.word	0x00000400
 8002d84:	200000c4 	.word	0x200000c4
 8002d88:	20000218 	.word	0x20000218

08002d8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <SystemInit+0x20>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d96:	4a05      	ldr	r2, [pc, #20]	; (8002dac <SystemInit+0x20>)
 8002d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <LL_AHB2_GRP1_EnableClock>:
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002dba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dbc:	4907      	ldr	r1, [pc, #28]	; (8002ddc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002dc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dce:	68fb      	ldr	r3, [r7, #12]
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	40021000 	.word	0x40021000

08002de0 <LL_GPIO_SetOutputPin>:
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	619a      	str	r2, [r3, #24]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_GPIO_ResetOutputPin>:
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <TM1637_ClkHigh>:
    0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, // 0-7
    0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, // 8-9, A-F
    0x00
};

void TM1637_ClkHigh(void){
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(CLK_GPIO_PORT, CLK_PIN);
 8002e1c:	2180      	movs	r1, #128	; 0x80
 8002e1e:	4802      	ldr	r0, [pc, #8]	; (8002e28 <TM1637_ClkHigh+0x10>)
 8002e20:	f7ff ffde 	bl	8002de0 <LL_GPIO_SetOutputPin>
}
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	48000800 	.word	0x48000800

08002e2c <TM1637_ClkLow>:

void TM1637_ClkLow(void){
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(CLK_GPIO_PORT, CLK_PIN);
 8002e30:	2180      	movs	r1, #128	; 0x80
 8002e32:	4802      	ldr	r0, [pc, #8]	; (8002e3c <TM1637_ClkLow+0x10>)
 8002e34:	f7ff ffe2 	bl	8002dfc <LL_GPIO_ResetOutputPin>
}
 8002e38:	bf00      	nop
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	48000800 	.word	0x48000800

08002e40 <TM1637_DataHigh>:

void TM1637_DataHigh(void){
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(DATA_GPIO_PORT, DATA_PIN);
 8002e44:	2180      	movs	r1, #128	; 0x80
 8002e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e4a:	f7ff ffc9 	bl	8002de0 <LL_GPIO_SetOutputPin>
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <TM1637_DataLow>:

void TM1637_DataLow(void){
 8002e52:	b580      	push	{r7, lr}
 8002e54:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(DATA_GPIO_PORT, DATA_PIN);
 8002e56:	2180      	movs	r1, #128	; 0x80
 8002e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e5c:	f7ff ffce 	bl	8002dfc <LL_GPIO_ResetOutputPin>
}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <TM1637_Init>:
	}
}


void TM1637_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
    TM1637_SetBrightness(8);
 8002e68:	2008      	movs	r0, #8
 8002e6a:	f000 f90b 	bl	8003084 <TM1637_SetBrightness>
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <TM1637_DisplayDecimal>:

void TM1637_DisplayDecimal(int v, int displaySeparator)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	e032      	b.n	8002eea <TM1637_DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4b30      	ldr	r3, [pc, #192]	; (8002f48 <TM1637_DisplayDecimal+0xd4>)
 8002e88:	fb83 2301 	smull	r2, r3, r3, r1
 8002e8c:	109a      	asrs	r2, r3, #2
 8002e8e:	17cb      	asrs	r3, r1, #31
 8002e90:	1ad2      	subs	r2, r2, r3
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	1aca      	subs	r2, r1, r3
 8002e9c:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <TM1637_DisplayDecimal+0xd8>)
 8002e9e:	5c99      	ldrb	r1, [r3, r2]
 8002ea0:	f107 020c 	add.w	r2, r7, #12
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	460a      	mov	r2, r1
 8002eaa:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d110      	bne.n	8002ed4 <TM1637_DisplayDecimal+0x60>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00d      	beq.n	8002ed4 <TM1637_DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 8002eb8:	f107 020c 	add.w	r2, r7, #12
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ec6:	b2d9      	uxtb	r1, r3
 8002ec8:	f107 020c 	add.w	r2, r7, #12
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	4413      	add	r3, r2
 8002ed0:	460a      	mov	r2, r1
 8002ed2:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <TM1637_DisplayDecimal+0xd4>)
 8002ed8:	fb82 1203 	smull	r1, r2, r2, r3
 8002edc:	1092      	asrs	r2, r2, #2
 8002ede:	17db      	asrs	r3, r3, #31
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b03      	cmp	r3, #3
 8002eee:	ddc9      	ble.n	8002e84 <TM1637_DisplayDecimal+0x10>
    }

    TM1637_Start();
 8002ef0:	f000 f8dd 	bl	80030ae <TM1637_Start>
    TM1637_WriteByte(0x40);
 8002ef4:	2040      	movs	r0, #64	; 0x40
 8002ef6:	f000 f90c 	bl	8003112 <TM1637_WriteByte>
    TM1637_ReadResult();
 8002efa:	f000 f8fa 	bl	80030f2 <TM1637_ReadResult>
    TM1637_Stop();
 8002efe:	f000 f8e3 	bl	80030c8 <TM1637_Stop>

    TM1637_Start();
 8002f02:	f000 f8d4 	bl	80030ae <TM1637_Start>
    TM1637_WriteByte(0xc0);
 8002f06:	20c0      	movs	r0, #192	; 0xc0
 8002f08:	f000 f903 	bl	8003112 <TM1637_WriteByte>
    TM1637_ReadResult();
 8002f0c:	f000 f8f1 	bl	80030f2 <TM1637_ReadResult>

    for (int i = 0; i < 4; ++i) {
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	e00e      	b.n	8002f34 <TM1637_DisplayDecimal+0xc0>
        TM1637_WriteByte(digitArr[3 - i]);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f1c3 0303 	rsb	r3, r3, #3
 8002f1c:	3318      	adds	r3, #24
 8002f1e:	443b      	add	r3, r7
 8002f20:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 f8f4 	bl	8003112 <TM1637_WriteByte>
        TM1637_ReadResult();
 8002f2a:	f000 f8e2 	bl	80030f2 <TM1637_ReadResult>
    for (int i = 0; i < 4; ++i) {
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	3301      	adds	r3, #1
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	dded      	ble.n	8002f16 <TM1637_DisplayDecimal+0xa2>
    }

    TM1637_Stop();
 8002f3a:	f000 f8c5 	bl	80030c8 <TM1637_Stop>
}
 8002f3e:	bf00      	nop
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	66666667 	.word	0x66666667
 8002f4c:	08006870 	.word	0x08006870

08002f50 <TM1637_IdleMode>:

void TM1637_IdleMode( int displaySeparator)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	e01c      	b.n	8002f98 <TM1637_IdleMode+0x48>
        digitArr[i] = 0x40;
 8002f5e:	f107 020c 	add.w	r2, r7, #12
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	4413      	add	r3, r2
 8002f66:	2240      	movs	r2, #64	; 0x40
 8002f68:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d110      	bne.n	8002f92 <TM1637_IdleMode+0x42>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <TM1637_IdleMode+0x42>
            digitArr[i] |= 1 << 7;
 8002f76:	f107 020c 	add.w	r2, r7, #12
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f84:	b2d9      	uxtb	r1, r3
 8002f86:	f107 020c 	add.w	r2, r7, #12
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	460a      	mov	r2, r1
 8002f90:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; ++i) {
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	3301      	adds	r3, #1
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	dddf      	ble.n	8002f5e <TM1637_IdleMode+0xe>
        }
    }

    TM1637_Start();
 8002f9e:	f000 f886 	bl	80030ae <TM1637_Start>
    TM1637_WriteByte(0x40);
 8002fa2:	2040      	movs	r0, #64	; 0x40
 8002fa4:	f000 f8b5 	bl	8003112 <TM1637_WriteByte>
    TM1637_ReadResult();
 8002fa8:	f000 f8a3 	bl	80030f2 <TM1637_ReadResult>
    TM1637_Stop();
 8002fac:	f000 f88c 	bl	80030c8 <TM1637_Stop>

    TM1637_Start();
 8002fb0:	f000 f87d 	bl	80030ae <TM1637_Start>
    TM1637_WriteByte(0xc0);
 8002fb4:	20c0      	movs	r0, #192	; 0xc0
 8002fb6:	f000 f8ac 	bl	8003112 <TM1637_WriteByte>
    TM1637_ReadResult();
 8002fba:	f000 f89a 	bl	80030f2 <TM1637_ReadResult>

    for (int i = 0; i < 4; ++i) {
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	e00e      	b.n	8002fe2 <TM1637_IdleMode+0x92>
        TM1637_WriteByte(digitArr[3 - i]);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f1c3 0303 	rsb	r3, r3, #3
 8002fca:	3318      	adds	r3, #24
 8002fcc:	443b      	add	r3, r7
 8002fce:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f89d 	bl	8003112 <TM1637_WriteByte>
        TM1637_ReadResult();
 8002fd8:	f000 f88b 	bl	80030f2 <TM1637_ReadResult>
    for (int i = 0; i < 4; ++i) {
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	dded      	ble.n	8002fc4 <TM1637_IdleMode+0x74>
    }

    TM1637_Stop();
 8002fe8:	f000 f86e 	bl	80030c8 <TM1637_Stop>
}
 8002fec:	bf00      	nop
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <dziala>:

void dziala()
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	e013      	b.n	8003028 <dziala+0x34>
        digitArr[i] = 0x00;
 8003000:	1d3a      	adds	r2, r7, #4
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4413      	add	r3, r2
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
        digitArr[i] |= 1 << 7;
 800300a:	1d3a      	adds	r2, r7, #4
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4413      	add	r3, r2
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003016:	b2d9      	uxtb	r1, r3
 8003018:	1d3a      	adds	r2, r7, #4
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4413      	add	r3, r2
 800301e:	460a      	mov	r2, r1
 8003020:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; ++i) {
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	3301      	adds	r3, #1
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b03      	cmp	r3, #3
 800302c:	dde8      	ble.n	8003000 <dziala+0xc>
    }

    TM1637_Start();
 800302e:	f000 f83e 	bl	80030ae <TM1637_Start>
    TM1637_WriteByte(0x40);
 8003032:	2040      	movs	r0, #64	; 0x40
 8003034:	f000 f86d 	bl	8003112 <TM1637_WriteByte>
    TM1637_ReadResult();
 8003038:	f000 f85b 	bl	80030f2 <TM1637_ReadResult>
    TM1637_Stop();
 800303c:	f000 f844 	bl	80030c8 <TM1637_Stop>

    TM1637_Start();
 8003040:	f000 f835 	bl	80030ae <TM1637_Start>
    TM1637_WriteByte(0xc0);
 8003044:	20c0      	movs	r0, #192	; 0xc0
 8003046:	f000 f864 	bl	8003112 <TM1637_WriteByte>
    TM1637_ReadResult();
 800304a:	f000 f852 	bl	80030f2 <TM1637_ReadResult>

    for (int i = 0; i < 4; ++i) {
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	e00e      	b.n	8003072 <dziala+0x7e>
        TM1637_WriteByte(digitArr[3 - i]);
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f1c3 0303 	rsb	r3, r3, #3
 800305a:	3310      	adds	r3, #16
 800305c:	443b      	add	r3, r7
 800305e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003062:	4618      	mov	r0, r3
 8003064:	f000 f855 	bl	8003112 <TM1637_WriteByte>
        TM1637_ReadResult();
 8003068:	f000 f843 	bl	80030f2 <TM1637_ReadResult>
    for (int i = 0; i < 4; ++i) {
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	3301      	adds	r3, #1
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b03      	cmp	r3, #3
 8003076:	dded      	ble.n	8003054 <dziala+0x60>
    }

    TM1637_Stop();
 8003078:	f000 f826 	bl	80030c8 <TM1637_Stop>
}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <TM1637_SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void TM1637_SetBrightness(char brightness)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    TM1637_Start();
 800308e:	f000 f80e 	bl	80030ae <TM1637_Start>
    TM1637_WriteByte(0x87 + brightness);
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	3b79      	subs	r3, #121	; 0x79
 8003096:	b2db      	uxtb	r3, r3
 8003098:	4618      	mov	r0, r3
 800309a:	f000 f83a 	bl	8003112 <TM1637_WriteByte>
    TM1637_ReadResult();
 800309e:	f000 f828 	bl	80030f2 <TM1637_ReadResult>
    TM1637_Stop();
 80030a2:	f000 f811 	bl	80030c8 <TM1637_Stop>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <TM1637_Start>:

void TM1637_Start(void)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	af00      	add	r7, sp, #0
    TM1637_ClkHigh();
 80030b2:	f7ff feb1 	bl	8002e18 <TM1637_ClkHigh>
    TM1637_DataHigh();
 80030b6:	f7ff fec3 	bl	8002e40 <TM1637_DataHigh>
    TM1637_DelayUsec(2);
 80030ba:	2002      	movs	r0, #2
 80030bc:	f000 f853 	bl	8003166 <TM1637_DelayUsec>
    TM1637_DataLow();
 80030c0:	f7ff fec7 	bl	8002e52 <TM1637_DataLow>
}
 80030c4:	bf00      	nop
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <TM1637_Stop>:

void TM1637_Stop(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 80030cc:	f7ff feae 	bl	8002e2c <TM1637_ClkLow>
    TM1637_DelayUsec(2);
 80030d0:	2002      	movs	r0, #2
 80030d2:	f000 f848 	bl	8003166 <TM1637_DelayUsec>
    TM1637_DataLow();
 80030d6:	f7ff febc 	bl	8002e52 <TM1637_DataLow>
    TM1637_DelayUsec(2);
 80030da:	2002      	movs	r0, #2
 80030dc:	f000 f843 	bl	8003166 <TM1637_DelayUsec>
    TM1637_ClkHigh();
 80030e0:	f7ff fe9a 	bl	8002e18 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 80030e4:	2002      	movs	r0, #2
 80030e6:	f000 f83e 	bl	8003166 <TM1637_DelayUsec>
    TM1637_DataHigh();
 80030ea:	f7ff fea9 	bl	8002e40 <TM1637_DataHigh>
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <TM1637_ReadResult>:

void TM1637_ReadResult(void)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 80030f6:	f7ff fe99 	bl	8002e2c <TM1637_ClkLow>
    TM1637_DelayUsec(5);
 80030fa:	2005      	movs	r0, #5
 80030fc:	f000 f833 	bl	8003166 <TM1637_DelayUsec>

    TM1637_ClkHigh();
 8003100:	f7ff fe8a 	bl	8002e18 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 8003104:	2002      	movs	r0, #2
 8003106:	f000 f82e 	bl	8003166 <TM1637_DelayUsec>
    TM1637_ClkLow();
 800310a:	f7ff fe8f 	bl	8002e2c <TM1637_ClkLow>
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}

08003112 <TM1637_WriteByte>:

void TM1637_WriteByte(unsigned char b)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	4603      	mov	r3, r0
 800311a:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; ++i) {
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	e019      	b.n	8003156 <TM1637_WriteByte+0x44>
		TM1637_ClkLow();
 8003122:	f7ff fe83 	bl	8002e2c <TM1637_ClkLow>
		if (b & 0x01) {
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <TM1637_WriteByte+0x24>
			TM1637_DataHigh();
 8003130:	f7ff fe86 	bl	8002e40 <TM1637_DataHigh>
 8003134:	e001      	b.n	800313a <TM1637_WriteByte+0x28>
		}
		else {
			TM1637_DataLow();
 8003136:	f7ff fe8c 	bl	8002e52 <TM1637_DataLow>
		}
		TM1637_DelayUsec(3);
 800313a:	2003      	movs	r0, #3
 800313c:	f000 f813 	bl	8003166 <TM1637_DelayUsec>
		b >>= 1;
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	085b      	lsrs	r3, r3, #1
 8003144:	71fb      	strb	r3, [r7, #7]
		TM1637_ClkHigh();
 8003146:	f7ff fe67 	bl	8002e18 <TM1637_ClkHigh>
		TM1637_DelayUsec(3);
 800314a:	2003      	movs	r0, #3
 800314c:	f000 f80b 	bl	8003166 <TM1637_DelayUsec>
	for (int i = 0; i < 8; ++i) {
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3301      	adds	r3, #1
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b07      	cmp	r3, #7
 800315a:	dde2      	ble.n	8003122 <TM1637_WriteByte+0x10>
	}
}
 800315c:	bf00      	nop
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <TM1637_DelayUsec>:

void TM1637_DelayUsec(unsigned int i)
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 800316e:	e00d      	b.n	800318c <TM1637_DelayUsec+0x26>
        for (int j = 0; j < 500; ++j) {
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	e003      	b.n	800317e <TM1637_DelayUsec+0x18>
					__NOP();
 8003176:	bf00      	nop
        for (int j = 0; j < 500; ++j) {
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3301      	adds	r3, #1
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003184:	dbf7      	blt.n	8003176 <TM1637_DelayUsec+0x10>
    for (; i>0; i--) {
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3b01      	subs	r3, #1
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1ee      	bne.n	8003170 <TM1637_DelayUsec+0xa>
        }
    }
}
 8003192:	bf00      	nop
 8003194:	bf00      	nop
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <TM1637_gpio_init>:

void TM1637_gpio_init(){
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a6:	463b      	mov	r3, r7
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
 80031b4:	615a      	str	r2, [r3, #20]
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80031b6:	2001      	movs	r0, #1
 80031b8:	f7ff fdfa 	bl	8002db0 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80031bc:	2004      	movs	r0, #4
 80031be:	f7ff fdf7 	bl	8002db0 <LL_AHB2_GRP1_EnableClock>

	GPIO_InitStruct.Pin = DATA_PIN;
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80031c6:	2301      	movs	r3, #1
 80031c8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80031ca:	2302      	movs	r3, #2
 80031cc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(DATA_GPIO_PORT, &GPIO_InitStruct);
 80031d6:	463b      	mov	r3, r7
 80031d8:	4619      	mov	r1, r3
 80031da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031de:	f000 f989 	bl	80034f4 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = CLK_PIN;
 80031e2:	2380      	movs	r3, #128	; 0x80
 80031e4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80031e6:	2301      	movs	r3, #1
 80031e8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80031ea:	2302      	movs	r3, #2
 80031ec:	60bb      	str	r3, [r7, #8]
 	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(CLK_GPIO_PORT, &GPIO_InitStruct);
 80031f6:	463b      	mov	r3, r7
 80031f8:	4619      	mov	r1, r3
 80031fa:	4803      	ldr	r0, [pc, #12]	; (8003208 <TM1637_gpio_init+0x68>)
 80031fc:	f000 f97a 	bl	80034f4 <LL_GPIO_Init>
}
 8003200:	bf00      	nop
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	48000800 	.word	0x48000800

0800320c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800320c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003244 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003210:	f7ff fdbc 	bl	8002d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003214:	480c      	ldr	r0, [pc, #48]	; (8003248 <LoopForever+0x6>)
  ldr r1, =_edata
 8003216:	490d      	ldr	r1, [pc, #52]	; (800324c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003218:	4a0d      	ldr	r2, [pc, #52]	; (8003250 <LoopForever+0xe>)
  movs r3, #0
 800321a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800321c:	e002      	b.n	8003224 <LoopCopyDataInit>

0800321e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800321e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003222:	3304      	adds	r3, #4

08003224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003228:	d3f9      	bcc.n	800321e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800322a:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <LoopForever+0x12>)
  ldr r4, =_ebss
 800322c:	4c0a      	ldr	r4, [pc, #40]	; (8003258 <LoopForever+0x16>)
  movs r3, #0
 800322e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003230:	e001      	b.n	8003236 <LoopFillZerobss>

08003232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003234:	3204      	adds	r2, #4

08003236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003238:	d3fb      	bcc.n	8003232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800323a:	f001 fc57 	bl	8004aec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800323e:	f7ff f989 	bl	8002554 <main>

08003242 <LoopForever>:

LoopForever:
    b LoopForever
 8003242:	e7fe      	b.n	8003242 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003244:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800324c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003250:	08006a98 	.word	0x08006a98
  ldr r2, =_sbss
 8003254:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003258:	20000214 	.word	0x20000214

0800325c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800325c:	e7fe      	b.n	800325c <ADC1_2_IRQHandler>

0800325e <LL_GPIO_SetPinMode>:
{
 800325e:	b480      	push	{r7}
 8003260:	b08b      	sub	sp, #44	; 0x2c
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	613b      	str	r3, [r7, #16]
  return result;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003284:	2320      	movs	r3, #32
 8003286:	e003      	b.n	8003290 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	fab3 f383 	clz	r3, r3
 800328e:	b2db      	uxtb	r3, r3
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	2103      	movs	r1, #3
 8003294:	fa01 f303 	lsl.w	r3, r1, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	401a      	ands	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	61fb      	str	r3, [r7, #28]
  return result;
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80032b2:	2320      	movs	r3, #32
 80032b4:	e003      	b.n	80032be <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	fab3 f383 	clz	r3, r3
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	431a      	orrs	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	601a      	str	r2, [r3, #0]
}
 80032cc:	bf00      	nop
 80032ce:	372c      	adds	r7, #44	; 0x2c
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <LL_GPIO_SetPinOutputType>:
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	401a      	ands	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	431a      	orrs	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	605a      	str	r2, [r3, #4]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_GPIO_SetPinSpeed>:
{
 8003308:	b480      	push	{r7}
 800330a:	b08b      	sub	sp, #44	; 0x2c
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	613b      	str	r3, [r7, #16]
  return result;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800332e:	2320      	movs	r3, #32
 8003330:	e003      	b.n	800333a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	fab3 f383 	clz	r3, r3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	2103      	movs	r1, #3
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	401a      	ands	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	fa93 f3a3 	rbit	r3, r3
 8003350:	61fb      	str	r3, [r7, #28]
  return result;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800335c:	2320      	movs	r3, #32
 800335e:	e003      	b.n	8003368 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	fa01 f303 	lsl.w	r3, r1, r3
 8003370:	431a      	orrs	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	609a      	str	r2, [r3, #8]
}
 8003376:	bf00      	nop
 8003378:	372c      	adds	r7, #44	; 0x2c
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <LL_GPIO_SetPinPull>:
{
 8003382:	b480      	push	{r7}
 8003384:	b08b      	sub	sp, #44	; 0x2c
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	613b      	str	r3, [r7, #16]
  return result;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80033a8:	2320      	movs	r3, #32
 80033aa:	e003      	b.n	80033b4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	fab3 f383 	clz	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	2103      	movs	r1, #3
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	401a      	ands	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	fa93 f3a3 	rbit	r3, r3
 80033ca:	61fb      	str	r3, [r7, #28]
  return result;
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80033d6:	2320      	movs	r3, #32
 80033d8:	e003      	b.n	80033e2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	fab3 f383 	clz	r3, r3
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ea:	431a      	orrs	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	60da      	str	r2, [r3, #12]
}
 80033f0:	bf00      	nop
 80033f2:	372c      	adds	r7, #44	; 0x2c
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <LL_GPIO_SetAFPin_0_7>:
{
 80033fc:	b480      	push	{r7}
 80033fe:	b08b      	sub	sp, #44	; 0x2c
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1a      	ldr	r2, [r3, #32]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	fa93 f3a3 	rbit	r3, r3
 8003416:	613b      	str	r3, [r7, #16]
  return result;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003422:	2320      	movs	r3, #32
 8003424:	e003      	b.n	800342e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	fab3 f383 	clz	r3, r3
 800342c:	b2db      	uxtb	r3, r3
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	210f      	movs	r1, #15
 8003432:	fa01 f303 	lsl.w	r3, r1, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	401a      	ands	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	61fb      	str	r3, [r7, #28]
  return result;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003450:	2320      	movs	r3, #32
 8003452:	e003      	b.n	800345c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	fa01 f303 	lsl.w	r3, r1, r3
 8003464:	431a      	orrs	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	621a      	str	r2, [r3, #32]
}
 800346a:	bf00      	nop
 800346c:	372c      	adds	r7, #44	; 0x2c
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <LL_GPIO_SetAFPin_8_15>:
{
 8003476:	b480      	push	{r7}
 8003478:	b08b      	sub	sp, #44	; 0x2c
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	613b      	str	r3, [r7, #16]
  return result;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800349e:	2320      	movs	r3, #32
 80034a0:	e003      	b.n	80034aa <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	fab3 f383 	clz	r3, r3
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	210f      	movs	r1, #15
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	401a      	ands	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	0a1b      	lsrs	r3, r3, #8
 80034ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	61fb      	str	r3, [r7, #28]
  return result;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80034ce:	2320      	movs	r3, #32
 80034d0:	e003      	b.n	80034da <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	fab3 f383 	clz	r3, r3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	431a      	orrs	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80034e8:	bf00      	nop
 80034ea:	372c      	adds	r7, #44	; 0x2c
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	60fb      	str	r3, [r7, #12]
  return result;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <LL_GPIO_Init+0x26>
    return 32U;
 8003516:	2320      	movs	r3, #32
 8003518:	e003      	b.n	8003522 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	fab3 f383 	clz	r3, r3
 8003520:	b2db      	uxtb	r3, r3
 8003522:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003524:	e048      	b.n	80035b8 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	2101      	movs	r1, #1
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	fa01 f303 	lsl.w	r3, r1, r3
 8003532:	4013      	ands	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d03a      	beq.n	80035b2 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d003      	beq.n	800354c <LL_GPIO_Init+0x58>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d10e      	bne.n	800356a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	461a      	mov	r2, r3
 8003552:	69b9      	ldr	r1, [r7, #24]
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff fed7 	bl	8003308 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	6819      	ldr	r1, [r3, #0]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	461a      	mov	r2, r3
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff feb7 	bl	80032d8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	461a      	mov	r2, r3
 8003570:	69b9      	ldr	r1, [r7, #24]
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff ff05 	bl	8003382 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d111      	bne.n	80035a4 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2bff      	cmp	r3, #255	; 0xff
 8003584:	d807      	bhi.n	8003596 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	461a      	mov	r2, r3
 800358c:	69b9      	ldr	r1, [r7, #24]
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff ff34 	bl	80033fc <LL_GPIO_SetAFPin_0_7>
 8003594:	e006      	b.n	80035a4 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	461a      	mov	r2, r3
 800359c:	69b9      	ldr	r1, [r7, #24]
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff ff69 	bl	8003476 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	461a      	mov	r2, r3
 80035aa:	69b9      	ldr	r1, [r7, #24]
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff fe56 	bl	800325e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3301      	adds	r3, #1
 80035b6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	fa22 f303 	lsr.w	r3, r2, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1af      	bne.n	8003526 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3720      	adds	r7, #32
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <LL_RCC_HSI_IsReady>:
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80035d4:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <LL_RCC_HSI_IsReady+0x24>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e0:	d101      	bne.n	80035e6 <LL_RCC_HSI_IsReady+0x16>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <LL_RCC_HSI_IsReady+0x18>
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000

080035f8 <LL_RCC_LSE_IsReady>:
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80035fc:	4b07      	ldr	r3, [pc, #28]	; (800361c <LL_RCC_LSE_IsReady+0x24>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b02      	cmp	r3, #2
 8003608:	d101      	bne.n	800360e <LL_RCC_LSE_IsReady+0x16>
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <LL_RCC_LSE_IsReady+0x18>
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000

08003620 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b08      	cmp	r3, #8
 800362e:	d101      	bne.n	8003634 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	40021000 	.word	0x40021000

08003644 <LL_RCC_MSI_GetRange>:
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003648:	4b04      	ldr	r3, [pc, #16]	; (800365c <LL_RCC_MSI_GetRange+0x18>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003650:	4618      	mov	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000

08003660 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003664:	4b04      	ldr	r3, [pc, #16]	; (8003678 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8003666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800366a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800366e:	4618      	mov	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	40021000 	.word	0x40021000

0800367c <LL_RCC_GetSysClkSource>:
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003680:	4b04      	ldr	r3, [pc, #16]	; (8003694 <LL_RCC_GetSysClkSource+0x18>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 030c 	and.w	r3, r3, #12
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40021000 	.word	0x40021000

08003698 <LL_RCC_GetAHBPrescaler>:
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <LL_RCC_GetAHBPrescaler+0x18>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40021000 	.word	0x40021000

080036b4 <LL_RCC_GetAPB1Prescaler>:
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80036b8:	4b04      	ldr	r3, [pc, #16]	; (80036cc <LL_RCC_GetAPB1Prescaler+0x18>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40021000 	.word	0x40021000

080036d0 <LL_RCC_GetAPB2Prescaler>:
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80036d4:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000

080036ec <LL_RCC_GetUSARTClockSource>:
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <LL_RCC_GetUSARTClockSource+0x24>)
 80036f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	401a      	ands	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	4313      	orrs	r3, r2
}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	40021000 	.word	0x40021000

08003714 <LL_RCC_GetUARTClockSource>:
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <LL_RCC_GetUARTClockSource+0x24>)
 800371e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	401a      	ands	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	041b      	lsls	r3, r3, #16
 800372a:	4313      	orrs	r3, r2
}
 800372c:	4618      	mov	r0, r3
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	40021000 	.word	0x40021000

0800373c <LL_RCC_PLL_GetMainSource>:
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003740:	4b04      	ldr	r3, [pc, #16]	; (8003754 <LL_RCC_PLL_GetMainSource+0x18>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f003 0303 	and.w	r3, r3, #3
}
 8003748:	4618      	mov	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000

08003758 <LL_RCC_PLL_GetN>:
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800375c:	4b04      	ldr	r3, [pc, #16]	; (8003770 <LL_RCC_PLL_GetN+0x18>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	0a1b      	lsrs	r3, r3, #8
 8003762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003766:	4618      	mov	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	40021000 	.word	0x40021000

08003774 <LL_RCC_PLL_GetR>:
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <LL_RCC_PLL_GetR+0x18>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40021000 	.word	0x40021000

08003790 <LL_RCC_PLL_GetDivider>:
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <LL_RCC_PLL_GetDivider+0x18>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800379c:	4618      	mov	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40021000 	.word	0x40021000

080037ac <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d137      	bne.n	800382e <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff ff94 	bl	80036ec <LL_RCC_GetUSARTClockSource>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	f200 80b3 	bhi.w	8003936 <LL_RCC_GetUSARTClockFreq+0x18a>
 80037d0:	a201      	add	r2, pc, #4	; (adr r2, 80037d8 <LL_RCC_GetUSARTClockFreq+0x2c>)
 80037d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d6:	bf00      	nop
 80037d8:	08003817 	.word	0x08003817
 80037dc:	080037e9 	.word	0x080037e9
 80037e0:	080037f1 	.word	0x080037f1
 80037e4:	08003803 	.word	0x08003803
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80037e8:	f000 f956 	bl	8003a98 <RCC_GetSystemClockFreq>
 80037ec:	60f8      	str	r0, [r7, #12]
        break;
 80037ee:	e0b3      	b.n	8003958 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80037f0:	f7ff feee 	bl	80035d0 <LL_RCC_HSI_IsReady>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 809f 	beq.w	800393a <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 80037fc:	4b59      	ldr	r3, [pc, #356]	; (8003964 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80037fe:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003800:	e09b      	b.n	800393a <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003802:	f7ff fef9 	bl	80035f8 <LL_RCC_LSE_IsReady>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8098 	beq.w	800393e <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 800380e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003812:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003814:	e093      	b.n	800393e <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003816:	f000 f93f 	bl	8003a98 <RCC_GetSystemClockFreq>
 800381a:	4603      	mov	r3, r0
 800381c:	4618      	mov	r0, r3
 800381e:	f000 f9cb 	bl	8003bb8 <RCC_GetHCLKClockFreq>
 8003822:	4603      	mov	r3, r0
 8003824:	4618      	mov	r0, r3
 8003826:	f000 f9f1 	bl	8003c0c <RCC_GetPCLK2ClockFreq>
 800382a:	60f8      	str	r0, [r7, #12]
        break;
 800382c:	e094      	b.n	8003958 <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b0c      	cmp	r3, #12
 8003832:	d146      	bne.n	80038c2 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ff59 	bl	80036ec <LL_RCC_GetUSARTClockSource>
 800383a:	4603      	mov	r3, r0
 800383c:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003840:	2b0c      	cmp	r3, #12
 8003842:	d87e      	bhi.n	8003942 <LL_RCC_GetUSARTClockFreq+0x196>
 8003844:	a201      	add	r2, pc, #4	; (adr r2, 800384c <LL_RCC_GetUSARTClockFreq+0xa0>)
 8003846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384a:	bf00      	nop
 800384c:	080038ab 	.word	0x080038ab
 8003850:	08003943 	.word	0x08003943
 8003854:	08003943 	.word	0x08003943
 8003858:	08003943 	.word	0x08003943
 800385c:	08003881 	.word	0x08003881
 8003860:	08003943 	.word	0x08003943
 8003864:	08003943 	.word	0x08003943
 8003868:	08003943 	.word	0x08003943
 800386c:	08003889 	.word	0x08003889
 8003870:	08003943 	.word	0x08003943
 8003874:	08003943 	.word	0x08003943
 8003878:	08003943 	.word	0x08003943
 800387c:	08003899 	.word	0x08003899
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003880:	f000 f90a 	bl	8003a98 <RCC_GetSystemClockFreq>
 8003884:	60f8      	str	r0, [r7, #12]
        break;
 8003886:	e067      	b.n	8003958 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003888:	f7ff fea2 	bl	80035d0 <LL_RCC_HSI_IsReady>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d059      	beq.n	8003946 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8003892:	4b34      	ldr	r3, [pc, #208]	; (8003964 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8003894:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003896:	e056      	b.n	8003946 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003898:	f7ff feae 	bl	80035f8 <LL_RCC_LSE_IsReady>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d053      	beq.n	800394a <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 80038a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038a6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80038a8:	e04f      	b.n	800394a <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80038aa:	f000 f8f5 	bl	8003a98 <RCC_GetSystemClockFreq>
 80038ae:	4603      	mov	r3, r0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 f981 	bl	8003bb8 <RCC_GetHCLKClockFreq>
 80038b6:	4603      	mov	r3, r0
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 f993 	bl	8003be4 <RCC_GetPCLK1ClockFreq>
 80038be:	60f8      	str	r0, [r7, #12]
        break;
 80038c0:	e04a      	b.n	8003958 <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b30      	cmp	r3, #48	; 0x30
 80038c6:	d147      	bne.n	8003958 <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff ff0f 	bl	80036ec <LL_RCC_GetUSARTClockSource>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80038d4:	d01a      	beq.n	800390c <LL_RCC_GetUSARTClockFreq+0x160>
 80038d6:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80038da:	d838      	bhi.n	800394e <LL_RCC_GetUSARTClockFreq+0x1a2>
 80038dc:	4a22      	ldr	r2, [pc, #136]	; (8003968 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00c      	beq.n	80038fc <LL_RCC_GetUSARTClockFreq+0x150>
 80038e2:	4a21      	ldr	r2, [pc, #132]	; (8003968 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d832      	bhi.n	800394e <LL_RCC_GetUSARTClockFreq+0x1a2>
 80038e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038ec:	d017      	beq.n	800391e <LL_RCC_GetUSARTClockFreq+0x172>
 80038ee:	4a1f      	ldr	r2, [pc, #124]	; (800396c <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d12c      	bne.n	800394e <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80038f4:	f000 f8d0 	bl	8003a98 <RCC_GetSystemClockFreq>
 80038f8:	60f8      	str	r0, [r7, #12]
          break;
 80038fa:	e02d      	b.n	8003958 <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80038fc:	f7ff fe68 	bl	80035d0 <LL_RCC_HSI_IsReady>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d025      	beq.n	8003952 <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 8003906:	4b17      	ldr	r3, [pc, #92]	; (8003964 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8003908:	60fb      	str	r3, [r7, #12]
          }
          break;
 800390a:	e022      	b.n	8003952 <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 800390c:	f7ff fe74 	bl	80035f8 <LL_RCC_LSE_IsReady>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d01f      	beq.n	8003956 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 8003916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800391a:	60fb      	str	r3, [r7, #12]
          }
          break;
 800391c:	e01b      	b.n	8003956 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800391e:	f000 f8bb 	bl	8003a98 <RCC_GetSystemClockFreq>
 8003922:	4603      	mov	r3, r0
 8003924:	4618      	mov	r0, r3
 8003926:	f000 f947 	bl	8003bb8 <RCC_GetHCLKClockFreq>
 800392a:	4603      	mov	r3, r0
 800392c:	4618      	mov	r0, r3
 800392e:	f000 f959 	bl	8003be4 <RCC_GetPCLK1ClockFreq>
 8003932:	60f8      	str	r0, [r7, #12]
          break;
 8003934:	e010      	b.n	8003958 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8003936:	bf00      	nop
 8003938:	e00e      	b.n	8003958 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800393a:	bf00      	nop
 800393c:	e00c      	b.n	8003958 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800393e:	bf00      	nop
 8003940:	e00a      	b.n	8003958 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8003942:	bf00      	nop
 8003944:	e008      	b.n	8003958 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8003946:	bf00      	nop
 8003948:	e006      	b.n	8003958 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800394a:	bf00      	nop
 800394c:	e004      	b.n	8003958 <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 800394e:	bf00      	nop
 8003950:	e002      	b.n	8003958 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8003952:	bf00      	nop
 8003954:	e000      	b.n	8003958 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8003956:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8003958:	68fb      	ldr	r3, [r7, #12]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	00f42400 	.word	0x00f42400
 8003968:	00300020 	.word	0x00300020
 800396c:	00300010 	.word	0x00300010

08003970 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2bc0      	cmp	r3, #192	; 0xc0
 8003980:	d13b      	bne.n	80039fa <LL_RCC_GetUARTClockFreq+0x8a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff fec6 	bl	8003714 <LL_RCC_GetUARTClockSource>
 8003988:	4603      	mov	r3, r0
 800398a:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800398e:	d01a      	beq.n	80039c6 <LL_RCC_GetUARTClockFreq+0x56>
 8003990:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8003994:	d82c      	bhi.n	80039f0 <LL_RCC_GetUARTClockFreq+0x80>
 8003996:	4a3b      	ldr	r2, [pc, #236]	; (8003a84 <LL_RCC_GetUARTClockFreq+0x114>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00c      	beq.n	80039b6 <LL_RCC_GetUARTClockFreq+0x46>
 800399c:	4a39      	ldr	r2, [pc, #228]	; (8003a84 <LL_RCC_GetUARTClockFreq+0x114>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d826      	bhi.n	80039f0 <LL_RCC_GetUARTClockFreq+0x80>
 80039a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039a6:	d017      	beq.n	80039d8 <LL_RCC_GetUARTClockFreq+0x68>
 80039a8:	4a37      	ldr	r2, [pc, #220]	; (8003a88 <LL_RCC_GetUARTClockFreq+0x118>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d120      	bne.n	80039f0 <LL_RCC_GetUARTClockFreq+0x80>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80039ae:	f000 f873 	bl	8003a98 <RCC_GetSystemClockFreq>
 80039b2:	60f8      	str	r0, [r7, #12]
        break;
 80039b4:	e021      	b.n	80039fa <LL_RCC_GetUARTClockFreq+0x8a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80039b6:	f7ff fe0b 	bl	80035d0 <LL_RCC_HSI_IsReady>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d019      	beq.n	80039f4 <LL_RCC_GetUARTClockFreq+0x84>
        {
          uart_frequency = HSI_VALUE;
 80039c0:	4b32      	ldr	r3, [pc, #200]	; (8003a8c <LL_RCC_GetUARTClockFreq+0x11c>)
 80039c2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80039c4:	e016      	b.n	80039f4 <LL_RCC_GetUARTClockFreq+0x84>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80039c6:	f7ff fe17 	bl	80035f8 <LL_RCC_LSE_IsReady>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d013      	beq.n	80039f8 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = LSE_VALUE;
 80039d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80039d6:	e00f      	b.n	80039f8 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80039d8:	f000 f85e 	bl	8003a98 <RCC_GetSystemClockFreq>
 80039dc:	4603      	mov	r3, r0
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 f8ea 	bl	8003bb8 <RCC_GetHCLKClockFreq>
 80039e4:	4603      	mov	r3, r0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 f8fc 	bl	8003be4 <RCC_GetPCLK1ClockFreq>
 80039ec:	60f8      	str	r0, [r7, #12]
        break;
 80039ee:	e004      	b.n	80039fa <LL_RCC_GetUARTClockFreq+0x8a>

      default:
        break;
 80039f0:	bf00      	nop
 80039f2:	e002      	b.n	80039fa <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 80039f4:	bf00      	nop
 80039f6:	e000      	b.n	80039fa <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 80039f8:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a00:	d13b      	bne.n	8003a7a <LL_RCC_GetUARTClockFreq+0x10a>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff fe86 	bl	8003714 <LL_RCC_GetUARTClockSource>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8003a0e:	d01a      	beq.n	8003a46 <LL_RCC_GetUARTClockFreq+0xd6>
 8003a10:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8003a14:	d82c      	bhi.n	8003a70 <LL_RCC_GetUARTClockFreq+0x100>
 8003a16:	4a1e      	ldr	r2, [pc, #120]	; (8003a90 <LL_RCC_GetUARTClockFreq+0x120>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00c      	beq.n	8003a36 <LL_RCC_GetUARTClockFreq+0xc6>
 8003a1c:	4a1c      	ldr	r2, [pc, #112]	; (8003a90 <LL_RCC_GetUARTClockFreq+0x120>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d826      	bhi.n	8003a70 <LL_RCC_GetUARTClockFreq+0x100>
 8003a22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a26:	d017      	beq.n	8003a58 <LL_RCC_GetUARTClockFreq+0xe8>
 8003a28:	4a1a      	ldr	r2, [pc, #104]	; (8003a94 <LL_RCC_GetUARTClockFreq+0x124>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d120      	bne.n	8003a70 <LL_RCC_GetUARTClockFreq+0x100>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8003a2e:	f000 f833 	bl	8003a98 <RCC_GetSystemClockFreq>
 8003a32:	60f8      	str	r0, [r7, #12]
        break;
 8003a34:	e021      	b.n	8003a7a <LL_RCC_GetUARTClockFreq+0x10a>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003a36:	f7ff fdcb 	bl	80035d0 <LL_RCC_HSI_IsReady>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d019      	beq.n	8003a74 <LL_RCC_GetUARTClockFreq+0x104>
        {
          uart_frequency = HSI_VALUE;
 8003a40:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <LL_RCC_GetUARTClockFreq+0x11c>)
 8003a42:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003a44:	e016      	b.n	8003a74 <LL_RCC_GetUARTClockFreq+0x104>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003a46:	f7ff fdd7 	bl	80035f8 <LL_RCC_LSE_IsReady>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d013      	beq.n	8003a78 <LL_RCC_GetUARTClockFreq+0x108>
        {
          uart_frequency = LSE_VALUE;
 8003a50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a54:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003a56:	e00f      	b.n	8003a78 <LL_RCC_GetUARTClockFreq+0x108>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003a58:	f000 f81e 	bl	8003a98 <RCC_GetSystemClockFreq>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 f8aa 	bl	8003bb8 <RCC_GetHCLKClockFreq>
 8003a64:	4603      	mov	r3, r0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 f8bc 	bl	8003be4 <RCC_GetPCLK1ClockFreq>
 8003a6c:	60f8      	str	r0, [r7, #12]
        break;
 8003a6e:	e004      	b.n	8003a7a <LL_RCC_GetUARTClockFreq+0x10a>

      default:
        break;
 8003a70:	bf00      	nop
 8003a72:	e002      	b.n	8003a7a <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8003a74:	bf00      	nop
 8003a76:	e000      	b.n	8003a7a <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8003a78:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	00c00080 	.word	0x00c00080
 8003a88:	00c00040 	.word	0x00c00040
 8003a8c:	00f42400 	.word	0x00f42400
 8003a90:	03000200 	.word	0x03000200
 8003a94:	03000100 	.word	0x03000100

08003a98 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003a9e:	f7ff fded 	bl	800367c <LL_RCC_GetSysClkSource>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b0c      	cmp	r3, #12
 8003aa6:	d851      	bhi.n	8003b4c <RCC_GetSystemClockFreq+0xb4>
 8003aa8:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <RCC_GetSystemClockFreq+0x18>)
 8003aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aae:	bf00      	nop
 8003ab0:	08003ae5 	.word	0x08003ae5
 8003ab4:	08003b4d 	.word	0x08003b4d
 8003ab8:	08003b4d 	.word	0x08003b4d
 8003abc:	08003b4d 	.word	0x08003b4d
 8003ac0:	08003b39 	.word	0x08003b39
 8003ac4:	08003b4d 	.word	0x08003b4d
 8003ac8:	08003b4d 	.word	0x08003b4d
 8003acc:	08003b4d 	.word	0x08003b4d
 8003ad0:	08003b3f 	.word	0x08003b3f
 8003ad4:	08003b4d 	.word	0x08003b4d
 8003ad8:	08003b4d 	.word	0x08003b4d
 8003adc:	08003b4d 	.word	0x08003b4d
 8003ae0:	08003b45 	.word	0x08003b45
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003ae4:	f7ff fd9c 	bl	8003620 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d111      	bne.n	8003b12 <RCC_GetSystemClockFreq+0x7a>
 8003aee:	f7ff fd97 	bl	8003620 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d004      	beq.n	8003b02 <RCC_GetSystemClockFreq+0x6a>
 8003af8:	f7ff fda4 	bl	8003644 <LL_RCC_MSI_GetRange>
 8003afc:	4603      	mov	r3, r0
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	e003      	b.n	8003b0a <RCC_GetSystemClockFreq+0x72>
 8003b02:	f7ff fdad 	bl	8003660 <LL_RCC_MSI_GetRangeAfterStandby>
 8003b06:	4603      	mov	r3, r0
 8003b08:	0a1b      	lsrs	r3, r3, #8
 8003b0a:	4a28      	ldr	r2, [pc, #160]	; (8003bac <RCC_GetSystemClockFreq+0x114>)
 8003b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b10:	e010      	b.n	8003b34 <RCC_GetSystemClockFreq+0x9c>
 8003b12:	f7ff fd85 	bl	8003620 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <RCC_GetSystemClockFreq+0x8e>
 8003b1c:	f7ff fd92 	bl	8003644 <LL_RCC_MSI_GetRange>
 8003b20:	4603      	mov	r3, r0
 8003b22:	091b      	lsrs	r3, r3, #4
 8003b24:	e003      	b.n	8003b2e <RCC_GetSystemClockFreq+0x96>
 8003b26:	f7ff fd9b 	bl	8003660 <LL_RCC_MSI_GetRangeAfterStandby>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	4a1f      	ldr	r2, [pc, #124]	; (8003bac <RCC_GetSystemClockFreq+0x114>)
 8003b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b34:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003b36:	e033      	b.n	8003ba0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003b38:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <RCC_GetSystemClockFreq+0x118>)
 8003b3a:	607b      	str	r3, [r7, #4]
      break;
 8003b3c:	e030      	b.n	8003ba0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003b3e:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <RCC_GetSystemClockFreq+0x11c>)
 8003b40:	607b      	str	r3, [r7, #4]
      break;
 8003b42:	e02d      	b.n	8003ba0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003b44:	f000 f876 	bl	8003c34 <RCC_PLL_GetFreqDomain_SYS>
 8003b48:	6078      	str	r0, [r7, #4]
      break;
 8003b4a:	e029      	b.n	8003ba0 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003b4c:	f7ff fd68 	bl	8003620 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d111      	bne.n	8003b7a <RCC_GetSystemClockFreq+0xe2>
 8003b56:	f7ff fd63 	bl	8003620 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d004      	beq.n	8003b6a <RCC_GetSystemClockFreq+0xd2>
 8003b60:	f7ff fd70 	bl	8003644 <LL_RCC_MSI_GetRange>
 8003b64:	4603      	mov	r3, r0
 8003b66:	0a1b      	lsrs	r3, r3, #8
 8003b68:	e003      	b.n	8003b72 <RCC_GetSystemClockFreq+0xda>
 8003b6a:	f7ff fd79 	bl	8003660 <LL_RCC_MSI_GetRangeAfterStandby>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	0a1b      	lsrs	r3, r3, #8
 8003b72:	4a0e      	ldr	r2, [pc, #56]	; (8003bac <RCC_GetSystemClockFreq+0x114>)
 8003b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b78:	e010      	b.n	8003b9c <RCC_GetSystemClockFreq+0x104>
 8003b7a:	f7ff fd51 	bl	8003620 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <RCC_GetSystemClockFreq+0xf6>
 8003b84:	f7ff fd5e 	bl	8003644 <LL_RCC_MSI_GetRange>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	091b      	lsrs	r3, r3, #4
 8003b8c:	e003      	b.n	8003b96 <RCC_GetSystemClockFreq+0xfe>
 8003b8e:	f7ff fd67 	bl	8003660 <LL_RCC_MSI_GetRangeAfterStandby>
 8003b92:	4603      	mov	r3, r0
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	4a05      	ldr	r2, [pc, #20]	; (8003bac <RCC_GetSystemClockFreq+0x114>)
 8003b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003b9e:	bf00      	nop
  }

  return frequency;
 8003ba0:	687b      	ldr	r3, [r7, #4]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	08006840 	.word	0x08006840
 8003bb0:	00f42400 	.word	0x00f42400
 8003bb4:	007a1200 	.word	0x007a1200

08003bb8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003bc0:	f7ff fd6a 	bl	8003698 <LL_RCC_GetAHBPrescaler>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	091b      	lsrs	r3, r3, #4
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	4a04      	ldr	r2, [pc, #16]	; (8003be0 <RCC_GetHCLKClockFreq+0x28>)
 8003bce:	5cd3      	ldrb	r3, [r2, r3]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	40d3      	lsrs	r3, r2
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	08006828 	.word	0x08006828

08003be4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003bec:	f7ff fd62 	bl	80036b4 <LL_RCC_GetAPB1Prescaler>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	0a1b      	lsrs	r3, r3, #8
 8003bf4:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <RCC_GetPCLK1ClockFreq+0x24>)
 8003bf6:	5cd3      	ldrb	r3, [r2, r3]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	40d3      	lsrs	r3, r2
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	08006838 	.word	0x08006838

08003c0c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003c14:	f7ff fd5c 	bl	80036d0 <LL_RCC_GetAPB2Prescaler>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	0adb      	lsrs	r3, r3, #11
 8003c1c:	4a04      	ldr	r2, [pc, #16]	; (8003c30 <RCC_GetPCLK2ClockFreq+0x24>)
 8003c1e:	5cd3      	ldrb	r3, [r2, r3]
 8003c20:	461a      	mov	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	40d3      	lsrs	r3, r2
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	08006838 	.word	0x08006838

08003c34 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003c3a:	f7ff fd7f 	bl	800373c <LL_RCC_PLL_GetMainSource>
 8003c3e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d036      	beq.n	8003cb4 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d836      	bhi.n	8003cba <RCC_PLL_GetFreqDomain_SYS+0x86>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d003      	beq.n	8003c5a <RCC_PLL_GetFreqDomain_SYS+0x26>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d02a      	beq.n	8003cae <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8003c58:	e02f      	b.n	8003cba <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003c5a:	f7ff fce1 	bl	8003620 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d111      	bne.n	8003c88 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8003c64:	f7ff fcdc 	bl	8003620 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d004      	beq.n	8003c78 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8003c6e:	f7ff fce9 	bl	8003644 <LL_RCC_MSI_GetRange>
 8003c72:	4603      	mov	r3, r0
 8003c74:	0a1b      	lsrs	r3, r3, #8
 8003c76:	e003      	b.n	8003c80 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8003c78:	f7ff fcf2 	bl	8003660 <LL_RCC_MSI_GetRangeAfterStandby>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	0a1b      	lsrs	r3, r3, #8
 8003c80:	4a2f      	ldr	r2, [pc, #188]	; (8003d40 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c86:	e010      	b.n	8003caa <RCC_PLL_GetFreqDomain_SYS+0x76>
 8003c88:	f7ff fcca 	bl	8003620 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <RCC_PLL_GetFreqDomain_SYS+0x68>
 8003c92:	f7ff fcd7 	bl	8003644 <LL_RCC_MSI_GetRange>
 8003c96:	4603      	mov	r3, r0
 8003c98:	091b      	lsrs	r3, r3, #4
 8003c9a:	e003      	b.n	8003ca4 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8003c9c:	f7ff fce0 	bl	8003660 <LL_RCC_MSI_GetRangeAfterStandby>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	091b      	lsrs	r3, r3, #4
 8003ca4:	4a26      	ldr	r2, [pc, #152]	; (8003d40 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003caa:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003cac:	e02f      	b.n	8003d0e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003cae:	4b25      	ldr	r3, [pc, #148]	; (8003d44 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8003cb0:	607b      	str	r3, [r7, #4]
      break;
 8003cb2:	e02c      	b.n	8003d0e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003cb4:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8003cb6:	607b      	str	r3, [r7, #4]
      break;
 8003cb8:	e029      	b.n	8003d0e <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003cba:	f7ff fcb1 	bl	8003620 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d111      	bne.n	8003ce8 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8003cc4:	f7ff fcac 	bl	8003620 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d004      	beq.n	8003cd8 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8003cce:	f7ff fcb9 	bl	8003644 <LL_RCC_MSI_GetRange>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	0a1b      	lsrs	r3, r3, #8
 8003cd6:	e003      	b.n	8003ce0 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8003cd8:	f7ff fcc2 	bl	8003660 <LL_RCC_MSI_GetRangeAfterStandby>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	4a17      	ldr	r2, [pc, #92]	; (8003d40 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce6:	e010      	b.n	8003d0a <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8003ce8:	f7ff fc9a 	bl	8003620 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d004      	beq.n	8003cfc <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8003cf2:	f7ff fca7 	bl	8003644 <LL_RCC_MSI_GetRange>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	091b      	lsrs	r3, r3, #4
 8003cfa:	e003      	b.n	8003d04 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8003cfc:	f7ff fcb0 	bl	8003660 <LL_RCC_MSI_GetRangeAfterStandby>
 8003d00:	4603      	mov	r3, r0
 8003d02:	091b      	lsrs	r3, r3, #4
 8003d04:	4a0e      	ldr	r2, [pc, #56]	; (8003d40 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003d0c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003d0e:	f7ff fd3f 	bl	8003790 <LL_RCC_PLL_GetDivider>
 8003d12:	4603      	mov	r3, r0
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	3301      	adds	r3, #1
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	fbb2 f4f3 	udiv	r4, r2, r3
 8003d1e:	f7ff fd1b 	bl	8003758 <LL_RCC_PLL_GetN>
 8003d22:	4603      	mov	r3, r0
 8003d24:	fb03 f404 	mul.w	r4, r3, r4
 8003d28:	f7ff fd24 	bl	8003774 <LL_RCC_PLL_GetR>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	0e5b      	lsrs	r3, r3, #25
 8003d30:	3301      	adds	r3, #1
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd90      	pop	{r4, r7, pc}
 8003d40:	08006840 	.word	0x08006840
 8003d44:	00f42400 	.word	0x00f42400
 8003d48:	007a1200 	.word	0x007a1200

08003d4c <LL_TIM_SetPrescaler>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <LL_TIM_SetAutoReload>:
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <LL_TIM_SetRepetitionCounter>:
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <LL_TIM_OC_SetCompareCH1>:
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_TIM_OC_SetCompareCH2>:
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <LL_TIM_OC_SetCompareCH3>:
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <LL_TIM_OC_SetCompareCH4>:
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <LL_TIM_OC_SetCompareCH5>:
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <LL_TIM_OC_SetCompareCH6>:
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <LL_TIM_GenerateEvent_UPDATE>:
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f043 0201 	orr.w	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	615a      	str	r2, [r3, #20]
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a3d      	ldr	r2, [pc, #244]	; (8003f74 <LL_TIM_Init+0x108>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d013      	beq.n	8003eac <LL_TIM_Init+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8a:	d00f      	beq.n	8003eac <LL_TIM_Init+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a3a      	ldr	r2, [pc, #232]	; (8003f78 <LL_TIM_Init+0x10c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00b      	beq.n	8003eac <LL_TIM_Init+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a39      	ldr	r2, [pc, #228]	; (8003f7c <LL_TIM_Init+0x110>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d007      	beq.n	8003eac <LL_TIM_Init+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a38      	ldr	r2, [pc, #224]	; (8003f80 <LL_TIM_Init+0x114>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <LL_TIM_Init+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a37      	ldr	r2, [pc, #220]	; (8003f84 <LL_TIM_Init+0x118>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d106      	bne.n	8003eba <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a2d      	ldr	r2, [pc, #180]	; (8003f74 <LL_TIM_Init+0x108>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d01f      	beq.n	8003f02 <LL_TIM_Init+0x96>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec8:	d01b      	beq.n	8003f02 <LL_TIM_Init+0x96>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a2a      	ldr	r2, [pc, #168]	; (8003f78 <LL_TIM_Init+0x10c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d017      	beq.n	8003f02 <LL_TIM_Init+0x96>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a29      	ldr	r2, [pc, #164]	; (8003f7c <LL_TIM_Init+0x110>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d013      	beq.n	8003f02 <LL_TIM_Init+0x96>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a28      	ldr	r2, [pc, #160]	; (8003f80 <LL_TIM_Init+0x114>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00f      	beq.n	8003f02 <LL_TIM_Init+0x96>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a27      	ldr	r2, [pc, #156]	; (8003f84 <LL_TIM_Init+0x118>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00b      	beq.n	8003f02 <LL_TIM_Init+0x96>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a26      	ldr	r2, [pc, #152]	; (8003f88 <LL_TIM_Init+0x11c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d007      	beq.n	8003f02 <LL_TIM_Init+0x96>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a25      	ldr	r2, [pc, #148]	; (8003f8c <LL_TIM_Init+0x120>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d003      	beq.n	8003f02 <LL_TIM_Init+0x96>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a24      	ldr	r2, [pc, #144]	; (8003f90 <LL_TIM_Init+0x124>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d106      	bne.n	8003f10 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff ff23 	bl	8003d68 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	4619      	mov	r1, r3
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ff0f 	bl	8003d4c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a10      	ldr	r2, [pc, #64]	; (8003f74 <LL_TIM_Init+0x108>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00f      	beq.n	8003f56 <LL_TIM_Init+0xea>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <LL_TIM_Init+0x118>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00b      	beq.n	8003f56 <LL_TIM_Init+0xea>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a11      	ldr	r2, [pc, #68]	; (8003f88 <LL_TIM_Init+0x11c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d007      	beq.n	8003f56 <LL_TIM_Init+0xea>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a10      	ldr	r2, [pc, #64]	; (8003f8c <LL_TIM_Init+0x120>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d003      	beq.n	8003f56 <LL_TIM_Init+0xea>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a0f      	ldr	r2, [pc, #60]	; (8003f90 <LL_TIM_Init+0x124>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d105      	bne.n	8003f62 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff ff11 	bl	8003d84 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff ff72 	bl	8003e4c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800
 8003f80:	40000c00 	.word	0x40000c00
 8003f84:	40013400 	.word	0x40013400
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40014400 	.word	0x40014400
 8003f90:	40014800 	.word	0x40014800

08003f94 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003faa:	d045      	beq.n	8004038 <LL_TIM_OC_Init+0xa4>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fb2:	d848      	bhi.n	8004046 <LL_TIM_OC_Init+0xb2>
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fba:	d036      	beq.n	800402a <LL_TIM_OC_Init+0x96>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc2:	d840      	bhi.n	8004046 <LL_TIM_OC_Init+0xb2>
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fca:	d027      	beq.n	800401c <LL_TIM_OC_Init+0x88>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd2:	d838      	bhi.n	8004046 <LL_TIM_OC_Init+0xb2>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fda:	d018      	beq.n	800400e <LL_TIM_OC_Init+0x7a>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe2:	d830      	bhi.n	8004046 <LL_TIM_OC_Init+0xb2>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d003      	beq.n	8003ff2 <LL_TIM_OC_Init+0x5e>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d007      	beq.n	8004000 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003ff0:	e029      	b.n	8004046 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f82d 	bl	8004054 <OC1Config>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8003ffe:	e023      	b.n	8004048 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f8a6 	bl	8004154 <OC2Config>
 8004008:	4603      	mov	r3, r0
 800400a:	75fb      	strb	r3, [r7, #23]
      break;
 800400c:	e01c      	b.n	8004048 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f923 	bl	800425c <OC3Config>
 8004016:	4603      	mov	r3, r0
 8004018:	75fb      	strb	r3, [r7, #23]
      break;
 800401a:	e015      	b.n	8004048 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 f9a0 	bl	8004364 <OC4Config>
 8004024:	4603      	mov	r3, r0
 8004026:	75fb      	strb	r3, [r7, #23]
      break;
 8004028:	e00e      	b.n	8004048 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 fa05 	bl	800443c <OC5Config>
 8004032:	4603      	mov	r3, r0
 8004034:	75fb      	strb	r3, [r7, #23]
      break;
 8004036:	e007      	b.n	8004048 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 fa62 	bl	8004504 <OC6Config>
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]
      break;
 8004044:	e000      	b.n	8004048 <LL_TIM_OC_Init+0xb4>
      break;
 8004046:	bf00      	nop
  }

  return result;
 8004048:	7dfb      	ldrb	r3, [r7, #23]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	f023 0201 	bic.w	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0303 	bic.w	r3, r3, #3
 8004082:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f023 0202 	bic.w	r2, r3, #2
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f023 0201 	bic.w	r2, r3, #1
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a22      	ldr	r2, [pc, #136]	; (8004140 <OC1Config+0xec>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00f      	beq.n	80040da <OC1Config+0x86>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a21      	ldr	r2, [pc, #132]	; (8004144 <OC1Config+0xf0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00b      	beq.n	80040da <OC1Config+0x86>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a20      	ldr	r2, [pc, #128]	; (8004148 <OC1Config+0xf4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d007      	beq.n	80040da <OC1Config+0x86>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a1f      	ldr	r2, [pc, #124]	; (800414c <OC1Config+0xf8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d003      	beq.n	80040da <OC1Config+0x86>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a1e      	ldr	r2, [pc, #120]	; (8004150 <OC1Config+0xfc>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d11e      	bne.n	8004118 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f023 0208 	bic.w	r2, r3, #8
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f023 0204 	bic.w	r2, r3, #4
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4619      	mov	r1, r3
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff fe38 	bl	8003da0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40013400 	.word	0x40013400
 8004148:	40014000 	.word	0x40014000
 800414c:	40014400 	.word	0x40014400
 8004150:	40014800 	.word	0x40014800

08004154 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f023 0210 	bic.w	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800418a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	0212      	lsls	r2, r2, #8
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f023 0220 	bic.w	r2, r3, #32
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f023 0210 	bic.w	r2, r3, #16
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	4313      	orrs	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a23      	ldr	r2, [pc, #140]	; (8004248 <OC2Config+0xf4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00f      	beq.n	80041e0 <OC2Config+0x8c>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a22      	ldr	r2, [pc, #136]	; (800424c <OC2Config+0xf8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00b      	beq.n	80041e0 <OC2Config+0x8c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a21      	ldr	r2, [pc, #132]	; (8004250 <OC2Config+0xfc>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d007      	beq.n	80041e0 <OC2Config+0x8c>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a20      	ldr	r2, [pc, #128]	; (8004254 <OC2Config+0x100>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d003      	beq.n	80041e0 <OC2Config+0x8c>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a1f      	ldr	r2, [pc, #124]	; (8004258 <OC2Config+0x104>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d11f      	bne.n	8004220 <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	019b      	lsls	r3, r3, #6
 80041ec:	4313      	orrs	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	019b      	lsls	r3, r3, #6
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4619      	mov	r1, r3
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7ff fdc2 	bl	8003dbc <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40013400 	.word	0x40013400
 8004250:	40014000 	.word	0x40014000
 8004254:	40014400 	.word	0x40014400
 8004258:	40014800 	.word	0x40014800

0800425c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0303 	bic.w	r3, r3, #3
 800428a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	021b      	lsls	r3, r3, #8
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	021b      	lsls	r3, r3, #8
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a23      	ldr	r2, [pc, #140]	; (8004350 <OC3Config+0xf4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00f      	beq.n	80042e6 <OC3Config+0x8a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a22      	ldr	r2, [pc, #136]	; (8004354 <OC3Config+0xf8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00b      	beq.n	80042e6 <OC3Config+0x8a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a21      	ldr	r2, [pc, #132]	; (8004358 <OC3Config+0xfc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d007      	beq.n	80042e6 <OC3Config+0x8a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a20      	ldr	r2, [pc, #128]	; (800435c <OC3Config+0x100>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d003      	beq.n	80042e6 <OC3Config+0x8a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a1f      	ldr	r2, [pc, #124]	; (8004360 <OC3Config+0x104>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d11f      	bne.n	8004326 <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	029b      	lsls	r3, r3, #10
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	029b      	lsls	r3, r3, #10
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	015b      	lsls	r3, r3, #5
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	4619      	mov	r1, r3
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff fd4d 	bl	8003dd8 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40012c00 	.word	0x40012c00
 8004354:	40013400 	.word	0x40013400
 8004358:	40014000 	.word	0x40014000
 800435c:	40014400 	.word	0x40014400
 8004360:	40014800 	.word	0x40014800

08004364 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800439a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	6812      	ldr	r2, [r2, #0]
 80043a2:	0212      	lsls	r2, r2, #8
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	031b      	lsls	r3, r3, #12
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	031b      	lsls	r3, r3, #12
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a17      	ldr	r2, [pc, #92]	; (8004428 <OC4Config+0xc4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00f      	beq.n	80043f0 <OC4Config+0x8c>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a16      	ldr	r2, [pc, #88]	; (800442c <OC4Config+0xc8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00b      	beq.n	80043f0 <OC4Config+0x8c>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a15      	ldr	r2, [pc, #84]	; (8004430 <OC4Config+0xcc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d007      	beq.n	80043f0 <OC4Config+0x8c>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a14      	ldr	r2, [pc, #80]	; (8004434 <OC4Config+0xd0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d003      	beq.n	80043f0 <OC4Config+0x8c>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a13      	ldr	r2, [pc, #76]	; (8004438 <OC4Config+0xd4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d107      	bne.n	8004400 <OC4Config+0x9c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	019b      	lsls	r3, r3, #6
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4619      	mov	r1, r3
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff fcee 	bl	8003df4 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40013400 	.word	0x40013400
 8004430:	40014000 	.word	0x40014000
 8004434:	40014400 	.word	0x40014400
 8004438:	40014800 	.word	0x40014800

0800443c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	4313      	orrs	r3, r2
 800446e:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	041b      	lsls	r3, r3, #16
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	4313      	orrs	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a17      	ldr	r2, [pc, #92]	; (80044f0 <OC5Config+0xb4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00f      	beq.n	80044b8 <OC5Config+0x7c>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a16      	ldr	r2, [pc, #88]	; (80044f4 <OC5Config+0xb8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00b      	beq.n	80044b8 <OC5Config+0x7c>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a15      	ldr	r2, [pc, #84]	; (80044f8 <OC5Config+0xbc>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d007      	beq.n	80044b8 <OC5Config+0x7c>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a14      	ldr	r2, [pc, #80]	; (80044fc <OC5Config+0xc0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d003      	beq.n	80044b8 <OC5Config+0x7c>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a13      	ldr	r2, [pc, #76]	; (8004500 <OC5Config+0xc4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d109      	bne.n	80044cc <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	4619      	mov	r1, r3
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff fc99 	bl	8003e10 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40012c00 	.word	0x40012c00
 80044f4:	40013400 	.word	0x40013400
 80044f8:	40014000 	.word	0x40014000
 80044fc:	40014400 	.word	0x40014400
 8004500:	40014800 	.word	0x40014800

08004504 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800452c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	0212      	lsls	r2, r2, #8
 8004536:	4313      	orrs	r3, r2
 8004538:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	051b      	lsls	r3, r3, #20
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	051b      	lsls	r3, r3, #20
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a16      	ldr	r2, [pc, #88]	; (80045b8 <OC6Config+0xb4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00f      	beq.n	8004582 <OC6Config+0x7e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a15      	ldr	r2, [pc, #84]	; (80045bc <OC6Config+0xb8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00b      	beq.n	8004582 <OC6Config+0x7e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <OC6Config+0xbc>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d007      	beq.n	8004582 <OC6Config+0x7e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <OC6Config+0xc0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d003      	beq.n	8004582 <OC6Config+0x7e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a12      	ldr	r2, [pc, #72]	; (80045c8 <OC6Config+0xc4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d109      	bne.n	8004596 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	029b      	lsls	r3, r3, #10
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff fc44 	bl	8003e30 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40012c00 	.word	0x40012c00
 80045bc:	40013400 	.word	0x40013400
 80045c0:	40014000 	.word	0x40014000
 80045c4:	40014400 	.word	0x40014400
 80045c8:	40014800 	.word	0x40014800

080045cc <LL_USART_IsEnabled>:
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <LL_USART_IsEnabled+0x18>
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <LL_USART_IsEnabled+0x1a>
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <LL_USART_SetStopBitsLength>:
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	605a      	str	r2, [r3, #4]
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <LL_USART_SetHWFlowCtrl>:
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	609a      	str	r2, [r3, #8]
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <LL_USART_SetBaudRate>:
{
 800463e:	b480      	push	{r7}
 8004640:	b087      	sub	sp, #28
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
 800464a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004652:	d11a      	bne.n	800468a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	005a      	lsls	r2, r3, #1
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	085b      	lsrs	r3, r3, #1
 800465c:	441a      	add	r2, r3
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	b29b      	uxth	r3, r3
 8004666:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800466e:	4013      	ands	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	085b      	lsrs	r3, r3, #1
 8004676:	b29b      	uxth	r3, r3
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	60da      	str	r2, [r3, #12]
}
 8004688:	e00a      	b.n	80046a0 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	085a      	lsrs	r2, r3, #1
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	441a      	add	r2, r3
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	b29b      	uxth	r3, r3
 800469a:	461a      	mov	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	60da      	str	r2, [r3, #12]
}
 80046a0:	bf00      	nop
 80046a2:	371c      	adds	r7, #28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80046ba:	2300      	movs	r3, #0
 80046bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff ff84 	bl	80045cc <LL_USART_IsEnabled>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d15b      	bne.n	8004782 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	4b2f      	ldr	r3, [pc, #188]	; (800478c <LL_USART_Init+0xe0>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	6851      	ldr	r1, [r2, #4]
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	68d2      	ldr	r2, [r2, #12]
 80046da:	4311      	orrs	r1, r2
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	6912      	ldr	r2, [r2, #16]
 80046e0:	4311      	orrs	r1, r2
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	6992      	ldr	r2, [r2, #24]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	4619      	mov	r1, r3
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff ff7c 	bl	80045f2 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	4619      	mov	r1, r3
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff ff89 	bl	8004618 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a21      	ldr	r2, [pc, #132]	; (8004790 <LL_USART_Init+0xe4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d104      	bne.n	8004718 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800470e:	2003      	movs	r0, #3
 8004710:	f7ff f84c 	bl	80037ac <LL_RCC_GetUSARTClockFreq>
 8004714:	60b8      	str	r0, [r7, #8]
 8004716:	e023      	b.n	8004760 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <LL_USART_Init+0xe8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d104      	bne.n	800472a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8004720:	200c      	movs	r0, #12
 8004722:	f7ff f843 	bl	80037ac <LL_RCC_GetUSARTClockFreq>
 8004726:	60b8      	str	r0, [r7, #8]
 8004728:	e01a      	b.n	8004760 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a1a      	ldr	r2, [pc, #104]	; (8004798 <LL_USART_Init+0xec>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d104      	bne.n	800473c <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8004732:	2030      	movs	r0, #48	; 0x30
 8004734:	f7ff f83a 	bl	80037ac <LL_RCC_GetUSARTClockFreq>
 8004738:	60b8      	str	r0, [r7, #8]
 800473a:	e011      	b.n	8004760 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a17      	ldr	r2, [pc, #92]	; (800479c <LL_USART_Init+0xf0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d104      	bne.n	800474e <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8004744:	20c0      	movs	r0, #192	; 0xc0
 8004746:	f7ff f913 	bl	8003970 <LL_RCC_GetUARTClockFreq>
 800474a:	60b8      	str	r0, [r7, #8]
 800474c:	e008      	b.n	8004760 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a13      	ldr	r2, [pc, #76]	; (80047a0 <LL_USART_Init+0xf4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d104      	bne.n	8004760 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8004756:	f44f 7040 	mov.w	r0, #768	; 0x300
 800475a:	f7ff f909 	bl	8003970 <LL_RCC_GetUARTClockFreq>
 800475e:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00d      	beq.n	8004782 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 800476e:	2300      	movs	r3, #0
 8004770:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff ff5e 	bl	800463e <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004782:	7bfb      	ldrb	r3, [r7, #15]
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	efff69f3 	.word	0xefff69f3
 8004790:	40013800 	.word	0x40013800
 8004794:	40004400 	.word	0x40004400
 8004798:	40004800 	.word	0x40004800
 800479c:	40004c00 	.word	0x40004c00
 80047a0:	40005000 	.word	0x40005000

080047a4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	4a07      	ldr	r2, [pc, #28]	; (80047d4 <LL_InitTick+0x30>)
 80047b8:	3b01      	subs	r3, #1
 80047ba:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80047bc:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <LL_InitTick+0x30>)
 80047be:	2200      	movs	r2, #0
 80047c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047c2:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <LL_InitTick+0x30>)
 80047c4:	2205      	movs	r2, #5
 80047c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	e000e010 	.word	0xe000e010

080047d8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80047e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff ffdd 	bl	80047a4 <LL_InitTick>
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80047fc:	4a04      	ldr	r2, [pc, #16]	; (8004810 <LL_SetSystemCoreClock+0x1c>)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6013      	str	r3, [r2, #0]
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	20000000 	.word	0x20000000

08004814 <std>:
 8004814:	2300      	movs	r3, #0
 8004816:	b510      	push	{r4, lr}
 8004818:	4604      	mov	r4, r0
 800481a:	e9c0 3300 	strd	r3, r3, [r0]
 800481e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004822:	6083      	str	r3, [r0, #8]
 8004824:	8181      	strh	r1, [r0, #12]
 8004826:	6643      	str	r3, [r0, #100]	; 0x64
 8004828:	81c2      	strh	r2, [r0, #14]
 800482a:	6183      	str	r3, [r0, #24]
 800482c:	4619      	mov	r1, r3
 800482e:	2208      	movs	r2, #8
 8004830:	305c      	adds	r0, #92	; 0x5c
 8004832:	f000 f906 	bl	8004a42 <memset>
 8004836:	4b0d      	ldr	r3, [pc, #52]	; (800486c <std+0x58>)
 8004838:	6263      	str	r3, [r4, #36]	; 0x24
 800483a:	4b0d      	ldr	r3, [pc, #52]	; (8004870 <std+0x5c>)
 800483c:	62a3      	str	r3, [r4, #40]	; 0x28
 800483e:	4b0d      	ldr	r3, [pc, #52]	; (8004874 <std+0x60>)
 8004840:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004842:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <std+0x64>)
 8004844:	6323      	str	r3, [r4, #48]	; 0x30
 8004846:	4b0d      	ldr	r3, [pc, #52]	; (800487c <std+0x68>)
 8004848:	6224      	str	r4, [r4, #32]
 800484a:	429c      	cmp	r4, r3
 800484c:	d006      	beq.n	800485c <std+0x48>
 800484e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004852:	4294      	cmp	r4, r2
 8004854:	d002      	beq.n	800485c <std+0x48>
 8004856:	33d0      	adds	r3, #208	; 0xd0
 8004858:	429c      	cmp	r4, r3
 800485a:	d105      	bne.n	8004868 <std+0x54>
 800485c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004864:	f000 b966 	b.w	8004b34 <__retarget_lock_init_recursive>
 8004868:	bd10      	pop	{r4, pc}
 800486a:	bf00      	nop
 800486c:	080049bd 	.word	0x080049bd
 8004870:	080049df 	.word	0x080049df
 8004874:	08004a17 	.word	0x08004a17
 8004878:	08004a3b 	.word	0x08004a3b
 800487c:	200000c8 	.word	0x200000c8

08004880 <stdio_exit_handler>:
 8004880:	4a02      	ldr	r2, [pc, #8]	; (800488c <stdio_exit_handler+0xc>)
 8004882:	4903      	ldr	r1, [pc, #12]	; (8004890 <stdio_exit_handler+0x10>)
 8004884:	4803      	ldr	r0, [pc, #12]	; (8004894 <stdio_exit_handler+0x14>)
 8004886:	f000 b869 	b.w	800495c <_fwalk_sglue>
 800488a:	bf00      	nop
 800488c:	20000004 	.word	0x20000004
 8004890:	080053fd 	.word	0x080053fd
 8004894:	20000010 	.word	0x20000010

08004898 <cleanup_stdio>:
 8004898:	6841      	ldr	r1, [r0, #4]
 800489a:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <cleanup_stdio+0x34>)
 800489c:	4299      	cmp	r1, r3
 800489e:	b510      	push	{r4, lr}
 80048a0:	4604      	mov	r4, r0
 80048a2:	d001      	beq.n	80048a8 <cleanup_stdio+0x10>
 80048a4:	f000 fdaa 	bl	80053fc <_fflush_r>
 80048a8:	68a1      	ldr	r1, [r4, #8]
 80048aa:	4b09      	ldr	r3, [pc, #36]	; (80048d0 <cleanup_stdio+0x38>)
 80048ac:	4299      	cmp	r1, r3
 80048ae:	d002      	beq.n	80048b6 <cleanup_stdio+0x1e>
 80048b0:	4620      	mov	r0, r4
 80048b2:	f000 fda3 	bl	80053fc <_fflush_r>
 80048b6:	68e1      	ldr	r1, [r4, #12]
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <cleanup_stdio+0x3c>)
 80048ba:	4299      	cmp	r1, r3
 80048bc:	d004      	beq.n	80048c8 <cleanup_stdio+0x30>
 80048be:	4620      	mov	r0, r4
 80048c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048c4:	f000 bd9a 	b.w	80053fc <_fflush_r>
 80048c8:	bd10      	pop	{r4, pc}
 80048ca:	bf00      	nop
 80048cc:	200000c8 	.word	0x200000c8
 80048d0:	20000130 	.word	0x20000130
 80048d4:	20000198 	.word	0x20000198

080048d8 <global_stdio_init.part.0>:
 80048d8:	b510      	push	{r4, lr}
 80048da:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <global_stdio_init.part.0+0x30>)
 80048dc:	4c0b      	ldr	r4, [pc, #44]	; (800490c <global_stdio_init.part.0+0x34>)
 80048de:	4a0c      	ldr	r2, [pc, #48]	; (8004910 <global_stdio_init.part.0+0x38>)
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	4620      	mov	r0, r4
 80048e4:	2200      	movs	r2, #0
 80048e6:	2104      	movs	r1, #4
 80048e8:	f7ff ff94 	bl	8004814 <std>
 80048ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80048f0:	2201      	movs	r2, #1
 80048f2:	2109      	movs	r1, #9
 80048f4:	f7ff ff8e 	bl	8004814 <std>
 80048f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80048fc:	2202      	movs	r2, #2
 80048fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004902:	2112      	movs	r1, #18
 8004904:	f7ff bf86 	b.w	8004814 <std>
 8004908:	20000200 	.word	0x20000200
 800490c:	200000c8 	.word	0x200000c8
 8004910:	08004881 	.word	0x08004881

08004914 <__sfp_lock_acquire>:
 8004914:	4801      	ldr	r0, [pc, #4]	; (800491c <__sfp_lock_acquire+0x8>)
 8004916:	f000 b90e 	b.w	8004b36 <__retarget_lock_acquire_recursive>
 800491a:	bf00      	nop
 800491c:	20000209 	.word	0x20000209

08004920 <__sfp_lock_release>:
 8004920:	4801      	ldr	r0, [pc, #4]	; (8004928 <__sfp_lock_release+0x8>)
 8004922:	f000 b909 	b.w	8004b38 <__retarget_lock_release_recursive>
 8004926:	bf00      	nop
 8004928:	20000209 	.word	0x20000209

0800492c <__sinit>:
 800492c:	b510      	push	{r4, lr}
 800492e:	4604      	mov	r4, r0
 8004930:	f7ff fff0 	bl	8004914 <__sfp_lock_acquire>
 8004934:	6a23      	ldr	r3, [r4, #32]
 8004936:	b11b      	cbz	r3, 8004940 <__sinit+0x14>
 8004938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800493c:	f7ff bff0 	b.w	8004920 <__sfp_lock_release>
 8004940:	4b04      	ldr	r3, [pc, #16]	; (8004954 <__sinit+0x28>)
 8004942:	6223      	str	r3, [r4, #32]
 8004944:	4b04      	ldr	r3, [pc, #16]	; (8004958 <__sinit+0x2c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1f5      	bne.n	8004938 <__sinit+0xc>
 800494c:	f7ff ffc4 	bl	80048d8 <global_stdio_init.part.0>
 8004950:	e7f2      	b.n	8004938 <__sinit+0xc>
 8004952:	bf00      	nop
 8004954:	08004899 	.word	0x08004899
 8004958:	20000200 	.word	0x20000200

0800495c <_fwalk_sglue>:
 800495c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004960:	4607      	mov	r7, r0
 8004962:	4688      	mov	r8, r1
 8004964:	4614      	mov	r4, r2
 8004966:	2600      	movs	r6, #0
 8004968:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800496c:	f1b9 0901 	subs.w	r9, r9, #1
 8004970:	d505      	bpl.n	800497e <_fwalk_sglue+0x22>
 8004972:	6824      	ldr	r4, [r4, #0]
 8004974:	2c00      	cmp	r4, #0
 8004976:	d1f7      	bne.n	8004968 <_fwalk_sglue+0xc>
 8004978:	4630      	mov	r0, r6
 800497a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800497e:	89ab      	ldrh	r3, [r5, #12]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d907      	bls.n	8004994 <_fwalk_sglue+0x38>
 8004984:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004988:	3301      	adds	r3, #1
 800498a:	d003      	beq.n	8004994 <_fwalk_sglue+0x38>
 800498c:	4629      	mov	r1, r5
 800498e:	4638      	mov	r0, r7
 8004990:	47c0      	blx	r8
 8004992:	4306      	orrs	r6, r0
 8004994:	3568      	adds	r5, #104	; 0x68
 8004996:	e7e9      	b.n	800496c <_fwalk_sglue+0x10>

08004998 <iprintf>:
 8004998:	b40f      	push	{r0, r1, r2, r3}
 800499a:	b507      	push	{r0, r1, r2, lr}
 800499c:	4906      	ldr	r1, [pc, #24]	; (80049b8 <iprintf+0x20>)
 800499e:	ab04      	add	r3, sp, #16
 80049a0:	6808      	ldr	r0, [r1, #0]
 80049a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80049a6:	6881      	ldr	r1, [r0, #8]
 80049a8:	9301      	str	r3, [sp, #4]
 80049aa:	f000 f9f7 	bl	8004d9c <_vfiprintf_r>
 80049ae:	b003      	add	sp, #12
 80049b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049b4:	b004      	add	sp, #16
 80049b6:	4770      	bx	lr
 80049b8:	2000005c 	.word	0x2000005c

080049bc <__sread>:
 80049bc:	b510      	push	{r4, lr}
 80049be:	460c      	mov	r4, r1
 80049c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049c4:	f000 f868 	bl	8004a98 <_read_r>
 80049c8:	2800      	cmp	r0, #0
 80049ca:	bfab      	itete	ge
 80049cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049ce:	89a3      	ldrhlt	r3, [r4, #12]
 80049d0:	181b      	addge	r3, r3, r0
 80049d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049d6:	bfac      	ite	ge
 80049d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80049da:	81a3      	strhlt	r3, [r4, #12]
 80049dc:	bd10      	pop	{r4, pc}

080049de <__swrite>:
 80049de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e2:	461f      	mov	r7, r3
 80049e4:	898b      	ldrh	r3, [r1, #12]
 80049e6:	05db      	lsls	r3, r3, #23
 80049e8:	4605      	mov	r5, r0
 80049ea:	460c      	mov	r4, r1
 80049ec:	4616      	mov	r6, r2
 80049ee:	d505      	bpl.n	80049fc <__swrite+0x1e>
 80049f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049f4:	2302      	movs	r3, #2
 80049f6:	2200      	movs	r2, #0
 80049f8:	f000 f83c 	bl	8004a74 <_lseek_r>
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a06:	81a3      	strh	r3, [r4, #12]
 8004a08:	4632      	mov	r2, r6
 8004a0a:	463b      	mov	r3, r7
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a12:	f000 b853 	b.w	8004abc <_write_r>

08004a16 <__sseek>:
 8004a16:	b510      	push	{r4, lr}
 8004a18:	460c      	mov	r4, r1
 8004a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a1e:	f000 f829 	bl	8004a74 <_lseek_r>
 8004a22:	1c43      	adds	r3, r0, #1
 8004a24:	89a3      	ldrh	r3, [r4, #12]
 8004a26:	bf15      	itete	ne
 8004a28:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a32:	81a3      	strheq	r3, [r4, #12]
 8004a34:	bf18      	it	ne
 8004a36:	81a3      	strhne	r3, [r4, #12]
 8004a38:	bd10      	pop	{r4, pc}

08004a3a <__sclose>:
 8004a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a3e:	f000 b809 	b.w	8004a54 <_close_r>

08004a42 <memset>:
 8004a42:	4402      	add	r2, r0
 8004a44:	4603      	mov	r3, r0
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d100      	bne.n	8004a4c <memset+0xa>
 8004a4a:	4770      	bx	lr
 8004a4c:	f803 1b01 	strb.w	r1, [r3], #1
 8004a50:	e7f9      	b.n	8004a46 <memset+0x4>
	...

08004a54 <_close_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4d06      	ldr	r5, [pc, #24]	; (8004a70 <_close_r+0x1c>)
 8004a58:	2300      	movs	r3, #0
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	4608      	mov	r0, r1
 8004a5e:	602b      	str	r3, [r5, #0]
 8004a60:	f7fe f92a 	bl	8002cb8 <_close>
 8004a64:	1c43      	adds	r3, r0, #1
 8004a66:	d102      	bne.n	8004a6e <_close_r+0x1a>
 8004a68:	682b      	ldr	r3, [r5, #0]
 8004a6a:	b103      	cbz	r3, 8004a6e <_close_r+0x1a>
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	bd38      	pop	{r3, r4, r5, pc}
 8004a70:	20000204 	.word	0x20000204

08004a74 <_lseek_r>:
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	4d07      	ldr	r5, [pc, #28]	; (8004a94 <_lseek_r+0x20>)
 8004a78:	4604      	mov	r4, r0
 8004a7a:	4608      	mov	r0, r1
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	2200      	movs	r2, #0
 8004a80:	602a      	str	r2, [r5, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	f7fe f93f 	bl	8002d06 <_lseek>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	d102      	bne.n	8004a92 <_lseek_r+0x1e>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	b103      	cbz	r3, 8004a92 <_lseek_r+0x1e>
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	bd38      	pop	{r3, r4, r5, pc}
 8004a94:	20000204 	.word	0x20000204

08004a98 <_read_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	4d07      	ldr	r5, [pc, #28]	; (8004ab8 <_read_r+0x20>)
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	4608      	mov	r0, r1
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	602a      	str	r2, [r5, #0]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f7fe f8e9 	bl	8002c7e <_read>
 8004aac:	1c43      	adds	r3, r0, #1
 8004aae:	d102      	bne.n	8004ab6 <_read_r+0x1e>
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	b103      	cbz	r3, 8004ab6 <_read_r+0x1e>
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	bd38      	pop	{r3, r4, r5, pc}
 8004ab8:	20000204 	.word	0x20000204

08004abc <_write_r>:
 8004abc:	b538      	push	{r3, r4, r5, lr}
 8004abe:	4d07      	ldr	r5, [pc, #28]	; (8004adc <_write_r+0x20>)
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	4608      	mov	r0, r1
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	602a      	str	r2, [r5, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	f7fc fa40 	bl	8000f50 <_write>
 8004ad0:	1c43      	adds	r3, r0, #1
 8004ad2:	d102      	bne.n	8004ada <_write_r+0x1e>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	b103      	cbz	r3, 8004ada <_write_r+0x1e>
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	bd38      	pop	{r3, r4, r5, pc}
 8004adc:	20000204 	.word	0x20000204

08004ae0 <__errno>:
 8004ae0:	4b01      	ldr	r3, [pc, #4]	; (8004ae8 <__errno+0x8>)
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	2000005c 	.word	0x2000005c

08004aec <__libc_init_array>:
 8004aec:	b570      	push	{r4, r5, r6, lr}
 8004aee:	4d0d      	ldr	r5, [pc, #52]	; (8004b24 <__libc_init_array+0x38>)
 8004af0:	4c0d      	ldr	r4, [pc, #52]	; (8004b28 <__libc_init_array+0x3c>)
 8004af2:	1b64      	subs	r4, r4, r5
 8004af4:	10a4      	asrs	r4, r4, #2
 8004af6:	2600      	movs	r6, #0
 8004af8:	42a6      	cmp	r6, r4
 8004afa:	d109      	bne.n	8004b10 <__libc_init_array+0x24>
 8004afc:	4d0b      	ldr	r5, [pc, #44]	; (8004b2c <__libc_init_array+0x40>)
 8004afe:	4c0c      	ldr	r4, [pc, #48]	; (8004b30 <__libc_init_array+0x44>)
 8004b00:	f001 fe6e 	bl	80067e0 <_init>
 8004b04:	1b64      	subs	r4, r4, r5
 8004b06:	10a4      	asrs	r4, r4, #2
 8004b08:	2600      	movs	r6, #0
 8004b0a:	42a6      	cmp	r6, r4
 8004b0c:	d105      	bne.n	8004b1a <__libc_init_array+0x2e>
 8004b0e:	bd70      	pop	{r4, r5, r6, pc}
 8004b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b14:	4798      	blx	r3
 8004b16:	3601      	adds	r6, #1
 8004b18:	e7ee      	b.n	8004af8 <__libc_init_array+0xc>
 8004b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b1e:	4798      	blx	r3
 8004b20:	3601      	adds	r6, #1
 8004b22:	e7f2      	b.n	8004b0a <__libc_init_array+0x1e>
 8004b24:	08006a90 	.word	0x08006a90
 8004b28:	08006a90 	.word	0x08006a90
 8004b2c:	08006a90 	.word	0x08006a90
 8004b30:	08006a94 	.word	0x08006a94

08004b34 <__retarget_lock_init_recursive>:
 8004b34:	4770      	bx	lr

08004b36 <__retarget_lock_acquire_recursive>:
 8004b36:	4770      	bx	lr

08004b38 <__retarget_lock_release_recursive>:
 8004b38:	4770      	bx	lr

08004b3a <memcpy>:
 8004b3a:	440a      	add	r2, r1
 8004b3c:	4291      	cmp	r1, r2
 8004b3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b42:	d100      	bne.n	8004b46 <memcpy+0xc>
 8004b44:	4770      	bx	lr
 8004b46:	b510      	push	{r4, lr}
 8004b48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b50:	4291      	cmp	r1, r2
 8004b52:	d1f9      	bne.n	8004b48 <memcpy+0xe>
 8004b54:	bd10      	pop	{r4, pc}
	...

08004b58 <_free_r>:
 8004b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b5a:	2900      	cmp	r1, #0
 8004b5c:	d044      	beq.n	8004be8 <_free_r+0x90>
 8004b5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b62:	9001      	str	r0, [sp, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f1a1 0404 	sub.w	r4, r1, #4
 8004b6a:	bfb8      	it	lt
 8004b6c:	18e4      	addlt	r4, r4, r3
 8004b6e:	f000 f8df 	bl	8004d30 <__malloc_lock>
 8004b72:	4a1e      	ldr	r2, [pc, #120]	; (8004bec <_free_r+0x94>)
 8004b74:	9801      	ldr	r0, [sp, #4]
 8004b76:	6813      	ldr	r3, [r2, #0]
 8004b78:	b933      	cbnz	r3, 8004b88 <_free_r+0x30>
 8004b7a:	6063      	str	r3, [r4, #4]
 8004b7c:	6014      	str	r4, [r2, #0]
 8004b7e:	b003      	add	sp, #12
 8004b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b84:	f000 b8da 	b.w	8004d3c <__malloc_unlock>
 8004b88:	42a3      	cmp	r3, r4
 8004b8a:	d908      	bls.n	8004b9e <_free_r+0x46>
 8004b8c:	6825      	ldr	r5, [r4, #0]
 8004b8e:	1961      	adds	r1, r4, r5
 8004b90:	428b      	cmp	r3, r1
 8004b92:	bf01      	itttt	eq
 8004b94:	6819      	ldreq	r1, [r3, #0]
 8004b96:	685b      	ldreq	r3, [r3, #4]
 8004b98:	1949      	addeq	r1, r1, r5
 8004b9a:	6021      	streq	r1, [r4, #0]
 8004b9c:	e7ed      	b.n	8004b7a <_free_r+0x22>
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	b10b      	cbz	r3, 8004ba8 <_free_r+0x50>
 8004ba4:	42a3      	cmp	r3, r4
 8004ba6:	d9fa      	bls.n	8004b9e <_free_r+0x46>
 8004ba8:	6811      	ldr	r1, [r2, #0]
 8004baa:	1855      	adds	r5, r2, r1
 8004bac:	42a5      	cmp	r5, r4
 8004bae:	d10b      	bne.n	8004bc8 <_free_r+0x70>
 8004bb0:	6824      	ldr	r4, [r4, #0]
 8004bb2:	4421      	add	r1, r4
 8004bb4:	1854      	adds	r4, r2, r1
 8004bb6:	42a3      	cmp	r3, r4
 8004bb8:	6011      	str	r1, [r2, #0]
 8004bba:	d1e0      	bne.n	8004b7e <_free_r+0x26>
 8004bbc:	681c      	ldr	r4, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	6053      	str	r3, [r2, #4]
 8004bc2:	440c      	add	r4, r1
 8004bc4:	6014      	str	r4, [r2, #0]
 8004bc6:	e7da      	b.n	8004b7e <_free_r+0x26>
 8004bc8:	d902      	bls.n	8004bd0 <_free_r+0x78>
 8004bca:	230c      	movs	r3, #12
 8004bcc:	6003      	str	r3, [r0, #0]
 8004bce:	e7d6      	b.n	8004b7e <_free_r+0x26>
 8004bd0:	6825      	ldr	r5, [r4, #0]
 8004bd2:	1961      	adds	r1, r4, r5
 8004bd4:	428b      	cmp	r3, r1
 8004bd6:	bf04      	itt	eq
 8004bd8:	6819      	ldreq	r1, [r3, #0]
 8004bda:	685b      	ldreq	r3, [r3, #4]
 8004bdc:	6063      	str	r3, [r4, #4]
 8004bde:	bf04      	itt	eq
 8004be0:	1949      	addeq	r1, r1, r5
 8004be2:	6021      	streq	r1, [r4, #0]
 8004be4:	6054      	str	r4, [r2, #4]
 8004be6:	e7ca      	b.n	8004b7e <_free_r+0x26>
 8004be8:	b003      	add	sp, #12
 8004bea:	bd30      	pop	{r4, r5, pc}
 8004bec:	2000020c 	.word	0x2000020c

08004bf0 <sbrk_aligned>:
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	4e0e      	ldr	r6, [pc, #56]	; (8004c2c <sbrk_aligned+0x3c>)
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	6831      	ldr	r1, [r6, #0]
 8004bf8:	4605      	mov	r5, r0
 8004bfa:	b911      	cbnz	r1, 8004c02 <sbrk_aligned+0x12>
 8004bfc:	f000 fcbc 	bl	8005578 <_sbrk_r>
 8004c00:	6030      	str	r0, [r6, #0]
 8004c02:	4621      	mov	r1, r4
 8004c04:	4628      	mov	r0, r5
 8004c06:	f000 fcb7 	bl	8005578 <_sbrk_r>
 8004c0a:	1c43      	adds	r3, r0, #1
 8004c0c:	d00a      	beq.n	8004c24 <sbrk_aligned+0x34>
 8004c0e:	1cc4      	adds	r4, r0, #3
 8004c10:	f024 0403 	bic.w	r4, r4, #3
 8004c14:	42a0      	cmp	r0, r4
 8004c16:	d007      	beq.n	8004c28 <sbrk_aligned+0x38>
 8004c18:	1a21      	subs	r1, r4, r0
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	f000 fcac 	bl	8005578 <_sbrk_r>
 8004c20:	3001      	adds	r0, #1
 8004c22:	d101      	bne.n	8004c28 <sbrk_aligned+0x38>
 8004c24:	f04f 34ff 	mov.w	r4, #4294967295
 8004c28:	4620      	mov	r0, r4
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}
 8004c2c:	20000210 	.word	0x20000210

08004c30 <_malloc_r>:
 8004c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c34:	1ccd      	adds	r5, r1, #3
 8004c36:	f025 0503 	bic.w	r5, r5, #3
 8004c3a:	3508      	adds	r5, #8
 8004c3c:	2d0c      	cmp	r5, #12
 8004c3e:	bf38      	it	cc
 8004c40:	250c      	movcc	r5, #12
 8004c42:	2d00      	cmp	r5, #0
 8004c44:	4607      	mov	r7, r0
 8004c46:	db01      	blt.n	8004c4c <_malloc_r+0x1c>
 8004c48:	42a9      	cmp	r1, r5
 8004c4a:	d905      	bls.n	8004c58 <_malloc_r+0x28>
 8004c4c:	230c      	movs	r3, #12
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	2600      	movs	r6, #0
 8004c52:	4630      	mov	r0, r6
 8004c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d2c <_malloc_r+0xfc>
 8004c5c:	f000 f868 	bl	8004d30 <__malloc_lock>
 8004c60:	f8d8 3000 	ldr.w	r3, [r8]
 8004c64:	461c      	mov	r4, r3
 8004c66:	bb5c      	cbnz	r4, 8004cc0 <_malloc_r+0x90>
 8004c68:	4629      	mov	r1, r5
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	f7ff ffc0 	bl	8004bf0 <sbrk_aligned>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	4604      	mov	r4, r0
 8004c74:	d155      	bne.n	8004d22 <_malloc_r+0xf2>
 8004c76:	f8d8 4000 	ldr.w	r4, [r8]
 8004c7a:	4626      	mov	r6, r4
 8004c7c:	2e00      	cmp	r6, #0
 8004c7e:	d145      	bne.n	8004d0c <_malloc_r+0xdc>
 8004c80:	2c00      	cmp	r4, #0
 8004c82:	d048      	beq.n	8004d16 <_malloc_r+0xe6>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	4631      	mov	r1, r6
 8004c88:	4638      	mov	r0, r7
 8004c8a:	eb04 0903 	add.w	r9, r4, r3
 8004c8e:	f000 fc73 	bl	8005578 <_sbrk_r>
 8004c92:	4581      	cmp	r9, r0
 8004c94:	d13f      	bne.n	8004d16 <_malloc_r+0xe6>
 8004c96:	6821      	ldr	r1, [r4, #0]
 8004c98:	1a6d      	subs	r5, r5, r1
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	4638      	mov	r0, r7
 8004c9e:	f7ff ffa7 	bl	8004bf0 <sbrk_aligned>
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	d037      	beq.n	8004d16 <_malloc_r+0xe6>
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	442b      	add	r3, r5
 8004caa:	6023      	str	r3, [r4, #0]
 8004cac:	f8d8 3000 	ldr.w	r3, [r8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d038      	beq.n	8004d26 <_malloc_r+0xf6>
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	42a2      	cmp	r2, r4
 8004cb8:	d12b      	bne.n	8004d12 <_malloc_r+0xe2>
 8004cba:	2200      	movs	r2, #0
 8004cbc:	605a      	str	r2, [r3, #4]
 8004cbe:	e00f      	b.n	8004ce0 <_malloc_r+0xb0>
 8004cc0:	6822      	ldr	r2, [r4, #0]
 8004cc2:	1b52      	subs	r2, r2, r5
 8004cc4:	d41f      	bmi.n	8004d06 <_malloc_r+0xd6>
 8004cc6:	2a0b      	cmp	r2, #11
 8004cc8:	d917      	bls.n	8004cfa <_malloc_r+0xca>
 8004cca:	1961      	adds	r1, r4, r5
 8004ccc:	42a3      	cmp	r3, r4
 8004cce:	6025      	str	r5, [r4, #0]
 8004cd0:	bf18      	it	ne
 8004cd2:	6059      	strne	r1, [r3, #4]
 8004cd4:	6863      	ldr	r3, [r4, #4]
 8004cd6:	bf08      	it	eq
 8004cd8:	f8c8 1000 	streq.w	r1, [r8]
 8004cdc:	5162      	str	r2, [r4, r5]
 8004cde:	604b      	str	r3, [r1, #4]
 8004ce0:	4638      	mov	r0, r7
 8004ce2:	f104 060b 	add.w	r6, r4, #11
 8004ce6:	f000 f829 	bl	8004d3c <__malloc_unlock>
 8004cea:	f026 0607 	bic.w	r6, r6, #7
 8004cee:	1d23      	adds	r3, r4, #4
 8004cf0:	1af2      	subs	r2, r6, r3
 8004cf2:	d0ae      	beq.n	8004c52 <_malloc_r+0x22>
 8004cf4:	1b9b      	subs	r3, r3, r6
 8004cf6:	50a3      	str	r3, [r4, r2]
 8004cf8:	e7ab      	b.n	8004c52 <_malloc_r+0x22>
 8004cfa:	42a3      	cmp	r3, r4
 8004cfc:	6862      	ldr	r2, [r4, #4]
 8004cfe:	d1dd      	bne.n	8004cbc <_malloc_r+0x8c>
 8004d00:	f8c8 2000 	str.w	r2, [r8]
 8004d04:	e7ec      	b.n	8004ce0 <_malloc_r+0xb0>
 8004d06:	4623      	mov	r3, r4
 8004d08:	6864      	ldr	r4, [r4, #4]
 8004d0a:	e7ac      	b.n	8004c66 <_malloc_r+0x36>
 8004d0c:	4634      	mov	r4, r6
 8004d0e:	6876      	ldr	r6, [r6, #4]
 8004d10:	e7b4      	b.n	8004c7c <_malloc_r+0x4c>
 8004d12:	4613      	mov	r3, r2
 8004d14:	e7cc      	b.n	8004cb0 <_malloc_r+0x80>
 8004d16:	230c      	movs	r3, #12
 8004d18:	603b      	str	r3, [r7, #0]
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	f000 f80e 	bl	8004d3c <__malloc_unlock>
 8004d20:	e797      	b.n	8004c52 <_malloc_r+0x22>
 8004d22:	6025      	str	r5, [r4, #0]
 8004d24:	e7dc      	b.n	8004ce0 <_malloc_r+0xb0>
 8004d26:	605b      	str	r3, [r3, #4]
 8004d28:	deff      	udf	#255	; 0xff
 8004d2a:	bf00      	nop
 8004d2c:	2000020c 	.word	0x2000020c

08004d30 <__malloc_lock>:
 8004d30:	4801      	ldr	r0, [pc, #4]	; (8004d38 <__malloc_lock+0x8>)
 8004d32:	f7ff bf00 	b.w	8004b36 <__retarget_lock_acquire_recursive>
 8004d36:	bf00      	nop
 8004d38:	20000208 	.word	0x20000208

08004d3c <__malloc_unlock>:
 8004d3c:	4801      	ldr	r0, [pc, #4]	; (8004d44 <__malloc_unlock+0x8>)
 8004d3e:	f7ff befb 	b.w	8004b38 <__retarget_lock_release_recursive>
 8004d42:	bf00      	nop
 8004d44:	20000208 	.word	0x20000208

08004d48 <__sfputc_r>:
 8004d48:	6893      	ldr	r3, [r2, #8]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	b410      	push	{r4}
 8004d50:	6093      	str	r3, [r2, #8]
 8004d52:	da08      	bge.n	8004d66 <__sfputc_r+0x1e>
 8004d54:	6994      	ldr	r4, [r2, #24]
 8004d56:	42a3      	cmp	r3, r4
 8004d58:	db01      	blt.n	8004d5e <__sfputc_r+0x16>
 8004d5a:	290a      	cmp	r1, #10
 8004d5c:	d103      	bne.n	8004d66 <__sfputc_r+0x1e>
 8004d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d62:	f000 bb73 	b.w	800544c <__swbuf_r>
 8004d66:	6813      	ldr	r3, [r2, #0]
 8004d68:	1c58      	adds	r0, r3, #1
 8004d6a:	6010      	str	r0, [r2, #0]
 8004d6c:	7019      	strb	r1, [r3, #0]
 8004d6e:	4608      	mov	r0, r1
 8004d70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <__sfputs_r>:
 8004d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d78:	4606      	mov	r6, r0
 8004d7a:	460f      	mov	r7, r1
 8004d7c:	4614      	mov	r4, r2
 8004d7e:	18d5      	adds	r5, r2, r3
 8004d80:	42ac      	cmp	r4, r5
 8004d82:	d101      	bne.n	8004d88 <__sfputs_r+0x12>
 8004d84:	2000      	movs	r0, #0
 8004d86:	e007      	b.n	8004d98 <__sfputs_r+0x22>
 8004d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d8c:	463a      	mov	r2, r7
 8004d8e:	4630      	mov	r0, r6
 8004d90:	f7ff ffda 	bl	8004d48 <__sfputc_r>
 8004d94:	1c43      	adds	r3, r0, #1
 8004d96:	d1f3      	bne.n	8004d80 <__sfputs_r+0xa>
 8004d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d9c <_vfiprintf_r>:
 8004d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da0:	460d      	mov	r5, r1
 8004da2:	b09d      	sub	sp, #116	; 0x74
 8004da4:	4614      	mov	r4, r2
 8004da6:	4698      	mov	r8, r3
 8004da8:	4606      	mov	r6, r0
 8004daa:	b118      	cbz	r0, 8004db4 <_vfiprintf_r+0x18>
 8004dac:	6a03      	ldr	r3, [r0, #32]
 8004dae:	b90b      	cbnz	r3, 8004db4 <_vfiprintf_r+0x18>
 8004db0:	f7ff fdbc 	bl	800492c <__sinit>
 8004db4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004db6:	07d9      	lsls	r1, r3, #31
 8004db8:	d405      	bmi.n	8004dc6 <_vfiprintf_r+0x2a>
 8004dba:	89ab      	ldrh	r3, [r5, #12]
 8004dbc:	059a      	lsls	r2, r3, #22
 8004dbe:	d402      	bmi.n	8004dc6 <_vfiprintf_r+0x2a>
 8004dc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dc2:	f7ff feb8 	bl	8004b36 <__retarget_lock_acquire_recursive>
 8004dc6:	89ab      	ldrh	r3, [r5, #12]
 8004dc8:	071b      	lsls	r3, r3, #28
 8004dca:	d501      	bpl.n	8004dd0 <_vfiprintf_r+0x34>
 8004dcc:	692b      	ldr	r3, [r5, #16]
 8004dce:	b99b      	cbnz	r3, 8004df8 <_vfiprintf_r+0x5c>
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	f000 fb78 	bl	80054c8 <__swsetup_r>
 8004dd8:	b170      	cbz	r0, 8004df8 <_vfiprintf_r+0x5c>
 8004dda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ddc:	07dc      	lsls	r4, r3, #31
 8004dde:	d504      	bpl.n	8004dea <_vfiprintf_r+0x4e>
 8004de0:	f04f 30ff 	mov.w	r0, #4294967295
 8004de4:	b01d      	add	sp, #116	; 0x74
 8004de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dea:	89ab      	ldrh	r3, [r5, #12]
 8004dec:	0598      	lsls	r0, r3, #22
 8004dee:	d4f7      	bmi.n	8004de0 <_vfiprintf_r+0x44>
 8004df0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004df2:	f7ff fea1 	bl	8004b38 <__retarget_lock_release_recursive>
 8004df6:	e7f3      	b.n	8004de0 <_vfiprintf_r+0x44>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfc:	2320      	movs	r3, #32
 8004dfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e02:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e06:	2330      	movs	r3, #48	; 0x30
 8004e08:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004fbc <_vfiprintf_r+0x220>
 8004e0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e10:	f04f 0901 	mov.w	r9, #1
 8004e14:	4623      	mov	r3, r4
 8004e16:	469a      	mov	sl, r3
 8004e18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e1c:	b10a      	cbz	r2, 8004e22 <_vfiprintf_r+0x86>
 8004e1e:	2a25      	cmp	r2, #37	; 0x25
 8004e20:	d1f9      	bne.n	8004e16 <_vfiprintf_r+0x7a>
 8004e22:	ebba 0b04 	subs.w	fp, sl, r4
 8004e26:	d00b      	beq.n	8004e40 <_vfiprintf_r+0xa4>
 8004e28:	465b      	mov	r3, fp
 8004e2a:	4622      	mov	r2, r4
 8004e2c:	4629      	mov	r1, r5
 8004e2e:	4630      	mov	r0, r6
 8004e30:	f7ff ffa1 	bl	8004d76 <__sfputs_r>
 8004e34:	3001      	adds	r0, #1
 8004e36:	f000 80a9 	beq.w	8004f8c <_vfiprintf_r+0x1f0>
 8004e3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e3c:	445a      	add	r2, fp
 8004e3e:	9209      	str	r2, [sp, #36]	; 0x24
 8004e40:	f89a 3000 	ldrb.w	r3, [sl]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 80a1 	beq.w	8004f8c <_vfiprintf_r+0x1f0>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e54:	f10a 0a01 	add.w	sl, sl, #1
 8004e58:	9304      	str	r3, [sp, #16]
 8004e5a:	9307      	str	r3, [sp, #28]
 8004e5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e60:	931a      	str	r3, [sp, #104]	; 0x68
 8004e62:	4654      	mov	r4, sl
 8004e64:	2205      	movs	r2, #5
 8004e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e6a:	4854      	ldr	r0, [pc, #336]	; (8004fbc <_vfiprintf_r+0x220>)
 8004e6c:	f7fb f9b0 	bl	80001d0 <memchr>
 8004e70:	9a04      	ldr	r2, [sp, #16]
 8004e72:	b9d8      	cbnz	r0, 8004eac <_vfiprintf_r+0x110>
 8004e74:	06d1      	lsls	r1, r2, #27
 8004e76:	bf44      	itt	mi
 8004e78:	2320      	movmi	r3, #32
 8004e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e7e:	0713      	lsls	r3, r2, #28
 8004e80:	bf44      	itt	mi
 8004e82:	232b      	movmi	r3, #43	; 0x2b
 8004e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e88:	f89a 3000 	ldrb.w	r3, [sl]
 8004e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e8e:	d015      	beq.n	8004ebc <_vfiprintf_r+0x120>
 8004e90:	9a07      	ldr	r2, [sp, #28]
 8004e92:	4654      	mov	r4, sl
 8004e94:	2000      	movs	r0, #0
 8004e96:	f04f 0c0a 	mov.w	ip, #10
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ea0:	3b30      	subs	r3, #48	; 0x30
 8004ea2:	2b09      	cmp	r3, #9
 8004ea4:	d94d      	bls.n	8004f42 <_vfiprintf_r+0x1a6>
 8004ea6:	b1b0      	cbz	r0, 8004ed6 <_vfiprintf_r+0x13a>
 8004ea8:	9207      	str	r2, [sp, #28]
 8004eaa:	e014      	b.n	8004ed6 <_vfiprintf_r+0x13a>
 8004eac:	eba0 0308 	sub.w	r3, r0, r8
 8004eb0:	fa09 f303 	lsl.w	r3, r9, r3
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	9304      	str	r3, [sp, #16]
 8004eb8:	46a2      	mov	sl, r4
 8004eba:	e7d2      	b.n	8004e62 <_vfiprintf_r+0xc6>
 8004ebc:	9b03      	ldr	r3, [sp, #12]
 8004ebe:	1d19      	adds	r1, r3, #4
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	9103      	str	r1, [sp, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bfbb      	ittet	lt
 8004ec8:	425b      	neglt	r3, r3
 8004eca:	f042 0202 	orrlt.w	r2, r2, #2
 8004ece:	9307      	strge	r3, [sp, #28]
 8004ed0:	9307      	strlt	r3, [sp, #28]
 8004ed2:	bfb8      	it	lt
 8004ed4:	9204      	strlt	r2, [sp, #16]
 8004ed6:	7823      	ldrb	r3, [r4, #0]
 8004ed8:	2b2e      	cmp	r3, #46	; 0x2e
 8004eda:	d10c      	bne.n	8004ef6 <_vfiprintf_r+0x15a>
 8004edc:	7863      	ldrb	r3, [r4, #1]
 8004ede:	2b2a      	cmp	r3, #42	; 0x2a
 8004ee0:	d134      	bne.n	8004f4c <_vfiprintf_r+0x1b0>
 8004ee2:	9b03      	ldr	r3, [sp, #12]
 8004ee4:	1d1a      	adds	r2, r3, #4
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	9203      	str	r2, [sp, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bfb8      	it	lt
 8004eee:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ef2:	3402      	adds	r4, #2
 8004ef4:	9305      	str	r3, [sp, #20]
 8004ef6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004fcc <_vfiprintf_r+0x230>
 8004efa:	7821      	ldrb	r1, [r4, #0]
 8004efc:	2203      	movs	r2, #3
 8004efe:	4650      	mov	r0, sl
 8004f00:	f7fb f966 	bl	80001d0 <memchr>
 8004f04:	b138      	cbz	r0, 8004f16 <_vfiprintf_r+0x17a>
 8004f06:	9b04      	ldr	r3, [sp, #16]
 8004f08:	eba0 000a 	sub.w	r0, r0, sl
 8004f0c:	2240      	movs	r2, #64	; 0x40
 8004f0e:	4082      	lsls	r2, r0
 8004f10:	4313      	orrs	r3, r2
 8004f12:	3401      	adds	r4, #1
 8004f14:	9304      	str	r3, [sp, #16]
 8004f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f1a:	4829      	ldr	r0, [pc, #164]	; (8004fc0 <_vfiprintf_r+0x224>)
 8004f1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f20:	2206      	movs	r2, #6
 8004f22:	f7fb f955 	bl	80001d0 <memchr>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d03f      	beq.n	8004faa <_vfiprintf_r+0x20e>
 8004f2a:	4b26      	ldr	r3, [pc, #152]	; (8004fc4 <_vfiprintf_r+0x228>)
 8004f2c:	bb1b      	cbnz	r3, 8004f76 <_vfiprintf_r+0x1da>
 8004f2e:	9b03      	ldr	r3, [sp, #12]
 8004f30:	3307      	adds	r3, #7
 8004f32:	f023 0307 	bic.w	r3, r3, #7
 8004f36:	3308      	adds	r3, #8
 8004f38:	9303      	str	r3, [sp, #12]
 8004f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f3c:	443b      	add	r3, r7
 8004f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f40:	e768      	b.n	8004e14 <_vfiprintf_r+0x78>
 8004f42:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f46:	460c      	mov	r4, r1
 8004f48:	2001      	movs	r0, #1
 8004f4a:	e7a6      	b.n	8004e9a <_vfiprintf_r+0xfe>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	3401      	adds	r4, #1
 8004f50:	9305      	str	r3, [sp, #20]
 8004f52:	4619      	mov	r1, r3
 8004f54:	f04f 0c0a 	mov.w	ip, #10
 8004f58:	4620      	mov	r0, r4
 8004f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f5e:	3a30      	subs	r2, #48	; 0x30
 8004f60:	2a09      	cmp	r2, #9
 8004f62:	d903      	bls.n	8004f6c <_vfiprintf_r+0x1d0>
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d0c6      	beq.n	8004ef6 <_vfiprintf_r+0x15a>
 8004f68:	9105      	str	r1, [sp, #20]
 8004f6a:	e7c4      	b.n	8004ef6 <_vfiprintf_r+0x15a>
 8004f6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f70:	4604      	mov	r4, r0
 8004f72:	2301      	movs	r3, #1
 8004f74:	e7f0      	b.n	8004f58 <_vfiprintf_r+0x1bc>
 8004f76:	ab03      	add	r3, sp, #12
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	462a      	mov	r2, r5
 8004f7c:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <_vfiprintf_r+0x22c>)
 8004f7e:	a904      	add	r1, sp, #16
 8004f80:	4630      	mov	r0, r6
 8004f82:	f3af 8000 	nop.w
 8004f86:	4607      	mov	r7, r0
 8004f88:	1c78      	adds	r0, r7, #1
 8004f8a:	d1d6      	bne.n	8004f3a <_vfiprintf_r+0x19e>
 8004f8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f8e:	07d9      	lsls	r1, r3, #31
 8004f90:	d405      	bmi.n	8004f9e <_vfiprintf_r+0x202>
 8004f92:	89ab      	ldrh	r3, [r5, #12]
 8004f94:	059a      	lsls	r2, r3, #22
 8004f96:	d402      	bmi.n	8004f9e <_vfiprintf_r+0x202>
 8004f98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f9a:	f7ff fdcd 	bl	8004b38 <__retarget_lock_release_recursive>
 8004f9e:	89ab      	ldrh	r3, [r5, #12]
 8004fa0:	065b      	lsls	r3, r3, #25
 8004fa2:	f53f af1d 	bmi.w	8004de0 <_vfiprintf_r+0x44>
 8004fa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fa8:	e71c      	b.n	8004de4 <_vfiprintf_r+0x48>
 8004faa:	ab03      	add	r3, sp, #12
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	462a      	mov	r2, r5
 8004fb0:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <_vfiprintf_r+0x22c>)
 8004fb2:	a904      	add	r1, sp, #16
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	f000 f879 	bl	80050ac <_printf_i>
 8004fba:	e7e4      	b.n	8004f86 <_vfiprintf_r+0x1ea>
 8004fbc:	08006881 	.word	0x08006881
 8004fc0:	0800688b 	.word	0x0800688b
 8004fc4:	00000000 	.word	0x00000000
 8004fc8:	08004d77 	.word	0x08004d77
 8004fcc:	08006887 	.word	0x08006887

08004fd0 <_printf_common>:
 8004fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd4:	4616      	mov	r6, r2
 8004fd6:	4699      	mov	r9, r3
 8004fd8:	688a      	ldr	r2, [r1, #8]
 8004fda:	690b      	ldr	r3, [r1, #16]
 8004fdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	bfb8      	it	lt
 8004fe4:	4613      	movlt	r3, r2
 8004fe6:	6033      	str	r3, [r6, #0]
 8004fe8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fec:	4607      	mov	r7, r0
 8004fee:	460c      	mov	r4, r1
 8004ff0:	b10a      	cbz	r2, 8004ff6 <_printf_common+0x26>
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	6033      	str	r3, [r6, #0]
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	0699      	lsls	r1, r3, #26
 8004ffa:	bf42      	ittt	mi
 8004ffc:	6833      	ldrmi	r3, [r6, #0]
 8004ffe:	3302      	addmi	r3, #2
 8005000:	6033      	strmi	r3, [r6, #0]
 8005002:	6825      	ldr	r5, [r4, #0]
 8005004:	f015 0506 	ands.w	r5, r5, #6
 8005008:	d106      	bne.n	8005018 <_printf_common+0x48>
 800500a:	f104 0a19 	add.w	sl, r4, #25
 800500e:	68e3      	ldr	r3, [r4, #12]
 8005010:	6832      	ldr	r2, [r6, #0]
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	42ab      	cmp	r3, r5
 8005016:	dc26      	bgt.n	8005066 <_printf_common+0x96>
 8005018:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800501c:	1e13      	subs	r3, r2, #0
 800501e:	6822      	ldr	r2, [r4, #0]
 8005020:	bf18      	it	ne
 8005022:	2301      	movne	r3, #1
 8005024:	0692      	lsls	r2, r2, #26
 8005026:	d42b      	bmi.n	8005080 <_printf_common+0xb0>
 8005028:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800502c:	4649      	mov	r1, r9
 800502e:	4638      	mov	r0, r7
 8005030:	47c0      	blx	r8
 8005032:	3001      	adds	r0, #1
 8005034:	d01e      	beq.n	8005074 <_printf_common+0xa4>
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	6922      	ldr	r2, [r4, #16]
 800503a:	f003 0306 	and.w	r3, r3, #6
 800503e:	2b04      	cmp	r3, #4
 8005040:	bf02      	ittt	eq
 8005042:	68e5      	ldreq	r5, [r4, #12]
 8005044:	6833      	ldreq	r3, [r6, #0]
 8005046:	1aed      	subeq	r5, r5, r3
 8005048:	68a3      	ldr	r3, [r4, #8]
 800504a:	bf0c      	ite	eq
 800504c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005050:	2500      	movne	r5, #0
 8005052:	4293      	cmp	r3, r2
 8005054:	bfc4      	itt	gt
 8005056:	1a9b      	subgt	r3, r3, r2
 8005058:	18ed      	addgt	r5, r5, r3
 800505a:	2600      	movs	r6, #0
 800505c:	341a      	adds	r4, #26
 800505e:	42b5      	cmp	r5, r6
 8005060:	d11a      	bne.n	8005098 <_printf_common+0xc8>
 8005062:	2000      	movs	r0, #0
 8005064:	e008      	b.n	8005078 <_printf_common+0xa8>
 8005066:	2301      	movs	r3, #1
 8005068:	4652      	mov	r2, sl
 800506a:	4649      	mov	r1, r9
 800506c:	4638      	mov	r0, r7
 800506e:	47c0      	blx	r8
 8005070:	3001      	adds	r0, #1
 8005072:	d103      	bne.n	800507c <_printf_common+0xac>
 8005074:	f04f 30ff 	mov.w	r0, #4294967295
 8005078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800507c:	3501      	adds	r5, #1
 800507e:	e7c6      	b.n	800500e <_printf_common+0x3e>
 8005080:	18e1      	adds	r1, r4, r3
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	2030      	movs	r0, #48	; 0x30
 8005086:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800508a:	4422      	add	r2, r4
 800508c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005090:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005094:	3302      	adds	r3, #2
 8005096:	e7c7      	b.n	8005028 <_printf_common+0x58>
 8005098:	2301      	movs	r3, #1
 800509a:	4622      	mov	r2, r4
 800509c:	4649      	mov	r1, r9
 800509e:	4638      	mov	r0, r7
 80050a0:	47c0      	blx	r8
 80050a2:	3001      	adds	r0, #1
 80050a4:	d0e6      	beq.n	8005074 <_printf_common+0xa4>
 80050a6:	3601      	adds	r6, #1
 80050a8:	e7d9      	b.n	800505e <_printf_common+0x8e>
	...

080050ac <_printf_i>:
 80050ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050b0:	7e0f      	ldrb	r7, [r1, #24]
 80050b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050b4:	2f78      	cmp	r7, #120	; 0x78
 80050b6:	4691      	mov	r9, r2
 80050b8:	4680      	mov	r8, r0
 80050ba:	460c      	mov	r4, r1
 80050bc:	469a      	mov	sl, r3
 80050be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050c2:	d807      	bhi.n	80050d4 <_printf_i+0x28>
 80050c4:	2f62      	cmp	r7, #98	; 0x62
 80050c6:	d80a      	bhi.n	80050de <_printf_i+0x32>
 80050c8:	2f00      	cmp	r7, #0
 80050ca:	f000 80d4 	beq.w	8005276 <_printf_i+0x1ca>
 80050ce:	2f58      	cmp	r7, #88	; 0x58
 80050d0:	f000 80c0 	beq.w	8005254 <_printf_i+0x1a8>
 80050d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050dc:	e03a      	b.n	8005154 <_printf_i+0xa8>
 80050de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050e2:	2b15      	cmp	r3, #21
 80050e4:	d8f6      	bhi.n	80050d4 <_printf_i+0x28>
 80050e6:	a101      	add	r1, pc, #4	; (adr r1, 80050ec <_printf_i+0x40>)
 80050e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050ec:	08005145 	.word	0x08005145
 80050f0:	08005159 	.word	0x08005159
 80050f4:	080050d5 	.word	0x080050d5
 80050f8:	080050d5 	.word	0x080050d5
 80050fc:	080050d5 	.word	0x080050d5
 8005100:	080050d5 	.word	0x080050d5
 8005104:	08005159 	.word	0x08005159
 8005108:	080050d5 	.word	0x080050d5
 800510c:	080050d5 	.word	0x080050d5
 8005110:	080050d5 	.word	0x080050d5
 8005114:	080050d5 	.word	0x080050d5
 8005118:	0800525d 	.word	0x0800525d
 800511c:	08005185 	.word	0x08005185
 8005120:	08005217 	.word	0x08005217
 8005124:	080050d5 	.word	0x080050d5
 8005128:	080050d5 	.word	0x080050d5
 800512c:	0800527f 	.word	0x0800527f
 8005130:	080050d5 	.word	0x080050d5
 8005134:	08005185 	.word	0x08005185
 8005138:	080050d5 	.word	0x080050d5
 800513c:	080050d5 	.word	0x080050d5
 8005140:	0800521f 	.word	0x0800521f
 8005144:	682b      	ldr	r3, [r5, #0]
 8005146:	1d1a      	adds	r2, r3, #4
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	602a      	str	r2, [r5, #0]
 800514c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005150:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005154:	2301      	movs	r3, #1
 8005156:	e09f      	b.n	8005298 <_printf_i+0x1ec>
 8005158:	6820      	ldr	r0, [r4, #0]
 800515a:	682b      	ldr	r3, [r5, #0]
 800515c:	0607      	lsls	r7, r0, #24
 800515e:	f103 0104 	add.w	r1, r3, #4
 8005162:	6029      	str	r1, [r5, #0]
 8005164:	d501      	bpl.n	800516a <_printf_i+0xbe>
 8005166:	681e      	ldr	r6, [r3, #0]
 8005168:	e003      	b.n	8005172 <_printf_i+0xc6>
 800516a:	0646      	lsls	r6, r0, #25
 800516c:	d5fb      	bpl.n	8005166 <_printf_i+0xba>
 800516e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005172:	2e00      	cmp	r6, #0
 8005174:	da03      	bge.n	800517e <_printf_i+0xd2>
 8005176:	232d      	movs	r3, #45	; 0x2d
 8005178:	4276      	negs	r6, r6
 800517a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800517e:	485a      	ldr	r0, [pc, #360]	; (80052e8 <_printf_i+0x23c>)
 8005180:	230a      	movs	r3, #10
 8005182:	e012      	b.n	80051aa <_printf_i+0xfe>
 8005184:	682b      	ldr	r3, [r5, #0]
 8005186:	6820      	ldr	r0, [r4, #0]
 8005188:	1d19      	adds	r1, r3, #4
 800518a:	6029      	str	r1, [r5, #0]
 800518c:	0605      	lsls	r5, r0, #24
 800518e:	d501      	bpl.n	8005194 <_printf_i+0xe8>
 8005190:	681e      	ldr	r6, [r3, #0]
 8005192:	e002      	b.n	800519a <_printf_i+0xee>
 8005194:	0641      	lsls	r1, r0, #25
 8005196:	d5fb      	bpl.n	8005190 <_printf_i+0xe4>
 8005198:	881e      	ldrh	r6, [r3, #0]
 800519a:	4853      	ldr	r0, [pc, #332]	; (80052e8 <_printf_i+0x23c>)
 800519c:	2f6f      	cmp	r7, #111	; 0x6f
 800519e:	bf0c      	ite	eq
 80051a0:	2308      	moveq	r3, #8
 80051a2:	230a      	movne	r3, #10
 80051a4:	2100      	movs	r1, #0
 80051a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051aa:	6865      	ldr	r5, [r4, #4]
 80051ac:	60a5      	str	r5, [r4, #8]
 80051ae:	2d00      	cmp	r5, #0
 80051b0:	bfa2      	ittt	ge
 80051b2:	6821      	ldrge	r1, [r4, #0]
 80051b4:	f021 0104 	bicge.w	r1, r1, #4
 80051b8:	6021      	strge	r1, [r4, #0]
 80051ba:	b90e      	cbnz	r6, 80051c0 <_printf_i+0x114>
 80051bc:	2d00      	cmp	r5, #0
 80051be:	d04b      	beq.n	8005258 <_printf_i+0x1ac>
 80051c0:	4615      	mov	r5, r2
 80051c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80051c6:	fb03 6711 	mls	r7, r3, r1, r6
 80051ca:	5dc7      	ldrb	r7, [r0, r7]
 80051cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051d0:	4637      	mov	r7, r6
 80051d2:	42bb      	cmp	r3, r7
 80051d4:	460e      	mov	r6, r1
 80051d6:	d9f4      	bls.n	80051c2 <_printf_i+0x116>
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d10b      	bne.n	80051f4 <_printf_i+0x148>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	07de      	lsls	r6, r3, #31
 80051e0:	d508      	bpl.n	80051f4 <_printf_i+0x148>
 80051e2:	6923      	ldr	r3, [r4, #16]
 80051e4:	6861      	ldr	r1, [r4, #4]
 80051e6:	4299      	cmp	r1, r3
 80051e8:	bfde      	ittt	le
 80051ea:	2330      	movle	r3, #48	; 0x30
 80051ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051f4:	1b52      	subs	r2, r2, r5
 80051f6:	6122      	str	r2, [r4, #16]
 80051f8:	f8cd a000 	str.w	sl, [sp]
 80051fc:	464b      	mov	r3, r9
 80051fe:	aa03      	add	r2, sp, #12
 8005200:	4621      	mov	r1, r4
 8005202:	4640      	mov	r0, r8
 8005204:	f7ff fee4 	bl	8004fd0 <_printf_common>
 8005208:	3001      	adds	r0, #1
 800520a:	d14a      	bne.n	80052a2 <_printf_i+0x1f6>
 800520c:	f04f 30ff 	mov.w	r0, #4294967295
 8005210:	b004      	add	sp, #16
 8005212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	f043 0320 	orr.w	r3, r3, #32
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	4833      	ldr	r0, [pc, #204]	; (80052ec <_printf_i+0x240>)
 8005220:	2778      	movs	r7, #120	; 0x78
 8005222:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	6829      	ldr	r1, [r5, #0]
 800522a:	061f      	lsls	r7, r3, #24
 800522c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005230:	d402      	bmi.n	8005238 <_printf_i+0x18c>
 8005232:	065f      	lsls	r7, r3, #25
 8005234:	bf48      	it	mi
 8005236:	b2b6      	uxthmi	r6, r6
 8005238:	07df      	lsls	r7, r3, #31
 800523a:	bf48      	it	mi
 800523c:	f043 0320 	orrmi.w	r3, r3, #32
 8005240:	6029      	str	r1, [r5, #0]
 8005242:	bf48      	it	mi
 8005244:	6023      	strmi	r3, [r4, #0]
 8005246:	b91e      	cbnz	r6, 8005250 <_printf_i+0x1a4>
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	f023 0320 	bic.w	r3, r3, #32
 800524e:	6023      	str	r3, [r4, #0]
 8005250:	2310      	movs	r3, #16
 8005252:	e7a7      	b.n	80051a4 <_printf_i+0xf8>
 8005254:	4824      	ldr	r0, [pc, #144]	; (80052e8 <_printf_i+0x23c>)
 8005256:	e7e4      	b.n	8005222 <_printf_i+0x176>
 8005258:	4615      	mov	r5, r2
 800525a:	e7bd      	b.n	80051d8 <_printf_i+0x12c>
 800525c:	682b      	ldr	r3, [r5, #0]
 800525e:	6826      	ldr	r6, [r4, #0]
 8005260:	6961      	ldr	r1, [r4, #20]
 8005262:	1d18      	adds	r0, r3, #4
 8005264:	6028      	str	r0, [r5, #0]
 8005266:	0635      	lsls	r5, r6, #24
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	d501      	bpl.n	8005270 <_printf_i+0x1c4>
 800526c:	6019      	str	r1, [r3, #0]
 800526e:	e002      	b.n	8005276 <_printf_i+0x1ca>
 8005270:	0670      	lsls	r0, r6, #25
 8005272:	d5fb      	bpl.n	800526c <_printf_i+0x1c0>
 8005274:	8019      	strh	r1, [r3, #0]
 8005276:	2300      	movs	r3, #0
 8005278:	6123      	str	r3, [r4, #16]
 800527a:	4615      	mov	r5, r2
 800527c:	e7bc      	b.n	80051f8 <_printf_i+0x14c>
 800527e:	682b      	ldr	r3, [r5, #0]
 8005280:	1d1a      	adds	r2, r3, #4
 8005282:	602a      	str	r2, [r5, #0]
 8005284:	681d      	ldr	r5, [r3, #0]
 8005286:	6862      	ldr	r2, [r4, #4]
 8005288:	2100      	movs	r1, #0
 800528a:	4628      	mov	r0, r5
 800528c:	f7fa ffa0 	bl	80001d0 <memchr>
 8005290:	b108      	cbz	r0, 8005296 <_printf_i+0x1ea>
 8005292:	1b40      	subs	r0, r0, r5
 8005294:	6060      	str	r0, [r4, #4]
 8005296:	6863      	ldr	r3, [r4, #4]
 8005298:	6123      	str	r3, [r4, #16]
 800529a:	2300      	movs	r3, #0
 800529c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052a0:	e7aa      	b.n	80051f8 <_printf_i+0x14c>
 80052a2:	6923      	ldr	r3, [r4, #16]
 80052a4:	462a      	mov	r2, r5
 80052a6:	4649      	mov	r1, r9
 80052a8:	4640      	mov	r0, r8
 80052aa:	47d0      	blx	sl
 80052ac:	3001      	adds	r0, #1
 80052ae:	d0ad      	beq.n	800520c <_printf_i+0x160>
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	079b      	lsls	r3, r3, #30
 80052b4:	d413      	bmi.n	80052de <_printf_i+0x232>
 80052b6:	68e0      	ldr	r0, [r4, #12]
 80052b8:	9b03      	ldr	r3, [sp, #12]
 80052ba:	4298      	cmp	r0, r3
 80052bc:	bfb8      	it	lt
 80052be:	4618      	movlt	r0, r3
 80052c0:	e7a6      	b.n	8005210 <_printf_i+0x164>
 80052c2:	2301      	movs	r3, #1
 80052c4:	4632      	mov	r2, r6
 80052c6:	4649      	mov	r1, r9
 80052c8:	4640      	mov	r0, r8
 80052ca:	47d0      	blx	sl
 80052cc:	3001      	adds	r0, #1
 80052ce:	d09d      	beq.n	800520c <_printf_i+0x160>
 80052d0:	3501      	adds	r5, #1
 80052d2:	68e3      	ldr	r3, [r4, #12]
 80052d4:	9903      	ldr	r1, [sp, #12]
 80052d6:	1a5b      	subs	r3, r3, r1
 80052d8:	42ab      	cmp	r3, r5
 80052da:	dcf2      	bgt.n	80052c2 <_printf_i+0x216>
 80052dc:	e7eb      	b.n	80052b6 <_printf_i+0x20a>
 80052de:	2500      	movs	r5, #0
 80052e0:	f104 0619 	add.w	r6, r4, #25
 80052e4:	e7f5      	b.n	80052d2 <_printf_i+0x226>
 80052e6:	bf00      	nop
 80052e8:	08006892 	.word	0x08006892
 80052ec:	080068a3 	.word	0x080068a3

080052f0 <__sflush_r>:
 80052f0:	898a      	ldrh	r2, [r1, #12]
 80052f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f6:	4605      	mov	r5, r0
 80052f8:	0710      	lsls	r0, r2, #28
 80052fa:	460c      	mov	r4, r1
 80052fc:	d458      	bmi.n	80053b0 <__sflush_r+0xc0>
 80052fe:	684b      	ldr	r3, [r1, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	dc05      	bgt.n	8005310 <__sflush_r+0x20>
 8005304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005306:	2b00      	cmp	r3, #0
 8005308:	dc02      	bgt.n	8005310 <__sflush_r+0x20>
 800530a:	2000      	movs	r0, #0
 800530c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005312:	2e00      	cmp	r6, #0
 8005314:	d0f9      	beq.n	800530a <__sflush_r+0x1a>
 8005316:	2300      	movs	r3, #0
 8005318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800531c:	682f      	ldr	r7, [r5, #0]
 800531e:	6a21      	ldr	r1, [r4, #32]
 8005320:	602b      	str	r3, [r5, #0]
 8005322:	d032      	beq.n	800538a <__sflush_r+0x9a>
 8005324:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005326:	89a3      	ldrh	r3, [r4, #12]
 8005328:	075a      	lsls	r2, r3, #29
 800532a:	d505      	bpl.n	8005338 <__sflush_r+0x48>
 800532c:	6863      	ldr	r3, [r4, #4]
 800532e:	1ac0      	subs	r0, r0, r3
 8005330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005332:	b10b      	cbz	r3, 8005338 <__sflush_r+0x48>
 8005334:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005336:	1ac0      	subs	r0, r0, r3
 8005338:	2300      	movs	r3, #0
 800533a:	4602      	mov	r2, r0
 800533c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800533e:	6a21      	ldr	r1, [r4, #32]
 8005340:	4628      	mov	r0, r5
 8005342:	47b0      	blx	r6
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	d106      	bne.n	8005358 <__sflush_r+0x68>
 800534a:	6829      	ldr	r1, [r5, #0]
 800534c:	291d      	cmp	r1, #29
 800534e:	d82b      	bhi.n	80053a8 <__sflush_r+0xb8>
 8005350:	4a29      	ldr	r2, [pc, #164]	; (80053f8 <__sflush_r+0x108>)
 8005352:	410a      	asrs	r2, r1
 8005354:	07d6      	lsls	r6, r2, #31
 8005356:	d427      	bmi.n	80053a8 <__sflush_r+0xb8>
 8005358:	2200      	movs	r2, #0
 800535a:	6062      	str	r2, [r4, #4]
 800535c:	04d9      	lsls	r1, r3, #19
 800535e:	6922      	ldr	r2, [r4, #16]
 8005360:	6022      	str	r2, [r4, #0]
 8005362:	d504      	bpl.n	800536e <__sflush_r+0x7e>
 8005364:	1c42      	adds	r2, r0, #1
 8005366:	d101      	bne.n	800536c <__sflush_r+0x7c>
 8005368:	682b      	ldr	r3, [r5, #0]
 800536a:	b903      	cbnz	r3, 800536e <__sflush_r+0x7e>
 800536c:	6560      	str	r0, [r4, #84]	; 0x54
 800536e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005370:	602f      	str	r7, [r5, #0]
 8005372:	2900      	cmp	r1, #0
 8005374:	d0c9      	beq.n	800530a <__sflush_r+0x1a>
 8005376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800537a:	4299      	cmp	r1, r3
 800537c:	d002      	beq.n	8005384 <__sflush_r+0x94>
 800537e:	4628      	mov	r0, r5
 8005380:	f7ff fbea 	bl	8004b58 <_free_r>
 8005384:	2000      	movs	r0, #0
 8005386:	6360      	str	r0, [r4, #52]	; 0x34
 8005388:	e7c0      	b.n	800530c <__sflush_r+0x1c>
 800538a:	2301      	movs	r3, #1
 800538c:	4628      	mov	r0, r5
 800538e:	47b0      	blx	r6
 8005390:	1c41      	adds	r1, r0, #1
 8005392:	d1c8      	bne.n	8005326 <__sflush_r+0x36>
 8005394:	682b      	ldr	r3, [r5, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0c5      	beq.n	8005326 <__sflush_r+0x36>
 800539a:	2b1d      	cmp	r3, #29
 800539c:	d001      	beq.n	80053a2 <__sflush_r+0xb2>
 800539e:	2b16      	cmp	r3, #22
 80053a0:	d101      	bne.n	80053a6 <__sflush_r+0xb6>
 80053a2:	602f      	str	r7, [r5, #0]
 80053a4:	e7b1      	b.n	800530a <__sflush_r+0x1a>
 80053a6:	89a3      	ldrh	r3, [r4, #12]
 80053a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053ac:	81a3      	strh	r3, [r4, #12]
 80053ae:	e7ad      	b.n	800530c <__sflush_r+0x1c>
 80053b0:	690f      	ldr	r7, [r1, #16]
 80053b2:	2f00      	cmp	r7, #0
 80053b4:	d0a9      	beq.n	800530a <__sflush_r+0x1a>
 80053b6:	0793      	lsls	r3, r2, #30
 80053b8:	680e      	ldr	r6, [r1, #0]
 80053ba:	bf08      	it	eq
 80053bc:	694b      	ldreq	r3, [r1, #20]
 80053be:	600f      	str	r7, [r1, #0]
 80053c0:	bf18      	it	ne
 80053c2:	2300      	movne	r3, #0
 80053c4:	eba6 0807 	sub.w	r8, r6, r7
 80053c8:	608b      	str	r3, [r1, #8]
 80053ca:	f1b8 0f00 	cmp.w	r8, #0
 80053ce:	dd9c      	ble.n	800530a <__sflush_r+0x1a>
 80053d0:	6a21      	ldr	r1, [r4, #32]
 80053d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80053d4:	4643      	mov	r3, r8
 80053d6:	463a      	mov	r2, r7
 80053d8:	4628      	mov	r0, r5
 80053da:	47b0      	blx	r6
 80053dc:	2800      	cmp	r0, #0
 80053de:	dc06      	bgt.n	80053ee <__sflush_r+0xfe>
 80053e0:	89a3      	ldrh	r3, [r4, #12]
 80053e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053e6:	81a3      	strh	r3, [r4, #12]
 80053e8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ec:	e78e      	b.n	800530c <__sflush_r+0x1c>
 80053ee:	4407      	add	r7, r0
 80053f0:	eba8 0800 	sub.w	r8, r8, r0
 80053f4:	e7e9      	b.n	80053ca <__sflush_r+0xda>
 80053f6:	bf00      	nop
 80053f8:	dfbffffe 	.word	0xdfbffffe

080053fc <_fflush_r>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	690b      	ldr	r3, [r1, #16]
 8005400:	4605      	mov	r5, r0
 8005402:	460c      	mov	r4, r1
 8005404:	b913      	cbnz	r3, 800540c <_fflush_r+0x10>
 8005406:	2500      	movs	r5, #0
 8005408:	4628      	mov	r0, r5
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	b118      	cbz	r0, 8005416 <_fflush_r+0x1a>
 800540e:	6a03      	ldr	r3, [r0, #32]
 8005410:	b90b      	cbnz	r3, 8005416 <_fflush_r+0x1a>
 8005412:	f7ff fa8b 	bl	800492c <__sinit>
 8005416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0f3      	beq.n	8005406 <_fflush_r+0xa>
 800541e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005420:	07d0      	lsls	r0, r2, #31
 8005422:	d404      	bmi.n	800542e <_fflush_r+0x32>
 8005424:	0599      	lsls	r1, r3, #22
 8005426:	d402      	bmi.n	800542e <_fflush_r+0x32>
 8005428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800542a:	f7ff fb84 	bl	8004b36 <__retarget_lock_acquire_recursive>
 800542e:	4628      	mov	r0, r5
 8005430:	4621      	mov	r1, r4
 8005432:	f7ff ff5d 	bl	80052f0 <__sflush_r>
 8005436:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005438:	07da      	lsls	r2, r3, #31
 800543a:	4605      	mov	r5, r0
 800543c:	d4e4      	bmi.n	8005408 <_fflush_r+0xc>
 800543e:	89a3      	ldrh	r3, [r4, #12]
 8005440:	059b      	lsls	r3, r3, #22
 8005442:	d4e1      	bmi.n	8005408 <_fflush_r+0xc>
 8005444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005446:	f7ff fb77 	bl	8004b38 <__retarget_lock_release_recursive>
 800544a:	e7dd      	b.n	8005408 <_fflush_r+0xc>

0800544c <__swbuf_r>:
 800544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544e:	460e      	mov	r6, r1
 8005450:	4614      	mov	r4, r2
 8005452:	4605      	mov	r5, r0
 8005454:	b118      	cbz	r0, 800545e <__swbuf_r+0x12>
 8005456:	6a03      	ldr	r3, [r0, #32]
 8005458:	b90b      	cbnz	r3, 800545e <__swbuf_r+0x12>
 800545a:	f7ff fa67 	bl	800492c <__sinit>
 800545e:	69a3      	ldr	r3, [r4, #24]
 8005460:	60a3      	str	r3, [r4, #8]
 8005462:	89a3      	ldrh	r3, [r4, #12]
 8005464:	071a      	lsls	r2, r3, #28
 8005466:	d525      	bpl.n	80054b4 <__swbuf_r+0x68>
 8005468:	6923      	ldr	r3, [r4, #16]
 800546a:	b31b      	cbz	r3, 80054b4 <__swbuf_r+0x68>
 800546c:	6823      	ldr	r3, [r4, #0]
 800546e:	6922      	ldr	r2, [r4, #16]
 8005470:	1a98      	subs	r0, r3, r2
 8005472:	6963      	ldr	r3, [r4, #20]
 8005474:	b2f6      	uxtb	r6, r6
 8005476:	4283      	cmp	r3, r0
 8005478:	4637      	mov	r7, r6
 800547a:	dc04      	bgt.n	8005486 <__swbuf_r+0x3a>
 800547c:	4621      	mov	r1, r4
 800547e:	4628      	mov	r0, r5
 8005480:	f7ff ffbc 	bl	80053fc <_fflush_r>
 8005484:	b9e0      	cbnz	r0, 80054c0 <__swbuf_r+0x74>
 8005486:	68a3      	ldr	r3, [r4, #8]
 8005488:	3b01      	subs	r3, #1
 800548a:	60a3      	str	r3, [r4, #8]
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	6022      	str	r2, [r4, #0]
 8005492:	701e      	strb	r6, [r3, #0]
 8005494:	6962      	ldr	r2, [r4, #20]
 8005496:	1c43      	adds	r3, r0, #1
 8005498:	429a      	cmp	r2, r3
 800549a:	d004      	beq.n	80054a6 <__swbuf_r+0x5a>
 800549c:	89a3      	ldrh	r3, [r4, #12]
 800549e:	07db      	lsls	r3, r3, #31
 80054a0:	d506      	bpl.n	80054b0 <__swbuf_r+0x64>
 80054a2:	2e0a      	cmp	r6, #10
 80054a4:	d104      	bne.n	80054b0 <__swbuf_r+0x64>
 80054a6:	4621      	mov	r1, r4
 80054a8:	4628      	mov	r0, r5
 80054aa:	f7ff ffa7 	bl	80053fc <_fflush_r>
 80054ae:	b938      	cbnz	r0, 80054c0 <__swbuf_r+0x74>
 80054b0:	4638      	mov	r0, r7
 80054b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054b4:	4621      	mov	r1, r4
 80054b6:	4628      	mov	r0, r5
 80054b8:	f000 f806 	bl	80054c8 <__swsetup_r>
 80054bc:	2800      	cmp	r0, #0
 80054be:	d0d5      	beq.n	800546c <__swbuf_r+0x20>
 80054c0:	f04f 37ff 	mov.w	r7, #4294967295
 80054c4:	e7f4      	b.n	80054b0 <__swbuf_r+0x64>
	...

080054c8 <__swsetup_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	4b2a      	ldr	r3, [pc, #168]	; (8005574 <__swsetup_r+0xac>)
 80054cc:	4605      	mov	r5, r0
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	460c      	mov	r4, r1
 80054d2:	b118      	cbz	r0, 80054dc <__swsetup_r+0x14>
 80054d4:	6a03      	ldr	r3, [r0, #32]
 80054d6:	b90b      	cbnz	r3, 80054dc <__swsetup_r+0x14>
 80054d8:	f7ff fa28 	bl	800492c <__sinit>
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054e2:	0718      	lsls	r0, r3, #28
 80054e4:	d422      	bmi.n	800552c <__swsetup_r+0x64>
 80054e6:	06d9      	lsls	r1, r3, #27
 80054e8:	d407      	bmi.n	80054fa <__swsetup_r+0x32>
 80054ea:	2309      	movs	r3, #9
 80054ec:	602b      	str	r3, [r5, #0]
 80054ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80054f2:	81a3      	strh	r3, [r4, #12]
 80054f4:	f04f 30ff 	mov.w	r0, #4294967295
 80054f8:	e034      	b.n	8005564 <__swsetup_r+0x9c>
 80054fa:	0758      	lsls	r0, r3, #29
 80054fc:	d512      	bpl.n	8005524 <__swsetup_r+0x5c>
 80054fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005500:	b141      	cbz	r1, 8005514 <__swsetup_r+0x4c>
 8005502:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005506:	4299      	cmp	r1, r3
 8005508:	d002      	beq.n	8005510 <__swsetup_r+0x48>
 800550a:	4628      	mov	r0, r5
 800550c:	f7ff fb24 	bl	8004b58 <_free_r>
 8005510:	2300      	movs	r3, #0
 8005512:	6363      	str	r3, [r4, #52]	; 0x34
 8005514:	89a3      	ldrh	r3, [r4, #12]
 8005516:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800551a:	81a3      	strh	r3, [r4, #12]
 800551c:	2300      	movs	r3, #0
 800551e:	6063      	str	r3, [r4, #4]
 8005520:	6923      	ldr	r3, [r4, #16]
 8005522:	6023      	str	r3, [r4, #0]
 8005524:	89a3      	ldrh	r3, [r4, #12]
 8005526:	f043 0308 	orr.w	r3, r3, #8
 800552a:	81a3      	strh	r3, [r4, #12]
 800552c:	6923      	ldr	r3, [r4, #16]
 800552e:	b94b      	cbnz	r3, 8005544 <__swsetup_r+0x7c>
 8005530:	89a3      	ldrh	r3, [r4, #12]
 8005532:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800553a:	d003      	beq.n	8005544 <__swsetup_r+0x7c>
 800553c:	4621      	mov	r1, r4
 800553e:	4628      	mov	r0, r5
 8005540:	f000 f850 	bl	80055e4 <__smakebuf_r>
 8005544:	89a0      	ldrh	r0, [r4, #12]
 8005546:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800554a:	f010 0301 	ands.w	r3, r0, #1
 800554e:	d00a      	beq.n	8005566 <__swsetup_r+0x9e>
 8005550:	2300      	movs	r3, #0
 8005552:	60a3      	str	r3, [r4, #8]
 8005554:	6963      	ldr	r3, [r4, #20]
 8005556:	425b      	negs	r3, r3
 8005558:	61a3      	str	r3, [r4, #24]
 800555a:	6923      	ldr	r3, [r4, #16]
 800555c:	b943      	cbnz	r3, 8005570 <__swsetup_r+0xa8>
 800555e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005562:	d1c4      	bne.n	80054ee <__swsetup_r+0x26>
 8005564:	bd38      	pop	{r3, r4, r5, pc}
 8005566:	0781      	lsls	r1, r0, #30
 8005568:	bf58      	it	pl
 800556a:	6963      	ldrpl	r3, [r4, #20]
 800556c:	60a3      	str	r3, [r4, #8]
 800556e:	e7f4      	b.n	800555a <__swsetup_r+0x92>
 8005570:	2000      	movs	r0, #0
 8005572:	e7f7      	b.n	8005564 <__swsetup_r+0x9c>
 8005574:	2000005c 	.word	0x2000005c

08005578 <_sbrk_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	4d06      	ldr	r5, [pc, #24]	; (8005594 <_sbrk_r+0x1c>)
 800557c:	2300      	movs	r3, #0
 800557e:	4604      	mov	r4, r0
 8005580:	4608      	mov	r0, r1
 8005582:	602b      	str	r3, [r5, #0]
 8005584:	f7fd fbcc 	bl	8002d20 <_sbrk>
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	d102      	bne.n	8005592 <_sbrk_r+0x1a>
 800558c:	682b      	ldr	r3, [r5, #0]
 800558e:	b103      	cbz	r3, 8005592 <_sbrk_r+0x1a>
 8005590:	6023      	str	r3, [r4, #0]
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	20000204 	.word	0x20000204

08005598 <__swhatbuf_r>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	460c      	mov	r4, r1
 800559c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a0:	2900      	cmp	r1, #0
 80055a2:	b096      	sub	sp, #88	; 0x58
 80055a4:	4615      	mov	r5, r2
 80055a6:	461e      	mov	r6, r3
 80055a8:	da0d      	bge.n	80055c6 <__swhatbuf_r+0x2e>
 80055aa:	89a3      	ldrh	r3, [r4, #12]
 80055ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80055b0:	f04f 0100 	mov.w	r1, #0
 80055b4:	bf0c      	ite	eq
 80055b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80055ba:	2340      	movne	r3, #64	; 0x40
 80055bc:	2000      	movs	r0, #0
 80055be:	6031      	str	r1, [r6, #0]
 80055c0:	602b      	str	r3, [r5, #0]
 80055c2:	b016      	add	sp, #88	; 0x58
 80055c4:	bd70      	pop	{r4, r5, r6, pc}
 80055c6:	466a      	mov	r2, sp
 80055c8:	f000 f848 	bl	800565c <_fstat_r>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	dbec      	blt.n	80055aa <__swhatbuf_r+0x12>
 80055d0:	9901      	ldr	r1, [sp, #4]
 80055d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80055d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80055da:	4259      	negs	r1, r3
 80055dc:	4159      	adcs	r1, r3
 80055de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055e2:	e7eb      	b.n	80055bc <__swhatbuf_r+0x24>

080055e4 <__smakebuf_r>:
 80055e4:	898b      	ldrh	r3, [r1, #12]
 80055e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055e8:	079d      	lsls	r5, r3, #30
 80055ea:	4606      	mov	r6, r0
 80055ec:	460c      	mov	r4, r1
 80055ee:	d507      	bpl.n	8005600 <__smakebuf_r+0x1c>
 80055f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	6123      	str	r3, [r4, #16]
 80055f8:	2301      	movs	r3, #1
 80055fa:	6163      	str	r3, [r4, #20]
 80055fc:	b002      	add	sp, #8
 80055fe:	bd70      	pop	{r4, r5, r6, pc}
 8005600:	ab01      	add	r3, sp, #4
 8005602:	466a      	mov	r2, sp
 8005604:	f7ff ffc8 	bl	8005598 <__swhatbuf_r>
 8005608:	9900      	ldr	r1, [sp, #0]
 800560a:	4605      	mov	r5, r0
 800560c:	4630      	mov	r0, r6
 800560e:	f7ff fb0f 	bl	8004c30 <_malloc_r>
 8005612:	b948      	cbnz	r0, 8005628 <__smakebuf_r+0x44>
 8005614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005618:	059a      	lsls	r2, r3, #22
 800561a:	d4ef      	bmi.n	80055fc <__smakebuf_r+0x18>
 800561c:	f023 0303 	bic.w	r3, r3, #3
 8005620:	f043 0302 	orr.w	r3, r3, #2
 8005624:	81a3      	strh	r3, [r4, #12]
 8005626:	e7e3      	b.n	80055f0 <__smakebuf_r+0xc>
 8005628:	89a3      	ldrh	r3, [r4, #12]
 800562a:	6020      	str	r0, [r4, #0]
 800562c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005630:	81a3      	strh	r3, [r4, #12]
 8005632:	9b00      	ldr	r3, [sp, #0]
 8005634:	6163      	str	r3, [r4, #20]
 8005636:	9b01      	ldr	r3, [sp, #4]
 8005638:	6120      	str	r0, [r4, #16]
 800563a:	b15b      	cbz	r3, 8005654 <__smakebuf_r+0x70>
 800563c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005640:	4630      	mov	r0, r6
 8005642:	f000 f81d 	bl	8005680 <_isatty_r>
 8005646:	b128      	cbz	r0, 8005654 <__smakebuf_r+0x70>
 8005648:	89a3      	ldrh	r3, [r4, #12]
 800564a:	f023 0303 	bic.w	r3, r3, #3
 800564e:	f043 0301 	orr.w	r3, r3, #1
 8005652:	81a3      	strh	r3, [r4, #12]
 8005654:	89a3      	ldrh	r3, [r4, #12]
 8005656:	431d      	orrs	r5, r3
 8005658:	81a5      	strh	r5, [r4, #12]
 800565a:	e7cf      	b.n	80055fc <__smakebuf_r+0x18>

0800565c <_fstat_r>:
 800565c:	b538      	push	{r3, r4, r5, lr}
 800565e:	4d07      	ldr	r5, [pc, #28]	; (800567c <_fstat_r+0x20>)
 8005660:	2300      	movs	r3, #0
 8005662:	4604      	mov	r4, r0
 8005664:	4608      	mov	r0, r1
 8005666:	4611      	mov	r1, r2
 8005668:	602b      	str	r3, [r5, #0]
 800566a:	f7fd fb31 	bl	8002cd0 <_fstat>
 800566e:	1c43      	adds	r3, r0, #1
 8005670:	d102      	bne.n	8005678 <_fstat_r+0x1c>
 8005672:	682b      	ldr	r3, [r5, #0]
 8005674:	b103      	cbz	r3, 8005678 <_fstat_r+0x1c>
 8005676:	6023      	str	r3, [r4, #0]
 8005678:	bd38      	pop	{r3, r4, r5, pc}
 800567a:	bf00      	nop
 800567c:	20000204 	.word	0x20000204

08005680 <_isatty_r>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4d06      	ldr	r5, [pc, #24]	; (800569c <_isatty_r+0x1c>)
 8005684:	2300      	movs	r3, #0
 8005686:	4604      	mov	r4, r0
 8005688:	4608      	mov	r0, r1
 800568a:	602b      	str	r3, [r5, #0]
 800568c:	f7fd fb30 	bl	8002cf0 <_isatty>
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	d102      	bne.n	800569a <_isatty_r+0x1a>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	b103      	cbz	r3, 800569a <_isatty_r+0x1a>
 8005698:	6023      	str	r3, [r4, #0]
 800569a:	bd38      	pop	{r3, r4, r5, pc}
 800569c:	20000204 	.word	0x20000204

080056a0 <tan>:
 80056a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056a2:	ec53 2b10 	vmov	r2, r3, d0
 80056a6:	4816      	ldr	r0, [pc, #88]	; (8005700 <tan+0x60>)
 80056a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80056ac:	4281      	cmp	r1, r0
 80056ae:	dc07      	bgt.n	80056c0 <tan+0x20>
 80056b0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80056f8 <tan+0x58>
 80056b4:	2001      	movs	r0, #1
 80056b6:	b005      	add	sp, #20
 80056b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80056bc:	f000 b824 	b.w	8005708 <__kernel_tan>
 80056c0:	4810      	ldr	r0, [pc, #64]	; (8005704 <tan+0x64>)
 80056c2:	4281      	cmp	r1, r0
 80056c4:	dd09      	ble.n	80056da <tan+0x3a>
 80056c6:	ee10 0a10 	vmov	r0, s0
 80056ca:	4619      	mov	r1, r3
 80056cc:	f7fa fdd4 	bl	8000278 <__aeabi_dsub>
 80056d0:	ec41 0b10 	vmov	d0, r0, r1
 80056d4:	b005      	add	sp, #20
 80056d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80056da:	4668      	mov	r0, sp
 80056dc:	f000 fa20 	bl	8005b20 <__ieee754_rem_pio2>
 80056e0:	0040      	lsls	r0, r0, #1
 80056e2:	f000 0002 	and.w	r0, r0, #2
 80056e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80056ea:	ed9d 0b00 	vldr	d0, [sp]
 80056ee:	f1c0 0001 	rsb	r0, r0, #1
 80056f2:	f000 f809 	bl	8005708 <__kernel_tan>
 80056f6:	e7ed      	b.n	80056d4 <tan+0x34>
	...
 8005700:	3fe921fb 	.word	0x3fe921fb
 8005704:	7fefffff 	.word	0x7fefffff

08005708 <__kernel_tan>:
 8005708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800570c:	ed2d 8b06 	vpush	{d8-d10}
 8005710:	ec5b ab10 	vmov	sl, fp, d0
 8005714:	4be0      	ldr	r3, [pc, #896]	; (8005a98 <__kernel_tan+0x390>)
 8005716:	b083      	sub	sp, #12
 8005718:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800571c:	429f      	cmp	r7, r3
 800571e:	ec59 8b11 	vmov	r8, r9, d1
 8005722:	4606      	mov	r6, r0
 8005724:	f8cd b000 	str.w	fp, [sp]
 8005728:	dc61      	bgt.n	80057ee <__kernel_tan+0xe6>
 800572a:	ee10 0a10 	vmov	r0, s0
 800572e:	4659      	mov	r1, fp
 8005730:	f7fb f9f4 	bl	8000b1c <__aeabi_d2iz>
 8005734:	4605      	mov	r5, r0
 8005736:	2800      	cmp	r0, #0
 8005738:	f040 8083 	bne.w	8005842 <__kernel_tan+0x13a>
 800573c:	1c73      	adds	r3, r6, #1
 800573e:	4652      	mov	r2, sl
 8005740:	4313      	orrs	r3, r2
 8005742:	433b      	orrs	r3, r7
 8005744:	d112      	bne.n	800576c <__kernel_tan+0x64>
 8005746:	ec4b ab10 	vmov	d0, sl, fp
 800574a:	f000 fbef 	bl	8005f2c <fabs>
 800574e:	49d3      	ldr	r1, [pc, #844]	; (8005a9c <__kernel_tan+0x394>)
 8005750:	ec53 2b10 	vmov	r2, r3, d0
 8005754:	2000      	movs	r0, #0
 8005756:	f7fb f871 	bl	800083c <__aeabi_ddiv>
 800575a:	4682      	mov	sl, r0
 800575c:	468b      	mov	fp, r1
 800575e:	ec4b ab10 	vmov	d0, sl, fp
 8005762:	b003      	add	sp, #12
 8005764:	ecbd 8b06 	vpop	{d8-d10}
 8005768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800576c:	2e01      	cmp	r6, #1
 800576e:	d0f6      	beq.n	800575e <__kernel_tan+0x56>
 8005770:	4642      	mov	r2, r8
 8005772:	464b      	mov	r3, r9
 8005774:	4650      	mov	r0, sl
 8005776:	4659      	mov	r1, fp
 8005778:	f7fa fd80 	bl	800027c <__adddf3>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	460f      	mov	r7, r1
 8005782:	2000      	movs	r0, #0
 8005784:	49c6      	ldr	r1, [pc, #792]	; (8005aa0 <__kernel_tan+0x398>)
 8005786:	f7fb f859 	bl	800083c <__aeabi_ddiv>
 800578a:	e9cd 0100 	strd	r0, r1, [sp]
 800578e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005792:	462e      	mov	r6, r5
 8005794:	4652      	mov	r2, sl
 8005796:	462c      	mov	r4, r5
 8005798:	4630      	mov	r0, r6
 800579a:	461d      	mov	r5, r3
 800579c:	4639      	mov	r1, r7
 800579e:	465b      	mov	r3, fp
 80057a0:	f7fa fd6a 	bl	8000278 <__aeabi_dsub>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4640      	mov	r0, r8
 80057aa:	4649      	mov	r1, r9
 80057ac:	f7fa fd64 	bl	8000278 <__aeabi_dsub>
 80057b0:	4632      	mov	r2, r6
 80057b2:	462b      	mov	r3, r5
 80057b4:	f7fa ff18 	bl	80005e8 <__aeabi_dmul>
 80057b8:	4632      	mov	r2, r6
 80057ba:	4680      	mov	r8, r0
 80057bc:	4689      	mov	r9, r1
 80057be:	462b      	mov	r3, r5
 80057c0:	4630      	mov	r0, r6
 80057c2:	4639      	mov	r1, r7
 80057c4:	f7fa ff10 	bl	80005e8 <__aeabi_dmul>
 80057c8:	4bb4      	ldr	r3, [pc, #720]	; (8005a9c <__kernel_tan+0x394>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	f7fa fd56 	bl	800027c <__adddf3>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4640      	mov	r0, r8
 80057d6:	4649      	mov	r1, r9
 80057d8:	f7fa fd50 	bl	800027c <__adddf3>
 80057dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057e0:	f7fa ff02 	bl	80005e8 <__aeabi_dmul>
 80057e4:	4622      	mov	r2, r4
 80057e6:	462b      	mov	r3, r5
 80057e8:	f7fa fd48 	bl	800027c <__adddf3>
 80057ec:	e7b5      	b.n	800575a <__kernel_tan+0x52>
 80057ee:	4bad      	ldr	r3, [pc, #692]	; (8005aa4 <__kernel_tan+0x39c>)
 80057f0:	429f      	cmp	r7, r3
 80057f2:	dd26      	ble.n	8005842 <__kernel_tan+0x13a>
 80057f4:	9b00      	ldr	r3, [sp, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	da09      	bge.n	800580e <__kernel_tan+0x106>
 80057fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80057fe:	469b      	mov	fp, r3
 8005800:	ee10 aa10 	vmov	sl, s0
 8005804:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005808:	ee11 8a10 	vmov	r8, s2
 800580c:	4699      	mov	r9, r3
 800580e:	4652      	mov	r2, sl
 8005810:	465b      	mov	r3, fp
 8005812:	a183      	add	r1, pc, #524	; (adr r1, 8005a20 <__kernel_tan+0x318>)
 8005814:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005818:	f7fa fd2e 	bl	8000278 <__aeabi_dsub>
 800581c:	4642      	mov	r2, r8
 800581e:	464b      	mov	r3, r9
 8005820:	4604      	mov	r4, r0
 8005822:	460d      	mov	r5, r1
 8005824:	a180      	add	r1, pc, #512	; (adr r1, 8005a28 <__kernel_tan+0x320>)
 8005826:	e9d1 0100 	ldrd	r0, r1, [r1]
 800582a:	f7fa fd25 	bl	8000278 <__aeabi_dsub>
 800582e:	4622      	mov	r2, r4
 8005830:	462b      	mov	r3, r5
 8005832:	f7fa fd23 	bl	800027c <__adddf3>
 8005836:	f04f 0800 	mov.w	r8, #0
 800583a:	4682      	mov	sl, r0
 800583c:	468b      	mov	fp, r1
 800583e:	f04f 0900 	mov.w	r9, #0
 8005842:	4652      	mov	r2, sl
 8005844:	465b      	mov	r3, fp
 8005846:	4650      	mov	r0, sl
 8005848:	4659      	mov	r1, fp
 800584a:	f7fa fecd 	bl	80005e8 <__aeabi_dmul>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	ec43 2b18 	vmov	d8, r2, r3
 8005856:	f7fa fec7 	bl	80005e8 <__aeabi_dmul>
 800585a:	ec53 2b18 	vmov	r2, r3, d8
 800585e:	4604      	mov	r4, r0
 8005860:	460d      	mov	r5, r1
 8005862:	4650      	mov	r0, sl
 8005864:	4659      	mov	r1, fp
 8005866:	f7fa febf 	bl	80005e8 <__aeabi_dmul>
 800586a:	a371      	add	r3, pc, #452	; (adr r3, 8005a30 <__kernel_tan+0x328>)
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	ec41 0b19 	vmov	d9, r0, r1
 8005874:	4620      	mov	r0, r4
 8005876:	4629      	mov	r1, r5
 8005878:	f7fa feb6 	bl	80005e8 <__aeabi_dmul>
 800587c:	a36e      	add	r3, pc, #440	; (adr r3, 8005a38 <__kernel_tan+0x330>)
 800587e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005882:	f7fa fcfb 	bl	800027c <__adddf3>
 8005886:	4622      	mov	r2, r4
 8005888:	462b      	mov	r3, r5
 800588a:	f7fa fead 	bl	80005e8 <__aeabi_dmul>
 800588e:	a36c      	add	r3, pc, #432	; (adr r3, 8005a40 <__kernel_tan+0x338>)
 8005890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005894:	f7fa fcf2 	bl	800027c <__adddf3>
 8005898:	4622      	mov	r2, r4
 800589a:	462b      	mov	r3, r5
 800589c:	f7fa fea4 	bl	80005e8 <__aeabi_dmul>
 80058a0:	a369      	add	r3, pc, #420	; (adr r3, 8005a48 <__kernel_tan+0x340>)
 80058a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a6:	f7fa fce9 	bl	800027c <__adddf3>
 80058aa:	4622      	mov	r2, r4
 80058ac:	462b      	mov	r3, r5
 80058ae:	f7fa fe9b 	bl	80005e8 <__aeabi_dmul>
 80058b2:	a367      	add	r3, pc, #412	; (adr r3, 8005a50 <__kernel_tan+0x348>)
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	f7fa fce0 	bl	800027c <__adddf3>
 80058bc:	4622      	mov	r2, r4
 80058be:	462b      	mov	r3, r5
 80058c0:	f7fa fe92 	bl	80005e8 <__aeabi_dmul>
 80058c4:	a364      	add	r3, pc, #400	; (adr r3, 8005a58 <__kernel_tan+0x350>)
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	f7fa fcd7 	bl	800027c <__adddf3>
 80058ce:	ec53 2b18 	vmov	r2, r3, d8
 80058d2:	f7fa fe89 	bl	80005e8 <__aeabi_dmul>
 80058d6:	a362      	add	r3, pc, #392	; (adr r3, 8005a60 <__kernel_tan+0x358>)
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	ec41 0b1a 	vmov	d10, r0, r1
 80058e0:	4620      	mov	r0, r4
 80058e2:	4629      	mov	r1, r5
 80058e4:	f7fa fe80 	bl	80005e8 <__aeabi_dmul>
 80058e8:	a35f      	add	r3, pc, #380	; (adr r3, 8005a68 <__kernel_tan+0x360>)
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f7fa fcc5 	bl	800027c <__adddf3>
 80058f2:	4622      	mov	r2, r4
 80058f4:	462b      	mov	r3, r5
 80058f6:	f7fa fe77 	bl	80005e8 <__aeabi_dmul>
 80058fa:	a35d      	add	r3, pc, #372	; (adr r3, 8005a70 <__kernel_tan+0x368>)
 80058fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005900:	f7fa fcbc 	bl	800027c <__adddf3>
 8005904:	4622      	mov	r2, r4
 8005906:	462b      	mov	r3, r5
 8005908:	f7fa fe6e 	bl	80005e8 <__aeabi_dmul>
 800590c:	a35a      	add	r3, pc, #360	; (adr r3, 8005a78 <__kernel_tan+0x370>)
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	f7fa fcb3 	bl	800027c <__adddf3>
 8005916:	4622      	mov	r2, r4
 8005918:	462b      	mov	r3, r5
 800591a:	f7fa fe65 	bl	80005e8 <__aeabi_dmul>
 800591e:	a358      	add	r3, pc, #352	; (adr r3, 8005a80 <__kernel_tan+0x378>)
 8005920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005924:	f7fa fcaa 	bl	800027c <__adddf3>
 8005928:	4622      	mov	r2, r4
 800592a:	462b      	mov	r3, r5
 800592c:	f7fa fe5c 	bl	80005e8 <__aeabi_dmul>
 8005930:	a355      	add	r3, pc, #340	; (adr r3, 8005a88 <__kernel_tan+0x380>)
 8005932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005936:	f7fa fca1 	bl	800027c <__adddf3>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	ec51 0b1a 	vmov	r0, r1, d10
 8005942:	f7fa fc9b 	bl	800027c <__adddf3>
 8005946:	ec53 2b19 	vmov	r2, r3, d9
 800594a:	f7fa fe4d 	bl	80005e8 <__aeabi_dmul>
 800594e:	4642      	mov	r2, r8
 8005950:	464b      	mov	r3, r9
 8005952:	f7fa fc93 	bl	800027c <__adddf3>
 8005956:	ec53 2b18 	vmov	r2, r3, d8
 800595a:	f7fa fe45 	bl	80005e8 <__aeabi_dmul>
 800595e:	4642      	mov	r2, r8
 8005960:	464b      	mov	r3, r9
 8005962:	f7fa fc8b 	bl	800027c <__adddf3>
 8005966:	a34a      	add	r3, pc, #296	; (adr r3, 8005a90 <__kernel_tan+0x388>)
 8005968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596c:	4604      	mov	r4, r0
 800596e:	460d      	mov	r5, r1
 8005970:	ec51 0b19 	vmov	r0, r1, d9
 8005974:	f7fa fe38 	bl	80005e8 <__aeabi_dmul>
 8005978:	4622      	mov	r2, r4
 800597a:	462b      	mov	r3, r5
 800597c:	f7fa fc7e 	bl	800027c <__adddf3>
 8005980:	460b      	mov	r3, r1
 8005982:	ec41 0b18 	vmov	d8, r0, r1
 8005986:	4602      	mov	r2, r0
 8005988:	4659      	mov	r1, fp
 800598a:	4650      	mov	r0, sl
 800598c:	f7fa fc76 	bl	800027c <__adddf3>
 8005990:	4b44      	ldr	r3, [pc, #272]	; (8005aa4 <__kernel_tan+0x39c>)
 8005992:	429f      	cmp	r7, r3
 8005994:	4604      	mov	r4, r0
 8005996:	460d      	mov	r5, r1
 8005998:	f340 8086 	ble.w	8005aa8 <__kernel_tan+0x3a0>
 800599c:	4630      	mov	r0, r6
 800599e:	f7fa fdb9 	bl	8000514 <__aeabi_i2d>
 80059a2:	4622      	mov	r2, r4
 80059a4:	4680      	mov	r8, r0
 80059a6:	4689      	mov	r9, r1
 80059a8:	462b      	mov	r3, r5
 80059aa:	4620      	mov	r0, r4
 80059ac:	4629      	mov	r1, r5
 80059ae:	f7fa fe1b 	bl	80005e8 <__aeabi_dmul>
 80059b2:	4642      	mov	r2, r8
 80059b4:	4606      	mov	r6, r0
 80059b6:	460f      	mov	r7, r1
 80059b8:	464b      	mov	r3, r9
 80059ba:	4620      	mov	r0, r4
 80059bc:	4629      	mov	r1, r5
 80059be:	f7fa fc5d 	bl	800027c <__adddf3>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4630      	mov	r0, r6
 80059c8:	4639      	mov	r1, r7
 80059ca:	f7fa ff37 	bl	800083c <__aeabi_ddiv>
 80059ce:	ec53 2b18 	vmov	r2, r3, d8
 80059d2:	f7fa fc51 	bl	8000278 <__aeabi_dsub>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4650      	mov	r0, sl
 80059dc:	4659      	mov	r1, fp
 80059de:	f7fa fc4b 	bl	8000278 <__aeabi_dsub>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	f7fa fc49 	bl	800027c <__adddf3>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4640      	mov	r0, r8
 80059f0:	4649      	mov	r1, r9
 80059f2:	f7fa fc41 	bl	8000278 <__aeabi_dsub>
 80059f6:	9b00      	ldr	r3, [sp, #0]
 80059f8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80059fc:	f00a 0a02 	and.w	sl, sl, #2
 8005a00:	4604      	mov	r4, r0
 8005a02:	f1ca 0001 	rsb	r0, sl, #1
 8005a06:	460d      	mov	r5, r1
 8005a08:	f7fa fd84 	bl	8000514 <__aeabi_i2d>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4620      	mov	r0, r4
 8005a12:	4629      	mov	r1, r5
 8005a14:	f7fa fde8 	bl	80005e8 <__aeabi_dmul>
 8005a18:	e69f      	b.n	800575a <__kernel_tan+0x52>
 8005a1a:	bf00      	nop
 8005a1c:	f3af 8000 	nop.w
 8005a20:	54442d18 	.word	0x54442d18
 8005a24:	3fe921fb 	.word	0x3fe921fb
 8005a28:	33145c07 	.word	0x33145c07
 8005a2c:	3c81a626 	.word	0x3c81a626
 8005a30:	74bf7ad4 	.word	0x74bf7ad4
 8005a34:	3efb2a70 	.word	0x3efb2a70
 8005a38:	32f0a7e9 	.word	0x32f0a7e9
 8005a3c:	3f12b80f 	.word	0x3f12b80f
 8005a40:	1a8d1068 	.word	0x1a8d1068
 8005a44:	3f3026f7 	.word	0x3f3026f7
 8005a48:	fee08315 	.word	0xfee08315
 8005a4c:	3f57dbc8 	.word	0x3f57dbc8
 8005a50:	e96e8493 	.word	0xe96e8493
 8005a54:	3f8226e3 	.word	0x3f8226e3
 8005a58:	1bb341fe 	.word	0x1bb341fe
 8005a5c:	3faba1ba 	.word	0x3faba1ba
 8005a60:	db605373 	.word	0xdb605373
 8005a64:	bef375cb 	.word	0xbef375cb
 8005a68:	a03792a6 	.word	0xa03792a6
 8005a6c:	3f147e88 	.word	0x3f147e88
 8005a70:	f2f26501 	.word	0xf2f26501
 8005a74:	3f4344d8 	.word	0x3f4344d8
 8005a78:	c9560328 	.word	0xc9560328
 8005a7c:	3f6d6d22 	.word	0x3f6d6d22
 8005a80:	8406d637 	.word	0x8406d637
 8005a84:	3f9664f4 	.word	0x3f9664f4
 8005a88:	1110fe7a 	.word	0x1110fe7a
 8005a8c:	3fc11111 	.word	0x3fc11111
 8005a90:	55555563 	.word	0x55555563
 8005a94:	3fd55555 	.word	0x3fd55555
 8005a98:	3e2fffff 	.word	0x3e2fffff
 8005a9c:	3ff00000 	.word	0x3ff00000
 8005aa0:	bff00000 	.word	0xbff00000
 8005aa4:	3fe59427 	.word	0x3fe59427
 8005aa8:	2e01      	cmp	r6, #1
 8005aaa:	d02f      	beq.n	8005b0c <__kernel_tan+0x404>
 8005aac:	460f      	mov	r7, r1
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4689      	mov	r9, r1
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	4917      	ldr	r1, [pc, #92]	; (8005b14 <__kernel_tan+0x40c>)
 8005ab8:	f7fa fec0 	bl	800083c <__aeabi_ddiv>
 8005abc:	2600      	movs	r6, #0
 8005abe:	e9cd 0100 	strd	r0, r1, [sp]
 8005ac2:	4652      	mov	r2, sl
 8005ac4:	465b      	mov	r3, fp
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	4639      	mov	r1, r7
 8005aca:	f7fa fbd5 	bl	8000278 <__aeabi_dsub>
 8005ace:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	ec51 0b18 	vmov	r0, r1, d8
 8005ada:	f7fa fbcd 	bl	8000278 <__aeabi_dsub>
 8005ade:	4632      	mov	r2, r6
 8005ae0:	462b      	mov	r3, r5
 8005ae2:	f7fa fd81 	bl	80005e8 <__aeabi_dmul>
 8005ae6:	46b0      	mov	r8, r6
 8005ae8:	460f      	mov	r7, r1
 8005aea:	4642      	mov	r2, r8
 8005aec:	462b      	mov	r3, r5
 8005aee:	4634      	mov	r4, r6
 8005af0:	4649      	mov	r1, r9
 8005af2:	4606      	mov	r6, r0
 8005af4:	4640      	mov	r0, r8
 8005af6:	f7fa fd77 	bl	80005e8 <__aeabi_dmul>
 8005afa:	4b07      	ldr	r3, [pc, #28]	; (8005b18 <__kernel_tan+0x410>)
 8005afc:	2200      	movs	r2, #0
 8005afe:	f7fa fbbd 	bl	800027c <__adddf3>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	4630      	mov	r0, r6
 8005b08:	4639      	mov	r1, r7
 8005b0a:	e665      	b.n	80057d8 <__kernel_tan+0xd0>
 8005b0c:	4682      	mov	sl, r0
 8005b0e:	468b      	mov	fp, r1
 8005b10:	e625      	b.n	800575e <__kernel_tan+0x56>
 8005b12:	bf00      	nop
 8005b14:	bff00000 	.word	0xbff00000
 8005b18:	3ff00000 	.word	0x3ff00000
 8005b1c:	00000000 	.word	0x00000000

08005b20 <__ieee754_rem_pio2>:
 8005b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b24:	ed2d 8b02 	vpush	{d8}
 8005b28:	ec55 4b10 	vmov	r4, r5, d0
 8005b2c:	4bca      	ldr	r3, [pc, #808]	; (8005e58 <__ieee754_rem_pio2+0x338>)
 8005b2e:	b08b      	sub	sp, #44	; 0x2c
 8005b30:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005b34:	4598      	cmp	r8, r3
 8005b36:	4682      	mov	sl, r0
 8005b38:	9502      	str	r5, [sp, #8]
 8005b3a:	dc08      	bgt.n	8005b4e <__ieee754_rem_pio2+0x2e>
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2300      	movs	r3, #0
 8005b40:	ed80 0b00 	vstr	d0, [r0]
 8005b44:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005b48:	f04f 0b00 	mov.w	fp, #0
 8005b4c:	e028      	b.n	8005ba0 <__ieee754_rem_pio2+0x80>
 8005b4e:	4bc3      	ldr	r3, [pc, #780]	; (8005e5c <__ieee754_rem_pio2+0x33c>)
 8005b50:	4598      	cmp	r8, r3
 8005b52:	dc78      	bgt.n	8005c46 <__ieee754_rem_pio2+0x126>
 8005b54:	9b02      	ldr	r3, [sp, #8]
 8005b56:	4ec2      	ldr	r6, [pc, #776]	; (8005e60 <__ieee754_rem_pio2+0x340>)
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	ee10 0a10 	vmov	r0, s0
 8005b5e:	a3b0      	add	r3, pc, #704	; (adr r3, 8005e20 <__ieee754_rem_pio2+0x300>)
 8005b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b64:	4629      	mov	r1, r5
 8005b66:	dd39      	ble.n	8005bdc <__ieee754_rem_pio2+0xbc>
 8005b68:	f7fa fb86 	bl	8000278 <__aeabi_dsub>
 8005b6c:	45b0      	cmp	r8, r6
 8005b6e:	4604      	mov	r4, r0
 8005b70:	460d      	mov	r5, r1
 8005b72:	d01b      	beq.n	8005bac <__ieee754_rem_pio2+0x8c>
 8005b74:	a3ac      	add	r3, pc, #688	; (adr r3, 8005e28 <__ieee754_rem_pio2+0x308>)
 8005b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7a:	f7fa fb7d 	bl	8000278 <__aeabi_dsub>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	e9ca 2300 	strd	r2, r3, [sl]
 8005b86:	4620      	mov	r0, r4
 8005b88:	4629      	mov	r1, r5
 8005b8a:	f7fa fb75 	bl	8000278 <__aeabi_dsub>
 8005b8e:	a3a6      	add	r3, pc, #664	; (adr r3, 8005e28 <__ieee754_rem_pio2+0x308>)
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	f7fa fb70 	bl	8000278 <__aeabi_dsub>
 8005b98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005b9c:	f04f 0b01 	mov.w	fp, #1
 8005ba0:	4658      	mov	r0, fp
 8005ba2:	b00b      	add	sp, #44	; 0x2c
 8005ba4:	ecbd 8b02 	vpop	{d8}
 8005ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bac:	a3a0      	add	r3, pc, #640	; (adr r3, 8005e30 <__ieee754_rem_pio2+0x310>)
 8005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb2:	f7fa fb61 	bl	8000278 <__aeabi_dsub>
 8005bb6:	a3a0      	add	r3, pc, #640	; (adr r3, 8005e38 <__ieee754_rem_pio2+0x318>)
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	460d      	mov	r5, r1
 8005bc0:	f7fa fb5a 	bl	8000278 <__aeabi_dsub>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	e9ca 2300 	strd	r2, r3, [sl]
 8005bcc:	4620      	mov	r0, r4
 8005bce:	4629      	mov	r1, r5
 8005bd0:	f7fa fb52 	bl	8000278 <__aeabi_dsub>
 8005bd4:	a398      	add	r3, pc, #608	; (adr r3, 8005e38 <__ieee754_rem_pio2+0x318>)
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	e7db      	b.n	8005b94 <__ieee754_rem_pio2+0x74>
 8005bdc:	f7fa fb4e 	bl	800027c <__adddf3>
 8005be0:	45b0      	cmp	r8, r6
 8005be2:	4604      	mov	r4, r0
 8005be4:	460d      	mov	r5, r1
 8005be6:	d016      	beq.n	8005c16 <__ieee754_rem_pio2+0xf6>
 8005be8:	a38f      	add	r3, pc, #572	; (adr r3, 8005e28 <__ieee754_rem_pio2+0x308>)
 8005bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bee:	f7fa fb45 	bl	800027c <__adddf3>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	e9ca 2300 	strd	r2, r3, [sl]
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	4629      	mov	r1, r5
 8005bfe:	f7fa fb3b 	bl	8000278 <__aeabi_dsub>
 8005c02:	a389      	add	r3, pc, #548	; (adr r3, 8005e28 <__ieee754_rem_pio2+0x308>)
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f7fa fb38 	bl	800027c <__adddf3>
 8005c0c:	f04f 3bff 	mov.w	fp, #4294967295
 8005c10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005c14:	e7c4      	b.n	8005ba0 <__ieee754_rem_pio2+0x80>
 8005c16:	a386      	add	r3, pc, #536	; (adr r3, 8005e30 <__ieee754_rem_pio2+0x310>)
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	f7fa fb2e 	bl	800027c <__adddf3>
 8005c20:	a385      	add	r3, pc, #532	; (adr r3, 8005e38 <__ieee754_rem_pio2+0x318>)
 8005c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c26:	4604      	mov	r4, r0
 8005c28:	460d      	mov	r5, r1
 8005c2a:	f7fa fb27 	bl	800027c <__adddf3>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	e9ca 2300 	strd	r2, r3, [sl]
 8005c36:	4620      	mov	r0, r4
 8005c38:	4629      	mov	r1, r5
 8005c3a:	f7fa fb1d 	bl	8000278 <__aeabi_dsub>
 8005c3e:	a37e      	add	r3, pc, #504	; (adr r3, 8005e38 <__ieee754_rem_pio2+0x318>)
 8005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c44:	e7e0      	b.n	8005c08 <__ieee754_rem_pio2+0xe8>
 8005c46:	4b87      	ldr	r3, [pc, #540]	; (8005e64 <__ieee754_rem_pio2+0x344>)
 8005c48:	4598      	cmp	r8, r3
 8005c4a:	f300 80d8 	bgt.w	8005dfe <__ieee754_rem_pio2+0x2de>
 8005c4e:	f000 f96d 	bl	8005f2c <fabs>
 8005c52:	ec55 4b10 	vmov	r4, r5, d0
 8005c56:	ee10 0a10 	vmov	r0, s0
 8005c5a:	a379      	add	r3, pc, #484	; (adr r3, 8005e40 <__ieee754_rem_pio2+0x320>)
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	4629      	mov	r1, r5
 8005c62:	f7fa fcc1 	bl	80005e8 <__aeabi_dmul>
 8005c66:	4b80      	ldr	r3, [pc, #512]	; (8005e68 <__ieee754_rem_pio2+0x348>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f7fa fb07 	bl	800027c <__adddf3>
 8005c6e:	f7fa ff55 	bl	8000b1c <__aeabi_d2iz>
 8005c72:	4683      	mov	fp, r0
 8005c74:	f7fa fc4e 	bl	8000514 <__aeabi_i2d>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	ec43 2b18 	vmov	d8, r2, r3
 8005c80:	a367      	add	r3, pc, #412	; (adr r3, 8005e20 <__ieee754_rem_pio2+0x300>)
 8005c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c86:	f7fa fcaf 	bl	80005e8 <__aeabi_dmul>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4620      	mov	r0, r4
 8005c90:	4629      	mov	r1, r5
 8005c92:	f7fa faf1 	bl	8000278 <__aeabi_dsub>
 8005c96:	a364      	add	r3, pc, #400	; (adr r3, 8005e28 <__ieee754_rem_pio2+0x308>)
 8005c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	460f      	mov	r7, r1
 8005ca0:	ec51 0b18 	vmov	r0, r1, d8
 8005ca4:	f7fa fca0 	bl	80005e8 <__aeabi_dmul>
 8005ca8:	f1bb 0f1f 	cmp.w	fp, #31
 8005cac:	4604      	mov	r4, r0
 8005cae:	460d      	mov	r5, r1
 8005cb0:	dc0d      	bgt.n	8005cce <__ieee754_rem_pio2+0x1ae>
 8005cb2:	4b6e      	ldr	r3, [pc, #440]	; (8005e6c <__ieee754_rem_pio2+0x34c>)
 8005cb4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cbc:	4543      	cmp	r3, r8
 8005cbe:	d006      	beq.n	8005cce <__ieee754_rem_pio2+0x1ae>
 8005cc0:	4622      	mov	r2, r4
 8005cc2:	462b      	mov	r3, r5
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	4639      	mov	r1, r7
 8005cc8:	f7fa fad6 	bl	8000278 <__aeabi_dsub>
 8005ccc:	e00e      	b.n	8005cec <__ieee754_rem_pio2+0x1cc>
 8005cce:	462b      	mov	r3, r5
 8005cd0:	4622      	mov	r2, r4
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	4639      	mov	r1, r7
 8005cd6:	f7fa facf 	bl	8000278 <__aeabi_dsub>
 8005cda:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005cde:	9303      	str	r3, [sp, #12]
 8005ce0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005ce4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	dc02      	bgt.n	8005cf2 <__ieee754_rem_pio2+0x1d2>
 8005cec:	e9ca 0100 	strd	r0, r1, [sl]
 8005cf0:	e039      	b.n	8005d66 <__ieee754_rem_pio2+0x246>
 8005cf2:	a34f      	add	r3, pc, #316	; (adr r3, 8005e30 <__ieee754_rem_pio2+0x310>)
 8005cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf8:	ec51 0b18 	vmov	r0, r1, d8
 8005cfc:	f7fa fc74 	bl	80005e8 <__aeabi_dmul>
 8005d00:	4604      	mov	r4, r0
 8005d02:	460d      	mov	r5, r1
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	4630      	mov	r0, r6
 8005d0a:	4639      	mov	r1, r7
 8005d0c:	f7fa fab4 	bl	8000278 <__aeabi_dsub>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4680      	mov	r8, r0
 8005d16:	4689      	mov	r9, r1
 8005d18:	4630      	mov	r0, r6
 8005d1a:	4639      	mov	r1, r7
 8005d1c:	f7fa faac 	bl	8000278 <__aeabi_dsub>
 8005d20:	4622      	mov	r2, r4
 8005d22:	462b      	mov	r3, r5
 8005d24:	f7fa faa8 	bl	8000278 <__aeabi_dsub>
 8005d28:	a343      	add	r3, pc, #268	; (adr r3, 8005e38 <__ieee754_rem_pio2+0x318>)
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	4604      	mov	r4, r0
 8005d30:	460d      	mov	r5, r1
 8005d32:	ec51 0b18 	vmov	r0, r1, d8
 8005d36:	f7fa fc57 	bl	80005e8 <__aeabi_dmul>
 8005d3a:	4622      	mov	r2, r4
 8005d3c:	462b      	mov	r3, r5
 8005d3e:	f7fa fa9b 	bl	8000278 <__aeabi_dsub>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4604      	mov	r4, r0
 8005d48:	460d      	mov	r5, r1
 8005d4a:	4640      	mov	r0, r8
 8005d4c:	4649      	mov	r1, r9
 8005d4e:	f7fa fa93 	bl	8000278 <__aeabi_dsub>
 8005d52:	9a03      	ldr	r2, [sp, #12]
 8005d54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b31      	cmp	r3, #49	; 0x31
 8005d5c:	dc24      	bgt.n	8005da8 <__ieee754_rem_pio2+0x288>
 8005d5e:	e9ca 0100 	strd	r0, r1, [sl]
 8005d62:	4646      	mov	r6, r8
 8005d64:	464f      	mov	r7, r9
 8005d66:	e9da 8900 	ldrd	r8, r9, [sl]
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	4642      	mov	r2, r8
 8005d6e:	464b      	mov	r3, r9
 8005d70:	4639      	mov	r1, r7
 8005d72:	f7fa fa81 	bl	8000278 <__aeabi_dsub>
 8005d76:	462b      	mov	r3, r5
 8005d78:	4622      	mov	r2, r4
 8005d7a:	f7fa fa7d 	bl	8000278 <__aeabi_dsub>
 8005d7e:	9b02      	ldr	r3, [sp, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005d86:	f6bf af0b 	bge.w	8005ba0 <__ieee754_rem_pio2+0x80>
 8005d8a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005d8e:	f8ca 3004 	str.w	r3, [sl, #4]
 8005d92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d96:	f8ca 8000 	str.w	r8, [sl]
 8005d9a:	f8ca 0008 	str.w	r0, [sl, #8]
 8005d9e:	f8ca 300c 	str.w	r3, [sl, #12]
 8005da2:	f1cb 0b00 	rsb	fp, fp, #0
 8005da6:	e6fb      	b.n	8005ba0 <__ieee754_rem_pio2+0x80>
 8005da8:	a327      	add	r3, pc, #156	; (adr r3, 8005e48 <__ieee754_rem_pio2+0x328>)
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	ec51 0b18 	vmov	r0, r1, d8
 8005db2:	f7fa fc19 	bl	80005e8 <__aeabi_dmul>
 8005db6:	4604      	mov	r4, r0
 8005db8:	460d      	mov	r5, r1
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	f7fa fa59 	bl	8000278 <__aeabi_dsub>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	4606      	mov	r6, r0
 8005dcc:	460f      	mov	r7, r1
 8005dce:	4640      	mov	r0, r8
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	f7fa fa51 	bl	8000278 <__aeabi_dsub>
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	462b      	mov	r3, r5
 8005dda:	f7fa fa4d 	bl	8000278 <__aeabi_dsub>
 8005dde:	a31c      	add	r3, pc, #112	; (adr r3, 8005e50 <__ieee754_rem_pio2+0x330>)
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	4604      	mov	r4, r0
 8005de6:	460d      	mov	r5, r1
 8005de8:	ec51 0b18 	vmov	r0, r1, d8
 8005dec:	f7fa fbfc 	bl	80005e8 <__aeabi_dmul>
 8005df0:	4622      	mov	r2, r4
 8005df2:	462b      	mov	r3, r5
 8005df4:	f7fa fa40 	bl	8000278 <__aeabi_dsub>
 8005df8:	4604      	mov	r4, r0
 8005dfa:	460d      	mov	r5, r1
 8005dfc:	e760      	b.n	8005cc0 <__ieee754_rem_pio2+0x1a0>
 8005dfe:	4b1c      	ldr	r3, [pc, #112]	; (8005e70 <__ieee754_rem_pio2+0x350>)
 8005e00:	4598      	cmp	r8, r3
 8005e02:	dd37      	ble.n	8005e74 <__ieee754_rem_pio2+0x354>
 8005e04:	ee10 2a10 	vmov	r2, s0
 8005e08:	462b      	mov	r3, r5
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	f7fa fa33 	bl	8000278 <__aeabi_dsub>
 8005e12:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005e16:	e9ca 0100 	strd	r0, r1, [sl]
 8005e1a:	e695      	b.n	8005b48 <__ieee754_rem_pio2+0x28>
 8005e1c:	f3af 8000 	nop.w
 8005e20:	54400000 	.word	0x54400000
 8005e24:	3ff921fb 	.word	0x3ff921fb
 8005e28:	1a626331 	.word	0x1a626331
 8005e2c:	3dd0b461 	.word	0x3dd0b461
 8005e30:	1a600000 	.word	0x1a600000
 8005e34:	3dd0b461 	.word	0x3dd0b461
 8005e38:	2e037073 	.word	0x2e037073
 8005e3c:	3ba3198a 	.word	0x3ba3198a
 8005e40:	6dc9c883 	.word	0x6dc9c883
 8005e44:	3fe45f30 	.word	0x3fe45f30
 8005e48:	2e000000 	.word	0x2e000000
 8005e4c:	3ba3198a 	.word	0x3ba3198a
 8005e50:	252049c1 	.word	0x252049c1
 8005e54:	397b839a 	.word	0x397b839a
 8005e58:	3fe921fb 	.word	0x3fe921fb
 8005e5c:	4002d97b 	.word	0x4002d97b
 8005e60:	3ff921fb 	.word	0x3ff921fb
 8005e64:	413921fb 	.word	0x413921fb
 8005e68:	3fe00000 	.word	0x3fe00000
 8005e6c:	080068b4 	.word	0x080068b4
 8005e70:	7fefffff 	.word	0x7fefffff
 8005e74:	ea4f 5628 	mov.w	r6, r8, asr #20
 8005e78:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8005e7c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8005e80:	4620      	mov	r0, r4
 8005e82:	460d      	mov	r5, r1
 8005e84:	f7fa fe4a 	bl	8000b1c <__aeabi_d2iz>
 8005e88:	f7fa fb44 	bl	8000514 <__aeabi_i2d>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4620      	mov	r0, r4
 8005e92:	4629      	mov	r1, r5
 8005e94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e98:	f7fa f9ee 	bl	8000278 <__aeabi_dsub>
 8005e9c:	4b21      	ldr	r3, [pc, #132]	; (8005f24 <__ieee754_rem_pio2+0x404>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f7fa fba2 	bl	80005e8 <__aeabi_dmul>
 8005ea4:	460d      	mov	r5, r1
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	f7fa fe38 	bl	8000b1c <__aeabi_d2iz>
 8005eac:	f7fa fb32 	bl	8000514 <__aeabi_i2d>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005ebc:	f7fa f9dc 	bl	8000278 <__aeabi_dsub>
 8005ec0:	4b18      	ldr	r3, [pc, #96]	; (8005f24 <__ieee754_rem_pio2+0x404>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f7fa fb90 	bl	80005e8 <__aeabi_dmul>
 8005ec8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005ecc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8005ed0:	2703      	movs	r7, #3
 8005ed2:	2400      	movs	r4, #0
 8005ed4:	2500      	movs	r5, #0
 8005ed6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8005eda:	4622      	mov	r2, r4
 8005edc:	462b      	mov	r3, r5
 8005ede:	46b9      	mov	r9, r7
 8005ee0:	3f01      	subs	r7, #1
 8005ee2:	f7fa fde9 	bl	8000ab8 <__aeabi_dcmpeq>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d1f5      	bne.n	8005ed6 <__ieee754_rem_pio2+0x3b6>
 8005eea:	4b0f      	ldr	r3, [pc, #60]	; (8005f28 <__ieee754_rem_pio2+0x408>)
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	2302      	movs	r3, #2
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	4632      	mov	r2, r6
 8005ef4:	464b      	mov	r3, r9
 8005ef6:	4651      	mov	r1, sl
 8005ef8:	a804      	add	r0, sp, #16
 8005efa:	f000 f821 	bl	8005f40 <__kernel_rem_pio2>
 8005efe:	9b02      	ldr	r3, [sp, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	4683      	mov	fp, r0
 8005f04:	f6bf ae4c 	bge.w	8005ba0 <__ieee754_rem_pio2+0x80>
 8005f08:	e9da 2100 	ldrd	r2, r1, [sl]
 8005f0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f10:	e9ca 2300 	strd	r2, r3, [sl]
 8005f14:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005f18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f1c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005f20:	e73f      	b.n	8005da2 <__ieee754_rem_pio2+0x282>
 8005f22:	bf00      	nop
 8005f24:	41700000 	.word	0x41700000
 8005f28:	08006934 	.word	0x08006934

08005f2c <fabs>:
 8005f2c:	ec51 0b10 	vmov	r0, r1, d0
 8005f30:	ee10 2a10 	vmov	r2, s0
 8005f34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f38:	ec43 2b10 	vmov	d0, r2, r3
 8005f3c:	4770      	bx	lr
	...

08005f40 <__kernel_rem_pio2>:
 8005f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	ed2d 8b02 	vpush	{d8}
 8005f48:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005f4c:	f112 0f14 	cmn.w	r2, #20
 8005f50:	9306      	str	r3, [sp, #24]
 8005f52:	9104      	str	r1, [sp, #16]
 8005f54:	4bc2      	ldr	r3, [pc, #776]	; (8006260 <__kernel_rem_pio2+0x320>)
 8005f56:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005f58:	9009      	str	r0, [sp, #36]	; 0x24
 8005f5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	9b06      	ldr	r3, [sp, #24]
 8005f62:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f66:	bfa8      	it	ge
 8005f68:	1ed4      	subge	r4, r2, #3
 8005f6a:	9305      	str	r3, [sp, #20]
 8005f6c:	bfb2      	itee	lt
 8005f6e:	2400      	movlt	r4, #0
 8005f70:	2318      	movge	r3, #24
 8005f72:	fb94 f4f3 	sdivge	r4, r4, r3
 8005f76:	f06f 0317 	mvn.w	r3, #23
 8005f7a:	fb04 3303 	mla	r3, r4, r3, r3
 8005f7e:	eb03 0a02 	add.w	sl, r3, r2
 8005f82:	9b00      	ldr	r3, [sp, #0]
 8005f84:	9a05      	ldr	r2, [sp, #20]
 8005f86:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8006250 <__kernel_rem_pio2+0x310>
 8005f8a:	eb03 0802 	add.w	r8, r3, r2
 8005f8e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005f90:	1aa7      	subs	r7, r4, r2
 8005f92:	ae20      	add	r6, sp, #128	; 0x80
 8005f94:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005f98:	2500      	movs	r5, #0
 8005f9a:	4545      	cmp	r5, r8
 8005f9c:	dd13      	ble.n	8005fc6 <__kernel_rem_pio2+0x86>
 8005f9e:	9b06      	ldr	r3, [sp, #24]
 8005fa0:	aa20      	add	r2, sp, #128	; 0x80
 8005fa2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005fa6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005faa:	f04f 0800 	mov.w	r8, #0
 8005fae:	9b00      	ldr	r3, [sp, #0]
 8005fb0:	4598      	cmp	r8, r3
 8005fb2:	dc31      	bgt.n	8006018 <__kernel_rem_pio2+0xd8>
 8005fb4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8006250 <__kernel_rem_pio2+0x310>
 8005fb8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005fbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005fc0:	462f      	mov	r7, r5
 8005fc2:	2600      	movs	r6, #0
 8005fc4:	e01b      	b.n	8005ffe <__kernel_rem_pio2+0xbe>
 8005fc6:	42ef      	cmn	r7, r5
 8005fc8:	d407      	bmi.n	8005fda <__kernel_rem_pio2+0x9a>
 8005fca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005fce:	f7fa faa1 	bl	8000514 <__aeabi_i2d>
 8005fd2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005fd6:	3501      	adds	r5, #1
 8005fd8:	e7df      	b.n	8005f9a <__kernel_rem_pio2+0x5a>
 8005fda:	ec51 0b18 	vmov	r0, r1, d8
 8005fde:	e7f8      	b.n	8005fd2 <__kernel_rem_pio2+0x92>
 8005fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fe4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005fe8:	f7fa fafe 	bl	80005e8 <__aeabi_dmul>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ff4:	f7fa f942 	bl	800027c <__adddf3>
 8005ff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ffc:	3601      	adds	r6, #1
 8005ffe:	9b05      	ldr	r3, [sp, #20]
 8006000:	429e      	cmp	r6, r3
 8006002:	f1a7 0708 	sub.w	r7, r7, #8
 8006006:	ddeb      	ble.n	8005fe0 <__kernel_rem_pio2+0xa0>
 8006008:	ed9d 7b02 	vldr	d7, [sp, #8]
 800600c:	f108 0801 	add.w	r8, r8, #1
 8006010:	ecab 7b02 	vstmia	fp!, {d7}
 8006014:	3508      	adds	r5, #8
 8006016:	e7ca      	b.n	8005fae <__kernel_rem_pio2+0x6e>
 8006018:	9b00      	ldr	r3, [sp, #0]
 800601a:	aa0c      	add	r2, sp, #48	; 0x30
 800601c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006020:	930b      	str	r3, [sp, #44]	; 0x2c
 8006022:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006024:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006028:	9c00      	ldr	r4, [sp, #0]
 800602a:	930a      	str	r3, [sp, #40]	; 0x28
 800602c:	00e3      	lsls	r3, r4, #3
 800602e:	9308      	str	r3, [sp, #32]
 8006030:	ab98      	add	r3, sp, #608	; 0x260
 8006032:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006036:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800603a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800603e:	ab70      	add	r3, sp, #448	; 0x1c0
 8006040:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006044:	46c3      	mov	fp, r8
 8006046:	46a1      	mov	r9, r4
 8006048:	f1b9 0f00 	cmp.w	r9, #0
 800604c:	f1a5 0508 	sub.w	r5, r5, #8
 8006050:	dc77      	bgt.n	8006142 <__kernel_rem_pio2+0x202>
 8006052:	ec47 6b10 	vmov	d0, r6, r7
 8006056:	4650      	mov	r0, sl
 8006058:	f000 fac2 	bl	80065e0 <scalbn>
 800605c:	ec57 6b10 	vmov	r6, r7, d0
 8006060:	2200      	movs	r2, #0
 8006062:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006066:	ee10 0a10 	vmov	r0, s0
 800606a:	4639      	mov	r1, r7
 800606c:	f7fa fabc 	bl	80005e8 <__aeabi_dmul>
 8006070:	ec41 0b10 	vmov	d0, r0, r1
 8006074:	f000 fb34 	bl	80066e0 <floor>
 8006078:	4b7a      	ldr	r3, [pc, #488]	; (8006264 <__kernel_rem_pio2+0x324>)
 800607a:	ec51 0b10 	vmov	r0, r1, d0
 800607e:	2200      	movs	r2, #0
 8006080:	f7fa fab2 	bl	80005e8 <__aeabi_dmul>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4630      	mov	r0, r6
 800608a:	4639      	mov	r1, r7
 800608c:	f7fa f8f4 	bl	8000278 <__aeabi_dsub>
 8006090:	460f      	mov	r7, r1
 8006092:	4606      	mov	r6, r0
 8006094:	f7fa fd42 	bl	8000b1c <__aeabi_d2iz>
 8006098:	9002      	str	r0, [sp, #8]
 800609a:	f7fa fa3b 	bl	8000514 <__aeabi_i2d>
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4630      	mov	r0, r6
 80060a4:	4639      	mov	r1, r7
 80060a6:	f7fa f8e7 	bl	8000278 <__aeabi_dsub>
 80060aa:	f1ba 0f00 	cmp.w	sl, #0
 80060ae:	4606      	mov	r6, r0
 80060b0:	460f      	mov	r7, r1
 80060b2:	dd6d      	ble.n	8006190 <__kernel_rem_pio2+0x250>
 80060b4:	1e61      	subs	r1, r4, #1
 80060b6:	ab0c      	add	r3, sp, #48	; 0x30
 80060b8:	9d02      	ldr	r5, [sp, #8]
 80060ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060be:	f1ca 0018 	rsb	r0, sl, #24
 80060c2:	fa43 f200 	asr.w	r2, r3, r0
 80060c6:	4415      	add	r5, r2
 80060c8:	4082      	lsls	r2, r0
 80060ca:	1a9b      	subs	r3, r3, r2
 80060cc:	aa0c      	add	r2, sp, #48	; 0x30
 80060ce:	9502      	str	r5, [sp, #8]
 80060d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80060d4:	f1ca 0217 	rsb	r2, sl, #23
 80060d8:	fa43 fb02 	asr.w	fp, r3, r2
 80060dc:	f1bb 0f00 	cmp.w	fp, #0
 80060e0:	dd65      	ble.n	80061ae <__kernel_rem_pio2+0x26e>
 80060e2:	9b02      	ldr	r3, [sp, #8]
 80060e4:	2200      	movs	r2, #0
 80060e6:	3301      	adds	r3, #1
 80060e8:	9302      	str	r3, [sp, #8]
 80060ea:	4615      	mov	r5, r2
 80060ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80060f0:	4294      	cmp	r4, r2
 80060f2:	f300 809f 	bgt.w	8006234 <__kernel_rem_pio2+0x2f4>
 80060f6:	f1ba 0f00 	cmp.w	sl, #0
 80060fa:	dd07      	ble.n	800610c <__kernel_rem_pio2+0x1cc>
 80060fc:	f1ba 0f01 	cmp.w	sl, #1
 8006100:	f000 80c1 	beq.w	8006286 <__kernel_rem_pio2+0x346>
 8006104:	f1ba 0f02 	cmp.w	sl, #2
 8006108:	f000 80c7 	beq.w	800629a <__kernel_rem_pio2+0x35a>
 800610c:	f1bb 0f02 	cmp.w	fp, #2
 8006110:	d14d      	bne.n	80061ae <__kernel_rem_pio2+0x26e>
 8006112:	4632      	mov	r2, r6
 8006114:	463b      	mov	r3, r7
 8006116:	4954      	ldr	r1, [pc, #336]	; (8006268 <__kernel_rem_pio2+0x328>)
 8006118:	2000      	movs	r0, #0
 800611a:	f7fa f8ad 	bl	8000278 <__aeabi_dsub>
 800611e:	4606      	mov	r6, r0
 8006120:	460f      	mov	r7, r1
 8006122:	2d00      	cmp	r5, #0
 8006124:	d043      	beq.n	80061ae <__kernel_rem_pio2+0x26e>
 8006126:	4650      	mov	r0, sl
 8006128:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8006258 <__kernel_rem_pio2+0x318>
 800612c:	f000 fa58 	bl	80065e0 <scalbn>
 8006130:	4630      	mov	r0, r6
 8006132:	4639      	mov	r1, r7
 8006134:	ec53 2b10 	vmov	r2, r3, d0
 8006138:	f7fa f89e 	bl	8000278 <__aeabi_dsub>
 800613c:	4606      	mov	r6, r0
 800613e:	460f      	mov	r7, r1
 8006140:	e035      	b.n	80061ae <__kernel_rem_pio2+0x26e>
 8006142:	4b4a      	ldr	r3, [pc, #296]	; (800626c <__kernel_rem_pio2+0x32c>)
 8006144:	2200      	movs	r2, #0
 8006146:	4630      	mov	r0, r6
 8006148:	4639      	mov	r1, r7
 800614a:	f7fa fa4d 	bl	80005e8 <__aeabi_dmul>
 800614e:	f7fa fce5 	bl	8000b1c <__aeabi_d2iz>
 8006152:	f7fa f9df 	bl	8000514 <__aeabi_i2d>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	ec43 2b18 	vmov	d8, r2, r3
 800615e:	4b44      	ldr	r3, [pc, #272]	; (8006270 <__kernel_rem_pio2+0x330>)
 8006160:	2200      	movs	r2, #0
 8006162:	f7fa fa41 	bl	80005e8 <__aeabi_dmul>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4630      	mov	r0, r6
 800616c:	4639      	mov	r1, r7
 800616e:	f7fa f883 	bl	8000278 <__aeabi_dsub>
 8006172:	f7fa fcd3 	bl	8000b1c <__aeabi_d2iz>
 8006176:	e9d5 2300 	ldrd	r2, r3, [r5]
 800617a:	f84b 0b04 	str.w	r0, [fp], #4
 800617e:	ec51 0b18 	vmov	r0, r1, d8
 8006182:	f7fa f87b 	bl	800027c <__adddf3>
 8006186:	f109 39ff 	add.w	r9, r9, #4294967295
 800618a:	4606      	mov	r6, r0
 800618c:	460f      	mov	r7, r1
 800618e:	e75b      	b.n	8006048 <__kernel_rem_pio2+0x108>
 8006190:	d106      	bne.n	80061a0 <__kernel_rem_pio2+0x260>
 8006192:	1e63      	subs	r3, r4, #1
 8006194:	aa0c      	add	r2, sp, #48	; 0x30
 8006196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800619a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800619e:	e79d      	b.n	80060dc <__kernel_rem_pio2+0x19c>
 80061a0:	4b34      	ldr	r3, [pc, #208]	; (8006274 <__kernel_rem_pio2+0x334>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	f7fa fca6 	bl	8000af4 <__aeabi_dcmpge>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	d140      	bne.n	800622e <__kernel_rem_pio2+0x2ee>
 80061ac:	4683      	mov	fp, r0
 80061ae:	2200      	movs	r2, #0
 80061b0:	2300      	movs	r3, #0
 80061b2:	4630      	mov	r0, r6
 80061b4:	4639      	mov	r1, r7
 80061b6:	f7fa fc7f 	bl	8000ab8 <__aeabi_dcmpeq>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	f000 80c1 	beq.w	8006342 <__kernel_rem_pio2+0x402>
 80061c0:	1e65      	subs	r5, r4, #1
 80061c2:	462b      	mov	r3, r5
 80061c4:	2200      	movs	r2, #0
 80061c6:	9900      	ldr	r1, [sp, #0]
 80061c8:	428b      	cmp	r3, r1
 80061ca:	da6d      	bge.n	80062a8 <__kernel_rem_pio2+0x368>
 80061cc:	2a00      	cmp	r2, #0
 80061ce:	f000 808a 	beq.w	80062e6 <__kernel_rem_pio2+0x3a6>
 80061d2:	ab0c      	add	r3, sp, #48	; 0x30
 80061d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80061d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 80ae 	beq.w	800633e <__kernel_rem_pio2+0x3fe>
 80061e2:	4650      	mov	r0, sl
 80061e4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006258 <__kernel_rem_pio2+0x318>
 80061e8:	f000 f9fa 	bl	80065e0 <scalbn>
 80061ec:	1c6b      	adds	r3, r5, #1
 80061ee:	00da      	lsls	r2, r3, #3
 80061f0:	9205      	str	r2, [sp, #20]
 80061f2:	ec57 6b10 	vmov	r6, r7, d0
 80061f6:	aa70      	add	r2, sp, #448	; 0x1c0
 80061f8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800626c <__kernel_rem_pio2+0x32c>
 80061fc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006200:	462c      	mov	r4, r5
 8006202:	f04f 0800 	mov.w	r8, #0
 8006206:	2c00      	cmp	r4, #0
 8006208:	f280 80d4 	bge.w	80063b4 <__kernel_rem_pio2+0x474>
 800620c:	462c      	mov	r4, r5
 800620e:	2c00      	cmp	r4, #0
 8006210:	f2c0 8102 	blt.w	8006418 <__kernel_rem_pio2+0x4d8>
 8006214:	4b18      	ldr	r3, [pc, #96]	; (8006278 <__kernel_rem_pio2+0x338>)
 8006216:	461e      	mov	r6, r3
 8006218:	ab70      	add	r3, sp, #448	; 0x1c0
 800621a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800621e:	1b2b      	subs	r3, r5, r4
 8006220:	f04f 0900 	mov.w	r9, #0
 8006224:	f04f 0a00 	mov.w	sl, #0
 8006228:	2700      	movs	r7, #0
 800622a:	9306      	str	r3, [sp, #24]
 800622c:	e0e6      	b.n	80063fc <__kernel_rem_pio2+0x4bc>
 800622e:	f04f 0b02 	mov.w	fp, #2
 8006232:	e756      	b.n	80060e2 <__kernel_rem_pio2+0x1a2>
 8006234:	f8d8 3000 	ldr.w	r3, [r8]
 8006238:	bb05      	cbnz	r5, 800627c <__kernel_rem_pio2+0x33c>
 800623a:	b123      	cbz	r3, 8006246 <__kernel_rem_pio2+0x306>
 800623c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006240:	f8c8 3000 	str.w	r3, [r8]
 8006244:	2301      	movs	r3, #1
 8006246:	3201      	adds	r2, #1
 8006248:	f108 0804 	add.w	r8, r8, #4
 800624c:	461d      	mov	r5, r3
 800624e:	e74f      	b.n	80060f0 <__kernel_rem_pio2+0x1b0>
	...
 800625c:	3ff00000 	.word	0x3ff00000
 8006260:	08006a80 	.word	0x08006a80
 8006264:	40200000 	.word	0x40200000
 8006268:	3ff00000 	.word	0x3ff00000
 800626c:	3e700000 	.word	0x3e700000
 8006270:	41700000 	.word	0x41700000
 8006274:	3fe00000 	.word	0x3fe00000
 8006278:	08006a40 	.word	0x08006a40
 800627c:	1acb      	subs	r3, r1, r3
 800627e:	f8c8 3000 	str.w	r3, [r8]
 8006282:	462b      	mov	r3, r5
 8006284:	e7df      	b.n	8006246 <__kernel_rem_pio2+0x306>
 8006286:	1e62      	subs	r2, r4, #1
 8006288:	ab0c      	add	r3, sp, #48	; 0x30
 800628a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006292:	a90c      	add	r1, sp, #48	; 0x30
 8006294:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006298:	e738      	b.n	800610c <__kernel_rem_pio2+0x1cc>
 800629a:	1e62      	subs	r2, r4, #1
 800629c:	ab0c      	add	r3, sp, #48	; 0x30
 800629e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80062a6:	e7f4      	b.n	8006292 <__kernel_rem_pio2+0x352>
 80062a8:	a90c      	add	r1, sp, #48	; 0x30
 80062aa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	430a      	orrs	r2, r1
 80062b2:	e788      	b.n	80061c6 <__kernel_rem_pio2+0x286>
 80062b4:	3301      	adds	r3, #1
 80062b6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80062ba:	2900      	cmp	r1, #0
 80062bc:	d0fa      	beq.n	80062b4 <__kernel_rem_pio2+0x374>
 80062be:	9a08      	ldr	r2, [sp, #32]
 80062c0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80062c4:	446a      	add	r2, sp
 80062c6:	3a98      	subs	r2, #152	; 0x98
 80062c8:	9208      	str	r2, [sp, #32]
 80062ca:	9a06      	ldr	r2, [sp, #24]
 80062cc:	a920      	add	r1, sp, #128	; 0x80
 80062ce:	18a2      	adds	r2, r4, r2
 80062d0:	18e3      	adds	r3, r4, r3
 80062d2:	f104 0801 	add.w	r8, r4, #1
 80062d6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80062da:	9302      	str	r3, [sp, #8]
 80062dc:	9b02      	ldr	r3, [sp, #8]
 80062de:	4543      	cmp	r3, r8
 80062e0:	da04      	bge.n	80062ec <__kernel_rem_pio2+0x3ac>
 80062e2:	461c      	mov	r4, r3
 80062e4:	e6a2      	b.n	800602c <__kernel_rem_pio2+0xec>
 80062e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062e8:	2301      	movs	r3, #1
 80062ea:	e7e4      	b.n	80062b6 <__kernel_rem_pio2+0x376>
 80062ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80062f2:	f7fa f90f 	bl	8000514 <__aeabi_i2d>
 80062f6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80062fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062fc:	46ab      	mov	fp, r5
 80062fe:	461c      	mov	r4, r3
 8006300:	f04f 0900 	mov.w	r9, #0
 8006304:	2600      	movs	r6, #0
 8006306:	2700      	movs	r7, #0
 8006308:	9b05      	ldr	r3, [sp, #20]
 800630a:	4599      	cmp	r9, r3
 800630c:	dd06      	ble.n	800631c <__kernel_rem_pio2+0x3dc>
 800630e:	9b08      	ldr	r3, [sp, #32]
 8006310:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006314:	f108 0801 	add.w	r8, r8, #1
 8006318:	9308      	str	r3, [sp, #32]
 800631a:	e7df      	b.n	80062dc <__kernel_rem_pio2+0x39c>
 800631c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006320:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006324:	f7fa f960 	bl	80005e8 <__aeabi_dmul>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4630      	mov	r0, r6
 800632e:	4639      	mov	r1, r7
 8006330:	f7f9 ffa4 	bl	800027c <__adddf3>
 8006334:	f109 0901 	add.w	r9, r9, #1
 8006338:	4606      	mov	r6, r0
 800633a:	460f      	mov	r7, r1
 800633c:	e7e4      	b.n	8006308 <__kernel_rem_pio2+0x3c8>
 800633e:	3d01      	subs	r5, #1
 8006340:	e747      	b.n	80061d2 <__kernel_rem_pio2+0x292>
 8006342:	ec47 6b10 	vmov	d0, r6, r7
 8006346:	f1ca 0000 	rsb	r0, sl, #0
 800634a:	f000 f949 	bl	80065e0 <scalbn>
 800634e:	ec57 6b10 	vmov	r6, r7, d0
 8006352:	4ba0      	ldr	r3, [pc, #640]	; (80065d4 <__kernel_rem_pio2+0x694>)
 8006354:	ee10 0a10 	vmov	r0, s0
 8006358:	2200      	movs	r2, #0
 800635a:	4639      	mov	r1, r7
 800635c:	f7fa fbca 	bl	8000af4 <__aeabi_dcmpge>
 8006360:	b1f8      	cbz	r0, 80063a2 <__kernel_rem_pio2+0x462>
 8006362:	4b9d      	ldr	r3, [pc, #628]	; (80065d8 <__kernel_rem_pio2+0x698>)
 8006364:	2200      	movs	r2, #0
 8006366:	4630      	mov	r0, r6
 8006368:	4639      	mov	r1, r7
 800636a:	f7fa f93d 	bl	80005e8 <__aeabi_dmul>
 800636e:	f7fa fbd5 	bl	8000b1c <__aeabi_d2iz>
 8006372:	4680      	mov	r8, r0
 8006374:	f7fa f8ce 	bl	8000514 <__aeabi_i2d>
 8006378:	4b96      	ldr	r3, [pc, #600]	; (80065d4 <__kernel_rem_pio2+0x694>)
 800637a:	2200      	movs	r2, #0
 800637c:	f7fa f934 	bl	80005e8 <__aeabi_dmul>
 8006380:	460b      	mov	r3, r1
 8006382:	4602      	mov	r2, r0
 8006384:	4639      	mov	r1, r7
 8006386:	4630      	mov	r0, r6
 8006388:	f7f9 ff76 	bl	8000278 <__aeabi_dsub>
 800638c:	f7fa fbc6 	bl	8000b1c <__aeabi_d2iz>
 8006390:	1c65      	adds	r5, r4, #1
 8006392:	ab0c      	add	r3, sp, #48	; 0x30
 8006394:	f10a 0a18 	add.w	sl, sl, #24
 8006398:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800639c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80063a0:	e71f      	b.n	80061e2 <__kernel_rem_pio2+0x2a2>
 80063a2:	4630      	mov	r0, r6
 80063a4:	4639      	mov	r1, r7
 80063a6:	f7fa fbb9 	bl	8000b1c <__aeabi_d2iz>
 80063aa:	ab0c      	add	r3, sp, #48	; 0x30
 80063ac:	4625      	mov	r5, r4
 80063ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80063b2:	e716      	b.n	80061e2 <__kernel_rem_pio2+0x2a2>
 80063b4:	ab0c      	add	r3, sp, #48	; 0x30
 80063b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80063ba:	f7fa f8ab 	bl	8000514 <__aeabi_i2d>
 80063be:	4632      	mov	r2, r6
 80063c0:	463b      	mov	r3, r7
 80063c2:	f7fa f911 	bl	80005e8 <__aeabi_dmul>
 80063c6:	4642      	mov	r2, r8
 80063c8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80063cc:	464b      	mov	r3, r9
 80063ce:	4630      	mov	r0, r6
 80063d0:	4639      	mov	r1, r7
 80063d2:	f7fa f909 	bl	80005e8 <__aeabi_dmul>
 80063d6:	3c01      	subs	r4, #1
 80063d8:	4606      	mov	r6, r0
 80063da:	460f      	mov	r7, r1
 80063dc:	e713      	b.n	8006206 <__kernel_rem_pio2+0x2c6>
 80063de:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80063e2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80063e6:	f7fa f8ff 	bl	80005e8 <__aeabi_dmul>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	4648      	mov	r0, r9
 80063f0:	4651      	mov	r1, sl
 80063f2:	f7f9 ff43 	bl	800027c <__adddf3>
 80063f6:	3701      	adds	r7, #1
 80063f8:	4681      	mov	r9, r0
 80063fa:	468a      	mov	sl, r1
 80063fc:	9b00      	ldr	r3, [sp, #0]
 80063fe:	429f      	cmp	r7, r3
 8006400:	dc02      	bgt.n	8006408 <__kernel_rem_pio2+0x4c8>
 8006402:	9b06      	ldr	r3, [sp, #24]
 8006404:	429f      	cmp	r7, r3
 8006406:	ddea      	ble.n	80063de <__kernel_rem_pio2+0x49e>
 8006408:	9a06      	ldr	r2, [sp, #24]
 800640a:	ab48      	add	r3, sp, #288	; 0x120
 800640c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006410:	e9c6 9a00 	strd	r9, sl, [r6]
 8006414:	3c01      	subs	r4, #1
 8006416:	e6fa      	b.n	800620e <__kernel_rem_pio2+0x2ce>
 8006418:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800641a:	2b02      	cmp	r3, #2
 800641c:	dc0b      	bgt.n	8006436 <__kernel_rem_pio2+0x4f6>
 800641e:	2b00      	cmp	r3, #0
 8006420:	dc39      	bgt.n	8006496 <__kernel_rem_pio2+0x556>
 8006422:	d05d      	beq.n	80064e0 <__kernel_rem_pio2+0x5a0>
 8006424:	9b02      	ldr	r3, [sp, #8]
 8006426:	f003 0007 	and.w	r0, r3, #7
 800642a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800642e:	ecbd 8b02 	vpop	{d8}
 8006432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006436:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006438:	2b03      	cmp	r3, #3
 800643a:	d1f3      	bne.n	8006424 <__kernel_rem_pio2+0x4e4>
 800643c:	9b05      	ldr	r3, [sp, #20]
 800643e:	9500      	str	r5, [sp, #0]
 8006440:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006444:	eb0d 0403 	add.w	r4, sp, r3
 8006448:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800644c:	46a2      	mov	sl, r4
 800644e:	9b00      	ldr	r3, [sp, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	f1aa 0a08 	sub.w	sl, sl, #8
 8006456:	dc69      	bgt.n	800652c <__kernel_rem_pio2+0x5ec>
 8006458:	46aa      	mov	sl, r5
 800645a:	f1ba 0f01 	cmp.w	sl, #1
 800645e:	f1a4 0408 	sub.w	r4, r4, #8
 8006462:	f300 8083 	bgt.w	800656c <__kernel_rem_pio2+0x62c>
 8006466:	9c05      	ldr	r4, [sp, #20]
 8006468:	ab48      	add	r3, sp, #288	; 0x120
 800646a:	441c      	add	r4, r3
 800646c:	2000      	movs	r0, #0
 800646e:	2100      	movs	r1, #0
 8006470:	2d01      	cmp	r5, #1
 8006472:	f300 809a 	bgt.w	80065aa <__kernel_rem_pio2+0x66a>
 8006476:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800647a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800647e:	f1bb 0f00 	cmp.w	fp, #0
 8006482:	f040 8098 	bne.w	80065b6 <__kernel_rem_pio2+0x676>
 8006486:	9b04      	ldr	r3, [sp, #16]
 8006488:	e9c3 7800 	strd	r7, r8, [r3]
 800648c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006490:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006494:	e7c6      	b.n	8006424 <__kernel_rem_pio2+0x4e4>
 8006496:	9e05      	ldr	r6, [sp, #20]
 8006498:	ab48      	add	r3, sp, #288	; 0x120
 800649a:	441e      	add	r6, r3
 800649c:	462c      	mov	r4, r5
 800649e:	2000      	movs	r0, #0
 80064a0:	2100      	movs	r1, #0
 80064a2:	2c00      	cmp	r4, #0
 80064a4:	da33      	bge.n	800650e <__kernel_rem_pio2+0x5ce>
 80064a6:	f1bb 0f00 	cmp.w	fp, #0
 80064aa:	d036      	beq.n	800651a <__kernel_rem_pio2+0x5da>
 80064ac:	4602      	mov	r2, r0
 80064ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064b2:	9c04      	ldr	r4, [sp, #16]
 80064b4:	e9c4 2300 	strd	r2, r3, [r4]
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80064c0:	f7f9 feda 	bl	8000278 <__aeabi_dsub>
 80064c4:	ae4a      	add	r6, sp, #296	; 0x128
 80064c6:	2401      	movs	r4, #1
 80064c8:	42a5      	cmp	r5, r4
 80064ca:	da29      	bge.n	8006520 <__kernel_rem_pio2+0x5e0>
 80064cc:	f1bb 0f00 	cmp.w	fp, #0
 80064d0:	d002      	beq.n	80064d8 <__kernel_rem_pio2+0x598>
 80064d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064d6:	4619      	mov	r1, r3
 80064d8:	9b04      	ldr	r3, [sp, #16]
 80064da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80064de:	e7a1      	b.n	8006424 <__kernel_rem_pio2+0x4e4>
 80064e0:	9c05      	ldr	r4, [sp, #20]
 80064e2:	ab48      	add	r3, sp, #288	; 0x120
 80064e4:	441c      	add	r4, r3
 80064e6:	2000      	movs	r0, #0
 80064e8:	2100      	movs	r1, #0
 80064ea:	2d00      	cmp	r5, #0
 80064ec:	da09      	bge.n	8006502 <__kernel_rem_pio2+0x5c2>
 80064ee:	f1bb 0f00 	cmp.w	fp, #0
 80064f2:	d002      	beq.n	80064fa <__kernel_rem_pio2+0x5ba>
 80064f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064f8:	4619      	mov	r1, r3
 80064fa:	9b04      	ldr	r3, [sp, #16]
 80064fc:	e9c3 0100 	strd	r0, r1, [r3]
 8006500:	e790      	b.n	8006424 <__kernel_rem_pio2+0x4e4>
 8006502:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006506:	f7f9 feb9 	bl	800027c <__adddf3>
 800650a:	3d01      	subs	r5, #1
 800650c:	e7ed      	b.n	80064ea <__kernel_rem_pio2+0x5aa>
 800650e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006512:	f7f9 feb3 	bl	800027c <__adddf3>
 8006516:	3c01      	subs	r4, #1
 8006518:	e7c3      	b.n	80064a2 <__kernel_rem_pio2+0x562>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	e7c8      	b.n	80064b2 <__kernel_rem_pio2+0x572>
 8006520:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006524:	f7f9 feaa 	bl	800027c <__adddf3>
 8006528:	3401      	adds	r4, #1
 800652a:	e7cd      	b.n	80064c8 <__kernel_rem_pio2+0x588>
 800652c:	e9da 8900 	ldrd	r8, r9, [sl]
 8006530:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006534:	9b00      	ldr	r3, [sp, #0]
 8006536:	3b01      	subs	r3, #1
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	4632      	mov	r2, r6
 800653c:	463b      	mov	r3, r7
 800653e:	4640      	mov	r0, r8
 8006540:	4649      	mov	r1, r9
 8006542:	f7f9 fe9b 	bl	800027c <__adddf3>
 8006546:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4640      	mov	r0, r8
 8006550:	4649      	mov	r1, r9
 8006552:	f7f9 fe91 	bl	8000278 <__aeabi_dsub>
 8006556:	4632      	mov	r2, r6
 8006558:	463b      	mov	r3, r7
 800655a:	f7f9 fe8f 	bl	800027c <__adddf3>
 800655e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006562:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006566:	ed8a 7b00 	vstr	d7, [sl]
 800656a:	e770      	b.n	800644e <__kernel_rem_pio2+0x50e>
 800656c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006570:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006574:	4640      	mov	r0, r8
 8006576:	4632      	mov	r2, r6
 8006578:	463b      	mov	r3, r7
 800657a:	4649      	mov	r1, r9
 800657c:	f7f9 fe7e 	bl	800027c <__adddf3>
 8006580:	e9cd 0100 	strd	r0, r1, [sp]
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4640      	mov	r0, r8
 800658a:	4649      	mov	r1, r9
 800658c:	f7f9 fe74 	bl	8000278 <__aeabi_dsub>
 8006590:	4632      	mov	r2, r6
 8006592:	463b      	mov	r3, r7
 8006594:	f7f9 fe72 	bl	800027c <__adddf3>
 8006598:	ed9d 7b00 	vldr	d7, [sp]
 800659c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80065a0:	ed84 7b00 	vstr	d7, [r4]
 80065a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065a8:	e757      	b.n	800645a <__kernel_rem_pio2+0x51a>
 80065aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80065ae:	f7f9 fe65 	bl	800027c <__adddf3>
 80065b2:	3d01      	subs	r5, #1
 80065b4:	e75c      	b.n	8006470 <__kernel_rem_pio2+0x530>
 80065b6:	9b04      	ldr	r3, [sp, #16]
 80065b8:	9a04      	ldr	r2, [sp, #16]
 80065ba:	601f      	str	r7, [r3, #0]
 80065bc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80065c0:	605c      	str	r4, [r3, #4]
 80065c2:	609d      	str	r5, [r3, #8]
 80065c4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80065c8:	60d3      	str	r3, [r2, #12]
 80065ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065ce:	6110      	str	r0, [r2, #16]
 80065d0:	6153      	str	r3, [r2, #20]
 80065d2:	e727      	b.n	8006424 <__kernel_rem_pio2+0x4e4>
 80065d4:	41700000 	.word	0x41700000
 80065d8:	3e700000 	.word	0x3e700000
 80065dc:	00000000 	.word	0x00000000

080065e0 <scalbn>:
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	ec55 4b10 	vmov	r4, r5, d0
 80065e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80065ea:	4606      	mov	r6, r0
 80065ec:	462b      	mov	r3, r5
 80065ee:	b999      	cbnz	r1, 8006618 <scalbn+0x38>
 80065f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80065f4:	4323      	orrs	r3, r4
 80065f6:	d03f      	beq.n	8006678 <scalbn+0x98>
 80065f8:	4b35      	ldr	r3, [pc, #212]	; (80066d0 <scalbn+0xf0>)
 80065fa:	4629      	mov	r1, r5
 80065fc:	ee10 0a10 	vmov	r0, s0
 8006600:	2200      	movs	r2, #0
 8006602:	f7f9 fff1 	bl	80005e8 <__aeabi_dmul>
 8006606:	4b33      	ldr	r3, [pc, #204]	; (80066d4 <scalbn+0xf4>)
 8006608:	429e      	cmp	r6, r3
 800660a:	4604      	mov	r4, r0
 800660c:	460d      	mov	r5, r1
 800660e:	da10      	bge.n	8006632 <scalbn+0x52>
 8006610:	a327      	add	r3, pc, #156	; (adr r3, 80066b0 <scalbn+0xd0>)
 8006612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006616:	e01f      	b.n	8006658 <scalbn+0x78>
 8006618:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800661c:	4291      	cmp	r1, r2
 800661e:	d10c      	bne.n	800663a <scalbn+0x5a>
 8006620:	ee10 2a10 	vmov	r2, s0
 8006624:	4620      	mov	r0, r4
 8006626:	4629      	mov	r1, r5
 8006628:	f7f9 fe28 	bl	800027c <__adddf3>
 800662c:	4604      	mov	r4, r0
 800662e:	460d      	mov	r5, r1
 8006630:	e022      	b.n	8006678 <scalbn+0x98>
 8006632:	460b      	mov	r3, r1
 8006634:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006638:	3936      	subs	r1, #54	; 0x36
 800663a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800663e:	4296      	cmp	r6, r2
 8006640:	dd0d      	ble.n	800665e <scalbn+0x7e>
 8006642:	2d00      	cmp	r5, #0
 8006644:	a11c      	add	r1, pc, #112	; (adr r1, 80066b8 <scalbn+0xd8>)
 8006646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800664a:	da02      	bge.n	8006652 <scalbn+0x72>
 800664c:	a11c      	add	r1, pc, #112	; (adr r1, 80066c0 <scalbn+0xe0>)
 800664e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006652:	a319      	add	r3, pc, #100	; (adr r3, 80066b8 <scalbn+0xd8>)
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	f7f9 ffc6 	bl	80005e8 <__aeabi_dmul>
 800665c:	e7e6      	b.n	800662c <scalbn+0x4c>
 800665e:	1872      	adds	r2, r6, r1
 8006660:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006664:	428a      	cmp	r2, r1
 8006666:	dcec      	bgt.n	8006642 <scalbn+0x62>
 8006668:	2a00      	cmp	r2, #0
 800666a:	dd08      	ble.n	800667e <scalbn+0x9e>
 800666c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006670:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006674:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006678:	ec45 4b10 	vmov	d0, r4, r5
 800667c:	bd70      	pop	{r4, r5, r6, pc}
 800667e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006682:	da08      	bge.n	8006696 <scalbn+0xb6>
 8006684:	2d00      	cmp	r5, #0
 8006686:	a10a      	add	r1, pc, #40	; (adr r1, 80066b0 <scalbn+0xd0>)
 8006688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800668c:	dac0      	bge.n	8006610 <scalbn+0x30>
 800668e:	a10e      	add	r1, pc, #56	; (adr r1, 80066c8 <scalbn+0xe8>)
 8006690:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006694:	e7bc      	b.n	8006610 <scalbn+0x30>
 8006696:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800669a:	3236      	adds	r2, #54	; 0x36
 800669c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80066a4:	4620      	mov	r0, r4
 80066a6:	4b0c      	ldr	r3, [pc, #48]	; (80066d8 <scalbn+0xf8>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	e7d5      	b.n	8006658 <scalbn+0x78>
 80066ac:	f3af 8000 	nop.w
 80066b0:	c2f8f359 	.word	0xc2f8f359
 80066b4:	01a56e1f 	.word	0x01a56e1f
 80066b8:	8800759c 	.word	0x8800759c
 80066bc:	7e37e43c 	.word	0x7e37e43c
 80066c0:	8800759c 	.word	0x8800759c
 80066c4:	fe37e43c 	.word	0xfe37e43c
 80066c8:	c2f8f359 	.word	0xc2f8f359
 80066cc:	81a56e1f 	.word	0x81a56e1f
 80066d0:	43500000 	.word	0x43500000
 80066d4:	ffff3cb0 	.word	0xffff3cb0
 80066d8:	3c900000 	.word	0x3c900000
 80066dc:	00000000 	.word	0x00000000

080066e0 <floor>:
 80066e0:	ec51 0b10 	vmov	r0, r1, d0
 80066e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80066e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80066f0:	2e13      	cmp	r6, #19
 80066f2:	ee10 5a10 	vmov	r5, s0
 80066f6:	ee10 8a10 	vmov	r8, s0
 80066fa:	460c      	mov	r4, r1
 80066fc:	dc31      	bgt.n	8006762 <floor+0x82>
 80066fe:	2e00      	cmp	r6, #0
 8006700:	da14      	bge.n	800672c <floor+0x4c>
 8006702:	a333      	add	r3, pc, #204	; (adr r3, 80067d0 <floor+0xf0>)
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	f7f9 fdb8 	bl	800027c <__adddf3>
 800670c:	2200      	movs	r2, #0
 800670e:	2300      	movs	r3, #0
 8006710:	f7fa f9fa 	bl	8000b08 <__aeabi_dcmpgt>
 8006714:	b138      	cbz	r0, 8006726 <floor+0x46>
 8006716:	2c00      	cmp	r4, #0
 8006718:	da53      	bge.n	80067c2 <floor+0xe2>
 800671a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800671e:	4325      	orrs	r5, r4
 8006720:	d052      	beq.n	80067c8 <floor+0xe8>
 8006722:	4c2d      	ldr	r4, [pc, #180]	; (80067d8 <floor+0xf8>)
 8006724:	2500      	movs	r5, #0
 8006726:	4621      	mov	r1, r4
 8006728:	4628      	mov	r0, r5
 800672a:	e024      	b.n	8006776 <floor+0x96>
 800672c:	4f2b      	ldr	r7, [pc, #172]	; (80067dc <floor+0xfc>)
 800672e:	4137      	asrs	r7, r6
 8006730:	ea01 0307 	and.w	r3, r1, r7
 8006734:	4303      	orrs	r3, r0
 8006736:	d01e      	beq.n	8006776 <floor+0x96>
 8006738:	a325      	add	r3, pc, #148	; (adr r3, 80067d0 <floor+0xf0>)
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	f7f9 fd9d 	bl	800027c <__adddf3>
 8006742:	2200      	movs	r2, #0
 8006744:	2300      	movs	r3, #0
 8006746:	f7fa f9df 	bl	8000b08 <__aeabi_dcmpgt>
 800674a:	2800      	cmp	r0, #0
 800674c:	d0eb      	beq.n	8006726 <floor+0x46>
 800674e:	2c00      	cmp	r4, #0
 8006750:	bfbe      	ittt	lt
 8006752:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006756:	4133      	asrlt	r3, r6
 8006758:	18e4      	addlt	r4, r4, r3
 800675a:	ea24 0407 	bic.w	r4, r4, r7
 800675e:	2500      	movs	r5, #0
 8006760:	e7e1      	b.n	8006726 <floor+0x46>
 8006762:	2e33      	cmp	r6, #51	; 0x33
 8006764:	dd0b      	ble.n	800677e <floor+0x9e>
 8006766:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800676a:	d104      	bne.n	8006776 <floor+0x96>
 800676c:	ee10 2a10 	vmov	r2, s0
 8006770:	460b      	mov	r3, r1
 8006772:	f7f9 fd83 	bl	800027c <__adddf3>
 8006776:	ec41 0b10 	vmov	d0, r0, r1
 800677a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800677e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006782:	f04f 37ff 	mov.w	r7, #4294967295
 8006786:	40df      	lsrs	r7, r3
 8006788:	4238      	tst	r0, r7
 800678a:	d0f4      	beq.n	8006776 <floor+0x96>
 800678c:	a310      	add	r3, pc, #64	; (adr r3, 80067d0 <floor+0xf0>)
 800678e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006792:	f7f9 fd73 	bl	800027c <__adddf3>
 8006796:	2200      	movs	r2, #0
 8006798:	2300      	movs	r3, #0
 800679a:	f7fa f9b5 	bl	8000b08 <__aeabi_dcmpgt>
 800679e:	2800      	cmp	r0, #0
 80067a0:	d0c1      	beq.n	8006726 <floor+0x46>
 80067a2:	2c00      	cmp	r4, #0
 80067a4:	da0a      	bge.n	80067bc <floor+0xdc>
 80067a6:	2e14      	cmp	r6, #20
 80067a8:	d101      	bne.n	80067ae <floor+0xce>
 80067aa:	3401      	adds	r4, #1
 80067ac:	e006      	b.n	80067bc <floor+0xdc>
 80067ae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80067b2:	2301      	movs	r3, #1
 80067b4:	40b3      	lsls	r3, r6
 80067b6:	441d      	add	r5, r3
 80067b8:	45a8      	cmp	r8, r5
 80067ba:	d8f6      	bhi.n	80067aa <floor+0xca>
 80067bc:	ea25 0507 	bic.w	r5, r5, r7
 80067c0:	e7b1      	b.n	8006726 <floor+0x46>
 80067c2:	2500      	movs	r5, #0
 80067c4:	462c      	mov	r4, r5
 80067c6:	e7ae      	b.n	8006726 <floor+0x46>
 80067c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80067cc:	e7ab      	b.n	8006726 <floor+0x46>
 80067ce:	bf00      	nop
 80067d0:	8800759c 	.word	0x8800759c
 80067d4:	7e37e43c 	.word	0x7e37e43c
 80067d8:	bff00000 	.word	0xbff00000
 80067dc:	000fffff 	.word	0x000fffff

080067e0 <_init>:
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	bf00      	nop
 80067e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e6:	bc08      	pop	{r3}
 80067e8:	469e      	mov	lr, r3
 80067ea:	4770      	bx	lr

080067ec <_fini>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	bf00      	nop
 80067f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067f2:	bc08      	pop	{r3}
 80067f4:	469e      	mov	lr, r3
 80067f6:	4770      	bx	lr
