
Buzzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002134  08002134  00012134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002154  08002154  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08002154  08002154  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002154  08002154  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002154  08002154  00012154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002158  08002158  00012158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  0800215c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000004c  080021a8  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  080021a8  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005894  00000000  00000000  000200bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e05  00000000  00000000  00025953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000618  00000000  00000000  00026758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000484  00000000  00000000  00026d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f804  00000000  00000000  000271f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004545  00000000  00000000  000469f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b169e  00000000  00000000  0004af3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001910  00000000  00000000  000fc5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000fdeec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000004c 	.word	0x2000004c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800211c 	.word	0x0800211c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000050 	.word	0x20000050
 80001c4:	0800211c 	.word	0x0800211c

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800031a:	4a0c      	ldr	r2, [pc, #48]	; (800034c <LL_DMA_EnableChannel+0x40>)
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	4413      	add	r3, r2
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	461a      	mov	r2, r3
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	4413      	add	r3, r2
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4908      	ldr	r1, [pc, #32]	; (800034c <LL_DMA_EnableChannel+0x40>)
 800032c:	683a      	ldr	r2, [r7, #0]
 800032e:	440a      	add	r2, r1
 8000330:	7812      	ldrb	r2, [r2, #0]
 8000332:	4611      	mov	r1, r2
 8000334:	68fa      	ldr	r2, [r7, #12]
 8000336:	440a      	add	r2, r1
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6013      	str	r3, [r2, #0]
}
 800033e:	bf00      	nop
 8000340:	3714      	adds	r7, #20
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	08002134 	.word	0x08002134

08000350 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000350:	b480      	push	{r7}
 8000352:	b087      	sub	sp, #28
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000360:	4a0e      	ldr	r2, [pc, #56]	; (800039c <LL_DMA_SetDataTransferDirection+0x4c>)
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	4413      	add	r3, r2
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	461a      	mov	r2, r3
 800036a:	697b      	ldr	r3, [r7, #20]
 800036c:	4413      	add	r3, r2
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000374:	f023 0310 	bic.w	r3, r3, #16
 8000378:	4908      	ldr	r1, [pc, #32]	; (800039c <LL_DMA_SetDataTransferDirection+0x4c>)
 800037a:	68ba      	ldr	r2, [r7, #8]
 800037c:	440a      	add	r2, r1
 800037e:	7812      	ldrb	r2, [r2, #0]
 8000380:	4611      	mov	r1, r2
 8000382:	697a      	ldr	r2, [r7, #20]
 8000384:	440a      	add	r2, r1
 8000386:	4611      	mov	r1, r2
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	4313      	orrs	r3, r2
 800038c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800038e:	bf00      	nop
 8000390:	371c      	adds	r7, #28
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	08002134 	.word	0x08002134

080003a0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b087      	sub	sp, #28
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80003b0:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <LL_DMA_SetMode+0x48>)
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	4413      	add	r3, r2
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	461a      	mov	r2, r3
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	4413      	add	r3, r2
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 0220 	bic.w	r2, r3, #32
 80003c4:	4908      	ldr	r1, [pc, #32]	; (80003e8 <LL_DMA_SetMode+0x48>)
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	440b      	add	r3, r1
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	4619      	mov	r1, r3
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	440b      	add	r3, r1
 80003d2:	4619      	mov	r1, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4313      	orrs	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]
             Mode);
}
 80003da:	bf00      	nop
 80003dc:	371c      	adds	r7, #28
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	08002134 	.word	0x08002134

080003ec <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b087      	sub	sp, #28
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80003fc:	4a0d      	ldr	r2, [pc, #52]	; (8000434 <LL_DMA_SetPeriphIncMode+0x48>)
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	4413      	add	r3, r2
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	461a      	mov	r2, r3
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	4413      	add	r3, r2
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000410:	4908      	ldr	r1, [pc, #32]	; (8000434 <LL_DMA_SetPeriphIncMode+0x48>)
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	440b      	add	r3, r1
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	4619      	mov	r1, r3
 800041a:	697b      	ldr	r3, [r7, #20]
 800041c:	440b      	add	r3, r1
 800041e:	4619      	mov	r1, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4313      	orrs	r3, r2
 8000424:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000426:	bf00      	nop
 8000428:	371c      	adds	r7, #28
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	08002134 	.word	0x08002134

08000438 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000438:	b480      	push	{r7}
 800043a:	b087      	sub	sp, #28
 800043c:	af00      	add	r7, sp, #0
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	60b9      	str	r1, [r7, #8]
 8000442:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8000448:	4a0d      	ldr	r2, [pc, #52]	; (8000480 <LL_DMA_SetMemoryIncMode+0x48>)
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	4413      	add	r3, r2
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	461a      	mov	r2, r3
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	4413      	add	r3, r2
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800045c:	4908      	ldr	r1, [pc, #32]	; (8000480 <LL_DMA_SetMemoryIncMode+0x48>)
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	440b      	add	r3, r1
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	4619      	mov	r1, r3
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	440b      	add	r3, r1
 800046a:	4619      	mov	r1, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4313      	orrs	r3, r2
 8000470:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000472:	bf00      	nop
 8000474:	371c      	adds	r7, #28
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	08002134 	.word	0x08002134

08000484 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000484:	b480      	push	{r7}
 8000486:	b087      	sub	sp, #28
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8000494:	4a0d      	ldr	r2, [pc, #52]	; (80004cc <LL_DMA_SetPeriphSize+0x48>)
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	4413      	add	r3, r2
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	461a      	mov	r2, r3
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	4413      	add	r3, r2
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80004a8:	4908      	ldr	r1, [pc, #32]	; (80004cc <LL_DMA_SetPeriphSize+0x48>)
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	440b      	add	r3, r1
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4619      	mov	r1, r3
 80004b2:	697b      	ldr	r3, [r7, #20]
 80004b4:	440b      	add	r3, r1
 80004b6:	4619      	mov	r1, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4313      	orrs	r3, r2
 80004bc:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80004be:	bf00      	nop
 80004c0:	371c      	adds	r7, #28
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	08002134 	.word	0x08002134

080004d0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b087      	sub	sp, #28
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <LL_DMA_SetMemorySize+0x48>)
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4413      	add	r3, r2
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	461a      	mov	r2, r3
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	4413      	add	r3, r2
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80004f4:	4908      	ldr	r1, [pc, #32]	; (8000518 <LL_DMA_SetMemorySize+0x48>)
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	440b      	add	r3, r1
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	4619      	mov	r1, r3
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	440b      	add	r3, r1
 8000502:	4619      	mov	r1, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4313      	orrs	r3, r2
 8000508:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800050a:	bf00      	nop
 800050c:	371c      	adds	r7, #28
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	08002134 	.word	0x08002134

0800051c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 800052c:	4a0d      	ldr	r2, [pc, #52]	; (8000564 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	4413      	add	r3, r2
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	4413      	add	r3, r2
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000540:	4908      	ldr	r1, [pc, #32]	; (8000564 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	440b      	add	r3, r1
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	4619      	mov	r1, r3
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	440b      	add	r3, r1
 800054e:	4619      	mov	r1, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4313      	orrs	r3, r2
 8000554:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000556:	bf00      	nop
 8000558:	371c      	adds	r7, #28
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	08002134 	.word	0x08002134

08000568 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000568:	b480      	push	{r7}
 800056a:	b087      	sub	sp, #28
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <LL_DMA_SetDataLength+0x48>)
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	4413      	add	r3, r2
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	4413      	add	r3, r2
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	0c1b      	lsrs	r3, r3, #16
 800058a:	041b      	lsls	r3, r3, #16
 800058c:	4908      	ldr	r1, [pc, #32]	; (80005b0 <LL_DMA_SetDataLength+0x48>)
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	440a      	add	r2, r1
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	4611      	mov	r1, r2
 8000596:	697a      	ldr	r2, [r7, #20]
 8000598:	440a      	add	r2, r1
 800059a:	4611      	mov	r1, r2
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	4313      	orrs	r3, r2
 80005a0:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80005a2:	bf00      	nop
 80005a4:	371c      	adds	r7, #28
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	08002134 	.word	0x08002134

080005b4 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b087      	sub	sp, #28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
 80005c0:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80005c6:	6a3b      	ldr	r3, [r7, #32]
 80005c8:	2b10      	cmp	r3, #16
 80005ca:	d114      	bne.n	80005f6 <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 80005cc:	4a17      	ldr	r2, [pc, #92]	; (800062c <LL_DMA_ConfigAddresses+0x78>)
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4413      	add	r3, r2
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	4413      	add	r3, r2
 80005da:	461a      	mov	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 80005e0:	4a12      	ldr	r2, [pc, #72]	; (800062c <LL_DMA_ConfigAddresses+0x78>)
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	4413      	add	r3, r2
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	4413      	add	r3, r2
 80005ee:	461a      	mov	r2, r3
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
  }
}
 80005f4:	e013      	b.n	800061e <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 80005f6:	4a0d      	ldr	r2, [pc, #52]	; (800062c <LL_DMA_ConfigAddresses+0x78>)
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	4413      	add	r3, r2
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	4413      	add	r3, r2
 8000604:	461a      	mov	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 800060a:	4a08      	ldr	r2, [pc, #32]	; (800062c <LL_DMA_ConfigAddresses+0x78>)
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	4413      	add	r3, r2
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	4413      	add	r3, r2
 8000618:	461a      	mov	r2, r3
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	60d3      	str	r3, [r2, #12]
}
 800061e:	bf00      	nop
 8000620:	371c      	adds	r7, #28
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	08002134 	.word	0x08002134

08000630 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8000630:	b480      	push	{r7}
 8000632:	b089      	sub	sp, #36	; 0x24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	33a8      	adds	r3, #168	; 0xa8
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	210f      	movs	r1, #15
 8000648:	fa01 f303 	lsl.w	r3, r1, r3
 800064c:	43db      	mvns	r3, r3
 800064e:	401a      	ands	r2, r3
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	210f      	movs	r1, #15
 8000656:	fa01 f303 	lsl.w	r3, r1, r3
 800065a:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	fa93 f3a3 	rbit	r3, r3
 8000662:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d101      	bne.n	8000672 <LL_DMA_SetPeriphRequest+0x42>
  {
    return 32U;
 800066e:	2320      	movs	r3, #32
 8000670:	e003      	b.n	800067a <LL_DMA_SetPeriphRequest+0x4a>
  }
  return __builtin_clz(value);
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	fab3 f383 	clz	r3, r3
 8000678:	b2db      	uxtb	r3, r3
 800067a:	4619      	mov	r1, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	408b      	lsls	r3, r1
 8000680:	68f9      	ldr	r1, [r7, #12]
 8000682:	31a8      	adds	r1, #168	; 0xa8
 8000684:	4313      	orrs	r3, r2
 8000686:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << ((Channel) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
}
 8000688:	bf00      	nop
 800068a:	3724      	adds	r7, #36	; 0x24
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80006a2:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <LL_DMA_EnableIT_TC+0x40>)
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	461a      	mov	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4413      	add	r3, r2
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4908      	ldr	r1, [pc, #32]	; (80006d4 <LL_DMA_EnableIT_TC+0x40>)
 80006b4:	683a      	ldr	r2, [r7, #0]
 80006b6:	440a      	add	r2, r1
 80006b8:	7812      	ldrb	r2, [r2, #0]
 80006ba:	4611      	mov	r1, r2
 80006bc:	68fa      	ldr	r2, [r7, #12]
 80006be:	440a      	add	r2, r1
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6013      	str	r3, [r2, #0]
}
 80006c6:	bf00      	nop
 80006c8:	3714      	adds	r7, #20
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	08002134 	.word	0x08002134

080006d8 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 80006e6:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <LL_DMA_EnableIT_TE+0x40>)
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	4413      	add	r3, r2
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4908      	ldr	r1, [pc, #32]	; (8000718 <LL_DMA_EnableIT_TE+0x40>)
 80006f8:	683a      	ldr	r2, [r7, #0]
 80006fa:	440a      	add	r2, r1
 80006fc:	7812      	ldrb	r2, [r2, #0]
 80006fe:	4611      	mov	r1, r2
 8000700:	68fa      	ldr	r2, [r7, #12]
 8000702:	440a      	add	r2, r1
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	6013      	str	r3, [r2, #0]
}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	08002134 	.word	0x08002134

0800071c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f043 0201 	orr.w	r2, r3, #1
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	601a      	str	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6a1a      	ldr	r2, [r3, #32]
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	431a      	orrs	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	621a      	str	r2, [r3, #32]
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <LL_TIM_EnableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_EnableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	60da      	str	r2, [r3, #12]
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
	...

08000780 <enable_timer3>:
 *  Created on: Mar 14, 2024
 *      Author: patry
 */
#include "main.h"

void enable_timer3(){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	LL_TIM_EnableDMAReq_CC1(TIM3);
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <enable_timer3+0x1c>)
 8000786:	f7ff ffea 	bl	800075e <LL_TIM_EnableDMAReq_CC1>
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 800078a:	2101      	movs	r1, #1
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <enable_timer3+0x1c>)
 800078e:	f7ff ffd5 	bl	800073c <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM3);
 8000792:	4802      	ldr	r0, [pc, #8]	; (800079c <enable_timer3+0x1c>)
 8000794:	f7ff ffc2 	bl	800071c <LL_TIM_EnableCounter>

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40000400 	.word	0x40000400

080007a0 <generate_signal>:


void generate_signal(uint8_t* data, uint32_t data_length){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af02      	add	r7, sp, #8
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6, (uint32_t)data, (uint32_t)&TIM3->CCR1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	2310      	movs	r3, #16
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <generate_signal+0x3c>)
 80007b2:	2105      	movs	r1, #5
 80007b4:	480a      	ldr	r0, [pc, #40]	; (80007e0 <generate_signal+0x40>)
 80007b6:	f7ff fefd 	bl	80005b4 <LL_DMA_ConfigAddresses>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, data_length);
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	2105      	movs	r1, #5
 80007be:	4808      	ldr	r0, [pc, #32]	; (80007e0 <generate_signal+0x40>)
 80007c0:	f7ff fed2 	bl	8000568 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 80007c4:	2105      	movs	r1, #5
 80007c6:	4806      	ldr	r0, [pc, #24]	; (80007e0 <generate_signal+0x40>)
 80007c8:	f7ff ff64 	bl	8000694 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80007cc:	2105      	movs	r1, #5
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <generate_signal+0x40>)
 80007d0:	f7ff fd9c 	bl	800030c <LL_DMA_EnableChannel>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40000434 	.word	0x40000434
 80007e0:	40020000 	.word	0x40020000

080007e4 <dma_init>:


void dma_init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f7ff fd77 	bl	80002dc <LL_AHB1_GRP1_EnableClock>
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80007ee:	f7ff fceb 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fd3b 	bl	8000274 <NVIC_EncodePriority>
 80007fe:	4603      	mov	r3, r0
 8000800:	4619      	mov	r1, r3
 8000802:	2010      	movs	r0, #16
 8000804:	f7ff fd0c 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000808:	2010      	movs	r0, #16
 800080a:	f7ff fceb 	bl	80001e4 <__NVIC_EnableIRQ>

  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_5);
 800080e:	2205      	movs	r2, #5
 8000810:	2105      	movs	r1, #5
 8000812:	4816      	ldr	r0, [pc, #88]	; (800086c <dma_init+0x88>)
 8000814:	f7ff ff0c 	bl	8000630 <LL_DMA_SetPeriphRequest>
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000818:	2210      	movs	r2, #16
 800081a:	2105      	movs	r1, #5
 800081c:	4813      	ldr	r0, [pc, #76]	; (800086c <dma_init+0x88>)
 800081e:	f7ff fd97 	bl	8000350 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 8000822:	2200      	movs	r2, #0
 8000824:	2105      	movs	r1, #5
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <dma_init+0x88>)
 8000828:	f7ff fe78 	bl	800051c <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 800082c:	2200      	movs	r2, #0
 800082e:	2105      	movs	r1, #5
 8000830:	480e      	ldr	r0, [pc, #56]	; (800086c <dma_init+0x88>)
 8000832:	f7ff fdb5 	bl	80003a0 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8000836:	2200      	movs	r2, #0
 8000838:	2105      	movs	r1, #5
 800083a:	480c      	ldr	r0, [pc, #48]	; (800086c <dma_init+0x88>)
 800083c:	f7ff fdd6 	bl	80003ec <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	2105      	movs	r1, #5
 8000844:	4809      	ldr	r0, [pc, #36]	; (800086c <dma_init+0x88>)
 8000846:	f7ff fdf7 	bl	8000438 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_HALFWORD);
 800084a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800084e:	2105      	movs	r1, #5
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <dma_init+0x88>)
 8000852:	f7ff fe17 	bl	8000484 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8000856:	2200      	movs	r2, #0
 8000858:	2105      	movs	r1, #5
 800085a:	4804      	ldr	r0, [pc, #16]	; (800086c <dma_init+0x88>)
 800085c:	f7ff fe38 	bl	80004d0 <LL_DMA_SetMemorySize>

	LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_6);
 8000860:	2105      	movs	r1, #5
 8000862:	4802      	ldr	r0, [pc, #8]	; (800086c <dma_init+0x88>)
 8000864:	f7ff ff38 	bl	80006d8 <LL_DMA_EnableIT_TE>

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40020000 	.word	0x40020000

08000870 <__NVIC_SetPriorityGrouping>:
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	60d3      	str	r3, [r2, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_GetPriorityGrouping>:
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <__NVIC_GetPriorityGrouping+0x18>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	f003 0307 	and.w	r3, r3, #7
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_SetPriority>:
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	db0a      	blt.n	80008fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	490c      	ldr	r1, [pc, #48]	; (8000920 <__NVIC_SetPriority+0x4c>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	0112      	lsls	r2, r2, #4
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	440b      	add	r3, r1
 80008f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80008fc:	e00a      	b.n	8000914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4908      	ldr	r1, [pc, #32]	; (8000924 <__NVIC_SetPriority+0x50>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	f003 030f 	and.w	r3, r3, #15
 800090a:	3b04      	subs	r3, #4
 800090c:	0112      	lsls	r2, r2, #4
 800090e:	b2d2      	uxtb	r2, r2
 8000910:	440b      	add	r3, r1
 8000912:	761a      	strb	r2, [r3, #24]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000e100 	.word	0xe000e100
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <NVIC_EncodePriority>:
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	f1c3 0307 	rsb	r3, r3, #7
 8000942:	2b04      	cmp	r3, #4
 8000944:	bf28      	it	cs
 8000946:	2304      	movcs	r3, #4
 8000948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	3304      	adds	r3, #4
 800094e:	2b06      	cmp	r3, #6
 8000950:	d902      	bls.n	8000958 <NVIC_EncodePriority+0x30>
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3b03      	subs	r3, #3
 8000956:	e000      	b.n	800095a <NVIC_EncodePriority+0x32>
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	f04f 32ff 	mov.w	r2, #4294967295
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43da      	mvns	r2, r3
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	401a      	ands	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000970:	f04f 31ff 	mov.w	r1, #4294967295
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	43d9      	mvns	r1, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	4313      	orrs	r3, r2
}
 8000982:	4618      	mov	r0, r3
 8000984:	3724      	adds	r7, #36	; 0x24
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <LL_RCC_MSI_Enable+0x1c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <LL_RCC_MSI_Enable+0x1c>)
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000

080009b0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <LL_RCC_MSI_IsReady+0x20>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f003 0302 	and.w	r3, r3, #2
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d101      	bne.n	80009c4 <LL_RCC_MSI_IsReady+0x14>
 80009c0:	2301      	movs	r3, #1
 80009c2:	e000      	b.n	80009c6 <LL_RCC_MSI_IsReady+0x16>
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	40021000 	.word	0x40021000

080009d4 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80009de:	f043 0308 	orr.w	r3, r3, #8
 80009e2:	6013      	str	r3, [r2, #0]
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000

080009f4 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <LL_RCC_MSI_SetRange+0x24>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a04:	4904      	ldr	r1, [pc, #16]	; (8000a18 <LL_RCC_MSI_SetRange+0x24>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	600b      	str	r3, [r1, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	40021000 	.word	0x40021000

08000a1c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	021b      	lsls	r3, r3, #8
 8000a30:	4904      	ldr	r1, [pc, #16]	; (8000a44 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8000a32:	4313      	orrs	r3, r2
 8000a34:	604b      	str	r3, [r1, #4]
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <LL_RCC_SetSysClkSource+0x24>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	f023 0203 	bic.w	r2, r3, #3
 8000a58:	4904      	ldr	r1, [pc, #16]	; (8000a6c <LL_RCC_SetSysClkSource+0x24>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	608b      	str	r3, [r1, #8]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	40021000 	.word	0x40021000

08000a70 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <LL_RCC_GetSysClkSource+0x18>)
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	f003 030c 	and.w	r3, r3, #12
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000

08000a8c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a9c:	4904      	ldr	r1, [pc, #16]	; (8000ab0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	608b      	str	r3, [r1, #8]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ac4:	4904      	ldr	r1, [pc, #16]	; (8000ad8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	608b      	str	r3, [r1, #8]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	40021000 	.word	0x40021000

08000adc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000aec:	4904      	ldr	r1, [pc, #16]	; (8000b00 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	608b      	str	r3, [r1, #8]
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40021000 	.word	0x40021000

08000b04 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <LL_RCC_PLL_Enable+0x1c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <LL_RCC_PLL_Enable+0x1c>)
 8000b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000

08000b24 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <LL_RCC_PLL_IsReady+0x24>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000b34:	d101      	bne.n	8000b3a <LL_RCC_PLL_IsReady+0x16>
 8000b36:	2301      	movs	r3, #1
 8000b38:	e000      	b.n	8000b3c <LL_RCC_PLL_IsReady+0x18>
 8000b3a:	2300      	movs	r3, #0
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000

08000b4c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
 8000b58:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000b5c:	68da      	ldr	r2, [r3, #12]
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	68f9      	ldr	r1, [r7, #12]
 8000b64:	68ba      	ldr	r2, [r7, #8]
 8000b66:	4311      	orrs	r1, r2
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	0212      	lsls	r2, r2, #8
 8000b6c:	4311      	orrs	r1, r2
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	430a      	orrs	r2, r1
 8000b72:	4904      	ldr	r1, [pc, #16]	; (8000b84 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000b74:	4313      	orrs	r3, r2
 8000b76:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	40021000 	.word	0x40021000
 8000b88:	f9ff808c 	.word	0xf9ff808c

08000b8c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000

08000bac <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bb8:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000bc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	40021000 	.word	0x40021000

08000bdc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000be6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000be8:	4907      	ldr	r1, [pc, #28]	; (8000c08 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bf2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	40021000 	.word	0x40021000

08000c0c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c18:	4907      	ldr	r1, [pc, #28]	; (8000c38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4013      	ands	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	40021000 	.word	0x40021000

08000c3c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <LL_FLASH_SetLatency+0x24>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f023 0207 	bic.w	r2, r3, #7
 8000c4c:	4904      	ldr	r1, [pc, #16]	; (8000c60 <LL_FLASH_SetLatency+0x24>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	600b      	str	r3, [r1, #0]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	40022000 	.word	0x40022000

08000c64 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <LL_FLASH_GetLatency+0x18>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40022000 	.word	0x40022000

08000c80 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000c90:	4904      	ldr	r1, [pc, #16]	; (8000ca4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	600b      	str	r3, [r1, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	40007000 	.word	0x40007000

08000ca8 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cb8:	d101      	bne.n	8000cbe <LL_PWR_IsActiveFlag_VOS+0x16>
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e000      	b.n	8000cc0 <LL_PWR_IsActiveFlag_VOS+0x18>
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40007000 	.word	0x40007000

08000cd0 <LL_TIM_EnableCounter>:
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f043 0201 	orr.w	r2, r3, #1
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	601a      	str	r2, [r3, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <LL_TIM_SetCounterMode>:
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	431a      	orrs	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	601a      	str	r2, [r3, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <LL_TIM_DisableARRPreload>:
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	601a      	str	r2, [r3, #0]
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <LL_TIM_SetAutoReload>:
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <LL_TIM_OC_DisableFast>:
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d028      	beq.n	8000db6 <LL_TIM_OC_DisableFast+0x62>
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d023      	beq.n	8000db2 <LL_TIM_OC_DisableFast+0x5e>
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	2b10      	cmp	r3, #16
 8000d6e:	d01e      	beq.n	8000dae <LL_TIM_OC_DisableFast+0x5a>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	2b40      	cmp	r3, #64	; 0x40
 8000d74:	d019      	beq.n	8000daa <LL_TIM_OC_DisableFast+0x56>
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d7c:	d013      	beq.n	8000da6 <LL_TIM_OC_DisableFast+0x52>
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d84:	d00d      	beq.n	8000da2 <LL_TIM_OC_DisableFast+0x4e>
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d8c:	d007      	beq.n	8000d9e <LL_TIM_OC_DisableFast+0x4a>
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d94:	d101      	bne.n	8000d9a <LL_TIM_OC_DisableFast+0x46>
 8000d96:	2307      	movs	r3, #7
 8000d98:	e00e      	b.n	8000db8 <LL_TIM_OC_DisableFast+0x64>
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	e00c      	b.n	8000db8 <LL_TIM_OC_DisableFast+0x64>
 8000d9e:	2306      	movs	r3, #6
 8000da0:	e00a      	b.n	8000db8 <LL_TIM_OC_DisableFast+0x64>
 8000da2:	2305      	movs	r3, #5
 8000da4:	e008      	b.n	8000db8 <LL_TIM_OC_DisableFast+0x64>
 8000da6:	2304      	movs	r3, #4
 8000da8:	e006      	b.n	8000db8 <LL_TIM_OC_DisableFast+0x64>
 8000daa:	2303      	movs	r3, #3
 8000dac:	e004      	b.n	8000db8 <LL_TIM_OC_DisableFast+0x64>
 8000dae:	2302      	movs	r3, #2
 8000db0:	e002      	b.n	8000db8 <LL_TIM_OC_DisableFast+0x64>
 8000db2:	2301      	movs	r3, #1
 8000db4:	e000      	b.n	8000db8 <LL_TIM_OC_DisableFast+0x64>
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3318      	adds	r3, #24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <LL_TIM_OC_DisableFast+0x9c>)
 8000dc4:	5cd3      	ldrb	r3, [r2, r3]
 8000dc6:	440b      	add	r3, r1
 8000dc8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	4908      	ldr	r1, [pc, #32]	; (8000df4 <LL_TIM_OC_DisableFast+0xa0>)
 8000dd2:	5ccb      	ldrb	r3, [r1, r3]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	401a      	ands	r2, r3
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	601a      	str	r2, [r3, #0]
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	0800213c 	.word	0x0800213c
 8000df4:	08002148 	.word	0x08002148

08000df8 <LL_TIM_OC_EnablePreload>:
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d028      	beq.n	8000e5a <LL_TIM_OC_EnablePreload+0x62>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	d023      	beq.n	8000e56 <LL_TIM_OC_EnablePreload+0x5e>
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	2b10      	cmp	r3, #16
 8000e12:	d01e      	beq.n	8000e52 <LL_TIM_OC_EnablePreload+0x5a>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2b40      	cmp	r3, #64	; 0x40
 8000e18:	d019      	beq.n	8000e4e <LL_TIM_OC_EnablePreload+0x56>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e20:	d013      	beq.n	8000e4a <LL_TIM_OC_EnablePreload+0x52>
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e28:	d00d      	beq.n	8000e46 <LL_TIM_OC_EnablePreload+0x4e>
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e30:	d007      	beq.n	8000e42 <LL_TIM_OC_EnablePreload+0x4a>
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e38:	d101      	bne.n	8000e3e <LL_TIM_OC_EnablePreload+0x46>
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	e00e      	b.n	8000e5c <LL_TIM_OC_EnablePreload+0x64>
 8000e3e:	2308      	movs	r3, #8
 8000e40:	e00c      	b.n	8000e5c <LL_TIM_OC_EnablePreload+0x64>
 8000e42:	2306      	movs	r3, #6
 8000e44:	e00a      	b.n	8000e5c <LL_TIM_OC_EnablePreload+0x64>
 8000e46:	2305      	movs	r3, #5
 8000e48:	e008      	b.n	8000e5c <LL_TIM_OC_EnablePreload+0x64>
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	e006      	b.n	8000e5c <LL_TIM_OC_EnablePreload+0x64>
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e004      	b.n	8000e5c <LL_TIM_OC_EnablePreload+0x64>
 8000e52:	2302      	movs	r3, #2
 8000e54:	e002      	b.n	8000e5c <LL_TIM_OC_EnablePreload+0x64>
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <LL_TIM_OC_EnablePreload+0x64>
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3318      	adds	r3, #24
 8000e62:	4619      	mov	r1, r3
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <LL_TIM_OC_EnablePreload+0x98>)
 8000e68:	5cd3      	ldrb	r3, [r2, r3]
 8000e6a:	440b      	add	r3, r1
 8000e6c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	4907      	ldr	r1, [pc, #28]	; (8000e94 <LL_TIM_OC_EnablePreload+0x9c>)
 8000e76:	5ccb      	ldrb	r3, [r1, r3]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	408b      	lsls	r3, r1
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	601a      	str	r2, [r3, #0]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	0800213c 	.word	0x0800213c
 8000e94:	08002148 	.word	0x08002148

08000e98 <LL_TIM_DisableExternalClock>:
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <LL_TIM_SetClockSource>:
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000eca:	f023 0307 	bic.w	r3, r3, #7
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <LL_TIM_SetTriggerOutput>:
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	605a      	str	r2, [r3, #4]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <LL_TIM_DisableMasterSlaveMode>:
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_TIM_ConfigETR>:
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f423 423f 	bic.w	r2, r3, #48896	; 0xbf00
 8000f3e:	68b9      	ldr	r1, [r7, #8]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4319      	orrs	r1, r3
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	430b      	orrs	r3, r1
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	609a      	str	r2, [r3, #8]
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <LL_TIM_SetOCRefClearInputSource>:
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f023 0208 	bic.w	r2, r3, #8
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	609a      	str	r2, [r3, #8]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_TIM_ClearFlag_UPDATE>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f06f 0201 	mvn.w	r2, #1
 8000f8e:	611a      	str	r2, [r3, #16]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_TIM_IsActiveFlag_UPDATE>:
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d101      	bne.n	8000fb4 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	f043 0201 	orr.w	r2, r3, #1
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	615a      	str	r2, [r3, #20]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001002:	2001      	movs	r0, #1
 8001004:	f7ff fe02 	bl	8000c0c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001008:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800100c:	f7ff fde6 	bl	8000bdc <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f7ff fc2d 	bl	8000870 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001016:	f7ff fc4f 	bl	80008b8 <__NVIC_GetPriorityGrouping>
 800101a:	4603      	mov	r3, r0
 800101c:	2200      	movs	r2, #0
 800101e:	210f      	movs	r1, #15
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fc81 	bl	8000928 <NVIC_EncodePriority>
 8001026:	4603      	mov	r3, r0
 8001028:	4619      	mov	r1, r3
 800102a:	f04f 30ff 	mov.w	r0, #4294967295
 800102e:	f7ff fc51 	bl	80008d4 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001032:	f000 f80d 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001036:	f000 f90b 	bl	8001250 <MX_GPIO_Init>
  MX_TIM6_Init();
 800103a:	f000 f8d5 	bl	80011e8 <MX_TIM6_Init>
  MX_TIM3_Init();
 800103e:	f000 f859 	bl	80010f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  	  dma_init();
 8001042:	f7ff fbcf 	bl	80007e4 <dma_init>
  	  enable_timer3();
 8001046:	f7ff fb9b 	bl	8000780 <enable_timer3>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	  LedTest();
 800104a:	f000 f963 	bl	8001314 <LedTest>
 800104e:	e7fc      	b.n	800104a <main+0x4c>

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001054:	2001      	movs	r0, #1
 8001056:	f7ff fdf1 	bl	8000c3c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 800105a:	bf00      	nop
 800105c:	f7ff fe02 	bl	8000c64 <LL_FLASH_GetLatency>
 8001060:	4603      	mov	r3, r0
 8001062:	2b01      	cmp	r3, #1
 8001064:	d1fa      	bne.n	800105c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001066:	f44f 7000 	mov.w	r0, #512	; 0x200
 800106a:	f7ff fe09 	bl	8000c80 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 800106e:	bf00      	nop
 8001070:	f7ff fe1a 	bl	8000ca8 <LL_PWR_IsActiveFlag_VOS>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1fa      	bne.n	8001070 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 800107a:	f7ff fc89 	bl	8000990 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 800107e:	bf00      	nop
 8001080:	f7ff fc96 	bl	80009b0 <LL_RCC_MSI_IsReady>
 8001084:	4603      	mov	r3, r0
 8001086:	2b01      	cmp	r3, #1
 8001088:	d1fa      	bne.n	8001080 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 800108a:	f7ff fca3 	bl	80009d4 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 800108e:	2060      	movs	r0, #96	; 0x60
 8001090:	f7ff fcb0 	bl	80009f4 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff fcc1 	bl	8000a1c <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 16, LL_RCC_PLLR_DIV_2);
 800109a:	2300      	movs	r3, #0
 800109c:	2210      	movs	r2, #16
 800109e:	2100      	movs	r1, #0
 80010a0:	2001      	movs	r0, #1
 80010a2:	f7ff fd53 	bl	8000b4c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80010a6:	f7ff fd71 	bl	8000b8c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80010aa:	f7ff fd2b 	bl	8000b04 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80010ae:	bf00      	nop
 80010b0:	f7ff fd38 	bl	8000b24 <LL_RCC_PLL_IsReady>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d1fa      	bne.n	80010b0 <SystemClock_Config+0x60>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80010ba:	2003      	movs	r0, #3
 80010bc:	f7ff fcc4 	bl	8000a48 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80010c0:	bf00      	nop
 80010c2:	f7ff fcd5 	bl	8000a70 <LL_RCC_GetSysClkSource>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b0c      	cmp	r3, #12
 80010ca:	d1fa      	bne.n	80010c2 <SystemClock_Config+0x72>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff fcdd 	bl	8000a8c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff fcee 	bl	8000ab4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff fcff 	bl	8000adc <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(32000000);
 80010de:	4804      	ldr	r0, [pc, #16]	; (80010f0 <SystemClock_Config+0xa0>)
 80010e0:	f000 ffd2 	bl	8002088 <LL_Init1msTick>

  LL_SetSystemCoreClock(32000000);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <SystemClock_Config+0xa0>)
 80010e6:	f000 ffdd 	bl	80020a4 <LL_SetSystemCoreClock>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	01e84800 	.word	0x01e84800

080010f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	; 0x50
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80010fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	2220      	movs	r2, #32
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f000 ffd6 	bl	80020c4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]
 8001126:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001128:	2002      	movs	r0, #2
 800112a:	f7ff fd57 	bl	8000bdc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001132:	2300      	movs	r3, #0
 8001134:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 39;
 8001136:	2327      	movs	r3, #39	; 0x27
 8001138:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800113e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001142:	4619      	mov	r1, r3
 8001144:	4827      	ldr	r0, [pc, #156]	; (80011e4 <MX_TIM3_Init+0xf0>)
 8001146:	f000 fbd5 	bl	80018f4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800114a:	4826      	ldr	r0, [pc, #152]	; (80011e4 <MX_TIM3_Init+0xf0>)
 800114c:	f7ff fde3 	bl	8000d16 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001150:	2100      	movs	r1, #0
 8001152:	4824      	ldr	r0, [pc, #144]	; (80011e4 <MX_TIM3_Init+0xf0>)
 8001154:	f7ff feb0 	bl	8000eb8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8001158:	2101      	movs	r1, #1
 800115a:	4822      	ldr	r0, [pc, #136]	; (80011e4 <MX_TIM3_Init+0xf0>)
 800115c:	f7ff fe4c 	bl	8000df8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001160:	2360      	movs	r3, #96	; 0x60
 8001162:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	461a      	mov	r2, r3
 800117a:	2101      	movs	r1, #1
 800117c:	4819      	ldr	r0, [pc, #100]	; (80011e4 <MX_TIM3_Init+0xf0>)
 800117e:	f000 fc4d 	bl	8001a1c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001182:	2101      	movs	r1, #1
 8001184:	4817      	ldr	r0, [pc, #92]	; (80011e4 <MX_TIM3_Init+0xf0>)
 8001186:	f7ff fde5 	bl	8000d54 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM3, LL_TIM_OCREF_CLR_INT_NC);
 800118a:	2100      	movs	r1, #0
 800118c:	4815      	ldr	r0, [pc, #84]	; (80011e4 <MX_TIM3_Init+0xf0>)
 800118e:	f7ff fee4 	bl	8000f5a <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM3);
 8001192:	4814      	ldr	r0, [pc, #80]	; (80011e4 <MX_TIM3_Init+0xf0>)
 8001194:	f7ff fe80 	bl	8000e98 <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM3, LL_TIM_ETR_POLARITY_NONINVERTED, LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
 8001198:	2300      	movs	r3, #0
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	4811      	ldr	r0, [pc, #68]	; (80011e4 <MX_TIM3_Init+0xf0>)
 80011a0:	f7ff fec2 	bl	8000f28 <LL_TIM_ConfigETR>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80011a4:	2100      	movs	r1, #0
 80011a6:	480f      	ldr	r0, [pc, #60]	; (80011e4 <MX_TIM3_Init+0xf0>)
 80011a8:	f7ff fe9b 	bl	8000ee2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_TIM3_Init+0xf0>)
 80011ae:	f7ff feab 	bl	8000f08 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f7ff fcfa 	bl	8000bac <LL_AHB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PA6   ------> TIM3_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80011b8:	2340      	movs	r3, #64	; 0x40
 80011ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011bc:	2302      	movs	r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	4619      	mov	r1, r3
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d8:	f000 fa8e 	bl	80016f8 <LL_GPIO_Init>

}
 80011dc:	bf00      	nop
 80011de:	3750      	adds	r7, #80	; 0x50
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40000400 	.word	0x40000400

080011e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 80011fc:	2010      	movs	r0, #16
 80011fe:	f7ff fced 	bl	8000bdc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 31;
 8001202:	231f      	movs	r3, #31
 8001204:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 800120a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800120e:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4619      	mov	r1, r3
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <MX_TIM6_Init+0x64>)
 8001216:	f000 fb6d 	bl	80018f4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 800121a:	480c      	ldr	r0, [pc, #48]	; (800124c <MX_TIM6_Init+0x64>)
 800121c:	f7ff fd7b 	bl	8000d16 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8001220:	2100      	movs	r1, #0
 8001222:	480a      	ldr	r0, [pc, #40]	; (800124c <MX_TIM6_Init+0x64>)
 8001224:	f7ff fe5d 	bl	8000ee2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8001228:	4808      	ldr	r0, [pc, #32]	; (800124c <MX_TIM6_Init+0x64>)
 800122a:	f7ff fe6d 	bl	8000f08 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */
 // LL_TIM_SetClockSource(TIM6, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_SetCounterMode(TIM6, LL_TIM_COUNTERMODE_UP);
 800122e:	2100      	movs	r1, #0
 8001230:	4806      	ldr	r0, [pc, #24]	; (800124c <MX_TIM6_Init+0x64>)
 8001232:	f7ff fd5d 	bl	8000cf0 <LL_TIM_SetCounterMode>
  LL_TIM_ClearFlag_UPDATE(TIM6);
 8001236:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_TIM6_Init+0x64>)
 8001238:	f7ff fea2 	bl	8000f80 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <MX_TIM6_Init+0x64>)
 800123e:	f7ff fd47 	bl	8000cd0 <LL_TIM_EnableCounter>

  /* USER CODE END TIM6_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40001000 	.word	0x40001000

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	463b      	mov	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
 8001264:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8001266:	2080      	movs	r0, #128	; 0x80
 8001268:	f7ff fca0 	bl	8000bac <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff fc9d 	bl	8000bac <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001272:	2004      	movs	r0, #4
 8001274:	f7ff fc9a 	bl	8000bac <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, test_Pin|Buzzer_Pin);
 8001278:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800127c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001280:	f7ff feaf 	bl	8000fe2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Led_GPIO_Port, Led_Pin);
 8001284:	2180      	movs	r1, #128	; 0x80
 8001286:	4813      	ldr	r0, [pc, #76]	; (80012d4 <MX_GPIO_Init+0x84>)
 8001288:	f7ff feab 	bl	8000fe2 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = test_Pin|Buzzer_Pin;
 800128c:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001290:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001292:	2301      	movs	r3, #1
 8001294:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	463b      	mov	r3, r7
 80012a4:	4619      	mov	r1, r3
 80012a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012aa:	f000 fa25 	bl	80016f8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Led_Pin;
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012b2:	2301      	movs	r3, #1
 80012b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80012c2:	463b      	mov	r3, r7
 80012c4:	4619      	mov	r1, r3
 80012c6:	4803      	ldr	r0, [pc, #12]	; (80012d4 <MX_GPIO_Init+0x84>)
 80012c8:	f000 fa16 	bl	80016f8 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012cc:	bf00      	nop
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	48000800 	.word	0x48000800

080012d8 <Damian_Marudzi>:

/* USER CODE BEGIN 4 */

void Damian_Marudzi(uint16_t czas)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	80fb      	strh	r3, [r7, #6]
	LL_TIM_GenerateEvent_UPDATE(TIM6);
 80012e2:	480b      	ldr	r0, [pc, #44]	; (8001310 <Damian_Marudzi+0x38>)
 80012e4:	f7ff fe6d 	bl	8000fc2 <LL_TIM_GenerateEvent_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIM6);
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <Damian_Marudzi+0x38>)
 80012ea:	f7ff fe49 	bl	8000f80 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_SetAutoReload(TIM6, czas);
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	4619      	mov	r1, r3
 80012f2:	4807      	ldr	r0, [pc, #28]	; (8001310 <Damian_Marudzi+0x38>)
 80012f4:	f7ff fd1f 	bl	8000d36 <LL_TIM_SetAutoReload>
	while(LL_TIM_IsActiveFlag_UPDATE(TIM6) == 0);
 80012f8:	bf00      	nop
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <Damian_Marudzi+0x38>)
 80012fc:	f7ff fe4e 	bl	8000f9c <LL_TIM_IsActiveFlag_UPDATE>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f9      	beq.n	80012fa <Damian_Marudzi+0x22>
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40001000 	.word	0x40001000

08001314 <LedTest>:
void LedTest()
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0

	Damian_Marudzi(500);
 800131a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800131e:	f7ff ffdb 	bl	80012d8 <Damian_Marudzi>


	for(int i = 0; i<8;i++)
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	e024      	b.n	8001372 <LedTest+0x5e>
	{
		switch(i%3)
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <LedTest+0x70>)
 800132c:	fb83 3201 	smull	r3, r2, r3, r1
 8001330:	17cb      	asrs	r3, r1, #31
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	461a      	mov	r2, r3
 8001336:	0052      	lsls	r2, r2, #1
 8001338:	441a      	add	r2, r3
 800133a:	1a8b      	subs	r3, r1, r2
 800133c:	2b02      	cmp	r3, #2
 800133e:	d010      	beq.n	8001362 <LedTest+0x4e>
 8001340:	2b02      	cmp	r3, #2
 8001342:	dc13      	bgt.n	800136c <LedTest+0x58>
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <LedTest+0x3a>
 8001348:	2b01      	cmp	r3, #1
 800134a:	d005      	beq.n	8001358 <LedTest+0x44>
 800134c:	e00e      	b.n	800136c <LedTest+0x58>
		{
			case 0:
				generate_signal(green,sizeof(green));
 800134e:	2118      	movs	r1, #24
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <LedTest+0x74>)
 8001352:	f7ff fa25 	bl	80007a0 <generate_signal>

			break;
 8001356:	e009      	b.n	800136c <LedTest+0x58>
			case 1:
				generate_signal(red,sizeof(red));
 8001358:	2118      	movs	r1, #24
 800135a:	480c      	ldr	r0, [pc, #48]	; (800138c <LedTest+0x78>)
 800135c:	f7ff fa20 	bl	80007a0 <generate_signal>

			break;
 8001360:	e004      	b.n	800136c <LedTest+0x58>
			case 2:
				generate_signal(blue,sizeof(blue));
 8001362:	2118      	movs	r1, #24
 8001364:	480a      	ldr	r0, [pc, #40]	; (8001390 <LedTest+0x7c>)
 8001366:	f7ff fa1b 	bl	80007a0 <generate_signal>

			break;
 800136a:	bf00      	nop
	for(int i = 0; i<8;i++)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3301      	adds	r3, #1
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b07      	cmp	r3, #7
 8001376:	ddd7      	ble.n	8001328 <LedTest+0x14>
		}

	}
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	55555556 	.word	0x55555556
 8001388:	20000018 	.word	0x20000018
 800138c:	20000000 	.word	0x20000000
 8001390:	20000030 	.word	0x20000030

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001398:	e7fe      	b.n	8001398 <NMI_Handler+0x4>

0800139a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139e:	e7fe      	b.n	800139e <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <MemManage_Handler+0x4>

080013a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <BusFault_Handler+0x4>

080013ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <UsageFault_Handler+0x4>

080013b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <SystemInit+0x20>)
 80013f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <SystemInit+0x20>)
 80013f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001448 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001414:	f7ff ffea 	bl	80013ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001418:	480c      	ldr	r0, [pc, #48]	; (800144c <LoopForever+0x6>)
  ldr r1, =_edata
 800141a:	490d      	ldr	r1, [pc, #52]	; (8001450 <LoopForever+0xa>)
  ldr r2, =_sidata
 800141c:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <LoopForever+0xe>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001420:	e002      	b.n	8001428 <LoopCopyDataInit>

08001422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001426:	3304      	adds	r3, #4

08001428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800142c:	d3f9      	bcc.n	8001422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001430:	4c0a      	ldr	r4, [pc, #40]	; (800145c <LoopForever+0x16>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001434:	e001      	b.n	800143a <LoopFillZerobss>

08001436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001438:	3204      	adds	r2, #4

0800143a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800143c:	d3fb      	bcc.n	8001436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800143e:	f000 fe49 	bl	80020d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001442:	f7ff fddc 	bl	8000ffe <main>

08001446 <LoopForever>:

LoopForever:
    b LoopForever
 8001446:	e7fe      	b.n	8001446 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001448:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001450:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8001454:	0800215c 	.word	0x0800215c
  ldr r2, =_sbss
 8001458:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 800145c:	20000068 	.word	0x20000068

08001460 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC1_2_IRQHandler>

08001462 <LL_GPIO_SetPinMode>:
{
 8001462:	b480      	push	{r7}
 8001464:	b08b      	sub	sp, #44	; 0x2c
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	fa93 f3a3 	rbit	r3, r3
 800147c:	613b      	str	r3, [r7, #16]
  return result;
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001488:	2320      	movs	r3, #32
 800148a:	e003      	b.n	8001494 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fab3 f383 	clz	r3, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2103      	movs	r1, #3
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	401a      	ands	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	fa93 f3a3 	rbit	r3, r3
 80014aa:	61fb      	str	r3, [r7, #28]
  return result;
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80014b6:	2320      	movs	r3, #32
 80014b8:	e003      	b.n	80014c2 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	fab3 f383 	clz	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	431a      	orrs	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	601a      	str	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	372c      	adds	r7, #44	; 0x2c
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_GPIO_SetPinOutputType>:
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	401a      	ands	r2, r3
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	fb01 f303 	mul.w	r3, r1, r3
 80014fa:	431a      	orrs	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	605a      	str	r2, [r3, #4]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_GPIO_SetPinSpeed>:
{
 800150c:	b480      	push	{r7}
 800150e:	b08b      	sub	sp, #44	; 0x2c
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	613b      	str	r3, [r7, #16]
  return result;
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001532:	2320      	movs	r3, #32
 8001534:	e003      	b.n	800153e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	fab3 f383 	clz	r3, r3
 800153c:	b2db      	uxtb	r3, r3
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2103      	movs	r1, #3
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	401a      	ands	r2, r3
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	fa93 f3a3 	rbit	r3, r3
 8001554:	61fb      	str	r3, [r7, #28]
  return result;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001560:	2320      	movs	r3, #32
 8001562:	e003      	b.n	800156c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	fab3 f383 	clz	r3, r3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	fa01 f303 	lsl.w	r3, r1, r3
 8001574:	431a      	orrs	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	609a      	str	r2, [r3, #8]
}
 800157a:	bf00      	nop
 800157c:	372c      	adds	r7, #44	; 0x2c
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <LL_GPIO_SetPinPull>:
{
 8001586:	b480      	push	{r7}
 8001588:	b08b      	sub	sp, #44	; 0x2c
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	613b      	str	r3, [r7, #16]
  return result;
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80015ac:	2320      	movs	r3, #32
 80015ae:	e003      	b.n	80015b8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fab3 f383 	clz	r3, r3
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2103      	movs	r1, #3
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	401a      	ands	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	fa93 f3a3 	rbit	r3, r3
 80015ce:	61fb      	str	r3, [r7, #28]
  return result;
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80015da:	2320      	movs	r3, #32
 80015dc:	e003      	b.n	80015e6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	fa01 f303 	lsl.w	r3, r1, r3
 80015ee:	431a      	orrs	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	60da      	str	r2, [r3, #12]
}
 80015f4:	bf00      	nop
 80015f6:	372c      	adds	r7, #44	; 0x2c
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_GPIO_SetAFPin_0_7>:
{
 8001600:	b480      	push	{r7}
 8001602:	b08b      	sub	sp, #44	; 0x2c
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6a1a      	ldr	r2, [r3, #32]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	fa93 f3a3 	rbit	r3, r3
 800161a:	613b      	str	r3, [r7, #16]
  return result;
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001626:	2320      	movs	r3, #32
 8001628:	e003      	b.n	8001632 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	fab3 f383 	clz	r3, r3
 8001630:	b2db      	uxtb	r3, r3
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	210f      	movs	r1, #15
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	401a      	ands	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	fa93 f3a3 	rbit	r3, r3
 8001648:	61fb      	str	r3, [r7, #28]
  return result;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001654:	2320      	movs	r3, #32
 8001656:	e003      	b.n	8001660 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	fab3 f383 	clz	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	431a      	orrs	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	621a      	str	r2, [r3, #32]
}
 800166e:	bf00      	nop
 8001670:	372c      	adds	r7, #44	; 0x2c
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <LL_GPIO_SetAFPin_8_15>:
{
 800167a:	b480      	push	{r7}
 800167c:	b08b      	sub	sp, #44	; 0x2c
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa93 f3a3 	rbit	r3, r3
 8001696:	613b      	str	r3, [r7, #16]
  return result;
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80016a2:	2320      	movs	r3, #32
 80016a4:	e003      	b.n	80016ae <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	fab3 f383 	clz	r3, r3
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	210f      	movs	r1, #15
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	401a      	ands	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	fa93 f3a3 	rbit	r3, r3
 80016c6:	61fb      	str	r3, [r7, #28]
  return result;
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80016d2:	2320      	movs	r3, #32
 80016d4:	e003      	b.n	80016de <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	fab3 f383 	clz	r3, r3
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	431a      	orrs	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80016ec:	bf00      	nop
 80016ee:	372c      	adds	r7, #44	; 0x2c
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	fa93 f3a3 	rbit	r3, r3
 800170e:	60fb      	str	r3, [r7, #12]
  return result;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <LL_GPIO_Init+0x26>
    return 32U;
 800171a:	2320      	movs	r3, #32
 800171c:	e003      	b.n	8001726 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	fab3 f383 	clz	r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001728:	e048      	b.n	80017bc <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	2101      	movs	r1, #1
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d03a      	beq.n	80017b6 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d003      	beq.n	8001750 <LL_GPIO_Init+0x58>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d10e      	bne.n	800176e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	461a      	mov	r2, r3
 8001756:	69b9      	ldr	r1, [r7, #24]
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fed7 	bl	800150c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	6819      	ldr	r1, [r3, #0]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	461a      	mov	r2, r3
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff feb7 	bl	80014dc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	461a      	mov	r2, r3
 8001774:	69b9      	ldr	r1, [r7, #24]
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ff05 	bl	8001586 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d111      	bne.n	80017a8 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2bff      	cmp	r3, #255	; 0xff
 8001788:	d807      	bhi.n	800179a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	461a      	mov	r2, r3
 8001790:	69b9      	ldr	r1, [r7, #24]
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ff34 	bl	8001600 <LL_GPIO_SetAFPin_0_7>
 8001798:	e006      	b.n	80017a8 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	461a      	mov	r2, r3
 80017a0:	69b9      	ldr	r1, [r7, #24]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ff69 	bl	800167a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	461a      	mov	r2, r3
 80017ae:	69b9      	ldr	r1, [r7, #24]
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fe56 	bl	8001462 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3301      	adds	r3, #1
 80017ba:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	fa22 f303 	lsr.w	r3, r2, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1af      	bne.n	800172a <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3720      	adds	r7, #32
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <LL_TIM_SetPrescaler>:
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_TIM_SetAutoReload>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_TIM_SetRepetitionCounter>:
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_TIM_OC_SetCompareCH1>:
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_TIM_OC_SetCompareCH2>:
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_TIM_OC_SetCompareCH3>:
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_TIM_OC_SetCompareCH4>:
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_TIM_OC_SetCompareCH5>:
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	659a      	str	r2, [r3, #88]	; 0x58
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_TIM_OC_SetCompareCH6>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_TIM_GenerateEvent_UPDATE>:
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	f043 0201 	orr.w	r2, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	615a      	str	r2, [r3, #20]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a3d      	ldr	r2, [pc, #244]	; (80019fc <LL_TIM_Init+0x108>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d013      	beq.n	8001934 <LL_TIM_Init+0x40>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001912:	d00f      	beq.n	8001934 <LL_TIM_Init+0x40>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a3a      	ldr	r2, [pc, #232]	; (8001a00 <LL_TIM_Init+0x10c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d00b      	beq.n	8001934 <LL_TIM_Init+0x40>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a39      	ldr	r2, [pc, #228]	; (8001a04 <LL_TIM_Init+0x110>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d007      	beq.n	8001934 <LL_TIM_Init+0x40>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a38      	ldr	r2, [pc, #224]	; (8001a08 <LL_TIM_Init+0x114>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d003      	beq.n	8001934 <LL_TIM_Init+0x40>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a37      	ldr	r2, [pc, #220]	; (8001a0c <LL_TIM_Init+0x118>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d106      	bne.n	8001942 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4313      	orrs	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a2d      	ldr	r2, [pc, #180]	; (80019fc <LL_TIM_Init+0x108>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d01f      	beq.n	800198a <LL_TIM_Init+0x96>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001950:	d01b      	beq.n	800198a <LL_TIM_Init+0x96>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a2a      	ldr	r2, [pc, #168]	; (8001a00 <LL_TIM_Init+0x10c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d017      	beq.n	800198a <LL_TIM_Init+0x96>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a29      	ldr	r2, [pc, #164]	; (8001a04 <LL_TIM_Init+0x110>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d013      	beq.n	800198a <LL_TIM_Init+0x96>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a28      	ldr	r2, [pc, #160]	; (8001a08 <LL_TIM_Init+0x114>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d00f      	beq.n	800198a <LL_TIM_Init+0x96>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a27      	ldr	r2, [pc, #156]	; (8001a0c <LL_TIM_Init+0x118>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d00b      	beq.n	800198a <LL_TIM_Init+0x96>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a26      	ldr	r2, [pc, #152]	; (8001a10 <LL_TIM_Init+0x11c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d007      	beq.n	800198a <LL_TIM_Init+0x96>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a25      	ldr	r2, [pc, #148]	; (8001a14 <LL_TIM_Init+0x120>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d003      	beq.n	800198a <LL_TIM_Init+0x96>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a24      	ldr	r2, [pc, #144]	; (8001a18 <LL_TIM_Init+0x124>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d106      	bne.n	8001998 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4313      	orrs	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	4619      	mov	r1, r3
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff23 	bl	80017f0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	4619      	mov	r1, r3
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff0f 	bl	80017d4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a10      	ldr	r2, [pc, #64]	; (80019fc <LL_TIM_Init+0x108>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00f      	beq.n	80019de <LL_TIM_Init+0xea>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <LL_TIM_Init+0x118>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00b      	beq.n	80019de <LL_TIM_Init+0xea>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a11      	ldr	r2, [pc, #68]	; (8001a10 <LL_TIM_Init+0x11c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d007      	beq.n	80019de <LL_TIM_Init+0xea>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <LL_TIM_Init+0x120>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d003      	beq.n	80019de <LL_TIM_Init+0xea>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <LL_TIM_Init+0x124>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d105      	bne.n	80019ea <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	4619      	mov	r1, r3
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ff11 	bl	800180c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ff72 	bl	80018d4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40012c00 	.word	0x40012c00
 8001a00:	40000400 	.word	0x40000400
 8001a04:	40000800 	.word	0x40000800
 8001a08:	40000c00 	.word	0x40000c00
 8001a0c:	40013400 	.word	0x40013400
 8001a10:	40014000 	.word	0x40014000
 8001a14:	40014400 	.word	0x40014400
 8001a18:	40014800 	.word	0x40014800

08001a1c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a32:	d045      	beq.n	8001ac0 <LL_TIM_OC_Init+0xa4>
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a3a:	d848      	bhi.n	8001ace <LL_TIM_OC_Init+0xb2>
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a42:	d036      	beq.n	8001ab2 <LL_TIM_OC_Init+0x96>
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4a:	d840      	bhi.n	8001ace <LL_TIM_OC_Init+0xb2>
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a52:	d027      	beq.n	8001aa4 <LL_TIM_OC_Init+0x88>
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a5a:	d838      	bhi.n	8001ace <LL_TIM_OC_Init+0xb2>
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a62:	d018      	beq.n	8001a96 <LL_TIM_OC_Init+0x7a>
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a6a:	d830      	bhi.n	8001ace <LL_TIM_OC_Init+0xb2>
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d003      	beq.n	8001a7a <LL_TIM_OC_Init+0x5e>
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b10      	cmp	r3, #16
 8001a76:	d007      	beq.n	8001a88 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001a78:	e029      	b.n	8001ace <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f82d 	bl	8001adc <OC1Config>
 8001a82:	4603      	mov	r3, r0
 8001a84:	75fb      	strb	r3, [r7, #23]
      break;
 8001a86:	e023      	b.n	8001ad0 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 f8a6 	bl	8001bdc <OC2Config>
 8001a90:	4603      	mov	r3, r0
 8001a92:	75fb      	strb	r3, [r7, #23]
      break;
 8001a94:	e01c      	b.n	8001ad0 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 f923 	bl	8001ce4 <OC3Config>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8001aa2:	e015      	b.n	8001ad0 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 f9a0 	bl	8001dec <OC4Config>
 8001aac:	4603      	mov	r3, r0
 8001aae:	75fb      	strb	r3, [r7, #23]
      break;
 8001ab0:	e00e      	b.n	8001ad0 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 fa05 	bl	8001ec4 <OC5Config>
 8001aba:	4603      	mov	r3, r0
 8001abc:	75fb      	strb	r3, [r7, #23]
      break;
 8001abe:	e007      	b.n	8001ad0 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 fa62 	bl	8001f8c <OC6Config>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	75fb      	strb	r3, [r7, #23]
      break;
 8001acc:	e000      	b.n	8001ad0 <LL_TIM_OC_Init+0xb4>
      break;
 8001ace:	bf00      	nop
  }

  return result;
 8001ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	f023 0201 	bic.w	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f023 0303 	bic.w	r3, r3, #3
 8001b0a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f023 0202 	bic.w	r2, r3, #2
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f023 0201 	bic.w	r2, r3, #1
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a22      	ldr	r2, [pc, #136]	; (8001bc8 <OC1Config+0xec>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00f      	beq.n	8001b62 <OC1Config+0x86>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a21      	ldr	r2, [pc, #132]	; (8001bcc <OC1Config+0xf0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d00b      	beq.n	8001b62 <OC1Config+0x86>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a20      	ldr	r2, [pc, #128]	; (8001bd0 <OC1Config+0xf4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d007      	beq.n	8001b62 <OC1Config+0x86>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a1f      	ldr	r2, [pc, #124]	; (8001bd4 <OC1Config+0xf8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d003      	beq.n	8001b62 <OC1Config+0x86>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a1e      	ldr	r2, [pc, #120]	; (8001bd8 <OC1Config+0xfc>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d11e      	bne.n	8001ba0 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f023 0208 	bic.w	r2, r3, #8
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f023 0204 	bic.w	r2, r3, #4
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff fe38 	bl	8001828 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40012c00 	.word	0x40012c00
 8001bcc:	40013400 	.word	0x40013400
 8001bd0:	40014000 	.word	0x40014000
 8001bd4:	40014400 	.word	0x40014400
 8001bd8:	40014800 	.word	0x40014800

08001bdc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	f023 0210 	bic.w	r2, r3, #16
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	0212      	lsls	r2, r2, #8
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f023 0220 	bic.w	r2, r3, #32
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f023 0210 	bic.w	r2, r3, #16
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a23      	ldr	r2, [pc, #140]	; (8001cd0 <OC2Config+0xf4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00f      	beq.n	8001c68 <OC2Config+0x8c>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a22      	ldr	r2, [pc, #136]	; (8001cd4 <OC2Config+0xf8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d00b      	beq.n	8001c68 <OC2Config+0x8c>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a21      	ldr	r2, [pc, #132]	; (8001cd8 <OC2Config+0xfc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d007      	beq.n	8001c68 <OC2Config+0x8c>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a20      	ldr	r2, [pc, #128]	; (8001cdc <OC2Config+0x100>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d003      	beq.n	8001c68 <OC2Config+0x8c>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a1f      	ldr	r2, [pc, #124]	; (8001ce0 <OC2Config+0x104>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d11f      	bne.n	8001ca8 <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	019b      	lsls	r3, r3, #6
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	019b      	lsls	r3, r3, #6
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	4619      	mov	r1, r3
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff fdc2 	bl	8001844 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40012c00 	.word	0x40012c00
 8001cd4:	40013400 	.word	0x40013400
 8001cd8:	40014000 	.word	0x40014000
 8001cdc:	40014400 	.word	0x40014400
 8001ce0:	40014800 	.word	0x40014800

08001ce4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f023 0303 	bic.w	r3, r3, #3
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	4313      	orrs	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	4313      	orrs	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a23      	ldr	r2, [pc, #140]	; (8001dd8 <OC3Config+0xf4>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00f      	beq.n	8001d6e <OC3Config+0x8a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a22      	ldr	r2, [pc, #136]	; (8001ddc <OC3Config+0xf8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00b      	beq.n	8001d6e <OC3Config+0x8a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a21      	ldr	r2, [pc, #132]	; (8001de0 <OC3Config+0xfc>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d007      	beq.n	8001d6e <OC3Config+0x8a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a20      	ldr	r2, [pc, #128]	; (8001de4 <OC3Config+0x100>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d003      	beq.n	8001d6e <OC3Config+0x8a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a1f      	ldr	r2, [pc, #124]	; (8001de8 <OC3Config+0x104>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d11f      	bne.n	8001dae <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	029b      	lsls	r3, r3, #10
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	029b      	lsls	r3, r3, #10
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	011b      	lsls	r3, r3, #4
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	015b      	lsls	r3, r3, #5
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff fd4d 	bl	8001860 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40012c00 	.word	0x40012c00
 8001ddc:	40013400 	.word	0x40013400
 8001de0:	40014000 	.word	0x40014000
 8001de4:	40014400 	.word	0x40014400
 8001de8:	40014800 	.word	0x40014800

08001dec <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	031b      	lsls	r3, r3, #12
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	031b      	lsls	r3, r3, #12
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <OC4Config+0xc4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d00f      	beq.n	8001e78 <OC4Config+0x8c>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a16      	ldr	r2, [pc, #88]	; (8001eb4 <OC4Config+0xc8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00b      	beq.n	8001e78 <OC4Config+0x8c>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a15      	ldr	r2, [pc, #84]	; (8001eb8 <OC4Config+0xcc>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d007      	beq.n	8001e78 <OC4Config+0x8c>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <OC4Config+0xd0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d003      	beq.n	8001e78 <OC4Config+0x8c>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a13      	ldr	r2, [pc, #76]	; (8001ec0 <OC4Config+0xd4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d107      	bne.n	8001e88 <OC4Config+0x9c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	019b      	lsls	r3, r3, #6
 8001e84:	4313      	orrs	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff fcee 	bl	800187c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40012c00 	.word	0x40012c00
 8001eb4:	40013400 	.word	0x40013400
 8001eb8:	40014000 	.word	0x40014000
 8001ebc:	40014400 	.word	0x40014400
 8001ec0:	40014800 	.word	0x40014800

08001ec4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	041b      	lsls	r3, r3, #16
 8001f04:	4313      	orrs	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	4313      	orrs	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a17      	ldr	r2, [pc, #92]	; (8001f78 <OC5Config+0xb4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00f      	beq.n	8001f40 <OC5Config+0x7c>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a16      	ldr	r2, [pc, #88]	; (8001f7c <OC5Config+0xb8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d00b      	beq.n	8001f40 <OC5Config+0x7c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a15      	ldr	r2, [pc, #84]	; (8001f80 <OC5Config+0xbc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d007      	beq.n	8001f40 <OC5Config+0x7c>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <OC5Config+0xc0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d003      	beq.n	8001f40 <OC5Config+0x7c>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <OC5Config+0xc4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d109      	bne.n	8001f54 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff fc99 	bl	8001898 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40012c00 	.word	0x40012c00
 8001f7c:	40013400 	.word	0x40013400
 8001f80:	40014000 	.word	0x40014000
 8001f84:	40014400 	.word	0x40014400
 8001f88:	40014800 	.word	0x40014800

08001f8c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fac:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	0212      	lsls	r2, r2, #8
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	051b      	lsls	r3, r3, #20
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	051b      	lsls	r3, r3, #20
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a16      	ldr	r2, [pc, #88]	; (8002040 <OC6Config+0xb4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00f      	beq.n	800200a <OC6Config+0x7e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a15      	ldr	r2, [pc, #84]	; (8002044 <OC6Config+0xb8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00b      	beq.n	800200a <OC6Config+0x7e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a14      	ldr	r2, [pc, #80]	; (8002048 <OC6Config+0xbc>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d007      	beq.n	800200a <OC6Config+0x7e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a13      	ldr	r2, [pc, #76]	; (800204c <OC6Config+0xc0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d003      	beq.n	800200a <OC6Config+0x7e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a12      	ldr	r2, [pc, #72]	; (8002050 <OC6Config+0xc4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d109      	bne.n	800201e <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	029b      	lsls	r3, r3, #10
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4619      	mov	r1, r3
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fc44 	bl	80018b8 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40012c00 	.word	0x40012c00
 8002044:	40013400 	.word	0x40013400
 8002048:	40014000 	.word	0x40014000
 800204c:	40014400 	.word	0x40014400
 8002050:	40014800 	.word	0x40014800

08002054 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	fbb2 f3f3 	udiv	r3, r2, r3
 8002066:	4a07      	ldr	r2, [pc, #28]	; (8002084 <LL_InitTick+0x30>)
 8002068:	3b01      	subs	r3, #1
 800206a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <LL_InitTick+0x30>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002072:	4b04      	ldr	r3, [pc, #16]	; (8002084 <LL_InitTick+0x30>)
 8002074:	2205      	movs	r2, #5
 8002076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	e000e010 	.word	0xe000e010

08002088 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002090:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ffdd 	bl	8002054 <LL_InitTick>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <LL_SetSystemCoreClock+0x1c>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6013      	str	r3, [r2, #0]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000048 	.word	0x20000048

080020c4 <memset>:
 80020c4:	4402      	add	r2, r0
 80020c6:	4603      	mov	r3, r0
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d100      	bne.n	80020ce <memset+0xa>
 80020cc:	4770      	bx	lr
 80020ce:	f803 1b01 	strb.w	r1, [r3], #1
 80020d2:	e7f9      	b.n	80020c8 <memset+0x4>

080020d4 <__libc_init_array>:
 80020d4:	b570      	push	{r4, r5, r6, lr}
 80020d6:	4d0d      	ldr	r5, [pc, #52]	; (800210c <__libc_init_array+0x38>)
 80020d8:	4c0d      	ldr	r4, [pc, #52]	; (8002110 <__libc_init_array+0x3c>)
 80020da:	1b64      	subs	r4, r4, r5
 80020dc:	10a4      	asrs	r4, r4, #2
 80020de:	2600      	movs	r6, #0
 80020e0:	42a6      	cmp	r6, r4
 80020e2:	d109      	bne.n	80020f8 <__libc_init_array+0x24>
 80020e4:	4d0b      	ldr	r5, [pc, #44]	; (8002114 <__libc_init_array+0x40>)
 80020e6:	4c0c      	ldr	r4, [pc, #48]	; (8002118 <__libc_init_array+0x44>)
 80020e8:	f000 f818 	bl	800211c <_init>
 80020ec:	1b64      	subs	r4, r4, r5
 80020ee:	10a4      	asrs	r4, r4, #2
 80020f0:	2600      	movs	r6, #0
 80020f2:	42a6      	cmp	r6, r4
 80020f4:	d105      	bne.n	8002102 <__libc_init_array+0x2e>
 80020f6:	bd70      	pop	{r4, r5, r6, pc}
 80020f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020fc:	4798      	blx	r3
 80020fe:	3601      	adds	r6, #1
 8002100:	e7ee      	b.n	80020e0 <__libc_init_array+0xc>
 8002102:	f855 3b04 	ldr.w	r3, [r5], #4
 8002106:	4798      	blx	r3
 8002108:	3601      	adds	r6, #1
 800210a:	e7f2      	b.n	80020f2 <__libc_init_array+0x1e>
 800210c:	08002154 	.word	0x08002154
 8002110:	08002154 	.word	0x08002154
 8002114:	08002154 	.word	0x08002154
 8002118:	08002158 	.word	0x08002158

0800211c <_init>:
 800211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800211e:	bf00      	nop
 8002120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002122:	bc08      	pop	{r3}
 8002124:	469e      	mov	lr, r3
 8002126:	4770      	bx	lr

08002128 <_fini>:
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212a:	bf00      	nop
 800212c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212e:	bc08      	pop	{r3}
 8002130:	469e      	mov	lr, r3
 8002132:	4770      	bx	lr
