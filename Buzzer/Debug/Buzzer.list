
Buzzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004488  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08004610  08004610  00014610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004820  08004820  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08004820  08004820  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004820  08004820  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004820  08004820  00014820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004824  08004824  00014824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08004828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000004  0800482c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  0800482c  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000063ea  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000010bb  00000000  00000000  00026461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000738  00000000  00000000  00027520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000055c  00000000  00000000  00027c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000204d8  00000000  00000000  000281b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005343  00000000  00000000  0004868c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b5521  00000000  00000000  0004d9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002198  00000000  00000000  00102ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00105088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080045f8 	.word	0x080045f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080045f8 	.word	0x080045f8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <__NVIC_EnableIRQ+0x38>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000cc4:	4907      	ldr	r1, [pc, #28]	; (8000ce4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000cf6:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <LL_DMA_EnableChannel+0x40>)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4413      	add	r3, r2
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <LL_DMA_EnableChannel+0x40>)
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	440a      	add	r2, r1
 8000d0c:	7812      	ldrb	r2, [r2, #0]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	440a      	add	r2, r1
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6013      	str	r3, [r2, #0]
}
 8000d1a:	bf00      	nop
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	08004610 	.word	0x08004610

08000d2c <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000d3a:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <LL_DMA_DisableChannel+0x40>)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4908      	ldr	r1, [pc, #32]	; (8000d6c <LL_DMA_DisableChannel+0x40>)
 8000d4c:	683a      	ldr	r2, [r7, #0]
 8000d4e:	440a      	add	r2, r1
 8000d50:	7812      	ldrb	r2, [r2, #0]
 8000d52:	4611      	mov	r1, r2
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	440a      	add	r2, r1
 8000d58:	f023 0301 	bic.w	r3, r3, #1
 8000d5c:	6013      	str	r3, [r2, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	08004610 	.word	0x08004610

08000d70 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b087      	sub	sp, #28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000d80:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <LL_DMA_SetDataTransferDirection+0x4c>)
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d94:	f023 0310 	bic.w	r3, r3, #16
 8000d98:	4908      	ldr	r1, [pc, #32]	; (8000dbc <LL_DMA_SetDataTransferDirection+0x4c>)
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	440a      	add	r2, r1
 8000d9e:	7812      	ldrb	r2, [r2, #0]
 8000da0:	4611      	mov	r1, r2
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	440a      	add	r2, r1
 8000da6:	4611      	mov	r1, r2
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000dae:	bf00      	nop
 8000db0:	371c      	adds	r7, #28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	08004610 	.word	0x08004610

08000dc0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <LL_DMA_SetMode+0x48>)
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	4413      	add	r3, r2
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f023 0220 	bic.w	r2, r3, #32
 8000de4:	4908      	ldr	r1, [pc, #32]	; (8000e08 <LL_DMA_SetMode+0x48>)
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	440b      	add	r3, r1
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	440b      	add	r3, r1
 8000df2:	4619      	mov	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000dfa:	bf00      	nop
 8000dfc:	371c      	adds	r7, #28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	08004610 	.word	0x08004610

08000e0c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <LL_DMA_SetPeriphIncMode+0x48>)
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	4413      	add	r3, r2
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	4413      	add	r3, r2
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e30:	4908      	ldr	r1, [pc, #32]	; (8000e54 <LL_DMA_SetPeriphIncMode+0x48>)
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	440b      	add	r3, r1
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	440b      	add	r3, r1
 8000e3e:	4619      	mov	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000e46:	bf00      	nop
 8000e48:	371c      	adds	r7, #28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	08004610 	.word	0x08004610

08000e58 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <LL_DMA_SetMemoryIncMode+0x48>)
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	4413      	add	r3, r2
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e7c:	4908      	ldr	r1, [pc, #32]	; (8000ea0 <LL_DMA_SetMemoryIncMode+0x48>)
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	440b      	add	r3, r1
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	440b      	add	r3, r1
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000e92:	bf00      	nop
 8000e94:	371c      	adds	r7, #28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	08004610 	.word	0x08004610

08000ea4 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <LL_DMA_SetPeriphSize+0x48>)
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	4413      	add	r3, r2
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000ec8:	4908      	ldr	r1, [pc, #32]	; (8000eec <LL_DMA_SetPeriphSize+0x48>)
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	440b      	add	r3, r1
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	440b      	add	r3, r1
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000ede:	bf00      	nop
 8000ee0:	371c      	adds	r7, #28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	08004610 	.word	0x08004610

08000ef0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <LL_DMA_SetMemorySize+0x48>)
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	4413      	add	r3, r2
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000f14:	4908      	ldr	r1, [pc, #32]	; (8000f38 <LL_DMA_SetMemorySize+0x48>)
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	440b      	add	r3, r1
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	440b      	add	r3, r1
 8000f22:	4619      	mov	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000f2a:	bf00      	nop
 8000f2c:	371c      	adds	r7, #28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	08004610 	.word	0x08004610

08000f3c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	4413      	add	r3, r2
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	4413      	add	r3, r2
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000f60:	4908      	ldr	r1, [pc, #32]	; (8000f84 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	440b      	add	r3, r1
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	440b      	add	r3, r1
 8000f6e:	4619      	mov	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000f76:	bf00      	nop
 8000f78:	371c      	adds	r7, #28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	08004610 	.word	0x08004610

08000f88 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <LL_DMA_SetDataLength+0x48>)
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	0c1b      	lsrs	r3, r3, #16
 8000faa:	041b      	lsls	r3, r3, #16
 8000fac:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <LL_DMA_SetDataLength+0x48>)
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	440a      	add	r2, r1
 8000fb2:	7812      	ldrb	r2, [r2, #0]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	440a      	add	r2, r1
 8000fba:	4611      	mov	r1, r2
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000fc2:	bf00      	nop
 8000fc4:	371c      	adds	r7, #28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	08004610 	.word	0x08004610

08000fd4 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	2b10      	cmp	r3, #16
 8000fea:	d114      	bne.n	8001016 <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 8000fec:	4a17      	ldr	r2, [pc, #92]	; (800104c <LL_DMA_ConfigAddresses+0x78>)
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8001000:	4a12      	ldr	r2, [pc, #72]	; (800104c <LL_DMA_ConfigAddresses+0x78>)
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	4413      	add	r3, r2
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	4413      	add	r3, r2
 800100e:	461a      	mov	r2, r3
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
  }
}
 8001014:	e013      	b.n	800103e <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 8001016:	4a0d      	ldr	r2, [pc, #52]	; (800104c <LL_DMA_ConfigAddresses+0x78>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4413      	add	r3, r2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	4413      	add	r3, r2
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 800102a:	4a08      	ldr	r2, [pc, #32]	; (800104c <LL_DMA_ConfigAddresses+0x78>)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4413      	add	r3, r2
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	4413      	add	r3, r2
 8001038:	461a      	mov	r2, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	60d3      	str	r3, [r2, #12]
}
 800103e:	bf00      	nop
 8001040:	371c      	adds	r7, #28
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	08004610 	.word	0x08004610

08001050 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	33a8      	adds	r3, #168	; 0xa8
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	210f      	movs	r1, #15
 8001068:	fa01 f303 	lsl.w	r3, r1, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	401a      	ands	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	210f      	movs	r1, #15
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa93 f3a3 	rbit	r3, r3
 8001082:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <LL_DMA_SetPeriphRequest+0x42>
  {
    return 32U;
 800108e:	2320      	movs	r3, #32
 8001090:	e003      	b.n	800109a <LL_DMA_SetPeriphRequest+0x4a>
  }
  return __builtin_clz(value);
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fab3 f383 	clz	r3, r3
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4619      	mov	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	408b      	lsls	r3, r1
 80010a0:	68f9      	ldr	r1, [r7, #12]
 80010a2:	31a8      	adds	r1, #168	; 0xa8
 80010a4:	4313      	orrs	r3, r2
 80010a6:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << ((Channel) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
}
 80010a8:	bf00      	nop
 80010aa:	3724      	adds	r7, #36	; 0x24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6)) ? 1UL : 0UL);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80010c8:	d101      	bne.n	80010ce <LL_DMA_IsActiveFlag_TC6+0x1a>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <LL_DMA_IsActiveFlag_TC6+0x1c>
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <LL_DMA_IsActiveFlag_TE6>:
  * @rmtoll ISR          TEIF6         LL_DMA_IsActiveFlag_TE6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE6(DMA_TypeDef *DMAx)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF6) == (DMA_ISR_TEIF6)) ? 1UL : 0UL);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80010f0:	d101      	bne.n	80010f6 <LL_DMA_IsActiveFlag_TE6+0x1a>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <LL_DMA_IsActiveFlag_TE6+0x1c>
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001112:	605a      	str	r2, [r3, #4]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 800112e:	4a0c      	ldr	r2, [pc, #48]	; (8001160 <LL_DMA_EnableIT_TC+0x40>)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	4413      	add	r3, r2
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <LL_DMA_EnableIT_TC+0x40>)
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	440a      	add	r2, r1
 8001144:	7812      	ldrb	r2, [r2, #0]
 8001146:	4611      	mov	r1, r2
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	440a      	add	r2, r1
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6013      	str	r3, [r2, #0]
}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	08004610 	.word	0x08004610

08001164 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 8001172:	4a0c      	ldr	r2, [pc, #48]	; (80011a4 <LL_DMA_EnableIT_TE+0x40>)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <LL_DMA_EnableIT_TE+0x40>)
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	440a      	add	r2, r1
 8001188:	7812      	ldrb	r2, [r2, #0]
 800118a:	4611      	mov	r1, r2
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	440a      	add	r2, r1
 8001190:	f043 0308 	orr.w	r3, r3, #8
 8001194:	6013      	str	r3, [r2, #0]
}
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	08004610 	.word	0x08004610

080011a8 <LL_DMA_DisableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80011b6:	4a0c      	ldr	r2, [pc, #48]	; (80011e8 <LL_DMA_DisableIT_TC+0x40>)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4908      	ldr	r1, [pc, #32]	; (80011e8 <LL_DMA_DisableIT_TC+0x40>)
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	440a      	add	r2, r1
 80011cc:	7812      	ldrb	r2, [r2, #0]
 80011ce:	4611      	mov	r1, r2
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	440a      	add	r2, r1
 80011d4:	f023 0302 	bic.w	r3, r3, #2
 80011d8:	6013      	str	r3, [r2, #0]
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	08004610 	.word	0x08004610

080011ec <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f043 0201 	orr.w	r2, r3, #1
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	601a      	str	r2, [r3, #0]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a1a      	ldr	r2, [r3, #32]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	621a      	str	r2, [r3, #32]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_TIM_EnableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_EnableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	60da      	str	r2, [r3, #12]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <enable_timer3>:
 *  Created on: Mar 14, 2024
 *      Author: patry
 */
#include "main.h"

void enable_timer3(){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	LL_TIM_EnableDMAReq_CC1(TIM3);
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <enable_timer3+0x1c>)
 8001256:	f7ff ffea 	bl	800122e <LL_TIM_EnableDMAReq_CC1>
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 800125a:	2101      	movs	r1, #1
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <enable_timer3+0x1c>)
 800125e:	f7ff ffd5 	bl	800120c <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM3);
 8001262:	4802      	ldr	r0, [pc, #8]	; (800126c <enable_timer3+0x1c>)
 8001264:	f7ff ffc2 	bl	80011ec <LL_TIM_EnableCounter>

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40000400 	.word	0x40000400

08001270 <generate_signal>:


void generate_signal(uint8_t* data, uint32_t data_length){
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af02      	add	r7, sp, #8
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6, (uint32_t)data, (uint32_t)&TIM3->CCR1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	2310      	movs	r3, #16
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <generate_signal+0x3c>)
 8001282:	2105      	movs	r1, #5
 8001284:	480a      	ldr	r0, [pc, #40]	; (80012b0 <generate_signal+0x40>)
 8001286:	f7ff fea5 	bl	8000fd4 <LL_DMA_ConfigAddresses>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, data_length);
 800128a:	683a      	ldr	r2, [r7, #0]
 800128c:	2105      	movs	r1, #5
 800128e:	4808      	ldr	r0, [pc, #32]	; (80012b0 <generate_signal+0x40>)
 8001290:	f7ff fe7a 	bl	8000f88 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8001294:	2105      	movs	r1, #5
 8001296:	4806      	ldr	r0, [pc, #24]	; (80012b0 <generate_signal+0x40>)
 8001298:	f7ff ff42 	bl	8001120 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800129c:	2105      	movs	r1, #5
 800129e:	4804      	ldr	r0, [pc, #16]	; (80012b0 <generate_signal+0x40>)
 80012a0:	f7ff fd22 	bl	8000ce8 <LL_DMA_EnableChannel>
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40000434 	.word	0x40000434
 80012b0:	40020000 	.word	0x40020000

080012b4 <dma_init>:


void dma_init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f7ff fcfd 	bl	8000cb8 <LL_AHB1_GRP1_EnableClock>
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80012be:	f7ff fc71 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2200      	movs	r2, #0
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fcc1 	bl	8000c50 <NVIC_EncodePriority>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4619      	mov	r1, r3
 80012d2:	2010      	movs	r0, #16
 80012d4:	f7ff fc92 	bl	8000bfc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80012d8:	2010      	movs	r0, #16
 80012da:	f7ff fc71 	bl	8000bc0 <__NVIC_EnableIRQ>

  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_5);
 80012de:	2205      	movs	r2, #5
 80012e0:	2105      	movs	r1, #5
 80012e2:	4816      	ldr	r0, [pc, #88]	; (800133c <dma_init+0x88>)
 80012e4:	f7ff feb4 	bl	8001050 <LL_DMA_SetPeriphRequest>
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80012e8:	2210      	movs	r2, #16
 80012ea:	2105      	movs	r1, #5
 80012ec:	4813      	ldr	r0, [pc, #76]	; (800133c <dma_init+0x88>)
 80012ee:	f7ff fd3f 	bl	8000d70 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2105      	movs	r1, #5
 80012f6:	4811      	ldr	r0, [pc, #68]	; (800133c <dma_init+0x88>)
 80012f8:	f7ff fe20 	bl	8000f3c <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2105      	movs	r1, #5
 8001300:	480e      	ldr	r0, [pc, #56]	; (800133c <dma_init+0x88>)
 8001302:	f7ff fd5d 	bl	8000dc0 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001306:	2200      	movs	r2, #0
 8001308:	2105      	movs	r1, #5
 800130a:	480c      	ldr	r0, [pc, #48]	; (800133c <dma_init+0x88>)
 800130c:	f7ff fd7e 	bl	8000e0c <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	2105      	movs	r1, #5
 8001314:	4809      	ldr	r0, [pc, #36]	; (800133c <dma_init+0x88>)
 8001316:	f7ff fd9f 	bl	8000e58 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_HALFWORD);
 800131a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800131e:	2105      	movs	r1, #5
 8001320:	4806      	ldr	r0, [pc, #24]	; (800133c <dma_init+0x88>)
 8001322:	f7ff fdbf 	bl	8000ea4 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8001326:	2200      	movs	r2, #0
 8001328:	2105      	movs	r1, #5
 800132a:	4804      	ldr	r0, [pc, #16]	; (800133c <dma_init+0x88>)
 800132c:	f7ff fde0 	bl	8000ef0 <LL_DMA_SetMemorySize>

	LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_6);
 8001330:	2105      	movs	r1, #5
 8001332:	4802      	ldr	r0, [pc, #8]	; (800133c <dma_init+0x88>)
 8001334:	f7ff ff16 	bl	8001164 <LL_DMA_EnableIT_TE>

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40020000 	.word	0x40020000

08001340 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0

	if(LL_DMA_IsActiveFlag_TC6(DMA1) == 1)
 8001344:	480b      	ldr	r0, [pc, #44]	; (8001374 <DMA1_Channel6_IRQHandler+0x34>)
 8001346:	f7ff feb5 	bl	80010b4 <LL_DMA_IsActiveFlag_TC6>
 800134a:	4603      	mov	r3, r0
 800134c:	2b01      	cmp	r3, #1
 800134e:	d10b      	bne.n	8001368 <DMA1_Channel6_IRQHandler+0x28>
	{
		LL_DMA_ClearFlag_TC6(DMA1);
 8001350:	4808      	ldr	r0, [pc, #32]	; (8001374 <DMA1_Channel6_IRQHandler+0x34>)
 8001352:	f7ff fed7 	bl	8001104 <LL_DMA_ClearFlag_TC6>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001356:	2105      	movs	r1, #5
 8001358:	4806      	ldr	r0, [pc, #24]	; (8001374 <DMA1_Channel6_IRQHandler+0x34>)
 800135a:	f7ff fce7 	bl	8000d2c <LL_DMA_DisableChannel>
		LL_DMA_DisableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 800135e:	2105      	movs	r1, #5
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <DMA1_Channel6_IRQHandler+0x34>)
 8001362:	f7ff ff21 	bl	80011a8 <LL_DMA_DisableIT_TC>
	}
	else if(LL_DMA_IsActiveFlag_TE6(DMA1)){
		//nananana
	}

}
 8001366:	e002      	b.n	800136e <DMA1_Channel6_IRQHandler+0x2e>
	else if(LL_DMA_IsActiveFlag_TE6(DMA1)){
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <DMA1_Channel6_IRQHandler+0x34>)
 800136a:	f7ff feb7 	bl	80010dc <LL_DMA_IsActiveFlag_TE6>
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40020000 	.word	0x40020000

08001378 <__NVIC_SetPriorityGrouping>:
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001394:	4013      	ands	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013aa:	4a04      	ldr	r2, [pc, #16]	; (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	60d3      	str	r3, [r2, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_GetPriorityGrouping>:
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <__NVIC_GetPriorityGrouping+0x18>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	f003 0307 	and.w	r3, r3, #7
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_EnableIRQ>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db0b      	blt.n	8001406 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	4907      	ldr	r1, [pc, #28]	; (8001414 <__NVIC_EnableIRQ+0x38>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	2001      	movs	r0, #1
 80013fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e100 	.word	0xe000e100

08001418 <__NVIC_SetPriority>:
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	; (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <LL_RCC_MSI_Enable+0x1c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <LL_RCC_MSI_Enable+0x1c>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000

080014f4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <LL_RCC_MSI_IsReady+0x20>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b02      	cmp	r3, #2
 8001502:	d101      	bne.n	8001508 <LL_RCC_MSI_IsReady+0x14>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <LL_RCC_MSI_IsReady+0x16>
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40021000 	.word	0x40021000

08001518 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8001522:	f043 0308 	orr.w	r3, r3, #8
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000

08001538 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <LL_RCC_MSI_SetRange+0x24>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001548:	4904      	ldr	r1, [pc, #16]	; (800155c <LL_RCC_MSI_SetRange+0x24>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4313      	orrs	r3, r2
 800154e:	600b      	str	r3, [r1, #0]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40021000 	.word	0x40021000

08001560 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	4904      	ldr	r1, [pc, #16]	; (8001588 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8001576:	4313      	orrs	r3, r2
 8001578:	604b      	str	r3, [r1, #4]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000

0800158c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <LL_RCC_SetSysClkSource+0x24>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f023 0203 	bic.w	r2, r3, #3
 800159c:	4904      	ldr	r1, [pc, #16]	; (80015b0 <LL_RCC_SetSysClkSource+0x24>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40021000 	.word	0x40021000

080015b4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <LL_RCC_GetSysClkSource+0x18>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 030c 	and.w	r3, r3, #12
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000

080015d0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <LL_RCC_SetAHBPrescaler+0x24>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e0:	4904      	ldr	r1, [pc, #16]	; (80015f4 <LL_RCC_SetAHBPrescaler+0x24>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	40021000 	.word	0x40021000

080015f8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001608:	4904      	ldr	r1, [pc, #16]	; (800161c <LL_RCC_SetAPB1Prescaler+0x24>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4313      	orrs	r3, r2
 800160e:	608b      	str	r3, [r1, #8]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	40021000 	.word	0x40021000

08001620 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <LL_RCC_SetAPB2Prescaler+0x24>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001630:	4904      	ldr	r1, [pc, #16]	; (8001644 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4313      	orrs	r3, r2
 8001636:	608b      	str	r3, [r1, #8]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40021000 	.word	0x40021000

08001648 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <LL_RCC_PLL_Enable+0x1c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <LL_RCC_PLL_Enable+0x1c>)
 8001652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000

08001668 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <LL_RCC_PLL_IsReady+0x24>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001678:	d101      	bne.n	800167e <LL_RCC_PLL_IsReady+0x16>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <LL_RCC_PLL_IsReady+0x18>
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000

08001690 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	68f9      	ldr	r1, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	4311      	orrs	r1, r2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	0212      	lsls	r2, r2, #8
 80016b0:	4311      	orrs	r1, r2
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	4904      	ldr	r1, [pc, #16]	; (80016c8 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40021000 	.word	0x40021000
 80016cc:	f9ff808c 	.word	0xf9ff808c

080016d0 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80016da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000

080016f0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80016fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016fc:	4907      	ldr	r1, [pc, #28]	; (800171c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4313      	orrs	r3, r2
 8001702:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4013      	ands	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	40021000 	.word	0x40021000

08001720 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <LL_APB1_GRP1_EnableClock+0x2c>)
 800172a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800172c:	4907      	ldr	r1, [pc, #28]	; (800174c <LL_APB1_GRP1_EnableClock+0x2c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4313      	orrs	r3, r2
 8001732:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001736:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4013      	ands	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	40021000 	.word	0x40021000

08001750 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <LL_APB2_GRP1_EnableClock+0x2c>)
 800175a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800175c:	4907      	ldr	r1, [pc, #28]	; (800177c <LL_APB2_GRP1_EnableClock+0x2c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4313      	orrs	r3, r2
 8001762:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001766:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4013      	ands	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	40021000 	.word	0x40021000

08001780 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <LL_FLASH_SetLatency+0x24>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 0207 	bic.w	r2, r3, #7
 8001790:	4904      	ldr	r1, [pc, #16]	; (80017a4 <LL_FLASH_SetLatency+0x24>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4313      	orrs	r3, r2
 8001796:	600b      	str	r3, [r1, #0]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	40022000 	.word	0x40022000

080017a8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <LL_FLASH_GetLatency+0x18>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0307 	and.w	r3, r3, #7
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40022000 	.word	0x40022000

080017c4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80017d4:	4904      	ldr	r1, [pc, #16]	; (80017e8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4313      	orrs	r3, r2
 80017da:	600b      	str	r3, [r1, #0]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	40007000 	.word	0x40007000

080017ec <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fc:	d101      	bne.n	8001802 <LL_PWR_IsActiveFlag_VOS+0x16>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <LL_PWR_IsActiveFlag_VOS+0x18>
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40007000 	.word	0x40007000

08001814 <LL_TIM_EnableCounter>:
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f043 0201 	orr.w	r2, r3, #1
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	601a      	str	r2, [r3, #0]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <LL_TIM_SetCounterMode>:
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	601a      	str	r2, [r3, #0]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <LL_TIM_DisableARRPreload>:
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	601a      	str	r2, [r3, #0]
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <LL_TIM_SetAutoReload>:
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <LL_TIM_OC_DisableFast>:
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d028      	beq.n	80018fa <LL_TIM_OC_DisableFast+0x62>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d023      	beq.n	80018f6 <LL_TIM_OC_DisableFast+0x5e>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2b10      	cmp	r3, #16
 80018b2:	d01e      	beq.n	80018f2 <LL_TIM_OC_DisableFast+0x5a>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2b40      	cmp	r3, #64	; 0x40
 80018b8:	d019      	beq.n	80018ee <LL_TIM_OC_DisableFast+0x56>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018c0:	d013      	beq.n	80018ea <LL_TIM_OC_DisableFast+0x52>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c8:	d00d      	beq.n	80018e6 <LL_TIM_OC_DisableFast+0x4e>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018d0:	d007      	beq.n	80018e2 <LL_TIM_OC_DisableFast+0x4a>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d8:	d101      	bne.n	80018de <LL_TIM_OC_DisableFast+0x46>
 80018da:	2307      	movs	r3, #7
 80018dc:	e00e      	b.n	80018fc <LL_TIM_OC_DisableFast+0x64>
 80018de:	2308      	movs	r3, #8
 80018e0:	e00c      	b.n	80018fc <LL_TIM_OC_DisableFast+0x64>
 80018e2:	2306      	movs	r3, #6
 80018e4:	e00a      	b.n	80018fc <LL_TIM_OC_DisableFast+0x64>
 80018e6:	2305      	movs	r3, #5
 80018e8:	e008      	b.n	80018fc <LL_TIM_OC_DisableFast+0x64>
 80018ea:	2304      	movs	r3, #4
 80018ec:	e006      	b.n	80018fc <LL_TIM_OC_DisableFast+0x64>
 80018ee:	2303      	movs	r3, #3
 80018f0:	e004      	b.n	80018fc <LL_TIM_OC_DisableFast+0x64>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e002      	b.n	80018fc <LL_TIM_OC_DisableFast+0x64>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <LL_TIM_OC_DisableFast+0x64>
 80018fa:	2300      	movs	r3, #0
 80018fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3318      	adds	r3, #24
 8001902:	4619      	mov	r1, r3
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <LL_TIM_OC_DisableFast+0x9c>)
 8001908:	5cd3      	ldrb	r3, [r2, r3]
 800190a:	440b      	add	r3, r1
 800190c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	4908      	ldr	r1, [pc, #32]	; (8001938 <LL_TIM_OC_DisableFast+0xa0>)
 8001916:	5ccb      	ldrb	r3, [r1, r3]
 8001918:	4619      	mov	r1, r3
 800191a:	2304      	movs	r3, #4
 800191c:	408b      	lsls	r3, r1
 800191e:	43db      	mvns	r3, r3
 8001920:	401a      	ands	r2, r3
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	601a      	str	r2, [r3, #0]
}
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	08004618 	.word	0x08004618
 8001938:	08004624 	.word	0x08004624

0800193c <LL_TIM_OC_EnablePreload>:
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d028      	beq.n	800199e <LL_TIM_OC_EnablePreload+0x62>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	2b04      	cmp	r3, #4
 8001950:	d023      	beq.n	800199a <LL_TIM_OC_EnablePreload+0x5e>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b10      	cmp	r3, #16
 8001956:	d01e      	beq.n	8001996 <LL_TIM_OC_EnablePreload+0x5a>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b40      	cmp	r3, #64	; 0x40
 800195c:	d019      	beq.n	8001992 <LL_TIM_OC_EnablePreload+0x56>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001964:	d013      	beq.n	800198e <LL_TIM_OC_EnablePreload+0x52>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196c:	d00d      	beq.n	800198a <LL_TIM_OC_EnablePreload+0x4e>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001974:	d007      	beq.n	8001986 <LL_TIM_OC_EnablePreload+0x4a>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197c:	d101      	bne.n	8001982 <LL_TIM_OC_EnablePreload+0x46>
 800197e:	2307      	movs	r3, #7
 8001980:	e00e      	b.n	80019a0 <LL_TIM_OC_EnablePreload+0x64>
 8001982:	2308      	movs	r3, #8
 8001984:	e00c      	b.n	80019a0 <LL_TIM_OC_EnablePreload+0x64>
 8001986:	2306      	movs	r3, #6
 8001988:	e00a      	b.n	80019a0 <LL_TIM_OC_EnablePreload+0x64>
 800198a:	2305      	movs	r3, #5
 800198c:	e008      	b.n	80019a0 <LL_TIM_OC_EnablePreload+0x64>
 800198e:	2304      	movs	r3, #4
 8001990:	e006      	b.n	80019a0 <LL_TIM_OC_EnablePreload+0x64>
 8001992:	2303      	movs	r3, #3
 8001994:	e004      	b.n	80019a0 <LL_TIM_OC_EnablePreload+0x64>
 8001996:	2302      	movs	r3, #2
 8001998:	e002      	b.n	80019a0 <LL_TIM_OC_EnablePreload+0x64>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <LL_TIM_OC_EnablePreload+0x64>
 800199e:	2300      	movs	r3, #0
 80019a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3318      	adds	r3, #24
 80019a6:	4619      	mov	r1, r3
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <LL_TIM_OC_EnablePreload+0x98>)
 80019ac:	5cd3      	ldrb	r3, [r2, r3]
 80019ae:	440b      	add	r3, r1
 80019b0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	4907      	ldr	r1, [pc, #28]	; (80019d8 <LL_TIM_OC_EnablePreload+0x9c>)
 80019ba:	5ccb      	ldrb	r3, [r1, r3]
 80019bc:	4619      	mov	r1, r3
 80019be:	2308      	movs	r3, #8
 80019c0:	408b      	lsls	r3, r1
 80019c2:	431a      	orrs	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	601a      	str	r2, [r3, #0]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	08004618 	.word	0x08004618
 80019d8:	08004624 	.word	0x08004624

080019dc <LL_TIM_DisableExternalClock>:
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	609a      	str	r2, [r3, #8]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_TIM_SetClockSource>:
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001a0e:	f023 0307 	bic.w	r3, r3, #7
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	609a      	str	r2, [r3, #8]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <LL_TIM_SetTriggerOutput>:
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	605a      	str	r2, [r3, #4]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_TIM_DisableMasterSlaveMode>:
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_TIM_ConfigETR>:
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f423 423f 	bic.w	r2, r3, #48896	; 0xbf00
 8001a82:	68b9      	ldr	r1, [r7, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4319      	orrs	r1, r3
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	430b      	orrs	r3, r1
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	609a      	str	r2, [r3, #8]
}
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <LL_TIM_SetOCRefClearInputSource>:
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f023 0208 	bic.w	r2, r3, #8
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_TIM_ClearFlag_UPDATE>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f06f 0201 	mvn.w	r2, #1
 8001ad2:	611a      	str	r2, [r3, #16]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d101      	bne.n	8001af8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_TIM_EnableIT_UPDATE>:
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f043 0201 	orr.w	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	60da      	str	r2, [r3, #12]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f043 0201 	orr.w	r2, r3, #1
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	615a      	str	r2, [r3, #20]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b085      	sub	sp, #20
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	4013      	ands	r3, r2
 8001b78:	041a      	lsls	r2, r3, #16
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	43d9      	mvns	r1, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	400b      	ands	r3, r1
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	619a      	str	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f7ff fdd9 	bl	8001750 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001b9e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001ba2:	f7ff fdbd 	bl	8001720 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba6:	2003      	movs	r0, #3
 8001ba8:	f7ff fbe6 	bl	8001378 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001bac:	f7ff fc08 	bl	80013c0 <__NVIC_GetPriorityGrouping>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	210f      	movs	r1, #15
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fc58 	bl	800146c <NVIC_EncodePriority>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f7ff fc28 	bl	8001418 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bc8:	f000 f81c 	bl	8001c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bcc:	f000 f95e 	bl	8001e8c <MX_GPIO_Init>
  MX_TIM6_Init();
 8001bd0:	f000 f8e6 	bl	8001da0 <MX_TIM6_Init>
  MX_TIM3_Init();
 8001bd4:	f000 f868 	bl	8001ca8 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001bd8:	f000 f916 	bl	8001e08 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  	  time = START_TIME;
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <main+0x6c>)
 8001bde:	220f      	movs	r2, #15
 8001be0:	601a      	str	r2, [r3, #0]
  	  dma_init();
 8001be2:	f7ff fb67 	bl	80012b4 <dma_init>
  	  enable_timer3();
 8001be6:	f7ff fb33 	bl	8001250 <enable_timer3>
  	  TM1637_gpio_init();
 8001bea:	f000 fda9 	bl	8002740 <TM1637_gpio_init>
  	  TM1637_Init();
 8001bee:	f000 fca3 	bl	8002538 <TM1637_Init>
  	  TM1637_SetBrightness(8);
 8001bf2:	2008      	movs	r0, #8
 8001bf4:	f000 fd16 	bl	8002624 <TM1637_SetBrightness>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	LedTest(2);
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f000 faf7 	bl	80021ec <LedTest>
 8001bfe:	e7fb      	b.n	8001bf8 <main+0x64>
 8001c00:	200002a8 	.word	0x200002a8

08001c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7ff fdb9 	bl	8001780 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8001c0e:	bf00      	nop
 8001c10:	f7ff fdca 	bl	80017a8 <LL_FLASH_GetLatency>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d1fa      	bne.n	8001c10 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001c1a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c1e:	f7ff fdd1 	bl	80017c4 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8001c22:	bf00      	nop
 8001c24:	f7ff fde2 	bl	80017ec <LL_PWR_IsActiveFlag_VOS>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1fa      	bne.n	8001c24 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 8001c2e:	f7ff fc51 	bl	80014d4 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001c32:	bf00      	nop
 8001c34:	f7ff fc5e 	bl	80014f4 <LL_RCC_MSI_IsReady>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d1fa      	bne.n	8001c34 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8001c3e:	f7ff fc6b 	bl	8001518 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8001c42:	2060      	movs	r0, #96	; 0x60
 8001c44:	f7ff fc78 	bl	8001538 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff fc89 	bl	8001560 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 16, LL_RCC_PLLR_DIV_2);
 8001c4e:	2300      	movs	r3, #0
 8001c50:	2210      	movs	r2, #16
 8001c52:	2100      	movs	r1, #0
 8001c54:	2001      	movs	r0, #1
 8001c56:	f7ff fd1b 	bl	8001690 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001c5a:	f7ff fd39 	bl	80016d0 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001c5e:	f7ff fcf3 	bl	8001648 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001c62:	bf00      	nop
 8001c64:	f7ff fd00 	bl	8001668 <LL_RCC_PLL_IsReady>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d1fa      	bne.n	8001c64 <SystemClock_Config+0x60>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001c6e:	2003      	movs	r0, #3
 8001c70:	f7ff fc8c 	bl	800158c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001c74:	bf00      	nop
 8001c76:	f7ff fc9d 	bl	80015b4 <LL_RCC_GetSysClkSource>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b0c      	cmp	r3, #12
 8001c7e:	d1fa      	bne.n	8001c76 <SystemClock_Config+0x72>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001c80:	2000      	movs	r0, #0
 8001c82:	f7ff fca5 	bl	80015d0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7ff fcb6 	bl	80015f8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001c8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c90:	f7ff fcc6 	bl	8001620 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(32000000);
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <SystemClock_Config+0xa0>)
 8001c96:	f001 fbc5 	bl	8003424 <LL_Init1msTick>

  LL_SetSystemCoreClock(32000000);
 8001c9a:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <SystemClock_Config+0xa0>)
 8001c9c:	f001 fbd0 	bl	8003440 <LL_SetSystemCoreClock>
}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	01e84800 	.word	0x01e84800

08001ca8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b094      	sub	sp, #80	; 0x50
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001cae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001cbe:	f107 031c 	add.w	r3, r7, #28
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f001 fbca 	bl	8003460 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	611a      	str	r2, [r3, #16]
 8001cda:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001cdc:	2002      	movs	r0, #2
 8001cde:	f7ff fd1f 	bl	8001720 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 32-LL_TIM_IC_FILTER_FDIV1_N2;
 8001cea:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <MX_TIM3_Init+0xf0>)
 8001cec:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001cf2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4828      	ldr	r0, [pc, #160]	; (8001d9c <MX_TIM3_Init+0xf4>)
 8001cfa:	f000 ffc9 	bl	8002c90 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001cfe:	4827      	ldr	r0, [pc, #156]	; (8001d9c <MX_TIM3_Init+0xf4>)
 8001d00:	f7ff fdab 	bl	800185a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001d04:	2100      	movs	r1, #0
 8001d06:	4825      	ldr	r0, [pc, #148]	; (8001d9c <MX_TIM3_Init+0xf4>)
 8001d08:	f7ff fe78 	bl	80019fc <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4823      	ldr	r0, [pc, #140]	; (8001d9c <MX_TIM3_Init+0xf4>)
 8001d10:	f7ff fe14 	bl	800193c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001d14:	2360      	movs	r3, #96	; 0x60
 8001d16:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001d28:	f107 031c 	add.w	r3, r7, #28
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	2101      	movs	r1, #1
 8001d30:	481a      	ldr	r0, [pc, #104]	; (8001d9c <MX_TIM3_Init+0xf4>)
 8001d32:	f001 f841 	bl	8002db8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001d36:	2101      	movs	r1, #1
 8001d38:	4818      	ldr	r0, [pc, #96]	; (8001d9c <MX_TIM3_Init+0xf4>)
 8001d3a:	f7ff fdad 	bl	8001898 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM3, LL_TIM_OCREF_CLR_INT_NC);
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4816      	ldr	r0, [pc, #88]	; (8001d9c <MX_TIM3_Init+0xf4>)
 8001d42:	f7ff feac 	bl	8001a9e <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM3);
 8001d46:	4815      	ldr	r0, [pc, #84]	; (8001d9c <MX_TIM3_Init+0xf4>)
 8001d48:	f7ff fe48 	bl	80019dc <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM3, LL_TIM_ETR_POLARITY_NONINVERTED, LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2100      	movs	r1, #0
 8001d52:	4812      	ldr	r0, [pc, #72]	; (8001d9c <MX_TIM3_Init+0xf4>)
 8001d54:	f7ff fe8a 	bl	8001a6c <LL_TIM_ConfigETR>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4810      	ldr	r0, [pc, #64]	; (8001d9c <MX_TIM3_Init+0xf4>)
 8001d5c:	f7ff fe63 	bl	8001a26 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001d60:	480e      	ldr	r0, [pc, #56]	; (8001d9c <MX_TIM3_Init+0xf4>)
 8001d62:	f7ff fe73 	bl	8001a4c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001d66:	2001      	movs	r0, #1
 8001d68:	f7ff fcc2 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PA6   ------> TIM3_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001d6c:	2340      	movs	r3, #64	; 0x40
 8001d6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d70:	2302      	movs	r3, #2
 8001d72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001d80:	2302      	movs	r3, #2
 8001d82:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	4619      	mov	r1, r3
 8001d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8c:	f000 fe82 	bl	8002a94 <LL_GPIO_Init>

}
 8001d90:	bf00      	nop
 8001d92:	3750      	adds	r7, #80	; 0x50
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	fff00020 	.word	0xfff00020
 8001d9c:	40000400 	.word	0x40000400

08001da0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8001db4:	2010      	movs	r0, #16
 8001db6:	f7ff fcb3 	bl	8001720 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 31;
 8001dba:	231f      	movs	r3, #31
 8001dbc:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8001dc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc6:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480d      	ldr	r0, [pc, #52]	; (8001e04 <MX_TIM6_Init+0x64>)
 8001dce:	f000 ff5f 	bl	8002c90 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 8001dd2:	480c      	ldr	r0, [pc, #48]	; (8001e04 <MX_TIM6_Init+0x64>)
 8001dd4:	f7ff fd41 	bl	800185a <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8001dd8:	2100      	movs	r1, #0
 8001dda:	480a      	ldr	r0, [pc, #40]	; (8001e04 <MX_TIM6_Init+0x64>)
 8001ddc:	f7ff fe23 	bl	8001a26 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8001de0:	4808      	ldr	r0, [pc, #32]	; (8001e04 <MX_TIM6_Init+0x64>)
 8001de2:	f7ff fe33 	bl	8001a4c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */
 // LL_TIM_SetClockSource(TIM6, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_SetCounterMode(TIM6, LL_TIM_COUNTERMODE_UP);
 8001de6:	2100      	movs	r1, #0
 8001de8:	4806      	ldr	r0, [pc, #24]	; (8001e04 <MX_TIM6_Init+0x64>)
 8001dea:	f7ff fd23 	bl	8001834 <LL_TIM_SetCounterMode>
  LL_TIM_ClearFlag_UPDATE(TIM6);
 8001dee:	4805      	ldr	r0, [pc, #20]	; (8001e04 <MX_TIM6_Init+0x64>)
 8001df0:	f7ff fe68 	bl	8001ac4 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 8001df4:	4803      	ldr	r0, [pc, #12]	; (8001e04 <MX_TIM6_Init+0x64>)
 8001df6:	f7ff fd0d 	bl	8001814 <LL_TIM_EnableCounter>

  /* USER CODE END TIM6_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40001000 	.word	0x40001000

08001e08 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8001e1c:	2020      	movs	r0, #32
 8001e1e:	f7ff fc7f 	bl	8001720 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 32000-LL_TIM_IC_FILTER_FDIV1_N2;
 8001e22:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8001e26:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <MX_TIM7_Init+0x7c>)
 8001e2e:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	4619      	mov	r1, r3
 8001e34:	4814      	ldr	r0, [pc, #80]	; (8001e88 <MX_TIM7_Init+0x80>)
 8001e36:	f000 ff2b 	bl	8002c90 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 8001e3a:	4813      	ldr	r0, [pc, #76]	; (8001e88 <MX_TIM7_Init+0x80>)
 8001e3c:	f7ff fd0d 	bl	800185a <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8001e40:	2100      	movs	r1, #0
 8001e42:	4811      	ldr	r0, [pc, #68]	; (8001e88 <MX_TIM7_Init+0x80>)
 8001e44:	f7ff fdef 	bl	8001a26 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8001e48:	480f      	ldr	r0, [pc, #60]	; (8001e88 <MX_TIM7_Init+0x80>)
 8001e4a:	f7ff fdff 	bl	8001a4c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  LL_TIM_SetCounterMode(TIM7, LL_TIM_COUNTERMODE_UP);
 8001e4e:	2100      	movs	r1, #0
 8001e50:	480d      	ldr	r0, [pc, #52]	; (8001e88 <MX_TIM7_Init+0x80>)
 8001e52:	f7ff fcef 	bl	8001834 <LL_TIM_SetCounterMode>
  LL_TIM_GenerateEvent_UPDATE(TIM7);
 8001e56:	480c      	ldr	r0, [pc, #48]	; (8001e88 <MX_TIM7_Init+0x80>)
 8001e58:	f7ff fe65 	bl	8001b26 <LL_TIM_GenerateEvent_UPDATE>
  LL_TIM_ClearFlag_UPDATE(TIM7);
 8001e5c:	480a      	ldr	r0, [pc, #40]	; (8001e88 <MX_TIM7_Init+0x80>)
 8001e5e:	f7ff fe31 	bl	8001ac4 <LL_TIM_ClearFlag_UPDATE>
  NVIC_SetPriority(TIM7_IRQn, 0);
 8001e62:	2100      	movs	r1, #0
 8001e64:	2037      	movs	r0, #55	; 0x37
 8001e66:	f7ff fad7 	bl	8001418 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 8001e6a:	2037      	movs	r0, #55	; 0x37
 8001e6c:	f7ff fab6 	bl	80013dc <__NVIC_EnableIRQ>
  LL_TIM_EnableIT_UPDATE(TIM7);
 8001e70:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_TIM7_Init+0x80>)
 8001e72:	f7ff fe48 	bl	8001b06 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM7);
 8001e76:	4804      	ldr	r0, [pc, #16]	; (8001e88 <MX_TIM7_Init+0x80>)
 8001e78:	f7ff fccc 	bl	8001814 <LL_TIM_EnableCounter>
  /* USER CODE END TIM7_Init 2 */

}
 8001e7c:	bf00      	nop
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	fff003e8 	.word	0xfff003e8
 8001e88:	40001400 	.word	0x40001400

08001e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e92:	463b      	mov	r3, r7
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
 8001ea0:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8001ea2:	2080      	movs	r0, #128	; 0x80
 8001ea4:	f7ff fc24 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f7ff fc21 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001eae:	2004      	movs	r0, #4
 8001eb0:	f7ff fc1e 	bl	80016f0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(test_GPIO_Port, test_Pin);
 8001eb4:	2120      	movs	r1, #32
 8001eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eba:	f7ff fe44 	bl	8001b46 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Led_GPIO_Port, Led_Pin);
 8001ebe:	2180      	movs	r1, #128	; 0x80
 8001ec0:	4812      	ldr	r0, [pc, #72]	; (8001f0c <MX_GPIO_Init+0x80>)
 8001ec2:	f7ff fe40 	bl	8001b46 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = test_Pin;
 8001ec6:	2320      	movs	r3, #32
 8001ec8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(test_GPIO_Port, &GPIO_InitStruct);
 8001eda:	463b      	mov	r3, r7
 8001edc:	4619      	mov	r1, r3
 8001ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee2:	f000 fdd7 	bl	8002a94 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Led_Pin;
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001eea:	2301      	movs	r3, #1
 8001eec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8001efa:	463b      	mov	r3, r7
 8001efc:	4619      	mov	r1, r3
 8001efe:	4803      	ldr	r0, [pc, #12]	; (8001f0c <MX_GPIO_Init+0x80>)
 8001f00:	f000 fdc8 	bl	8002a94 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f04:	bf00      	nop
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	48000800 	.word	0x48000800

08001f10 <Damian_Marudzi>:

/* USER CODE BEGIN 4 */

void Damian_Marudzi(uint32_t czas)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	LL_TIM_GenerateEvent_UPDATE(TIM6);
 8001f18:	480a      	ldr	r0, [pc, #40]	; (8001f44 <Damian_Marudzi+0x34>)
 8001f1a:	f7ff fe04 	bl	8001b26 <LL_TIM_GenerateEvent_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIM6);
 8001f1e:	4809      	ldr	r0, [pc, #36]	; (8001f44 <Damian_Marudzi+0x34>)
 8001f20:	f7ff fdd0 	bl	8001ac4 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_SetAutoReload(TIM6, czas);
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	4807      	ldr	r0, [pc, #28]	; (8001f44 <Damian_Marudzi+0x34>)
 8001f28:	f7ff fca7 	bl	800187a <LL_TIM_SetAutoReload>
	while(LL_TIM_IsActiveFlag_UPDATE(TIM6) == 0);
 8001f2c:	bf00      	nop
 8001f2e:	4805      	ldr	r0, [pc, #20]	; (8001f44 <Damian_Marudzi+0x34>)
 8001f30:	f7ff fdd6 	bl	8001ae0 <LL_TIM_IsActiveFlag_UPDATE>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f9      	beq.n	8001f2e <Damian_Marudzi+0x1e>
}
 8001f3a:	bf00      	nop
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40001000 	.word	0x40001000

08001f48 <WS2812_Send>:
void WS2812_Send (void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
	uint32_t color;
	Set_Brightness(2);
 8001f52:	2002      	movs	r0, #2
 8001f54:	f000 f86c 	bl	8002030 <Set_Brightness>

	for (int i=0; i<50; i++)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	e00a      	b.n	8001f74 <WS2812_Send+0x2c>
	{
		pwmData[indx] = 0;
 8001f5e:	4a32      	ldr	r2, [pc, #200]	; (8002028 <WS2812_Send+0xe0>)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2100      	movs	r1, #0
 8001f64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	3301      	adds	r3, #1
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	2b31      	cmp	r3, #49	; 0x31
 8001f78:	ddf1      	ble.n	8001f5e <WS2812_Send+0x16>
	}

	for (int i= 0; i<MAX_LED; i++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	e036      	b.n	8001fee <WS2812_Send+0xa6>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8001f80:	4a2a      	ldr	r2, [pc, #168]	; (800202c <WS2812_Send+0xe4>)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	785b      	ldrb	r3, [r3, #1]
 8001f8a:	041a      	lsls	r2, r3, #16
 8001f8c:	4927      	ldr	r1, [pc, #156]	; (800202c <WS2812_Send+0xe4>)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	789b      	ldrb	r3, [r3, #2]
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	4924      	ldr	r1, [pc, #144]	; (800202c <WS2812_Send+0xe4>)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	78db      	ldrb	r3, [r3, #3]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	603b      	str	r3, [r7, #0]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8001fa8:	2317      	movs	r3, #23
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	e019      	b.n	8001fe2 <WS2812_Send+0x9a>
		{
			if (color&(1<<i))
 8001fae:	2201      	movs	r2, #1
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <WS2812_Send+0x84>
			{
				pwmData[indx] = 27;  // 2/3 of 90
 8001fc0:	4a19      	ldr	r2, [pc, #100]	; (8002028 <WS2812_Send+0xe0>)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	211b      	movs	r1, #27
 8001fc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001fca:	e004      	b.n	8001fd6 <WS2812_Send+0x8e>
			}

			else pwmData[indx] = 13;  // 1/3 of 90
 8001fcc:	4a16      	ldr	r2, [pc, #88]	; (8002028 <WS2812_Send+0xe0>)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	210d      	movs	r1, #13
 8001fd2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	dae2      	bge.n	8001fae <WS2812_Send+0x66>
	for (int i= 0; i<MAX_LED; i++)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	3301      	adds	r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b07      	cmp	r3, #7
 8001ff2:	ddc5      	ble.n	8001f80 <WS2812_Send+0x38>
		}

	}

	for (int i=0; i<50; i++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	e00a      	b.n	8002010 <WS2812_Send+0xc8>
	{
		pwmData[indx] = 0;
 8001ffa:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <WS2812_Send+0xe0>)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2100      	movs	r1, #0
 8002000:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	3301      	adds	r3, #1
 8002008:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3301      	adds	r3, #1
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b31      	cmp	r3, #49	; 0x31
 8002014:	ddf1      	ble.n	8001ffa <WS2812_Send+0xb2>
	}

	generate_signal(pwmData,sizeof(pwmData));
 8002016:	f44f 7112 	mov.w	r1, #584	; 0x248
 800201a:	4803      	ldr	r0, [pc, #12]	; (8002028 <WS2812_Send+0xe0>)
 800201c:	f7ff f928 	bl	8001270 <generate_signal>
}
 8002020:	bf00      	nop
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000060 	.word	0x20000060
 800202c:	20000040 	.word	0x20000040

08002030 <Set_Brightness>:
void Set_Brightness (int brightness)  // 0-45
{
 8002030:	b5b0      	push	{r4, r5, r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b2d      	cmp	r3, #45	; 0x2d
 800203c:	dd01      	ble.n	8002042 <Set_Brightness+0x12>
 800203e:	232d      	movs	r3, #45	; 0x2d
 8002040:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	e060      	b.n	800210a <Set_Brightness+0xda>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8002048:	4a37      	ldr	r2, [pc, #220]	; (8002128 <Set_Brightness+0xf8>)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8002050:	4a36      	ldr	r2, [pc, #216]	; (800212c <Set_Brightness+0xfc>)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8002058:	2301      	movs	r3, #1
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	e04f      	b.n	80020fe <Set_Brightness+0xce>
		{
			float angle = 90-brightness;  // in degrees
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8002064:	ee07 3a90 	vmov	s15, r3
 8002068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800206c:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f7fe fa0d 	bl	8000490 <__aeabi_f2d>
 8002076:	a32a      	add	r3, pc, #168	; (adr r3, 8002120 <Set_Brightness+0xf0>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	f7fe fa60 	bl	8000540 <__aeabi_dmul>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	4b28      	ldr	r3, [pc, #160]	; (8002130 <Set_Brightness+0x100>)
 800208e:	f7fe fb81 	bl	8000794 <__aeabi_ddiv>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f7fe fd33 	bl	8000b04 <__aeabi_d2f>
 800209e:	4603      	mov	r3, r0
 80020a0:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 80020a2:	4a21      	ldr	r2, [pc, #132]	; (8002128 <Set_Brightness+0xf8>)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	441a      	add	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4413      	add	r3, r2
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe f9db 	bl	800046c <__aeabi_i2d>
 80020b6:	4604      	mov	r4, r0
 80020b8:	460d      	mov	r5, r1
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f7fe f9e8 	bl	8000490 <__aeabi_f2d>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	ec43 2b10 	vmov	d0, r2, r3
 80020c8:	f001 f9f6 	bl	80034b8 <tan>
 80020cc:	ec53 2b10 	vmov	r2, r3, d0
 80020d0:	4620      	mov	r0, r4
 80020d2:	4629      	mov	r1, r5
 80020d4:	f7fe fb5e 	bl	8000794 <__aeabi_ddiv>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f7fe fcf0 	bl	8000ac4 <__aeabi_d2uiz>
 80020e4:	4603      	mov	r3, r0
 80020e6:	b2d9      	uxtb	r1, r3
 80020e8:	4a10      	ldr	r2, [pc, #64]	; (800212c <Set_Brightness+0xfc>)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	441a      	add	r2, r3
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4413      	add	r3, r2
 80020f4:	460a      	mov	r2, r1
 80020f6:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	3301      	adds	r3, #1
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b03      	cmp	r3, #3
 8002102:	ddac      	ble.n	800205e <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	3301      	adds	r3, #1
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b07      	cmp	r3, #7
 800210e:	dd9b      	ble.n	8002048 <Set_Brightness+0x18>
		}
	}

#endif

}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bdb0      	pop	{r4, r5, r7, pc}
 800211a:	bf00      	nop
 800211c:	f3af 8000 	nop.w
 8002120:	53c8d4f1 	.word	0x53c8d4f1
 8002124:	400921fb 	.word	0x400921fb
 8002128:	20000020 	.word	0x20000020
 800212c:	20000040 	.word	0x20000040
 8002130:	40668000 	.word	0x40668000

08002134 <Set_LED>:
void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	b2d9      	uxtb	r1, r3
 8002146:	4a11      	ldr	r2, [pc, #68]	; (800218c <Set_LED+0x58>)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	b2d9      	uxtb	r1, r3
 8002152:	4a0e      	ldr	r2, [pc, #56]	; (800218c <Set_LED+0x58>)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	460a      	mov	r2, r1
 800215c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	b2d9      	uxtb	r1, r3
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <Set_LED+0x58>)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	460a      	mov	r2, r1
 800216c:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b2d9      	uxtb	r1, r3
 8002172:	4a06      	ldr	r2, [pc, #24]	; (800218c <Set_LED+0x58>)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	460a      	mov	r2, r1
 800217c:	70da      	strb	r2, [r3, #3]
}
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000020 	.word	0x20000020

08002190 <Reset_LED>:
void Reset_LED (void)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
	for (int i=0; i<MAX_LED; i++)
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	e01a      	b.n	80021d2 <Reset_LED+0x42>
	{
		LED_Data[i][0] = i;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	b2d9      	uxtb	r1, r3
 80021a0:	4a11      	ldr	r2, [pc, #68]	; (80021e8 <Reset_LED+0x58>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[i][1] = 0;
 80021a8:	4a0f      	ldr	r2, [pc, #60]	; (80021e8 <Reset_LED+0x58>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	2200      	movs	r2, #0
 80021b2:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = 0;
 80021b4:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <Reset_LED+0x58>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	2200      	movs	r2, #0
 80021be:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = 0;
 80021c0:	4a09      	ldr	r2, [pc, #36]	; (80021e8 <Reset_LED+0x58>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	2200      	movs	r2, #0
 80021ca:	70da      	strb	r2, [r3, #3]
	for (int i=0; i<MAX_LED; i++)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3301      	adds	r3, #1
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b07      	cmp	r3, #7
 80021d6:	dde1      	ble.n	800219c <Reset_LED+0xc>
	}
}
 80021d8:	bf00      	nop
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000020 	.word	0x20000020

080021ec <LedTest>:
void LedTest(int mode)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

	switch(mode)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d003      	beq.n	8002202 <LedTest+0x16>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d033      	beq.n	8002268 <LedTest+0x7c>
				WS2812_Send();
				Damian_Marudzi(50000000);
			}
		break;
	}
}
 8002200:	e075      	b.n	80022ee <LedTest+0x102>
			Set_LED(0, 255, 0, 0);
 8002202:	2300      	movs	r3, #0
 8002204:	2200      	movs	r2, #0
 8002206:	21ff      	movs	r1, #255	; 0xff
 8002208:	2000      	movs	r0, #0
 800220a:	f7ff ff93 	bl	8002134 <Set_LED>
			Set_LED(1, 0, 255, 0);
 800220e:	2300      	movs	r3, #0
 8002210:	22ff      	movs	r2, #255	; 0xff
 8002212:	2100      	movs	r1, #0
 8002214:	2001      	movs	r0, #1
 8002216:	f7ff ff8d 	bl	8002134 <Set_LED>
			Set_LED(2, 0, 0, 255);
 800221a:	23ff      	movs	r3, #255	; 0xff
 800221c:	2200      	movs	r2, #0
 800221e:	2100      	movs	r1, #0
 8002220:	2002      	movs	r0, #2
 8002222:	f7ff ff87 	bl	8002134 <Set_LED>
			Set_LED(3, 255, 0, 0);
 8002226:	2300      	movs	r3, #0
 8002228:	2200      	movs	r2, #0
 800222a:	21ff      	movs	r1, #255	; 0xff
 800222c:	2003      	movs	r0, #3
 800222e:	f7ff ff81 	bl	8002134 <Set_LED>
			Set_LED(4, 0, 255, 0);
 8002232:	2300      	movs	r3, #0
 8002234:	22ff      	movs	r2, #255	; 0xff
 8002236:	2100      	movs	r1, #0
 8002238:	2004      	movs	r0, #4
 800223a:	f7ff ff7b 	bl	8002134 <Set_LED>
			Set_LED(5, 0, 0, 255);
 800223e:	23ff      	movs	r3, #255	; 0xff
 8002240:	2200      	movs	r2, #0
 8002242:	2100      	movs	r1, #0
 8002244:	2005      	movs	r0, #5
 8002246:	f7ff ff75 	bl	8002134 <Set_LED>
			Set_LED(6, 255, 0, 191);
 800224a:	23bf      	movs	r3, #191	; 0xbf
 800224c:	2200      	movs	r2, #0
 800224e:	21ff      	movs	r1, #255	; 0xff
 8002250:	2006      	movs	r0, #6
 8002252:	f7ff ff6f 	bl	8002134 <Set_LED>
			Set_LED(7, 255, 255, 0);
 8002256:	2300      	movs	r3, #0
 8002258:	22ff      	movs	r2, #255	; 0xff
 800225a:	21ff      	movs	r1, #255	; 0xff
 800225c:	2007      	movs	r0, #7
 800225e:	f7ff ff69 	bl	8002134 <Set_LED>
			WS2812_Send();
 8002262:	f7ff fe71 	bl	8001f48 <WS2812_Send>
		break;
 8002266:	e042      	b.n	80022ee <LedTest+0x102>
			Reset_LED();
 8002268:	f7ff ff92 	bl	8002190 <Reset_LED>
			for(int i=0; i< MAX_LED; i++)
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	e039      	b.n	80022e6 <LedTest+0xfa>
				if(i!=0)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d006      	beq.n	8002286 <LedTest+0x9a>
					Set_LED(i-1, 0, 0, 0);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1e58      	subs	r0, r3, #1
 800227c:	2300      	movs	r3, #0
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	f7ff ff57 	bl	8002134 <Set_LED>
				switch(i%3)
 8002286:	68f9      	ldr	r1, [r7, #12]
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <LedTest+0x10c>)
 800228a:	fb83 3201 	smull	r3, r2, r3, r1
 800228e:	17cb      	asrs	r3, r1, #31
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	461a      	mov	r2, r3
 8002294:	0052      	lsls	r2, r2, #1
 8002296:	441a      	add	r2, r3
 8002298:	1a8b      	subs	r3, r1, r2
 800229a:	2b02      	cmp	r3, #2
 800229c:	d014      	beq.n	80022c8 <LedTest+0xdc>
 800229e:	2b02      	cmp	r3, #2
 80022a0:	dc19      	bgt.n	80022d6 <LedTest+0xea>
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <LedTest+0xc0>
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d007      	beq.n	80022ba <LedTest+0xce>
 80022aa:	e014      	b.n	80022d6 <LedTest+0xea>
						Set_LED(i, 255, 0, 0);
 80022ac:	2300      	movs	r3, #0
 80022ae:	2200      	movs	r2, #0
 80022b0:	21ff      	movs	r1, #255	; 0xff
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f7ff ff3e 	bl	8002134 <Set_LED>
						break;
 80022b8:	e00d      	b.n	80022d6 <LedTest+0xea>
						Set_LED(i, 0, 255, 0);
 80022ba:	2300      	movs	r3, #0
 80022bc:	22ff      	movs	r2, #255	; 0xff
 80022be:	2100      	movs	r1, #0
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff ff37 	bl	8002134 <Set_LED>
					break;
 80022c6:	e006      	b.n	80022d6 <LedTest+0xea>
						Set_LED(i, 0, 0, 255);
 80022c8:	23ff      	movs	r3, #255	; 0xff
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f7ff ff30 	bl	8002134 <Set_LED>
					break;
 80022d4:	bf00      	nop
				WS2812_Send();
 80022d6:	f7ff fe37 	bl	8001f48 <WS2812_Send>
				Damian_Marudzi(50000000);
 80022da:	4808      	ldr	r0, [pc, #32]	; (80022fc <LedTest+0x110>)
 80022dc:	f7ff fe18 	bl	8001f10 <Damian_Marudzi>
			for(int i=0; i< MAX_LED; i++)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3301      	adds	r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b07      	cmp	r3, #7
 80022ea:	ddc2      	ble.n	8002272 <LedTest+0x86>
		break;
 80022ec:	bf00      	nop
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	55555556 	.word	0x55555556
 80022fc:	02faf080 	.word	0x02faf080

08002300 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7) == 1)
 8002304:	480d      	ldr	r0, [pc, #52]	; (800233c <TIM7_IRQHandler+0x3c>)
 8002306:	f7ff fbeb 	bl	8001ae0 <LL_TIM_IsActiveFlag_UPDATE>
 800230a:	4603      	mov	r3, r0
 800230c:	2b01      	cmp	r3, #1
 800230e:	d113      	bne.n	8002338 <TIM7_IRQHandler+0x38>
	{
		LL_GPIO_TogglePin(test_GPIO_Port, test_Pin);
 8002310:	2120      	movs	r1, #32
 8002312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002316:	f7ff fc24 	bl	8001b62 <LL_GPIO_TogglePin>
		LL_TIM_ClearFlag_UPDATE(TIM7);
 800231a:	4808      	ldr	r0, [pc, #32]	; (800233c <TIM7_IRQHandler+0x3c>)
 800231c:	f7ff fbd2 	bl	8001ac4 <LL_TIM_ClearFlag_UPDATE>
		if(time>= DISPLAY_BLINK_TIME*-2)
 8002320:	4b07      	ldr	r3, [pc, #28]	; (8002340 <TIM7_IRQHandler+0x40>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f113 0f06 	cmn.w	r3, #6
 8002328:	db06      	blt.n	8002338 <TIM7_IRQHandler+0x38>
		{
			UpdateDisplay();
 800232a:	f000 f80b 	bl	8002344 <UpdateDisplay>
			time--;
 800232e:	4b04      	ldr	r3, [pc, #16]	; (8002340 <TIM7_IRQHandler+0x40>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	3b01      	subs	r3, #1
 8002334:	4a02      	ldr	r2, [pc, #8]	; (8002340 <TIM7_IRQHandler+0x40>)
 8002336:	6013      	str	r3, [r2, #0]
		}

	}
}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40001400 	.word	0x40001400
 8002340:	200002a8 	.word	0x200002a8

08002344 <UpdateDisplay>:

void UpdateDisplay()
{
 8002344:	b5b0      	push	{r4, r5, r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
	uint32_t displayData = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
	if(time<0 && time>= DISPLAY_BLINK_TIME*-2)
 800234e:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <UpdateDisplay+0xb8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	da16      	bge.n	8002384 <UpdateDisplay+0x40>
 8002356:	4b29      	ldr	r3, [pc, #164]	; (80023fc <UpdateDisplay+0xb8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f113 0f06 	cmn.w	r3, #6
 800235e:	db11      	blt.n	8002384 <UpdateDisplay+0x40>
	{
		TM1637_SetBrightness((time%2)*8);
 8002360:	4b26      	ldr	r3, [pc, #152]	; (80023fc <UpdateDisplay+0xb8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	bfb8      	it	lt
 800236c:	425b      	neglt	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f955 	bl	8002624 <TM1637_SetBrightness>
		TM1637_DisplayDecimal(0,1);
 800237a:	2101      	movs	r1, #1
 800237c:	2000      	movs	r0, #0
 800237e:	f000 f8e3 	bl	8002548 <TM1637_DisplayDecimal>
	  	return;
 8002382:	e038      	b.n	80023f6 <UpdateDisplay+0xb2>
	}
	displayData = floor(time/60)*100+time%60;
 8002384:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <UpdateDisplay+0xb8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1d      	ldr	r2, [pc, #116]	; (8002400 <UpdateDisplay+0xbc>)
 800238a:	fb82 1203 	smull	r1, r2, r2, r3
 800238e:	441a      	add	r2, r3
 8002390:	1152      	asrs	r2, r2, #5
 8002392:	17db      	asrs	r3, r3, #31
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe f868 	bl	800046c <__aeabi_i2d>
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	4b18      	ldr	r3, [pc, #96]	; (8002404 <UpdateDisplay+0xc0>)
 80023a2:	f7fe f8cd 	bl	8000540 <__aeabi_dmul>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4614      	mov	r4, r2
 80023ac:	461d      	mov	r5, r3
 80023ae:	4b13      	ldr	r3, [pc, #76]	; (80023fc <UpdateDisplay+0xb8>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4b13      	ldr	r3, [pc, #76]	; (8002400 <UpdateDisplay+0xbc>)
 80023b4:	fb83 1302 	smull	r1, r3, r3, r2
 80023b8:	4413      	add	r3, r2
 80023ba:	1159      	asrs	r1, r3, #5
 80023bc:	17d3      	asrs	r3, r2, #31
 80023be:	1ac9      	subs	r1, r1, r3
 80023c0:	460b      	mov	r3, r1
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	1a5b      	subs	r3, r3, r1
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	1ad1      	subs	r1, r2, r3
 80023ca:	4608      	mov	r0, r1
 80023cc:	f7fe f84e 	bl	800046c <__aeabi_i2d>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4620      	mov	r0, r4
 80023d6:	4629      	mov	r1, r5
 80023d8:	f7fd fefc 	bl	80001d4 <__adddf3>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	f7fe fb6e 	bl	8000ac4 <__aeabi_d2uiz>
 80023e8:	4603      	mov	r3, r0
 80023ea:	607b      	str	r3, [r7, #4]
	TM1637_DisplayDecimal(displayData,1);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2101      	movs	r1, #1
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 f8a9 	bl	8002548 <TM1637_DisplayDecimal>
}
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bdb0      	pop	{r4, r5, r7, pc}
 80023fc:	200002a8 	.word	0x200002a8
 8002400:	88888889 	.word	0x88888889
 8002404:	40590000 	.word	0x40590000

08002408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800240c:	e7fe      	b.n	800240c <NMI_Handler+0x4>

0800240e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002412:	e7fe      	b.n	8002412 <HardFault_Handler+0x4>

08002414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002418:	e7fe      	b.n	8002418 <MemManage_Handler+0x4>

0800241a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800241e:	e7fe      	b.n	800241e <BusFault_Handler+0x4>

08002420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <UsageFault_Handler+0x4>

08002426 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <SystemInit+0x20>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	4a05      	ldr	r2, [pc, #20]	; (8002480 <SystemInit+0x20>)
 800246c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <LL_AHB2_GRP1_EnableClock>:
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800248e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002490:	4907      	ldr	r1, [pc, #28]	; (80024b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4313      	orrs	r3, r2
 8002496:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800249a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4013      	ands	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024a2:	68fb      	ldr	r3, [r7, #12]
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40021000 	.word	0x40021000

080024b4 <LL_GPIO_SetOutputPin>:
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	619a      	str	r2, [r3, #24]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_GPIO_ResetOutputPin>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <TM1637_ClkHigh>:
    0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, // 0-7
    0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, // 8-9, A-F
    0x00
};

void TM1637_ClkHigh(void){
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(CLK_GPIO_PORT, CLK_PIN);
 80024f0:	2180      	movs	r1, #128	; 0x80
 80024f2:	4802      	ldr	r0, [pc, #8]	; (80024fc <TM1637_ClkHigh+0x10>)
 80024f4:	f7ff ffde 	bl	80024b4 <LL_GPIO_SetOutputPin>
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	48000800 	.word	0x48000800

08002500 <TM1637_ClkLow>:

void TM1637_ClkLow(void){
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(CLK_GPIO_PORT, CLK_PIN);
 8002504:	2180      	movs	r1, #128	; 0x80
 8002506:	4802      	ldr	r0, [pc, #8]	; (8002510 <TM1637_ClkLow+0x10>)
 8002508:	f7ff ffe2 	bl	80024d0 <LL_GPIO_ResetOutputPin>
}
 800250c:	bf00      	nop
 800250e:	bd80      	pop	{r7, pc}
 8002510:	48000800 	.word	0x48000800

08002514 <TM1637_DataHigh>:

void TM1637_DataHigh(void){
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(DATA_GPIO_PORT, DATA_PIN);
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800251e:	f7ff ffc9 	bl	80024b4 <LL_GPIO_SetOutputPin>
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}

08002526 <TM1637_DataLow>:

void TM1637_DataLow(void){
 8002526:	b580      	push	{r7, lr}
 8002528:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(DATA_GPIO_PORT, DATA_PIN);
 800252a:	2180      	movs	r1, #128	; 0x80
 800252c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002530:	f7ff ffce 	bl	80024d0 <LL_GPIO_ResetOutputPin>
}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}

08002538 <TM1637_Init>:
	}
}


void TM1637_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
    TM1637_SetBrightness(8);
 800253c:	2008      	movs	r0, #8
 800253e:	f000 f871 	bl	8002624 <TM1637_SetBrightness>
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <TM1637_DisplayDecimal>:

void TM1637_DisplayDecimal(int v, int displaySeparator)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	e032      	b.n	80025be <TM1637_DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4b30      	ldr	r3, [pc, #192]	; (800261c <TM1637_DisplayDecimal+0xd4>)
 800255c:	fb83 2301 	smull	r2, r3, r3, r1
 8002560:	109a      	asrs	r2, r3, #2
 8002562:	17cb      	asrs	r3, r1, #31
 8002564:	1ad2      	subs	r2, r2, r3
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	1aca      	subs	r2, r1, r3
 8002570:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <TM1637_DisplayDecimal+0xd8>)
 8002572:	5c99      	ldrb	r1, [r3, r2]
 8002574:	f107 020c 	add.w	r2, r7, #12
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	4413      	add	r3, r2
 800257c:	460a      	mov	r2, r1
 800257e:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d110      	bne.n	80025a8 <TM1637_DisplayDecimal+0x60>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00d      	beq.n	80025a8 <TM1637_DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 800258c:	f107 020c 	add.w	r2, r7, #12
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	4413      	add	r3, r2
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800259a:	b2d9      	uxtb	r1, r3
 800259c:	f107 020c 	add.w	r2, r7, #12
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	4413      	add	r3, r2
 80025a4:	460a      	mov	r2, r1
 80025a6:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a1c      	ldr	r2, [pc, #112]	; (800261c <TM1637_DisplayDecimal+0xd4>)
 80025ac:	fb82 1203 	smull	r1, r2, r2, r3
 80025b0:	1092      	asrs	r2, r2, #2
 80025b2:	17db      	asrs	r3, r3, #31
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	3301      	adds	r3, #1
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	ddc9      	ble.n	8002558 <TM1637_DisplayDecimal+0x10>
    }

    TM1637_Start();
 80025c4:	f000 f843 	bl	800264e <TM1637_Start>
    TM1637_WriteByte(0x40);
 80025c8:	2040      	movs	r0, #64	; 0x40
 80025ca:	f000 f872 	bl	80026b2 <TM1637_WriteByte>
    TM1637_ReadResult();
 80025ce:	f000 f860 	bl	8002692 <TM1637_ReadResult>
    TM1637_Stop();
 80025d2:	f000 f849 	bl	8002668 <TM1637_Stop>

    TM1637_Start();
 80025d6:	f000 f83a 	bl	800264e <TM1637_Start>
    TM1637_WriteByte(0xc0);
 80025da:	20c0      	movs	r0, #192	; 0xc0
 80025dc:	f000 f869 	bl	80026b2 <TM1637_WriteByte>
    TM1637_ReadResult();
 80025e0:	f000 f857 	bl	8002692 <TM1637_ReadResult>

    for (int i = 0; i < 4; ++i) {
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	e00e      	b.n	8002608 <TM1637_DisplayDecimal+0xc0>
        TM1637_WriteByte(digitArr[3 - i]);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f1c3 0303 	rsb	r3, r3, #3
 80025f0:	3318      	adds	r3, #24
 80025f2:	443b      	add	r3, r7
 80025f4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 f85a 	bl	80026b2 <TM1637_WriteByte>
        TM1637_ReadResult();
 80025fe:	f000 f848 	bl	8002692 <TM1637_ReadResult>
    for (int i = 0; i < 4; ++i) {
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	3301      	adds	r3, #1
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	2b03      	cmp	r3, #3
 800260c:	dded      	ble.n	80025ea <TM1637_DisplayDecimal+0xa2>
    }

    TM1637_Stop();
 800260e:	f000 f82b 	bl	8002668 <TM1637_Stop>
}
 8002612:	bf00      	nop
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	66666667 	.word	0x66666667
 8002620:	08004630 	.word	0x08004630

08002624 <TM1637_SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void TM1637_SetBrightness(char brightness)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    TM1637_Start();
 800262e:	f000 f80e 	bl	800264e <TM1637_Start>
    TM1637_WriteByte(0x87 + brightness);
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	3b79      	subs	r3, #121	; 0x79
 8002636:	b2db      	uxtb	r3, r3
 8002638:	4618      	mov	r0, r3
 800263a:	f000 f83a 	bl	80026b2 <TM1637_WriteByte>
    TM1637_ReadResult();
 800263e:	f000 f828 	bl	8002692 <TM1637_ReadResult>
    TM1637_Stop();
 8002642:	f000 f811 	bl	8002668 <TM1637_Stop>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <TM1637_Start>:

void TM1637_Start(void)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	af00      	add	r7, sp, #0
    TM1637_ClkHigh();
 8002652:	f7ff ff4b 	bl	80024ec <TM1637_ClkHigh>
    TM1637_DataHigh();
 8002656:	f7ff ff5d 	bl	8002514 <TM1637_DataHigh>
    TM1637_DelayUsec(2);
 800265a:	2002      	movs	r0, #2
 800265c:	f000 f853 	bl	8002706 <TM1637_DelayUsec>
    TM1637_DataLow();
 8002660:	f7ff ff61 	bl	8002526 <TM1637_DataLow>
}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}

08002668 <TM1637_Stop>:

void TM1637_Stop(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 800266c:	f7ff ff48 	bl	8002500 <TM1637_ClkLow>
    TM1637_DelayUsec(2);
 8002670:	2002      	movs	r0, #2
 8002672:	f000 f848 	bl	8002706 <TM1637_DelayUsec>
    TM1637_DataLow();
 8002676:	f7ff ff56 	bl	8002526 <TM1637_DataLow>
    TM1637_DelayUsec(2);
 800267a:	2002      	movs	r0, #2
 800267c:	f000 f843 	bl	8002706 <TM1637_DelayUsec>
    TM1637_ClkHigh();
 8002680:	f7ff ff34 	bl	80024ec <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 8002684:	2002      	movs	r0, #2
 8002686:	f000 f83e 	bl	8002706 <TM1637_DelayUsec>
    TM1637_DataHigh();
 800268a:	f7ff ff43 	bl	8002514 <TM1637_DataHigh>
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}

08002692 <TM1637_ReadResult>:

void TM1637_ReadResult(void)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 8002696:	f7ff ff33 	bl	8002500 <TM1637_ClkLow>
    TM1637_DelayUsec(5);
 800269a:	2005      	movs	r0, #5
 800269c:	f000 f833 	bl	8002706 <TM1637_DelayUsec>

    TM1637_ClkHigh();
 80026a0:	f7ff ff24 	bl	80024ec <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 80026a4:	2002      	movs	r0, #2
 80026a6:	f000 f82e 	bl	8002706 <TM1637_DelayUsec>
    TM1637_ClkLow();
 80026aa:	f7ff ff29 	bl	8002500 <TM1637_ClkLow>
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <TM1637_WriteByte>:

void TM1637_WriteByte(unsigned char b)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; ++i) {
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	e019      	b.n	80026f6 <TM1637_WriteByte+0x44>
		TM1637_ClkLow();
 80026c2:	f7ff ff1d 	bl	8002500 <TM1637_ClkLow>
		if (b & 0x01) {
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <TM1637_WriteByte+0x24>
			TM1637_DataHigh();
 80026d0:	f7ff ff20 	bl	8002514 <TM1637_DataHigh>
 80026d4:	e001      	b.n	80026da <TM1637_WriteByte+0x28>
		}
		else {
			TM1637_DataLow();
 80026d6:	f7ff ff26 	bl	8002526 <TM1637_DataLow>
		}
		TM1637_DelayUsec(3);
 80026da:	2003      	movs	r0, #3
 80026dc:	f000 f813 	bl	8002706 <TM1637_DelayUsec>
		b >>= 1;
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	085b      	lsrs	r3, r3, #1
 80026e4:	71fb      	strb	r3, [r7, #7]
		TM1637_ClkHigh();
 80026e6:	f7ff ff01 	bl	80024ec <TM1637_ClkHigh>
		TM1637_DelayUsec(3);
 80026ea:	2003      	movs	r0, #3
 80026ec:	f000 f80b 	bl	8002706 <TM1637_DelayUsec>
	for (int i = 0; i < 8; ++i) {
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3301      	adds	r3, #1
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b07      	cmp	r3, #7
 80026fa:	dde2      	ble.n	80026c2 <TM1637_WriteByte+0x10>
	}
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <TM1637_DelayUsec>:

void TM1637_DelayUsec(unsigned int i)
{
 8002706:	b480      	push	{r7}
 8002708:	b085      	sub	sp, #20
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 800270e:	e00d      	b.n	800272c <TM1637_DelayUsec+0x26>
        for (int j = 0; j < 500; ++j) {
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e003      	b.n	800271e <TM1637_DelayUsec+0x18>
					__NOP();
 8002716:	bf00      	nop
        for (int j = 0; j < 500; ++j) {
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	3301      	adds	r3, #1
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002724:	dbf7      	blt.n	8002716 <TM1637_DelayUsec+0x10>
    for (; i>0; i--) {
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3b01      	subs	r3, #1
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1ee      	bne.n	8002710 <TM1637_DelayUsec+0xa>
        }
    }
}
 8002732:	bf00      	nop
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <TM1637_gpio_init>:

void TM1637_gpio_init(){
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002746:	463b      	mov	r3, r7
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
 8002754:	615a      	str	r2, [r3, #20]
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002756:	2001      	movs	r0, #1
 8002758:	f7ff fe94 	bl	8002484 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800275c:	2004      	movs	r0, #4
 800275e:	f7ff fe91 	bl	8002484 <LL_AHB2_GRP1_EnableClock>

	GPIO_InitStruct.Pin = DATA_PIN;
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002766:	2301      	movs	r3, #1
 8002768:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800276a:	2302      	movs	r3, #2
 800276c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(DATA_GPIO_PORT, &GPIO_InitStruct);
 8002776:	463b      	mov	r3, r7
 8002778:	4619      	mov	r1, r3
 800277a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800277e:	f000 f989 	bl	8002a94 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = CLK_PIN;
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002786:	2301      	movs	r3, #1
 8002788:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800278a:	2302      	movs	r3, #2
 800278c:	60bb      	str	r3, [r7, #8]
 	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(CLK_GPIO_PORT, &GPIO_InitStruct);
 8002796:	463b      	mov	r3, r7
 8002798:	4619      	mov	r1, r3
 800279a:	4803      	ldr	r0, [pc, #12]	; (80027a8 <TM1637_gpio_init+0x68>)
 800279c:	f000 f97a 	bl	8002a94 <LL_GPIO_Init>
}
 80027a0:	bf00      	nop
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	48000800 	.word	0x48000800

080027ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027b0:	f7ff fe56 	bl	8002460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b4:	480c      	ldr	r0, [pc, #48]	; (80027e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80027b6:	490d      	ldr	r1, [pc, #52]	; (80027ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80027b8:	4a0d      	ldr	r2, [pc, #52]	; (80027f0 <LoopForever+0xe>)
  movs r3, #0
 80027ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027bc:	e002      	b.n	80027c4 <LoopCopyDataInit>

080027be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c2:	3304      	adds	r3, #4

080027c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c8:	d3f9      	bcc.n	80027be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ca:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027cc:	4c0a      	ldr	r4, [pc, #40]	; (80027f8 <LoopForever+0x16>)
  movs r3, #0
 80027ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d0:	e001      	b.n	80027d6 <LoopFillZerobss>

080027d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d4:	3204      	adds	r2, #4

080027d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d8:	d3fb      	bcc.n	80027d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027da:	f000 fe49 	bl	8003470 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027de:	f7ff f9d9 	bl	8001b94 <main>

080027e2 <LoopForever>:

LoopForever:
    b LoopForever
 80027e2:	e7fe      	b.n	80027e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027ec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80027f0:	08004828 	.word	0x08004828
  ldr r2, =_sbss
 80027f4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80027f8:	200002ac 	.word	0x200002ac

080027fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027fc:	e7fe      	b.n	80027fc <ADC1_2_IRQHandler>

080027fe <LL_GPIO_SetPinMode>:
{
 80027fe:	b480      	push	{r7}
 8002800:	b08b      	sub	sp, #44	; 0x2c
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	613b      	str	r3, [r7, #16]
  return result;
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e003      	b.n	8002830 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2103      	movs	r1, #3
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	401a      	ands	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	61fb      	str	r3, [r7, #28]
  return result;
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002852:	2320      	movs	r3, #32
 8002854:	e003      	b.n	800285e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	fab3 f383 	clz	r3, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	fa01 f303 	lsl.w	r3, r1, r3
 8002866:	431a      	orrs	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	601a      	str	r2, [r3, #0]
}
 800286c:	bf00      	nop
 800286e:	372c      	adds	r7, #44	; 0x2c
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <LL_GPIO_SetPinOutputType>:
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	43db      	mvns	r3, r3
 800288c:	401a      	ands	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	431a      	orrs	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	605a      	str	r2, [r3, #4]
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_GPIO_SetPinSpeed>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	b08b      	sub	sp, #44	; 0x2c
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fa93 f3a3 	rbit	r3, r3
 80028c2:	613b      	str	r3, [r7, #16]
  return result;
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80028ce:	2320      	movs	r3, #32
 80028d0:	e003      	b.n	80028da <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	fab3 f383 	clz	r3, r3
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	2103      	movs	r1, #3
 80028de:	fa01 f303 	lsl.w	r3, r1, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	401a      	ands	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	61fb      	str	r3, [r7, #28]
  return result;
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80028fc:	2320      	movs	r3, #32
 80028fe:	e003      	b.n	8002908 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	fa01 f303 	lsl.w	r3, r1, r3
 8002910:	431a      	orrs	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	609a      	str	r2, [r3, #8]
}
 8002916:	bf00      	nop
 8002918:	372c      	adds	r7, #44	; 0x2c
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <LL_GPIO_SetPinPull>:
{
 8002922:	b480      	push	{r7}
 8002924:	b08b      	sub	sp, #44	; 0x2c
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	613b      	str	r3, [r7, #16]
  return result;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002948:	2320      	movs	r3, #32
 800294a:	e003      	b.n	8002954 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	2103      	movs	r1, #3
 8002958:	fa01 f303 	lsl.w	r3, r1, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	401a      	ands	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	61fb      	str	r3, [r7, #28]
  return result;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002976:	2320      	movs	r3, #32
 8002978:	e003      	b.n	8002982 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	431a      	orrs	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	60da      	str	r2, [r3, #12]
}
 8002990:	bf00      	nop
 8002992:	372c      	adds	r7, #44	; 0x2c
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_GPIO_SetAFPin_0_7>:
{
 800299c:	b480      	push	{r7}
 800299e:	b08b      	sub	sp, #44	; 0x2c
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a1a      	ldr	r2, [r3, #32]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	613b      	str	r3, [r7, #16]
  return result;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80029c2:	2320      	movs	r3, #32
 80029c4:	e003      	b.n	80029ce <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	fab3 f383 	clz	r3, r3
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	210f      	movs	r1, #15
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	401a      	ands	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	61fb      	str	r3, [r7, #28]
  return result;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80029f0:	2320      	movs	r3, #32
 80029f2:	e003      	b.n	80029fc <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	431a      	orrs	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	621a      	str	r2, [r3, #32]
}
 8002a0a:	bf00      	nop
 8002a0c:	372c      	adds	r7, #44	; 0x2c
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <LL_GPIO_SetAFPin_8_15>:
{
 8002a16:	b480      	push	{r7}
 8002a18:	b08b      	sub	sp, #44	; 0x2c
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	0a1b      	lsrs	r3, r3, #8
 8002a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	613b      	str	r3, [r7, #16]
  return result;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002a3e:	2320      	movs	r3, #32
 8002a40:	e003      	b.n	8002a4a <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	fab3 f383 	clz	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	210f      	movs	r1, #15
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	401a      	ands	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	0a1b      	lsrs	r3, r3, #8
 8002a5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	61fb      	str	r3, [r7, #28]
  return result;
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002a6e:	2320      	movs	r3, #32
 8002a70:	e003      	b.n	8002a7a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	431a      	orrs	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002a88:	bf00      	nop
 8002a8a:	372c      	adds	r7, #44	; 0x2c
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b088      	sub	sp, #32
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	60fb      	str	r3, [r7, #12]
  return result;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <LL_GPIO_Init+0x26>
    return 32U;
 8002ab6:	2320      	movs	r3, #32
 8002ab8:	e003      	b.n	8002ac2 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002ac4:	e048      	b.n	8002b58 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	2101      	movs	r1, #1
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d03a      	beq.n	8002b52 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d003      	beq.n	8002aec <LL_GPIO_Init+0x58>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d10e      	bne.n	8002b0a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	461a      	mov	r2, r3
 8002af2:	69b9      	ldr	r1, [r7, #24]
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff fed7 	bl	80028a8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6819      	ldr	r1, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	461a      	mov	r2, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff feb7 	bl	8002878 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	69b9      	ldr	r1, [r7, #24]
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff ff05 	bl	8002922 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d111      	bne.n	8002b44 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2bff      	cmp	r3, #255	; 0xff
 8002b24:	d807      	bhi.n	8002b36 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	69b9      	ldr	r1, [r7, #24]
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff ff34 	bl	800299c <LL_GPIO_SetAFPin_0_7>
 8002b34:	e006      	b.n	8002b44 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	69b9      	ldr	r1, [r7, #24]
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ff69 	bl	8002a16 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	69b9      	ldr	r1, [r7, #24]
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7ff fe56 	bl	80027fe <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3301      	adds	r3, #1
 8002b56:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1af      	bne.n	8002ac6 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <LL_TIM_SetPrescaler>:
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_TIM_SetAutoReload>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_TIM_SetRepetitionCounter>:
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_TIM_OC_SetCompareCH1>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_TIM_OC_SetCompareCH2>:
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_TIM_OC_SetCompareCH3>:
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_TIM_OC_SetCompareCH4>:
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <LL_TIM_OC_SetCompareCH5>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_TIM_OC_SetCompareCH6>:
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_TIM_GenerateEvent_UPDATE>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	f043 0201 	orr.w	r2, r3, #1
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	615a      	str	r2, [r3, #20]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a3d      	ldr	r2, [pc, #244]	; (8002d98 <LL_TIM_Init+0x108>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <LL_TIM_Init+0x40>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cae:	d00f      	beq.n	8002cd0 <LL_TIM_Init+0x40>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a3a      	ldr	r2, [pc, #232]	; (8002d9c <LL_TIM_Init+0x10c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00b      	beq.n	8002cd0 <LL_TIM_Init+0x40>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a39      	ldr	r2, [pc, #228]	; (8002da0 <LL_TIM_Init+0x110>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d007      	beq.n	8002cd0 <LL_TIM_Init+0x40>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a38      	ldr	r2, [pc, #224]	; (8002da4 <LL_TIM_Init+0x114>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d003      	beq.n	8002cd0 <LL_TIM_Init+0x40>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a37      	ldr	r2, [pc, #220]	; (8002da8 <LL_TIM_Init+0x118>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d106      	bne.n	8002cde <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a2d      	ldr	r2, [pc, #180]	; (8002d98 <LL_TIM_Init+0x108>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d01f      	beq.n	8002d26 <LL_TIM_Init+0x96>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cec:	d01b      	beq.n	8002d26 <LL_TIM_Init+0x96>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a2a      	ldr	r2, [pc, #168]	; (8002d9c <LL_TIM_Init+0x10c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d017      	beq.n	8002d26 <LL_TIM_Init+0x96>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a29      	ldr	r2, [pc, #164]	; (8002da0 <LL_TIM_Init+0x110>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <LL_TIM_Init+0x96>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a28      	ldr	r2, [pc, #160]	; (8002da4 <LL_TIM_Init+0x114>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00f      	beq.n	8002d26 <LL_TIM_Init+0x96>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a27      	ldr	r2, [pc, #156]	; (8002da8 <LL_TIM_Init+0x118>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00b      	beq.n	8002d26 <LL_TIM_Init+0x96>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a26      	ldr	r2, [pc, #152]	; (8002dac <LL_TIM_Init+0x11c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d007      	beq.n	8002d26 <LL_TIM_Init+0x96>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a25      	ldr	r2, [pc, #148]	; (8002db0 <LL_TIM_Init+0x120>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d003      	beq.n	8002d26 <LL_TIM_Init+0x96>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a24      	ldr	r2, [pc, #144]	; (8002db4 <LL_TIM_Init+0x124>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d106      	bne.n	8002d34 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff ff23 	bl	8002b8c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ff0f 	bl	8002b70 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a10      	ldr	r2, [pc, #64]	; (8002d98 <LL_TIM_Init+0x108>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00f      	beq.n	8002d7a <LL_TIM_Init+0xea>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a12      	ldr	r2, [pc, #72]	; (8002da8 <LL_TIM_Init+0x118>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00b      	beq.n	8002d7a <LL_TIM_Init+0xea>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a11      	ldr	r2, [pc, #68]	; (8002dac <LL_TIM_Init+0x11c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d007      	beq.n	8002d7a <LL_TIM_Init+0xea>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a10      	ldr	r2, [pc, #64]	; (8002db0 <LL_TIM_Init+0x120>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d003      	beq.n	8002d7a <LL_TIM_Init+0xea>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a0f      	ldr	r2, [pc, #60]	; (8002db4 <LL_TIM_Init+0x124>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d105      	bne.n	8002d86 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7ff ff11 	bl	8002ba8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff ff72 	bl	8002c70 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40012c00 	.word	0x40012c00
 8002d9c:	40000400 	.word	0x40000400
 8002da0:	40000800 	.word	0x40000800
 8002da4:	40000c00 	.word	0x40000c00
 8002da8:	40013400 	.word	0x40013400
 8002dac:	40014000 	.word	0x40014000
 8002db0:	40014400 	.word	0x40014400
 8002db4:	40014800 	.word	0x40014800

08002db8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dce:	d045      	beq.n	8002e5c <LL_TIM_OC_Init+0xa4>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dd6:	d848      	bhi.n	8002e6a <LL_TIM_OC_Init+0xb2>
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dde:	d036      	beq.n	8002e4e <LL_TIM_OC_Init+0x96>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de6:	d840      	bhi.n	8002e6a <LL_TIM_OC_Init+0xb2>
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dee:	d027      	beq.n	8002e40 <LL_TIM_OC_Init+0x88>
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df6:	d838      	bhi.n	8002e6a <LL_TIM_OC_Init+0xb2>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfe:	d018      	beq.n	8002e32 <LL_TIM_OC_Init+0x7a>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e06:	d830      	bhi.n	8002e6a <LL_TIM_OC_Init+0xb2>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d003      	beq.n	8002e16 <LL_TIM_OC_Init+0x5e>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b10      	cmp	r3, #16
 8002e12:	d007      	beq.n	8002e24 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002e14:	e029      	b.n	8002e6a <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f82d 	bl	8002e78 <OC1Config>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	75fb      	strb	r3, [r7, #23]
      break;
 8002e22:	e023      	b.n	8002e6c <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f8a6 	bl	8002f78 <OC2Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e30:	e01c      	b.n	8002e6c <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f923 	bl	8003080 <OC3Config>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e3e:	e015      	b.n	8002e6c <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f9a0 	bl	8003188 <OC4Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e4c:	e00e      	b.n	8002e6c <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fa05 	bl	8003260 <OC5Config>
 8002e56:	4603      	mov	r3, r0
 8002e58:	75fb      	strb	r3, [r7, #23]
      break;
 8002e5a:	e007      	b.n	8002e6c <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fa62 	bl	8003328 <OC6Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	75fb      	strb	r3, [r7, #23]
      break;
 8002e68:	e000      	b.n	8002e6c <LL_TIM_OC_Init+0xb4>
      break;
 8002e6a:	bf00      	nop
  }

  return result;
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f023 0201 	bic.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f023 0202 	bic.w	r2, r3, #2
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f023 0201 	bic.w	r2, r3, #1
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <OC1Config+0xec>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00f      	beq.n	8002efe <OC1Config+0x86>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <OC1Config+0xf0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00b      	beq.n	8002efe <OC1Config+0x86>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a20      	ldr	r2, [pc, #128]	; (8002f6c <OC1Config+0xf4>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d007      	beq.n	8002efe <OC1Config+0x86>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a1f      	ldr	r2, [pc, #124]	; (8002f70 <OC1Config+0xf8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d003      	beq.n	8002efe <OC1Config+0x86>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a1e      	ldr	r2, [pc, #120]	; (8002f74 <OC1Config+0xfc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d11e      	bne.n	8002f3c <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f023 0208 	bic.w	r2, r3, #8
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f023 0204 	bic.w	r2, r3, #4
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff fe38 	bl	8002bc4 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40013400 	.word	0x40013400
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40014400 	.word	0x40014400
 8002f74:	40014800 	.word	0x40014800

08002f78 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	f023 0210 	bic.w	r2, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	0212      	lsls	r2, r2, #8
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f023 0220 	bic.w	r2, r3, #32
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f023 0210 	bic.w	r2, r3, #16
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a23      	ldr	r2, [pc, #140]	; (800306c <OC2Config+0xf4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00f      	beq.n	8003004 <OC2Config+0x8c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a22      	ldr	r2, [pc, #136]	; (8003070 <OC2Config+0xf8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d00b      	beq.n	8003004 <OC2Config+0x8c>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a21      	ldr	r2, [pc, #132]	; (8003074 <OC2Config+0xfc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d007      	beq.n	8003004 <OC2Config+0x8c>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a20      	ldr	r2, [pc, #128]	; (8003078 <OC2Config+0x100>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d003      	beq.n	8003004 <OC2Config+0x8c>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a1f      	ldr	r2, [pc, #124]	; (800307c <OC2Config+0x104>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d11f      	bne.n	8003044 <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	019b      	lsls	r3, r3, #6
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	019b      	lsls	r3, r3, #6
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4619      	mov	r1, r3
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff fdc2 	bl	8002be0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40012c00 	.word	0x40012c00
 8003070:	40013400 	.word	0x40013400
 8003074:	40014000 	.word	0x40014000
 8003078:	40014400 	.word	0x40014400
 800307c:	40014800 	.word	0x40014800

08003080 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f023 0303 	bic.w	r3, r3, #3
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a23      	ldr	r2, [pc, #140]	; (8003174 <OC3Config+0xf4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00f      	beq.n	800310a <OC3Config+0x8a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a22      	ldr	r2, [pc, #136]	; (8003178 <OC3Config+0xf8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00b      	beq.n	800310a <OC3Config+0x8a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a21      	ldr	r2, [pc, #132]	; (800317c <OC3Config+0xfc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d007      	beq.n	800310a <OC3Config+0x8a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a20      	ldr	r2, [pc, #128]	; (8003180 <OC3Config+0x100>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d003      	beq.n	800310a <OC3Config+0x8a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a1f      	ldr	r2, [pc, #124]	; (8003184 <OC3Config+0x104>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d11f      	bne.n	800314a <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	029b      	lsls	r3, r3, #10
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	029b      	lsls	r3, r3, #10
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	4313      	orrs	r3, r2
 8003138:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	015b      	lsls	r3, r3, #5
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	4619      	mov	r1, r3
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff fd4d 	bl	8002bfc <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40012c00 	.word	0x40012c00
 8003178:	40013400 	.word	0x40013400
 800317c:	40014000 	.word	0x40014000
 8003180:	40014400 	.word	0x40014400
 8003184:	40014800 	.word	0x40014800

08003188 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	0212      	lsls	r2, r2, #8
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	031b      	lsls	r3, r3, #12
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	031b      	lsls	r3, r3, #12
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a17      	ldr	r2, [pc, #92]	; (800324c <OC4Config+0xc4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00f      	beq.n	8003214 <OC4Config+0x8c>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a16      	ldr	r2, [pc, #88]	; (8003250 <OC4Config+0xc8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00b      	beq.n	8003214 <OC4Config+0x8c>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a15      	ldr	r2, [pc, #84]	; (8003254 <OC4Config+0xcc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d007      	beq.n	8003214 <OC4Config+0x8c>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a14      	ldr	r2, [pc, #80]	; (8003258 <OC4Config+0xd0>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d003      	beq.n	8003214 <OC4Config+0x8c>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a13      	ldr	r2, [pc, #76]	; (800325c <OC4Config+0xd4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d107      	bne.n	8003224 <OC4Config+0x9c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	019b      	lsls	r3, r3, #6
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4619      	mov	r1, r3
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff fcee 	bl	8002c18 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40012c00 	.word	0x40012c00
 8003250:	40013400 	.word	0x40013400
 8003254:	40014000 	.word	0x40014000
 8003258:	40014400 	.word	0x40014400
 800325c:	40014800 	.word	0x40014800

08003260 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003280:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	6812      	ldr	r2, [r2, #0]
 8003290:	4313      	orrs	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	041b      	lsls	r3, r3, #16
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	041b      	lsls	r3, r3, #16
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a17      	ldr	r2, [pc, #92]	; (8003314 <OC5Config+0xb4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00f      	beq.n	80032dc <OC5Config+0x7c>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a16      	ldr	r2, [pc, #88]	; (8003318 <OC5Config+0xb8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00b      	beq.n	80032dc <OC5Config+0x7c>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a15      	ldr	r2, [pc, #84]	; (800331c <OC5Config+0xbc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d007      	beq.n	80032dc <OC5Config+0x7c>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a14      	ldr	r2, [pc, #80]	; (8003320 <OC5Config+0xc0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d003      	beq.n	80032dc <OC5Config+0x7c>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a13      	ldr	r2, [pc, #76]	; (8003324 <OC5Config+0xc4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d109      	bne.n	80032f0 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	4619      	mov	r1, r3
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff fc99 	bl	8002c34 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40012c00 	.word	0x40012c00
 8003318:	40013400 	.word	0x40013400
 800331c:	40014000 	.word	0x40014000
 8003320:	40014400 	.word	0x40014400
 8003324:	40014800 	.word	0x40014800

08003328 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003348:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	0212      	lsls	r2, r2, #8
 800335a:	4313      	orrs	r3, r2
 800335c:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	051b      	lsls	r3, r3, #20
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	051b      	lsls	r3, r3, #20
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a16      	ldr	r2, [pc, #88]	; (80033dc <OC6Config+0xb4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00f      	beq.n	80033a6 <OC6Config+0x7e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <OC6Config+0xb8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00b      	beq.n	80033a6 <OC6Config+0x7e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a14      	ldr	r2, [pc, #80]	; (80033e4 <OC6Config+0xbc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d007      	beq.n	80033a6 <OC6Config+0x7e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a13      	ldr	r2, [pc, #76]	; (80033e8 <OC6Config+0xc0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d003      	beq.n	80033a6 <OC6Config+0x7e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a12      	ldr	r2, [pc, #72]	; (80033ec <OC6Config+0xc4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d109      	bne.n	80033ba <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	029b      	lsls	r3, r3, #10
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4619      	mov	r1, r3
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff fc44 	bl	8002c54 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40012c00 	.word	0x40012c00
 80033e0:	40013400 	.word	0x40013400
 80033e4:	40014000 	.word	0x40014000
 80033e8:	40014400 	.word	0x40014400
 80033ec:	40014800 	.word	0x40014800

080033f0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003402:	4a07      	ldr	r2, [pc, #28]	; (8003420 <LL_InitTick+0x30>)
 8003404:	3b01      	subs	r3, #1
 8003406:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <LL_InitTick+0x30>)
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800340e:	4b04      	ldr	r3, [pc, #16]	; (8003420 <LL_InitTick+0x30>)
 8003410:	2205      	movs	r2, #5
 8003412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000e010 	.word	0xe000e010

08003424 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800342c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff ffdd 	bl	80033f0 <LL_InitTick>
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003448:	4a04      	ldr	r2, [pc, #16]	; (800345c <LL_SetSystemCoreClock+0x1c>)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6013      	str	r3, [r2, #0]
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000000 	.word	0x20000000

08003460 <memset>:
 8003460:	4402      	add	r2, r0
 8003462:	4603      	mov	r3, r0
 8003464:	4293      	cmp	r3, r2
 8003466:	d100      	bne.n	800346a <memset+0xa>
 8003468:	4770      	bx	lr
 800346a:	f803 1b01 	strb.w	r1, [r3], #1
 800346e:	e7f9      	b.n	8003464 <memset+0x4>

08003470 <__libc_init_array>:
 8003470:	b570      	push	{r4, r5, r6, lr}
 8003472:	4d0d      	ldr	r5, [pc, #52]	; (80034a8 <__libc_init_array+0x38>)
 8003474:	4c0d      	ldr	r4, [pc, #52]	; (80034ac <__libc_init_array+0x3c>)
 8003476:	1b64      	subs	r4, r4, r5
 8003478:	10a4      	asrs	r4, r4, #2
 800347a:	2600      	movs	r6, #0
 800347c:	42a6      	cmp	r6, r4
 800347e:	d109      	bne.n	8003494 <__libc_init_array+0x24>
 8003480:	4d0b      	ldr	r5, [pc, #44]	; (80034b0 <__libc_init_array+0x40>)
 8003482:	4c0c      	ldr	r4, [pc, #48]	; (80034b4 <__libc_init_array+0x44>)
 8003484:	f001 f8b8 	bl	80045f8 <_init>
 8003488:	1b64      	subs	r4, r4, r5
 800348a:	10a4      	asrs	r4, r4, #2
 800348c:	2600      	movs	r6, #0
 800348e:	42a6      	cmp	r6, r4
 8003490:	d105      	bne.n	800349e <__libc_init_array+0x2e>
 8003492:	bd70      	pop	{r4, r5, r6, pc}
 8003494:	f855 3b04 	ldr.w	r3, [r5], #4
 8003498:	4798      	blx	r3
 800349a:	3601      	adds	r6, #1
 800349c:	e7ee      	b.n	800347c <__libc_init_array+0xc>
 800349e:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a2:	4798      	blx	r3
 80034a4:	3601      	adds	r6, #1
 80034a6:	e7f2      	b.n	800348e <__libc_init_array+0x1e>
 80034a8:	08004820 	.word	0x08004820
 80034ac:	08004820 	.word	0x08004820
 80034b0:	08004820 	.word	0x08004820
 80034b4:	08004824 	.word	0x08004824

080034b8 <tan>:
 80034b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80034ba:	ec53 2b10 	vmov	r2, r3, d0
 80034be:	4816      	ldr	r0, [pc, #88]	; (8003518 <tan+0x60>)
 80034c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80034c4:	4281      	cmp	r1, r0
 80034c6:	dc07      	bgt.n	80034d8 <tan+0x20>
 80034c8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8003510 <tan+0x58>
 80034cc:	2001      	movs	r0, #1
 80034ce:	b005      	add	sp, #20
 80034d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80034d4:	f000 b824 	b.w	8003520 <__kernel_tan>
 80034d8:	4810      	ldr	r0, [pc, #64]	; (800351c <tan+0x64>)
 80034da:	4281      	cmp	r1, r0
 80034dc:	dd09      	ble.n	80034f2 <tan+0x3a>
 80034de:	ee10 0a10 	vmov	r0, s0
 80034e2:	4619      	mov	r1, r3
 80034e4:	f7fc fe74 	bl	80001d0 <__aeabi_dsub>
 80034e8:	ec41 0b10 	vmov	d0, r0, r1
 80034ec:	b005      	add	sp, #20
 80034ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80034f2:	4668      	mov	r0, sp
 80034f4:	f000 fa20 	bl	8003938 <__ieee754_rem_pio2>
 80034f8:	0040      	lsls	r0, r0, #1
 80034fa:	f000 0002 	and.w	r0, r0, #2
 80034fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003502:	ed9d 0b00 	vldr	d0, [sp]
 8003506:	f1c0 0001 	rsb	r0, r0, #1
 800350a:	f000 f809 	bl	8003520 <__kernel_tan>
 800350e:	e7ed      	b.n	80034ec <tan+0x34>
	...
 8003518:	3fe921fb 	.word	0x3fe921fb
 800351c:	7fefffff 	.word	0x7fefffff

08003520 <__kernel_tan>:
 8003520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003524:	ed2d 8b06 	vpush	{d8-d10}
 8003528:	ec5b ab10 	vmov	sl, fp, d0
 800352c:	4be0      	ldr	r3, [pc, #896]	; (80038b0 <__kernel_tan+0x390>)
 800352e:	b083      	sub	sp, #12
 8003530:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8003534:	429f      	cmp	r7, r3
 8003536:	ec59 8b11 	vmov	r8, r9, d1
 800353a:	4606      	mov	r6, r0
 800353c:	f8cd b000 	str.w	fp, [sp]
 8003540:	dc61      	bgt.n	8003606 <__kernel_tan+0xe6>
 8003542:	ee10 0a10 	vmov	r0, s0
 8003546:	4659      	mov	r1, fp
 8003548:	f7fd fa94 	bl	8000a74 <__aeabi_d2iz>
 800354c:	4605      	mov	r5, r0
 800354e:	2800      	cmp	r0, #0
 8003550:	f040 8083 	bne.w	800365a <__kernel_tan+0x13a>
 8003554:	1c73      	adds	r3, r6, #1
 8003556:	4652      	mov	r2, sl
 8003558:	4313      	orrs	r3, r2
 800355a:	433b      	orrs	r3, r7
 800355c:	d112      	bne.n	8003584 <__kernel_tan+0x64>
 800355e:	ec4b ab10 	vmov	d0, sl, fp
 8003562:	f000 fbef 	bl	8003d44 <fabs>
 8003566:	49d3      	ldr	r1, [pc, #844]	; (80038b4 <__kernel_tan+0x394>)
 8003568:	ec53 2b10 	vmov	r2, r3, d0
 800356c:	2000      	movs	r0, #0
 800356e:	f7fd f911 	bl	8000794 <__aeabi_ddiv>
 8003572:	4682      	mov	sl, r0
 8003574:	468b      	mov	fp, r1
 8003576:	ec4b ab10 	vmov	d0, sl, fp
 800357a:	b003      	add	sp, #12
 800357c:	ecbd 8b06 	vpop	{d8-d10}
 8003580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003584:	2e01      	cmp	r6, #1
 8003586:	d0f6      	beq.n	8003576 <__kernel_tan+0x56>
 8003588:	4642      	mov	r2, r8
 800358a:	464b      	mov	r3, r9
 800358c:	4650      	mov	r0, sl
 800358e:	4659      	mov	r1, fp
 8003590:	f7fc fe20 	bl	80001d4 <__adddf3>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	460f      	mov	r7, r1
 800359a:	2000      	movs	r0, #0
 800359c:	49c6      	ldr	r1, [pc, #792]	; (80038b8 <__kernel_tan+0x398>)
 800359e:	f7fd f8f9 	bl	8000794 <__aeabi_ddiv>
 80035a2:	e9cd 0100 	strd	r0, r1, [sp]
 80035a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80035aa:	462e      	mov	r6, r5
 80035ac:	4652      	mov	r2, sl
 80035ae:	462c      	mov	r4, r5
 80035b0:	4630      	mov	r0, r6
 80035b2:	461d      	mov	r5, r3
 80035b4:	4639      	mov	r1, r7
 80035b6:	465b      	mov	r3, fp
 80035b8:	f7fc fe0a 	bl	80001d0 <__aeabi_dsub>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4640      	mov	r0, r8
 80035c2:	4649      	mov	r1, r9
 80035c4:	f7fc fe04 	bl	80001d0 <__aeabi_dsub>
 80035c8:	4632      	mov	r2, r6
 80035ca:	462b      	mov	r3, r5
 80035cc:	f7fc ffb8 	bl	8000540 <__aeabi_dmul>
 80035d0:	4632      	mov	r2, r6
 80035d2:	4680      	mov	r8, r0
 80035d4:	4689      	mov	r9, r1
 80035d6:	462b      	mov	r3, r5
 80035d8:	4630      	mov	r0, r6
 80035da:	4639      	mov	r1, r7
 80035dc:	f7fc ffb0 	bl	8000540 <__aeabi_dmul>
 80035e0:	4bb4      	ldr	r3, [pc, #720]	; (80038b4 <__kernel_tan+0x394>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	f7fc fdf6 	bl	80001d4 <__adddf3>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4640      	mov	r0, r8
 80035ee:	4649      	mov	r1, r9
 80035f0:	f7fc fdf0 	bl	80001d4 <__adddf3>
 80035f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80035f8:	f7fc ffa2 	bl	8000540 <__aeabi_dmul>
 80035fc:	4622      	mov	r2, r4
 80035fe:	462b      	mov	r3, r5
 8003600:	f7fc fde8 	bl	80001d4 <__adddf3>
 8003604:	e7b5      	b.n	8003572 <__kernel_tan+0x52>
 8003606:	4bad      	ldr	r3, [pc, #692]	; (80038bc <__kernel_tan+0x39c>)
 8003608:	429f      	cmp	r7, r3
 800360a:	dd26      	ble.n	800365a <__kernel_tan+0x13a>
 800360c:	9b00      	ldr	r3, [sp, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	da09      	bge.n	8003626 <__kernel_tan+0x106>
 8003612:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003616:	469b      	mov	fp, r3
 8003618:	ee10 aa10 	vmov	sl, s0
 800361c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003620:	ee11 8a10 	vmov	r8, s2
 8003624:	4699      	mov	r9, r3
 8003626:	4652      	mov	r2, sl
 8003628:	465b      	mov	r3, fp
 800362a:	a183      	add	r1, pc, #524	; (adr r1, 8003838 <__kernel_tan+0x318>)
 800362c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003630:	f7fc fdce 	bl	80001d0 <__aeabi_dsub>
 8003634:	4642      	mov	r2, r8
 8003636:	464b      	mov	r3, r9
 8003638:	4604      	mov	r4, r0
 800363a:	460d      	mov	r5, r1
 800363c:	a180      	add	r1, pc, #512	; (adr r1, 8003840 <__kernel_tan+0x320>)
 800363e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003642:	f7fc fdc5 	bl	80001d0 <__aeabi_dsub>
 8003646:	4622      	mov	r2, r4
 8003648:	462b      	mov	r3, r5
 800364a:	f7fc fdc3 	bl	80001d4 <__adddf3>
 800364e:	f04f 0800 	mov.w	r8, #0
 8003652:	4682      	mov	sl, r0
 8003654:	468b      	mov	fp, r1
 8003656:	f04f 0900 	mov.w	r9, #0
 800365a:	4652      	mov	r2, sl
 800365c:	465b      	mov	r3, fp
 800365e:	4650      	mov	r0, sl
 8003660:	4659      	mov	r1, fp
 8003662:	f7fc ff6d 	bl	8000540 <__aeabi_dmul>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	ec43 2b18 	vmov	d8, r2, r3
 800366e:	f7fc ff67 	bl	8000540 <__aeabi_dmul>
 8003672:	ec53 2b18 	vmov	r2, r3, d8
 8003676:	4604      	mov	r4, r0
 8003678:	460d      	mov	r5, r1
 800367a:	4650      	mov	r0, sl
 800367c:	4659      	mov	r1, fp
 800367e:	f7fc ff5f 	bl	8000540 <__aeabi_dmul>
 8003682:	a371      	add	r3, pc, #452	; (adr r3, 8003848 <__kernel_tan+0x328>)
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	ec41 0b19 	vmov	d9, r0, r1
 800368c:	4620      	mov	r0, r4
 800368e:	4629      	mov	r1, r5
 8003690:	f7fc ff56 	bl	8000540 <__aeabi_dmul>
 8003694:	a36e      	add	r3, pc, #440	; (adr r3, 8003850 <__kernel_tan+0x330>)
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	f7fc fd9b 	bl	80001d4 <__adddf3>
 800369e:	4622      	mov	r2, r4
 80036a0:	462b      	mov	r3, r5
 80036a2:	f7fc ff4d 	bl	8000540 <__aeabi_dmul>
 80036a6:	a36c      	add	r3, pc, #432	; (adr r3, 8003858 <__kernel_tan+0x338>)
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f7fc fd92 	bl	80001d4 <__adddf3>
 80036b0:	4622      	mov	r2, r4
 80036b2:	462b      	mov	r3, r5
 80036b4:	f7fc ff44 	bl	8000540 <__aeabi_dmul>
 80036b8:	a369      	add	r3, pc, #420	; (adr r3, 8003860 <__kernel_tan+0x340>)
 80036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036be:	f7fc fd89 	bl	80001d4 <__adddf3>
 80036c2:	4622      	mov	r2, r4
 80036c4:	462b      	mov	r3, r5
 80036c6:	f7fc ff3b 	bl	8000540 <__aeabi_dmul>
 80036ca:	a367      	add	r3, pc, #412	; (adr r3, 8003868 <__kernel_tan+0x348>)
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	f7fc fd80 	bl	80001d4 <__adddf3>
 80036d4:	4622      	mov	r2, r4
 80036d6:	462b      	mov	r3, r5
 80036d8:	f7fc ff32 	bl	8000540 <__aeabi_dmul>
 80036dc:	a364      	add	r3, pc, #400	; (adr r3, 8003870 <__kernel_tan+0x350>)
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e2:	f7fc fd77 	bl	80001d4 <__adddf3>
 80036e6:	ec53 2b18 	vmov	r2, r3, d8
 80036ea:	f7fc ff29 	bl	8000540 <__aeabi_dmul>
 80036ee:	a362      	add	r3, pc, #392	; (adr r3, 8003878 <__kernel_tan+0x358>)
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	ec41 0b1a 	vmov	d10, r0, r1
 80036f8:	4620      	mov	r0, r4
 80036fa:	4629      	mov	r1, r5
 80036fc:	f7fc ff20 	bl	8000540 <__aeabi_dmul>
 8003700:	a35f      	add	r3, pc, #380	; (adr r3, 8003880 <__kernel_tan+0x360>)
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	f7fc fd65 	bl	80001d4 <__adddf3>
 800370a:	4622      	mov	r2, r4
 800370c:	462b      	mov	r3, r5
 800370e:	f7fc ff17 	bl	8000540 <__aeabi_dmul>
 8003712:	a35d      	add	r3, pc, #372	; (adr r3, 8003888 <__kernel_tan+0x368>)
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	f7fc fd5c 	bl	80001d4 <__adddf3>
 800371c:	4622      	mov	r2, r4
 800371e:	462b      	mov	r3, r5
 8003720:	f7fc ff0e 	bl	8000540 <__aeabi_dmul>
 8003724:	a35a      	add	r3, pc, #360	; (adr r3, 8003890 <__kernel_tan+0x370>)
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	f7fc fd53 	bl	80001d4 <__adddf3>
 800372e:	4622      	mov	r2, r4
 8003730:	462b      	mov	r3, r5
 8003732:	f7fc ff05 	bl	8000540 <__aeabi_dmul>
 8003736:	a358      	add	r3, pc, #352	; (adr r3, 8003898 <__kernel_tan+0x378>)
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f7fc fd4a 	bl	80001d4 <__adddf3>
 8003740:	4622      	mov	r2, r4
 8003742:	462b      	mov	r3, r5
 8003744:	f7fc fefc 	bl	8000540 <__aeabi_dmul>
 8003748:	a355      	add	r3, pc, #340	; (adr r3, 80038a0 <__kernel_tan+0x380>)
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f7fc fd41 	bl	80001d4 <__adddf3>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	ec51 0b1a 	vmov	r0, r1, d10
 800375a:	f7fc fd3b 	bl	80001d4 <__adddf3>
 800375e:	ec53 2b19 	vmov	r2, r3, d9
 8003762:	f7fc feed 	bl	8000540 <__aeabi_dmul>
 8003766:	4642      	mov	r2, r8
 8003768:	464b      	mov	r3, r9
 800376a:	f7fc fd33 	bl	80001d4 <__adddf3>
 800376e:	ec53 2b18 	vmov	r2, r3, d8
 8003772:	f7fc fee5 	bl	8000540 <__aeabi_dmul>
 8003776:	4642      	mov	r2, r8
 8003778:	464b      	mov	r3, r9
 800377a:	f7fc fd2b 	bl	80001d4 <__adddf3>
 800377e:	a34a      	add	r3, pc, #296	; (adr r3, 80038a8 <__kernel_tan+0x388>)
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003784:	4604      	mov	r4, r0
 8003786:	460d      	mov	r5, r1
 8003788:	ec51 0b19 	vmov	r0, r1, d9
 800378c:	f7fc fed8 	bl	8000540 <__aeabi_dmul>
 8003790:	4622      	mov	r2, r4
 8003792:	462b      	mov	r3, r5
 8003794:	f7fc fd1e 	bl	80001d4 <__adddf3>
 8003798:	460b      	mov	r3, r1
 800379a:	ec41 0b18 	vmov	d8, r0, r1
 800379e:	4602      	mov	r2, r0
 80037a0:	4659      	mov	r1, fp
 80037a2:	4650      	mov	r0, sl
 80037a4:	f7fc fd16 	bl	80001d4 <__adddf3>
 80037a8:	4b44      	ldr	r3, [pc, #272]	; (80038bc <__kernel_tan+0x39c>)
 80037aa:	429f      	cmp	r7, r3
 80037ac:	4604      	mov	r4, r0
 80037ae:	460d      	mov	r5, r1
 80037b0:	f340 8086 	ble.w	80038c0 <__kernel_tan+0x3a0>
 80037b4:	4630      	mov	r0, r6
 80037b6:	f7fc fe59 	bl	800046c <__aeabi_i2d>
 80037ba:	4622      	mov	r2, r4
 80037bc:	4680      	mov	r8, r0
 80037be:	4689      	mov	r9, r1
 80037c0:	462b      	mov	r3, r5
 80037c2:	4620      	mov	r0, r4
 80037c4:	4629      	mov	r1, r5
 80037c6:	f7fc febb 	bl	8000540 <__aeabi_dmul>
 80037ca:	4642      	mov	r2, r8
 80037cc:	4606      	mov	r6, r0
 80037ce:	460f      	mov	r7, r1
 80037d0:	464b      	mov	r3, r9
 80037d2:	4620      	mov	r0, r4
 80037d4:	4629      	mov	r1, r5
 80037d6:	f7fc fcfd 	bl	80001d4 <__adddf3>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4630      	mov	r0, r6
 80037e0:	4639      	mov	r1, r7
 80037e2:	f7fc ffd7 	bl	8000794 <__aeabi_ddiv>
 80037e6:	ec53 2b18 	vmov	r2, r3, d8
 80037ea:	f7fc fcf1 	bl	80001d0 <__aeabi_dsub>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4650      	mov	r0, sl
 80037f4:	4659      	mov	r1, fp
 80037f6:	f7fc fceb 	bl	80001d0 <__aeabi_dsub>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	f7fc fce9 	bl	80001d4 <__adddf3>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4640      	mov	r0, r8
 8003808:	4649      	mov	r1, r9
 800380a:	f7fc fce1 	bl	80001d0 <__aeabi_dsub>
 800380e:	9b00      	ldr	r3, [sp, #0]
 8003810:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8003814:	f00a 0a02 	and.w	sl, sl, #2
 8003818:	4604      	mov	r4, r0
 800381a:	f1ca 0001 	rsb	r0, sl, #1
 800381e:	460d      	mov	r5, r1
 8003820:	f7fc fe24 	bl	800046c <__aeabi_i2d>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4620      	mov	r0, r4
 800382a:	4629      	mov	r1, r5
 800382c:	f7fc fe88 	bl	8000540 <__aeabi_dmul>
 8003830:	e69f      	b.n	8003572 <__kernel_tan+0x52>
 8003832:	bf00      	nop
 8003834:	f3af 8000 	nop.w
 8003838:	54442d18 	.word	0x54442d18
 800383c:	3fe921fb 	.word	0x3fe921fb
 8003840:	33145c07 	.word	0x33145c07
 8003844:	3c81a626 	.word	0x3c81a626
 8003848:	74bf7ad4 	.word	0x74bf7ad4
 800384c:	3efb2a70 	.word	0x3efb2a70
 8003850:	32f0a7e9 	.word	0x32f0a7e9
 8003854:	3f12b80f 	.word	0x3f12b80f
 8003858:	1a8d1068 	.word	0x1a8d1068
 800385c:	3f3026f7 	.word	0x3f3026f7
 8003860:	fee08315 	.word	0xfee08315
 8003864:	3f57dbc8 	.word	0x3f57dbc8
 8003868:	e96e8493 	.word	0xe96e8493
 800386c:	3f8226e3 	.word	0x3f8226e3
 8003870:	1bb341fe 	.word	0x1bb341fe
 8003874:	3faba1ba 	.word	0x3faba1ba
 8003878:	db605373 	.word	0xdb605373
 800387c:	bef375cb 	.word	0xbef375cb
 8003880:	a03792a6 	.word	0xa03792a6
 8003884:	3f147e88 	.word	0x3f147e88
 8003888:	f2f26501 	.word	0xf2f26501
 800388c:	3f4344d8 	.word	0x3f4344d8
 8003890:	c9560328 	.word	0xc9560328
 8003894:	3f6d6d22 	.word	0x3f6d6d22
 8003898:	8406d637 	.word	0x8406d637
 800389c:	3f9664f4 	.word	0x3f9664f4
 80038a0:	1110fe7a 	.word	0x1110fe7a
 80038a4:	3fc11111 	.word	0x3fc11111
 80038a8:	55555563 	.word	0x55555563
 80038ac:	3fd55555 	.word	0x3fd55555
 80038b0:	3e2fffff 	.word	0x3e2fffff
 80038b4:	3ff00000 	.word	0x3ff00000
 80038b8:	bff00000 	.word	0xbff00000
 80038bc:	3fe59427 	.word	0x3fe59427
 80038c0:	2e01      	cmp	r6, #1
 80038c2:	d02f      	beq.n	8003924 <__kernel_tan+0x404>
 80038c4:	460f      	mov	r7, r1
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4689      	mov	r9, r1
 80038cc:	2000      	movs	r0, #0
 80038ce:	4917      	ldr	r1, [pc, #92]	; (800392c <__kernel_tan+0x40c>)
 80038d0:	f7fc ff60 	bl	8000794 <__aeabi_ddiv>
 80038d4:	2600      	movs	r6, #0
 80038d6:	e9cd 0100 	strd	r0, r1, [sp]
 80038da:	4652      	mov	r2, sl
 80038dc:	465b      	mov	r3, fp
 80038de:	4630      	mov	r0, r6
 80038e0:	4639      	mov	r1, r7
 80038e2:	f7fc fc75 	bl	80001d0 <__aeabi_dsub>
 80038e6:	e9dd 4500 	ldrd	r4, r5, [sp]
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	ec51 0b18 	vmov	r0, r1, d8
 80038f2:	f7fc fc6d 	bl	80001d0 <__aeabi_dsub>
 80038f6:	4632      	mov	r2, r6
 80038f8:	462b      	mov	r3, r5
 80038fa:	f7fc fe21 	bl	8000540 <__aeabi_dmul>
 80038fe:	46b0      	mov	r8, r6
 8003900:	460f      	mov	r7, r1
 8003902:	4642      	mov	r2, r8
 8003904:	462b      	mov	r3, r5
 8003906:	4634      	mov	r4, r6
 8003908:	4649      	mov	r1, r9
 800390a:	4606      	mov	r6, r0
 800390c:	4640      	mov	r0, r8
 800390e:	f7fc fe17 	bl	8000540 <__aeabi_dmul>
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <__kernel_tan+0x410>)
 8003914:	2200      	movs	r2, #0
 8003916:	f7fc fc5d 	bl	80001d4 <__adddf3>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4630      	mov	r0, r6
 8003920:	4639      	mov	r1, r7
 8003922:	e665      	b.n	80035f0 <__kernel_tan+0xd0>
 8003924:	4682      	mov	sl, r0
 8003926:	468b      	mov	fp, r1
 8003928:	e625      	b.n	8003576 <__kernel_tan+0x56>
 800392a:	bf00      	nop
 800392c:	bff00000 	.word	0xbff00000
 8003930:	3ff00000 	.word	0x3ff00000
 8003934:	00000000 	.word	0x00000000

08003938 <__ieee754_rem_pio2>:
 8003938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800393c:	ed2d 8b02 	vpush	{d8}
 8003940:	ec55 4b10 	vmov	r4, r5, d0
 8003944:	4bca      	ldr	r3, [pc, #808]	; (8003c70 <__ieee754_rem_pio2+0x338>)
 8003946:	b08b      	sub	sp, #44	; 0x2c
 8003948:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800394c:	4598      	cmp	r8, r3
 800394e:	4682      	mov	sl, r0
 8003950:	9502      	str	r5, [sp, #8]
 8003952:	dc08      	bgt.n	8003966 <__ieee754_rem_pio2+0x2e>
 8003954:	2200      	movs	r2, #0
 8003956:	2300      	movs	r3, #0
 8003958:	ed80 0b00 	vstr	d0, [r0]
 800395c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003960:	f04f 0b00 	mov.w	fp, #0
 8003964:	e028      	b.n	80039b8 <__ieee754_rem_pio2+0x80>
 8003966:	4bc3      	ldr	r3, [pc, #780]	; (8003c74 <__ieee754_rem_pio2+0x33c>)
 8003968:	4598      	cmp	r8, r3
 800396a:	dc78      	bgt.n	8003a5e <__ieee754_rem_pio2+0x126>
 800396c:	9b02      	ldr	r3, [sp, #8]
 800396e:	4ec2      	ldr	r6, [pc, #776]	; (8003c78 <__ieee754_rem_pio2+0x340>)
 8003970:	2b00      	cmp	r3, #0
 8003972:	ee10 0a10 	vmov	r0, s0
 8003976:	a3b0      	add	r3, pc, #704	; (adr r3, 8003c38 <__ieee754_rem_pio2+0x300>)
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	4629      	mov	r1, r5
 800397e:	dd39      	ble.n	80039f4 <__ieee754_rem_pio2+0xbc>
 8003980:	f7fc fc26 	bl	80001d0 <__aeabi_dsub>
 8003984:	45b0      	cmp	r8, r6
 8003986:	4604      	mov	r4, r0
 8003988:	460d      	mov	r5, r1
 800398a:	d01b      	beq.n	80039c4 <__ieee754_rem_pio2+0x8c>
 800398c:	a3ac      	add	r3, pc, #688	; (adr r3, 8003c40 <__ieee754_rem_pio2+0x308>)
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	f7fc fc1d 	bl	80001d0 <__aeabi_dsub>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	e9ca 2300 	strd	r2, r3, [sl]
 800399e:	4620      	mov	r0, r4
 80039a0:	4629      	mov	r1, r5
 80039a2:	f7fc fc15 	bl	80001d0 <__aeabi_dsub>
 80039a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8003c40 <__ieee754_rem_pio2+0x308>)
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	f7fc fc10 	bl	80001d0 <__aeabi_dsub>
 80039b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80039b4:	f04f 0b01 	mov.w	fp, #1
 80039b8:	4658      	mov	r0, fp
 80039ba:	b00b      	add	sp, #44	; 0x2c
 80039bc:	ecbd 8b02 	vpop	{d8}
 80039c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c4:	a3a0      	add	r3, pc, #640	; (adr r3, 8003c48 <__ieee754_rem_pio2+0x310>)
 80039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ca:	f7fc fc01 	bl	80001d0 <__aeabi_dsub>
 80039ce:	a3a0      	add	r3, pc, #640	; (adr r3, 8003c50 <__ieee754_rem_pio2+0x318>)
 80039d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d4:	4604      	mov	r4, r0
 80039d6:	460d      	mov	r5, r1
 80039d8:	f7fc fbfa 	bl	80001d0 <__aeabi_dsub>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	e9ca 2300 	strd	r2, r3, [sl]
 80039e4:	4620      	mov	r0, r4
 80039e6:	4629      	mov	r1, r5
 80039e8:	f7fc fbf2 	bl	80001d0 <__aeabi_dsub>
 80039ec:	a398      	add	r3, pc, #608	; (adr r3, 8003c50 <__ieee754_rem_pio2+0x318>)
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	e7db      	b.n	80039ac <__ieee754_rem_pio2+0x74>
 80039f4:	f7fc fbee 	bl	80001d4 <__adddf3>
 80039f8:	45b0      	cmp	r8, r6
 80039fa:	4604      	mov	r4, r0
 80039fc:	460d      	mov	r5, r1
 80039fe:	d016      	beq.n	8003a2e <__ieee754_rem_pio2+0xf6>
 8003a00:	a38f      	add	r3, pc, #572	; (adr r3, 8003c40 <__ieee754_rem_pio2+0x308>)
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	f7fc fbe5 	bl	80001d4 <__adddf3>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	e9ca 2300 	strd	r2, r3, [sl]
 8003a12:	4620      	mov	r0, r4
 8003a14:	4629      	mov	r1, r5
 8003a16:	f7fc fbdb 	bl	80001d0 <__aeabi_dsub>
 8003a1a:	a389      	add	r3, pc, #548	; (adr r3, 8003c40 <__ieee754_rem_pio2+0x308>)
 8003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a20:	f7fc fbd8 	bl	80001d4 <__adddf3>
 8003a24:	f04f 3bff 	mov.w	fp, #4294967295
 8003a28:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003a2c:	e7c4      	b.n	80039b8 <__ieee754_rem_pio2+0x80>
 8003a2e:	a386      	add	r3, pc, #536	; (adr r3, 8003c48 <__ieee754_rem_pio2+0x310>)
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	f7fc fbce 	bl	80001d4 <__adddf3>
 8003a38:	a385      	add	r3, pc, #532	; (adr r3, 8003c50 <__ieee754_rem_pio2+0x318>)
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	4604      	mov	r4, r0
 8003a40:	460d      	mov	r5, r1
 8003a42:	f7fc fbc7 	bl	80001d4 <__adddf3>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	e9ca 2300 	strd	r2, r3, [sl]
 8003a4e:	4620      	mov	r0, r4
 8003a50:	4629      	mov	r1, r5
 8003a52:	f7fc fbbd 	bl	80001d0 <__aeabi_dsub>
 8003a56:	a37e      	add	r3, pc, #504	; (adr r3, 8003c50 <__ieee754_rem_pio2+0x318>)
 8003a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5c:	e7e0      	b.n	8003a20 <__ieee754_rem_pio2+0xe8>
 8003a5e:	4b87      	ldr	r3, [pc, #540]	; (8003c7c <__ieee754_rem_pio2+0x344>)
 8003a60:	4598      	cmp	r8, r3
 8003a62:	f300 80d8 	bgt.w	8003c16 <__ieee754_rem_pio2+0x2de>
 8003a66:	f000 f96d 	bl	8003d44 <fabs>
 8003a6a:	ec55 4b10 	vmov	r4, r5, d0
 8003a6e:	ee10 0a10 	vmov	r0, s0
 8003a72:	a379      	add	r3, pc, #484	; (adr r3, 8003c58 <__ieee754_rem_pio2+0x320>)
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	4629      	mov	r1, r5
 8003a7a:	f7fc fd61 	bl	8000540 <__aeabi_dmul>
 8003a7e:	4b80      	ldr	r3, [pc, #512]	; (8003c80 <__ieee754_rem_pio2+0x348>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	f7fc fba7 	bl	80001d4 <__adddf3>
 8003a86:	f7fc fff5 	bl	8000a74 <__aeabi_d2iz>
 8003a8a:	4683      	mov	fp, r0
 8003a8c:	f7fc fcee 	bl	800046c <__aeabi_i2d>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	ec43 2b18 	vmov	d8, r2, r3
 8003a98:	a367      	add	r3, pc, #412	; (adr r3, 8003c38 <__ieee754_rem_pio2+0x300>)
 8003a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9e:	f7fc fd4f 	bl	8000540 <__aeabi_dmul>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	f7fc fb91 	bl	80001d0 <__aeabi_dsub>
 8003aae:	a364      	add	r3, pc, #400	; (adr r3, 8003c40 <__ieee754_rem_pio2+0x308>)
 8003ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab4:	4606      	mov	r6, r0
 8003ab6:	460f      	mov	r7, r1
 8003ab8:	ec51 0b18 	vmov	r0, r1, d8
 8003abc:	f7fc fd40 	bl	8000540 <__aeabi_dmul>
 8003ac0:	f1bb 0f1f 	cmp.w	fp, #31
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	460d      	mov	r5, r1
 8003ac8:	dc0d      	bgt.n	8003ae6 <__ieee754_rem_pio2+0x1ae>
 8003aca:	4b6e      	ldr	r3, [pc, #440]	; (8003c84 <__ieee754_rem_pio2+0x34c>)
 8003acc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad4:	4543      	cmp	r3, r8
 8003ad6:	d006      	beq.n	8003ae6 <__ieee754_rem_pio2+0x1ae>
 8003ad8:	4622      	mov	r2, r4
 8003ada:	462b      	mov	r3, r5
 8003adc:	4630      	mov	r0, r6
 8003ade:	4639      	mov	r1, r7
 8003ae0:	f7fc fb76 	bl	80001d0 <__aeabi_dsub>
 8003ae4:	e00e      	b.n	8003b04 <__ieee754_rem_pio2+0x1cc>
 8003ae6:	462b      	mov	r3, r5
 8003ae8:	4622      	mov	r2, r4
 8003aea:	4630      	mov	r0, r6
 8003aec:	4639      	mov	r1, r7
 8003aee:	f7fc fb6f 	bl	80001d0 <__aeabi_dsub>
 8003af2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003af6:	9303      	str	r3, [sp, #12]
 8003af8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003afc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003b00:	2b10      	cmp	r3, #16
 8003b02:	dc02      	bgt.n	8003b0a <__ieee754_rem_pio2+0x1d2>
 8003b04:	e9ca 0100 	strd	r0, r1, [sl]
 8003b08:	e039      	b.n	8003b7e <__ieee754_rem_pio2+0x246>
 8003b0a:	a34f      	add	r3, pc, #316	; (adr r3, 8003c48 <__ieee754_rem_pio2+0x310>)
 8003b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b10:	ec51 0b18 	vmov	r0, r1, d8
 8003b14:	f7fc fd14 	bl	8000540 <__aeabi_dmul>
 8003b18:	4604      	mov	r4, r0
 8003b1a:	460d      	mov	r5, r1
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4630      	mov	r0, r6
 8003b22:	4639      	mov	r1, r7
 8003b24:	f7fc fb54 	bl	80001d0 <__aeabi_dsub>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4680      	mov	r8, r0
 8003b2e:	4689      	mov	r9, r1
 8003b30:	4630      	mov	r0, r6
 8003b32:	4639      	mov	r1, r7
 8003b34:	f7fc fb4c 	bl	80001d0 <__aeabi_dsub>
 8003b38:	4622      	mov	r2, r4
 8003b3a:	462b      	mov	r3, r5
 8003b3c:	f7fc fb48 	bl	80001d0 <__aeabi_dsub>
 8003b40:	a343      	add	r3, pc, #268	; (adr r3, 8003c50 <__ieee754_rem_pio2+0x318>)
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	4604      	mov	r4, r0
 8003b48:	460d      	mov	r5, r1
 8003b4a:	ec51 0b18 	vmov	r0, r1, d8
 8003b4e:	f7fc fcf7 	bl	8000540 <__aeabi_dmul>
 8003b52:	4622      	mov	r2, r4
 8003b54:	462b      	mov	r3, r5
 8003b56:	f7fc fb3b 	bl	80001d0 <__aeabi_dsub>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4604      	mov	r4, r0
 8003b60:	460d      	mov	r5, r1
 8003b62:	4640      	mov	r0, r8
 8003b64:	4649      	mov	r1, r9
 8003b66:	f7fc fb33 	bl	80001d0 <__aeabi_dsub>
 8003b6a:	9a03      	ldr	r2, [sp, #12]
 8003b6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b31      	cmp	r3, #49	; 0x31
 8003b74:	dc24      	bgt.n	8003bc0 <__ieee754_rem_pio2+0x288>
 8003b76:	e9ca 0100 	strd	r0, r1, [sl]
 8003b7a:	4646      	mov	r6, r8
 8003b7c:	464f      	mov	r7, r9
 8003b7e:	e9da 8900 	ldrd	r8, r9, [sl]
 8003b82:	4630      	mov	r0, r6
 8003b84:	4642      	mov	r2, r8
 8003b86:	464b      	mov	r3, r9
 8003b88:	4639      	mov	r1, r7
 8003b8a:	f7fc fb21 	bl	80001d0 <__aeabi_dsub>
 8003b8e:	462b      	mov	r3, r5
 8003b90:	4622      	mov	r2, r4
 8003b92:	f7fc fb1d 	bl	80001d0 <__aeabi_dsub>
 8003b96:	9b02      	ldr	r3, [sp, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003b9e:	f6bf af0b 	bge.w	80039b8 <__ieee754_rem_pio2+0x80>
 8003ba2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003ba6:	f8ca 3004 	str.w	r3, [sl, #4]
 8003baa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003bae:	f8ca 8000 	str.w	r8, [sl]
 8003bb2:	f8ca 0008 	str.w	r0, [sl, #8]
 8003bb6:	f8ca 300c 	str.w	r3, [sl, #12]
 8003bba:	f1cb 0b00 	rsb	fp, fp, #0
 8003bbe:	e6fb      	b.n	80039b8 <__ieee754_rem_pio2+0x80>
 8003bc0:	a327      	add	r3, pc, #156	; (adr r3, 8003c60 <__ieee754_rem_pio2+0x328>)
 8003bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc6:	ec51 0b18 	vmov	r0, r1, d8
 8003bca:	f7fc fcb9 	bl	8000540 <__aeabi_dmul>
 8003bce:	4604      	mov	r4, r0
 8003bd0:	460d      	mov	r5, r1
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4640      	mov	r0, r8
 8003bd8:	4649      	mov	r1, r9
 8003bda:	f7fc faf9 	bl	80001d0 <__aeabi_dsub>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4606      	mov	r6, r0
 8003be4:	460f      	mov	r7, r1
 8003be6:	4640      	mov	r0, r8
 8003be8:	4649      	mov	r1, r9
 8003bea:	f7fc faf1 	bl	80001d0 <__aeabi_dsub>
 8003bee:	4622      	mov	r2, r4
 8003bf0:	462b      	mov	r3, r5
 8003bf2:	f7fc faed 	bl	80001d0 <__aeabi_dsub>
 8003bf6:	a31c      	add	r3, pc, #112	; (adr r3, 8003c68 <__ieee754_rem_pio2+0x330>)
 8003bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	460d      	mov	r5, r1
 8003c00:	ec51 0b18 	vmov	r0, r1, d8
 8003c04:	f7fc fc9c 	bl	8000540 <__aeabi_dmul>
 8003c08:	4622      	mov	r2, r4
 8003c0a:	462b      	mov	r3, r5
 8003c0c:	f7fc fae0 	bl	80001d0 <__aeabi_dsub>
 8003c10:	4604      	mov	r4, r0
 8003c12:	460d      	mov	r5, r1
 8003c14:	e760      	b.n	8003ad8 <__ieee754_rem_pio2+0x1a0>
 8003c16:	4b1c      	ldr	r3, [pc, #112]	; (8003c88 <__ieee754_rem_pio2+0x350>)
 8003c18:	4598      	cmp	r8, r3
 8003c1a:	dd37      	ble.n	8003c8c <__ieee754_rem_pio2+0x354>
 8003c1c:	ee10 2a10 	vmov	r2, s0
 8003c20:	462b      	mov	r3, r5
 8003c22:	4620      	mov	r0, r4
 8003c24:	4629      	mov	r1, r5
 8003c26:	f7fc fad3 	bl	80001d0 <__aeabi_dsub>
 8003c2a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003c2e:	e9ca 0100 	strd	r0, r1, [sl]
 8003c32:	e695      	b.n	8003960 <__ieee754_rem_pio2+0x28>
 8003c34:	f3af 8000 	nop.w
 8003c38:	54400000 	.word	0x54400000
 8003c3c:	3ff921fb 	.word	0x3ff921fb
 8003c40:	1a626331 	.word	0x1a626331
 8003c44:	3dd0b461 	.word	0x3dd0b461
 8003c48:	1a600000 	.word	0x1a600000
 8003c4c:	3dd0b461 	.word	0x3dd0b461
 8003c50:	2e037073 	.word	0x2e037073
 8003c54:	3ba3198a 	.word	0x3ba3198a
 8003c58:	6dc9c883 	.word	0x6dc9c883
 8003c5c:	3fe45f30 	.word	0x3fe45f30
 8003c60:	2e000000 	.word	0x2e000000
 8003c64:	3ba3198a 	.word	0x3ba3198a
 8003c68:	252049c1 	.word	0x252049c1
 8003c6c:	397b839a 	.word	0x397b839a
 8003c70:	3fe921fb 	.word	0x3fe921fb
 8003c74:	4002d97b 	.word	0x4002d97b
 8003c78:	3ff921fb 	.word	0x3ff921fb
 8003c7c:	413921fb 	.word	0x413921fb
 8003c80:	3fe00000 	.word	0x3fe00000
 8003c84:	08004644 	.word	0x08004644
 8003c88:	7fefffff 	.word	0x7fefffff
 8003c8c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8003c90:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8003c94:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8003c98:	4620      	mov	r0, r4
 8003c9a:	460d      	mov	r5, r1
 8003c9c:	f7fc feea 	bl	8000a74 <__aeabi_d2iz>
 8003ca0:	f7fc fbe4 	bl	800046c <__aeabi_i2d>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4620      	mov	r0, r4
 8003caa:	4629      	mov	r1, r5
 8003cac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003cb0:	f7fc fa8e 	bl	80001d0 <__aeabi_dsub>
 8003cb4:	4b21      	ldr	r3, [pc, #132]	; (8003d3c <__ieee754_rem_pio2+0x404>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f7fc fc42 	bl	8000540 <__aeabi_dmul>
 8003cbc:	460d      	mov	r5, r1
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	f7fc fed8 	bl	8000a74 <__aeabi_d2iz>
 8003cc4:	f7fc fbd2 	bl	800046c <__aeabi_i2d>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4620      	mov	r0, r4
 8003cce:	4629      	mov	r1, r5
 8003cd0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003cd4:	f7fc fa7c 	bl	80001d0 <__aeabi_dsub>
 8003cd8:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <__ieee754_rem_pio2+0x404>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f7fc fc30 	bl	8000540 <__aeabi_dmul>
 8003ce0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003ce4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8003ce8:	2703      	movs	r7, #3
 8003cea:	2400      	movs	r4, #0
 8003cec:	2500      	movs	r5, #0
 8003cee:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8003cf2:	4622      	mov	r2, r4
 8003cf4:	462b      	mov	r3, r5
 8003cf6:	46b9      	mov	r9, r7
 8003cf8:	3f01      	subs	r7, #1
 8003cfa:	f7fc fe89 	bl	8000a10 <__aeabi_dcmpeq>
 8003cfe:	2800      	cmp	r0, #0
 8003d00:	d1f5      	bne.n	8003cee <__ieee754_rem_pio2+0x3b6>
 8003d02:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <__ieee754_rem_pio2+0x408>)
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	2302      	movs	r3, #2
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	4632      	mov	r2, r6
 8003d0c:	464b      	mov	r3, r9
 8003d0e:	4651      	mov	r1, sl
 8003d10:	a804      	add	r0, sp, #16
 8003d12:	f000 f821 	bl	8003d58 <__kernel_rem_pio2>
 8003d16:	9b02      	ldr	r3, [sp, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	4683      	mov	fp, r0
 8003d1c:	f6bf ae4c 	bge.w	80039b8 <__ieee754_rem_pio2+0x80>
 8003d20:	e9da 2100 	ldrd	r2, r1, [sl]
 8003d24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d28:	e9ca 2300 	strd	r2, r3, [sl]
 8003d2c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8003d30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d34:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8003d38:	e73f      	b.n	8003bba <__ieee754_rem_pio2+0x282>
 8003d3a:	bf00      	nop
 8003d3c:	41700000 	.word	0x41700000
 8003d40:	080046c4 	.word	0x080046c4

08003d44 <fabs>:
 8003d44:	ec51 0b10 	vmov	r0, r1, d0
 8003d48:	ee10 2a10 	vmov	r2, s0
 8003d4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003d50:	ec43 2b10 	vmov	d0, r2, r3
 8003d54:	4770      	bx	lr
	...

08003d58 <__kernel_rem_pio2>:
 8003d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d5c:	ed2d 8b02 	vpush	{d8}
 8003d60:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003d64:	f112 0f14 	cmn.w	r2, #20
 8003d68:	9306      	str	r3, [sp, #24]
 8003d6a:	9104      	str	r1, [sp, #16]
 8003d6c:	4bc2      	ldr	r3, [pc, #776]	; (8004078 <__kernel_rem_pio2+0x320>)
 8003d6e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8003d70:	9009      	str	r0, [sp, #36]	; 0x24
 8003d72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	9b06      	ldr	r3, [sp, #24]
 8003d7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d7e:	bfa8      	it	ge
 8003d80:	1ed4      	subge	r4, r2, #3
 8003d82:	9305      	str	r3, [sp, #20]
 8003d84:	bfb2      	itee	lt
 8003d86:	2400      	movlt	r4, #0
 8003d88:	2318      	movge	r3, #24
 8003d8a:	fb94 f4f3 	sdivge	r4, r4, r3
 8003d8e:	f06f 0317 	mvn.w	r3, #23
 8003d92:	fb04 3303 	mla	r3, r4, r3, r3
 8003d96:	eb03 0a02 	add.w	sl, r3, r2
 8003d9a:	9b00      	ldr	r3, [sp, #0]
 8003d9c:	9a05      	ldr	r2, [sp, #20]
 8003d9e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8004068 <__kernel_rem_pio2+0x310>
 8003da2:	eb03 0802 	add.w	r8, r3, r2
 8003da6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003da8:	1aa7      	subs	r7, r4, r2
 8003daa:	ae20      	add	r6, sp, #128	; 0x80
 8003dac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003db0:	2500      	movs	r5, #0
 8003db2:	4545      	cmp	r5, r8
 8003db4:	dd13      	ble.n	8003dde <__kernel_rem_pio2+0x86>
 8003db6:	9b06      	ldr	r3, [sp, #24]
 8003db8:	aa20      	add	r2, sp, #128	; 0x80
 8003dba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003dbe:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8003dc2:	f04f 0800 	mov.w	r8, #0
 8003dc6:	9b00      	ldr	r3, [sp, #0]
 8003dc8:	4598      	cmp	r8, r3
 8003dca:	dc31      	bgt.n	8003e30 <__kernel_rem_pio2+0xd8>
 8003dcc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8004068 <__kernel_rem_pio2+0x310>
 8003dd0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8003dd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003dd8:	462f      	mov	r7, r5
 8003dda:	2600      	movs	r6, #0
 8003ddc:	e01b      	b.n	8003e16 <__kernel_rem_pio2+0xbe>
 8003dde:	42ef      	cmn	r7, r5
 8003de0:	d407      	bmi.n	8003df2 <__kernel_rem_pio2+0x9a>
 8003de2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003de6:	f7fc fb41 	bl	800046c <__aeabi_i2d>
 8003dea:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003dee:	3501      	adds	r5, #1
 8003df0:	e7df      	b.n	8003db2 <__kernel_rem_pio2+0x5a>
 8003df2:	ec51 0b18 	vmov	r0, r1, d8
 8003df6:	e7f8      	b.n	8003dea <__kernel_rem_pio2+0x92>
 8003df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dfc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003e00:	f7fc fb9e 	bl	8000540 <__aeabi_dmul>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e0c:	f7fc f9e2 	bl	80001d4 <__adddf3>
 8003e10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e14:	3601      	adds	r6, #1
 8003e16:	9b05      	ldr	r3, [sp, #20]
 8003e18:	429e      	cmp	r6, r3
 8003e1a:	f1a7 0708 	sub.w	r7, r7, #8
 8003e1e:	ddeb      	ble.n	8003df8 <__kernel_rem_pio2+0xa0>
 8003e20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003e24:	f108 0801 	add.w	r8, r8, #1
 8003e28:	ecab 7b02 	vstmia	fp!, {d7}
 8003e2c:	3508      	adds	r5, #8
 8003e2e:	e7ca      	b.n	8003dc6 <__kernel_rem_pio2+0x6e>
 8003e30:	9b00      	ldr	r3, [sp, #0]
 8003e32:	aa0c      	add	r2, sp, #48	; 0x30
 8003e34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003e38:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e3a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003e3c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003e40:	9c00      	ldr	r4, [sp, #0]
 8003e42:	930a      	str	r3, [sp, #40]	; 0x28
 8003e44:	00e3      	lsls	r3, r4, #3
 8003e46:	9308      	str	r3, [sp, #32]
 8003e48:	ab98      	add	r3, sp, #608	; 0x260
 8003e4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003e4e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8003e52:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8003e56:	ab70      	add	r3, sp, #448	; 0x1c0
 8003e58:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8003e5c:	46c3      	mov	fp, r8
 8003e5e:	46a1      	mov	r9, r4
 8003e60:	f1b9 0f00 	cmp.w	r9, #0
 8003e64:	f1a5 0508 	sub.w	r5, r5, #8
 8003e68:	dc77      	bgt.n	8003f5a <__kernel_rem_pio2+0x202>
 8003e6a:	ec47 6b10 	vmov	d0, r6, r7
 8003e6e:	4650      	mov	r0, sl
 8003e70:	f000 fac2 	bl	80043f8 <scalbn>
 8003e74:	ec57 6b10 	vmov	r6, r7, d0
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003e7e:	ee10 0a10 	vmov	r0, s0
 8003e82:	4639      	mov	r1, r7
 8003e84:	f7fc fb5c 	bl	8000540 <__aeabi_dmul>
 8003e88:	ec41 0b10 	vmov	d0, r0, r1
 8003e8c:	f000 fb34 	bl	80044f8 <floor>
 8003e90:	4b7a      	ldr	r3, [pc, #488]	; (800407c <__kernel_rem_pio2+0x324>)
 8003e92:	ec51 0b10 	vmov	r0, r1, d0
 8003e96:	2200      	movs	r2, #0
 8003e98:	f7fc fb52 	bl	8000540 <__aeabi_dmul>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	4639      	mov	r1, r7
 8003ea4:	f7fc f994 	bl	80001d0 <__aeabi_dsub>
 8003ea8:	460f      	mov	r7, r1
 8003eaa:	4606      	mov	r6, r0
 8003eac:	f7fc fde2 	bl	8000a74 <__aeabi_d2iz>
 8003eb0:	9002      	str	r0, [sp, #8]
 8003eb2:	f7fc fadb 	bl	800046c <__aeabi_i2d>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4630      	mov	r0, r6
 8003ebc:	4639      	mov	r1, r7
 8003ebe:	f7fc f987 	bl	80001d0 <__aeabi_dsub>
 8003ec2:	f1ba 0f00 	cmp.w	sl, #0
 8003ec6:	4606      	mov	r6, r0
 8003ec8:	460f      	mov	r7, r1
 8003eca:	dd6d      	ble.n	8003fa8 <__kernel_rem_pio2+0x250>
 8003ecc:	1e61      	subs	r1, r4, #1
 8003ece:	ab0c      	add	r3, sp, #48	; 0x30
 8003ed0:	9d02      	ldr	r5, [sp, #8]
 8003ed2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ed6:	f1ca 0018 	rsb	r0, sl, #24
 8003eda:	fa43 f200 	asr.w	r2, r3, r0
 8003ede:	4415      	add	r5, r2
 8003ee0:	4082      	lsls	r2, r0
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	aa0c      	add	r2, sp, #48	; 0x30
 8003ee6:	9502      	str	r5, [sp, #8]
 8003ee8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003eec:	f1ca 0217 	rsb	r2, sl, #23
 8003ef0:	fa43 fb02 	asr.w	fp, r3, r2
 8003ef4:	f1bb 0f00 	cmp.w	fp, #0
 8003ef8:	dd65      	ble.n	8003fc6 <__kernel_rem_pio2+0x26e>
 8003efa:	9b02      	ldr	r3, [sp, #8]
 8003efc:	2200      	movs	r2, #0
 8003efe:	3301      	adds	r3, #1
 8003f00:	9302      	str	r3, [sp, #8]
 8003f02:	4615      	mov	r5, r2
 8003f04:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003f08:	4294      	cmp	r4, r2
 8003f0a:	f300 809f 	bgt.w	800404c <__kernel_rem_pio2+0x2f4>
 8003f0e:	f1ba 0f00 	cmp.w	sl, #0
 8003f12:	dd07      	ble.n	8003f24 <__kernel_rem_pio2+0x1cc>
 8003f14:	f1ba 0f01 	cmp.w	sl, #1
 8003f18:	f000 80c1 	beq.w	800409e <__kernel_rem_pio2+0x346>
 8003f1c:	f1ba 0f02 	cmp.w	sl, #2
 8003f20:	f000 80c7 	beq.w	80040b2 <__kernel_rem_pio2+0x35a>
 8003f24:	f1bb 0f02 	cmp.w	fp, #2
 8003f28:	d14d      	bne.n	8003fc6 <__kernel_rem_pio2+0x26e>
 8003f2a:	4632      	mov	r2, r6
 8003f2c:	463b      	mov	r3, r7
 8003f2e:	4954      	ldr	r1, [pc, #336]	; (8004080 <__kernel_rem_pio2+0x328>)
 8003f30:	2000      	movs	r0, #0
 8003f32:	f7fc f94d 	bl	80001d0 <__aeabi_dsub>
 8003f36:	4606      	mov	r6, r0
 8003f38:	460f      	mov	r7, r1
 8003f3a:	2d00      	cmp	r5, #0
 8003f3c:	d043      	beq.n	8003fc6 <__kernel_rem_pio2+0x26e>
 8003f3e:	4650      	mov	r0, sl
 8003f40:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8004070 <__kernel_rem_pio2+0x318>
 8003f44:	f000 fa58 	bl	80043f8 <scalbn>
 8003f48:	4630      	mov	r0, r6
 8003f4a:	4639      	mov	r1, r7
 8003f4c:	ec53 2b10 	vmov	r2, r3, d0
 8003f50:	f7fc f93e 	bl	80001d0 <__aeabi_dsub>
 8003f54:	4606      	mov	r6, r0
 8003f56:	460f      	mov	r7, r1
 8003f58:	e035      	b.n	8003fc6 <__kernel_rem_pio2+0x26e>
 8003f5a:	4b4a      	ldr	r3, [pc, #296]	; (8004084 <__kernel_rem_pio2+0x32c>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	4630      	mov	r0, r6
 8003f60:	4639      	mov	r1, r7
 8003f62:	f7fc faed 	bl	8000540 <__aeabi_dmul>
 8003f66:	f7fc fd85 	bl	8000a74 <__aeabi_d2iz>
 8003f6a:	f7fc fa7f 	bl	800046c <__aeabi_i2d>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	ec43 2b18 	vmov	d8, r2, r3
 8003f76:	4b44      	ldr	r3, [pc, #272]	; (8004088 <__kernel_rem_pio2+0x330>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f7fc fae1 	bl	8000540 <__aeabi_dmul>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4630      	mov	r0, r6
 8003f84:	4639      	mov	r1, r7
 8003f86:	f7fc f923 	bl	80001d0 <__aeabi_dsub>
 8003f8a:	f7fc fd73 	bl	8000a74 <__aeabi_d2iz>
 8003f8e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003f92:	f84b 0b04 	str.w	r0, [fp], #4
 8003f96:	ec51 0b18 	vmov	r0, r1, d8
 8003f9a:	f7fc f91b 	bl	80001d4 <__adddf3>
 8003f9e:	f109 39ff 	add.w	r9, r9, #4294967295
 8003fa2:	4606      	mov	r6, r0
 8003fa4:	460f      	mov	r7, r1
 8003fa6:	e75b      	b.n	8003e60 <__kernel_rem_pio2+0x108>
 8003fa8:	d106      	bne.n	8003fb8 <__kernel_rem_pio2+0x260>
 8003faa:	1e63      	subs	r3, r4, #1
 8003fac:	aa0c      	add	r2, sp, #48	; 0x30
 8003fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8003fb6:	e79d      	b.n	8003ef4 <__kernel_rem_pio2+0x19c>
 8003fb8:	4b34      	ldr	r3, [pc, #208]	; (800408c <__kernel_rem_pio2+0x334>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f7fc fd46 	bl	8000a4c <__aeabi_dcmpge>
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d140      	bne.n	8004046 <__kernel_rem_pio2+0x2ee>
 8003fc4:	4683      	mov	fp, r0
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2300      	movs	r3, #0
 8003fca:	4630      	mov	r0, r6
 8003fcc:	4639      	mov	r1, r7
 8003fce:	f7fc fd1f 	bl	8000a10 <__aeabi_dcmpeq>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	f000 80c1 	beq.w	800415a <__kernel_rem_pio2+0x402>
 8003fd8:	1e65      	subs	r5, r4, #1
 8003fda:	462b      	mov	r3, r5
 8003fdc:	2200      	movs	r2, #0
 8003fde:	9900      	ldr	r1, [sp, #0]
 8003fe0:	428b      	cmp	r3, r1
 8003fe2:	da6d      	bge.n	80040c0 <__kernel_rem_pio2+0x368>
 8003fe4:	2a00      	cmp	r2, #0
 8003fe6:	f000 808a 	beq.w	80040fe <__kernel_rem_pio2+0x3a6>
 8003fea:	ab0c      	add	r3, sp, #48	; 0x30
 8003fec:	f1aa 0a18 	sub.w	sl, sl, #24
 8003ff0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80ae 	beq.w	8004156 <__kernel_rem_pio2+0x3fe>
 8003ffa:	4650      	mov	r0, sl
 8003ffc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8004070 <__kernel_rem_pio2+0x318>
 8004000:	f000 f9fa 	bl	80043f8 <scalbn>
 8004004:	1c6b      	adds	r3, r5, #1
 8004006:	00da      	lsls	r2, r3, #3
 8004008:	9205      	str	r2, [sp, #20]
 800400a:	ec57 6b10 	vmov	r6, r7, d0
 800400e:	aa70      	add	r2, sp, #448	; 0x1c0
 8004010:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8004084 <__kernel_rem_pio2+0x32c>
 8004014:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8004018:	462c      	mov	r4, r5
 800401a:	f04f 0800 	mov.w	r8, #0
 800401e:	2c00      	cmp	r4, #0
 8004020:	f280 80d4 	bge.w	80041cc <__kernel_rem_pio2+0x474>
 8004024:	462c      	mov	r4, r5
 8004026:	2c00      	cmp	r4, #0
 8004028:	f2c0 8102 	blt.w	8004230 <__kernel_rem_pio2+0x4d8>
 800402c:	4b18      	ldr	r3, [pc, #96]	; (8004090 <__kernel_rem_pio2+0x338>)
 800402e:	461e      	mov	r6, r3
 8004030:	ab70      	add	r3, sp, #448	; 0x1c0
 8004032:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8004036:	1b2b      	subs	r3, r5, r4
 8004038:	f04f 0900 	mov.w	r9, #0
 800403c:	f04f 0a00 	mov.w	sl, #0
 8004040:	2700      	movs	r7, #0
 8004042:	9306      	str	r3, [sp, #24]
 8004044:	e0e6      	b.n	8004214 <__kernel_rem_pio2+0x4bc>
 8004046:	f04f 0b02 	mov.w	fp, #2
 800404a:	e756      	b.n	8003efa <__kernel_rem_pio2+0x1a2>
 800404c:	f8d8 3000 	ldr.w	r3, [r8]
 8004050:	bb05      	cbnz	r5, 8004094 <__kernel_rem_pio2+0x33c>
 8004052:	b123      	cbz	r3, 800405e <__kernel_rem_pio2+0x306>
 8004054:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004058:	f8c8 3000 	str.w	r3, [r8]
 800405c:	2301      	movs	r3, #1
 800405e:	3201      	adds	r2, #1
 8004060:	f108 0804 	add.w	r8, r8, #4
 8004064:	461d      	mov	r5, r3
 8004066:	e74f      	b.n	8003f08 <__kernel_rem_pio2+0x1b0>
	...
 8004074:	3ff00000 	.word	0x3ff00000
 8004078:	08004810 	.word	0x08004810
 800407c:	40200000 	.word	0x40200000
 8004080:	3ff00000 	.word	0x3ff00000
 8004084:	3e700000 	.word	0x3e700000
 8004088:	41700000 	.word	0x41700000
 800408c:	3fe00000 	.word	0x3fe00000
 8004090:	080047d0 	.word	0x080047d0
 8004094:	1acb      	subs	r3, r1, r3
 8004096:	f8c8 3000 	str.w	r3, [r8]
 800409a:	462b      	mov	r3, r5
 800409c:	e7df      	b.n	800405e <__kernel_rem_pio2+0x306>
 800409e:	1e62      	subs	r2, r4, #1
 80040a0:	ab0c      	add	r3, sp, #48	; 0x30
 80040a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80040aa:	a90c      	add	r1, sp, #48	; 0x30
 80040ac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80040b0:	e738      	b.n	8003f24 <__kernel_rem_pio2+0x1cc>
 80040b2:	1e62      	subs	r2, r4, #1
 80040b4:	ab0c      	add	r3, sp, #48	; 0x30
 80040b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80040be:	e7f4      	b.n	80040aa <__kernel_rem_pio2+0x352>
 80040c0:	a90c      	add	r1, sp, #48	; 0x30
 80040c2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	430a      	orrs	r2, r1
 80040ca:	e788      	b.n	8003fde <__kernel_rem_pio2+0x286>
 80040cc:	3301      	adds	r3, #1
 80040ce:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80040d2:	2900      	cmp	r1, #0
 80040d4:	d0fa      	beq.n	80040cc <__kernel_rem_pio2+0x374>
 80040d6:	9a08      	ldr	r2, [sp, #32]
 80040d8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80040dc:	446a      	add	r2, sp
 80040de:	3a98      	subs	r2, #152	; 0x98
 80040e0:	9208      	str	r2, [sp, #32]
 80040e2:	9a06      	ldr	r2, [sp, #24]
 80040e4:	a920      	add	r1, sp, #128	; 0x80
 80040e6:	18a2      	adds	r2, r4, r2
 80040e8:	18e3      	adds	r3, r4, r3
 80040ea:	f104 0801 	add.w	r8, r4, #1
 80040ee:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80040f2:	9302      	str	r3, [sp, #8]
 80040f4:	9b02      	ldr	r3, [sp, #8]
 80040f6:	4543      	cmp	r3, r8
 80040f8:	da04      	bge.n	8004104 <__kernel_rem_pio2+0x3ac>
 80040fa:	461c      	mov	r4, r3
 80040fc:	e6a2      	b.n	8003e44 <__kernel_rem_pio2+0xec>
 80040fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004100:	2301      	movs	r3, #1
 8004102:	e7e4      	b.n	80040ce <__kernel_rem_pio2+0x376>
 8004104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004106:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800410a:	f7fc f9af 	bl	800046c <__aeabi_i2d>
 800410e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004114:	46ab      	mov	fp, r5
 8004116:	461c      	mov	r4, r3
 8004118:	f04f 0900 	mov.w	r9, #0
 800411c:	2600      	movs	r6, #0
 800411e:	2700      	movs	r7, #0
 8004120:	9b05      	ldr	r3, [sp, #20]
 8004122:	4599      	cmp	r9, r3
 8004124:	dd06      	ble.n	8004134 <__kernel_rem_pio2+0x3dc>
 8004126:	9b08      	ldr	r3, [sp, #32]
 8004128:	e8e3 6702 	strd	r6, r7, [r3], #8
 800412c:	f108 0801 	add.w	r8, r8, #1
 8004130:	9308      	str	r3, [sp, #32]
 8004132:	e7df      	b.n	80040f4 <__kernel_rem_pio2+0x39c>
 8004134:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004138:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800413c:	f7fc fa00 	bl	8000540 <__aeabi_dmul>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4630      	mov	r0, r6
 8004146:	4639      	mov	r1, r7
 8004148:	f7fc f844 	bl	80001d4 <__adddf3>
 800414c:	f109 0901 	add.w	r9, r9, #1
 8004150:	4606      	mov	r6, r0
 8004152:	460f      	mov	r7, r1
 8004154:	e7e4      	b.n	8004120 <__kernel_rem_pio2+0x3c8>
 8004156:	3d01      	subs	r5, #1
 8004158:	e747      	b.n	8003fea <__kernel_rem_pio2+0x292>
 800415a:	ec47 6b10 	vmov	d0, r6, r7
 800415e:	f1ca 0000 	rsb	r0, sl, #0
 8004162:	f000 f949 	bl	80043f8 <scalbn>
 8004166:	ec57 6b10 	vmov	r6, r7, d0
 800416a:	4ba0      	ldr	r3, [pc, #640]	; (80043ec <__kernel_rem_pio2+0x694>)
 800416c:	ee10 0a10 	vmov	r0, s0
 8004170:	2200      	movs	r2, #0
 8004172:	4639      	mov	r1, r7
 8004174:	f7fc fc6a 	bl	8000a4c <__aeabi_dcmpge>
 8004178:	b1f8      	cbz	r0, 80041ba <__kernel_rem_pio2+0x462>
 800417a:	4b9d      	ldr	r3, [pc, #628]	; (80043f0 <__kernel_rem_pio2+0x698>)
 800417c:	2200      	movs	r2, #0
 800417e:	4630      	mov	r0, r6
 8004180:	4639      	mov	r1, r7
 8004182:	f7fc f9dd 	bl	8000540 <__aeabi_dmul>
 8004186:	f7fc fc75 	bl	8000a74 <__aeabi_d2iz>
 800418a:	4680      	mov	r8, r0
 800418c:	f7fc f96e 	bl	800046c <__aeabi_i2d>
 8004190:	4b96      	ldr	r3, [pc, #600]	; (80043ec <__kernel_rem_pio2+0x694>)
 8004192:	2200      	movs	r2, #0
 8004194:	f7fc f9d4 	bl	8000540 <__aeabi_dmul>
 8004198:	460b      	mov	r3, r1
 800419a:	4602      	mov	r2, r0
 800419c:	4639      	mov	r1, r7
 800419e:	4630      	mov	r0, r6
 80041a0:	f7fc f816 	bl	80001d0 <__aeabi_dsub>
 80041a4:	f7fc fc66 	bl	8000a74 <__aeabi_d2iz>
 80041a8:	1c65      	adds	r5, r4, #1
 80041aa:	ab0c      	add	r3, sp, #48	; 0x30
 80041ac:	f10a 0a18 	add.w	sl, sl, #24
 80041b0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80041b4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80041b8:	e71f      	b.n	8003ffa <__kernel_rem_pio2+0x2a2>
 80041ba:	4630      	mov	r0, r6
 80041bc:	4639      	mov	r1, r7
 80041be:	f7fc fc59 	bl	8000a74 <__aeabi_d2iz>
 80041c2:	ab0c      	add	r3, sp, #48	; 0x30
 80041c4:	4625      	mov	r5, r4
 80041c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80041ca:	e716      	b.n	8003ffa <__kernel_rem_pio2+0x2a2>
 80041cc:	ab0c      	add	r3, sp, #48	; 0x30
 80041ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80041d2:	f7fc f94b 	bl	800046c <__aeabi_i2d>
 80041d6:	4632      	mov	r2, r6
 80041d8:	463b      	mov	r3, r7
 80041da:	f7fc f9b1 	bl	8000540 <__aeabi_dmul>
 80041de:	4642      	mov	r2, r8
 80041e0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80041e4:	464b      	mov	r3, r9
 80041e6:	4630      	mov	r0, r6
 80041e8:	4639      	mov	r1, r7
 80041ea:	f7fc f9a9 	bl	8000540 <__aeabi_dmul>
 80041ee:	3c01      	subs	r4, #1
 80041f0:	4606      	mov	r6, r0
 80041f2:	460f      	mov	r7, r1
 80041f4:	e713      	b.n	800401e <__kernel_rem_pio2+0x2c6>
 80041f6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80041fa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80041fe:	f7fc f99f 	bl	8000540 <__aeabi_dmul>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4648      	mov	r0, r9
 8004208:	4651      	mov	r1, sl
 800420a:	f7fb ffe3 	bl	80001d4 <__adddf3>
 800420e:	3701      	adds	r7, #1
 8004210:	4681      	mov	r9, r0
 8004212:	468a      	mov	sl, r1
 8004214:	9b00      	ldr	r3, [sp, #0]
 8004216:	429f      	cmp	r7, r3
 8004218:	dc02      	bgt.n	8004220 <__kernel_rem_pio2+0x4c8>
 800421a:	9b06      	ldr	r3, [sp, #24]
 800421c:	429f      	cmp	r7, r3
 800421e:	ddea      	ble.n	80041f6 <__kernel_rem_pio2+0x49e>
 8004220:	9a06      	ldr	r2, [sp, #24]
 8004222:	ab48      	add	r3, sp, #288	; 0x120
 8004224:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8004228:	e9c6 9a00 	strd	r9, sl, [r6]
 800422c:	3c01      	subs	r4, #1
 800422e:	e6fa      	b.n	8004026 <__kernel_rem_pio2+0x2ce>
 8004230:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004232:	2b02      	cmp	r3, #2
 8004234:	dc0b      	bgt.n	800424e <__kernel_rem_pio2+0x4f6>
 8004236:	2b00      	cmp	r3, #0
 8004238:	dc39      	bgt.n	80042ae <__kernel_rem_pio2+0x556>
 800423a:	d05d      	beq.n	80042f8 <__kernel_rem_pio2+0x5a0>
 800423c:	9b02      	ldr	r3, [sp, #8]
 800423e:	f003 0007 	and.w	r0, r3, #7
 8004242:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004246:	ecbd 8b02 	vpop	{d8}
 800424a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800424e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004250:	2b03      	cmp	r3, #3
 8004252:	d1f3      	bne.n	800423c <__kernel_rem_pio2+0x4e4>
 8004254:	9b05      	ldr	r3, [sp, #20]
 8004256:	9500      	str	r5, [sp, #0]
 8004258:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800425c:	eb0d 0403 	add.w	r4, sp, r3
 8004260:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8004264:	46a2      	mov	sl, r4
 8004266:	9b00      	ldr	r3, [sp, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	f1aa 0a08 	sub.w	sl, sl, #8
 800426e:	dc69      	bgt.n	8004344 <__kernel_rem_pio2+0x5ec>
 8004270:	46aa      	mov	sl, r5
 8004272:	f1ba 0f01 	cmp.w	sl, #1
 8004276:	f1a4 0408 	sub.w	r4, r4, #8
 800427a:	f300 8083 	bgt.w	8004384 <__kernel_rem_pio2+0x62c>
 800427e:	9c05      	ldr	r4, [sp, #20]
 8004280:	ab48      	add	r3, sp, #288	; 0x120
 8004282:	441c      	add	r4, r3
 8004284:	2000      	movs	r0, #0
 8004286:	2100      	movs	r1, #0
 8004288:	2d01      	cmp	r5, #1
 800428a:	f300 809a 	bgt.w	80043c2 <__kernel_rem_pio2+0x66a>
 800428e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8004292:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8004296:	f1bb 0f00 	cmp.w	fp, #0
 800429a:	f040 8098 	bne.w	80043ce <__kernel_rem_pio2+0x676>
 800429e:	9b04      	ldr	r3, [sp, #16]
 80042a0:	e9c3 7800 	strd	r7, r8, [r3]
 80042a4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80042a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80042ac:	e7c6      	b.n	800423c <__kernel_rem_pio2+0x4e4>
 80042ae:	9e05      	ldr	r6, [sp, #20]
 80042b0:	ab48      	add	r3, sp, #288	; 0x120
 80042b2:	441e      	add	r6, r3
 80042b4:	462c      	mov	r4, r5
 80042b6:	2000      	movs	r0, #0
 80042b8:	2100      	movs	r1, #0
 80042ba:	2c00      	cmp	r4, #0
 80042bc:	da33      	bge.n	8004326 <__kernel_rem_pio2+0x5ce>
 80042be:	f1bb 0f00 	cmp.w	fp, #0
 80042c2:	d036      	beq.n	8004332 <__kernel_rem_pio2+0x5da>
 80042c4:	4602      	mov	r2, r0
 80042c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80042ca:	9c04      	ldr	r4, [sp, #16]
 80042cc:	e9c4 2300 	strd	r2, r3, [r4]
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80042d8:	f7fb ff7a 	bl	80001d0 <__aeabi_dsub>
 80042dc:	ae4a      	add	r6, sp, #296	; 0x128
 80042de:	2401      	movs	r4, #1
 80042e0:	42a5      	cmp	r5, r4
 80042e2:	da29      	bge.n	8004338 <__kernel_rem_pio2+0x5e0>
 80042e4:	f1bb 0f00 	cmp.w	fp, #0
 80042e8:	d002      	beq.n	80042f0 <__kernel_rem_pio2+0x598>
 80042ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80042ee:	4619      	mov	r1, r3
 80042f0:	9b04      	ldr	r3, [sp, #16]
 80042f2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80042f6:	e7a1      	b.n	800423c <__kernel_rem_pio2+0x4e4>
 80042f8:	9c05      	ldr	r4, [sp, #20]
 80042fa:	ab48      	add	r3, sp, #288	; 0x120
 80042fc:	441c      	add	r4, r3
 80042fe:	2000      	movs	r0, #0
 8004300:	2100      	movs	r1, #0
 8004302:	2d00      	cmp	r5, #0
 8004304:	da09      	bge.n	800431a <__kernel_rem_pio2+0x5c2>
 8004306:	f1bb 0f00 	cmp.w	fp, #0
 800430a:	d002      	beq.n	8004312 <__kernel_rem_pio2+0x5ba>
 800430c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004310:	4619      	mov	r1, r3
 8004312:	9b04      	ldr	r3, [sp, #16]
 8004314:	e9c3 0100 	strd	r0, r1, [r3]
 8004318:	e790      	b.n	800423c <__kernel_rem_pio2+0x4e4>
 800431a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800431e:	f7fb ff59 	bl	80001d4 <__adddf3>
 8004322:	3d01      	subs	r5, #1
 8004324:	e7ed      	b.n	8004302 <__kernel_rem_pio2+0x5aa>
 8004326:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800432a:	f7fb ff53 	bl	80001d4 <__adddf3>
 800432e:	3c01      	subs	r4, #1
 8004330:	e7c3      	b.n	80042ba <__kernel_rem_pio2+0x562>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	e7c8      	b.n	80042ca <__kernel_rem_pio2+0x572>
 8004338:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800433c:	f7fb ff4a 	bl	80001d4 <__adddf3>
 8004340:	3401      	adds	r4, #1
 8004342:	e7cd      	b.n	80042e0 <__kernel_rem_pio2+0x588>
 8004344:	e9da 8900 	ldrd	r8, r9, [sl]
 8004348:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800434c:	9b00      	ldr	r3, [sp, #0]
 800434e:	3b01      	subs	r3, #1
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	4632      	mov	r2, r6
 8004354:	463b      	mov	r3, r7
 8004356:	4640      	mov	r0, r8
 8004358:	4649      	mov	r1, r9
 800435a:	f7fb ff3b 	bl	80001d4 <__adddf3>
 800435e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4640      	mov	r0, r8
 8004368:	4649      	mov	r1, r9
 800436a:	f7fb ff31 	bl	80001d0 <__aeabi_dsub>
 800436e:	4632      	mov	r2, r6
 8004370:	463b      	mov	r3, r7
 8004372:	f7fb ff2f 	bl	80001d4 <__adddf3>
 8004376:	ed9d 7b06 	vldr	d7, [sp, #24]
 800437a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800437e:	ed8a 7b00 	vstr	d7, [sl]
 8004382:	e770      	b.n	8004266 <__kernel_rem_pio2+0x50e>
 8004384:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004388:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800438c:	4640      	mov	r0, r8
 800438e:	4632      	mov	r2, r6
 8004390:	463b      	mov	r3, r7
 8004392:	4649      	mov	r1, r9
 8004394:	f7fb ff1e 	bl	80001d4 <__adddf3>
 8004398:	e9cd 0100 	strd	r0, r1, [sp]
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4640      	mov	r0, r8
 80043a2:	4649      	mov	r1, r9
 80043a4:	f7fb ff14 	bl	80001d0 <__aeabi_dsub>
 80043a8:	4632      	mov	r2, r6
 80043aa:	463b      	mov	r3, r7
 80043ac:	f7fb ff12 	bl	80001d4 <__adddf3>
 80043b0:	ed9d 7b00 	vldr	d7, [sp]
 80043b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80043b8:	ed84 7b00 	vstr	d7, [r4]
 80043bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043c0:	e757      	b.n	8004272 <__kernel_rem_pio2+0x51a>
 80043c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80043c6:	f7fb ff05 	bl	80001d4 <__adddf3>
 80043ca:	3d01      	subs	r5, #1
 80043cc:	e75c      	b.n	8004288 <__kernel_rem_pio2+0x530>
 80043ce:	9b04      	ldr	r3, [sp, #16]
 80043d0:	9a04      	ldr	r2, [sp, #16]
 80043d2:	601f      	str	r7, [r3, #0]
 80043d4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80043d8:	605c      	str	r4, [r3, #4]
 80043da:	609d      	str	r5, [r3, #8]
 80043dc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80043e0:	60d3      	str	r3, [r2, #12]
 80043e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043e6:	6110      	str	r0, [r2, #16]
 80043e8:	6153      	str	r3, [r2, #20]
 80043ea:	e727      	b.n	800423c <__kernel_rem_pio2+0x4e4>
 80043ec:	41700000 	.word	0x41700000
 80043f0:	3e700000 	.word	0x3e700000
 80043f4:	00000000 	.word	0x00000000

080043f8 <scalbn>:
 80043f8:	b570      	push	{r4, r5, r6, lr}
 80043fa:	ec55 4b10 	vmov	r4, r5, d0
 80043fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004402:	4606      	mov	r6, r0
 8004404:	462b      	mov	r3, r5
 8004406:	b999      	cbnz	r1, 8004430 <scalbn+0x38>
 8004408:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800440c:	4323      	orrs	r3, r4
 800440e:	d03f      	beq.n	8004490 <scalbn+0x98>
 8004410:	4b35      	ldr	r3, [pc, #212]	; (80044e8 <scalbn+0xf0>)
 8004412:	4629      	mov	r1, r5
 8004414:	ee10 0a10 	vmov	r0, s0
 8004418:	2200      	movs	r2, #0
 800441a:	f7fc f891 	bl	8000540 <__aeabi_dmul>
 800441e:	4b33      	ldr	r3, [pc, #204]	; (80044ec <scalbn+0xf4>)
 8004420:	429e      	cmp	r6, r3
 8004422:	4604      	mov	r4, r0
 8004424:	460d      	mov	r5, r1
 8004426:	da10      	bge.n	800444a <scalbn+0x52>
 8004428:	a327      	add	r3, pc, #156	; (adr r3, 80044c8 <scalbn+0xd0>)
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	e01f      	b.n	8004470 <scalbn+0x78>
 8004430:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004434:	4291      	cmp	r1, r2
 8004436:	d10c      	bne.n	8004452 <scalbn+0x5a>
 8004438:	ee10 2a10 	vmov	r2, s0
 800443c:	4620      	mov	r0, r4
 800443e:	4629      	mov	r1, r5
 8004440:	f7fb fec8 	bl	80001d4 <__adddf3>
 8004444:	4604      	mov	r4, r0
 8004446:	460d      	mov	r5, r1
 8004448:	e022      	b.n	8004490 <scalbn+0x98>
 800444a:	460b      	mov	r3, r1
 800444c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004450:	3936      	subs	r1, #54	; 0x36
 8004452:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004456:	4296      	cmp	r6, r2
 8004458:	dd0d      	ble.n	8004476 <scalbn+0x7e>
 800445a:	2d00      	cmp	r5, #0
 800445c:	a11c      	add	r1, pc, #112	; (adr r1, 80044d0 <scalbn+0xd8>)
 800445e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004462:	da02      	bge.n	800446a <scalbn+0x72>
 8004464:	a11c      	add	r1, pc, #112	; (adr r1, 80044d8 <scalbn+0xe0>)
 8004466:	e9d1 0100 	ldrd	r0, r1, [r1]
 800446a:	a319      	add	r3, pc, #100	; (adr r3, 80044d0 <scalbn+0xd8>)
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f7fc f866 	bl	8000540 <__aeabi_dmul>
 8004474:	e7e6      	b.n	8004444 <scalbn+0x4c>
 8004476:	1872      	adds	r2, r6, r1
 8004478:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800447c:	428a      	cmp	r2, r1
 800447e:	dcec      	bgt.n	800445a <scalbn+0x62>
 8004480:	2a00      	cmp	r2, #0
 8004482:	dd08      	ble.n	8004496 <scalbn+0x9e>
 8004484:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004488:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800448c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004490:	ec45 4b10 	vmov	d0, r4, r5
 8004494:	bd70      	pop	{r4, r5, r6, pc}
 8004496:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800449a:	da08      	bge.n	80044ae <scalbn+0xb6>
 800449c:	2d00      	cmp	r5, #0
 800449e:	a10a      	add	r1, pc, #40	; (adr r1, 80044c8 <scalbn+0xd0>)
 80044a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044a4:	dac0      	bge.n	8004428 <scalbn+0x30>
 80044a6:	a10e      	add	r1, pc, #56	; (adr r1, 80044e0 <scalbn+0xe8>)
 80044a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044ac:	e7bc      	b.n	8004428 <scalbn+0x30>
 80044ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80044b2:	3236      	adds	r2, #54	; 0x36
 80044b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80044b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80044bc:	4620      	mov	r0, r4
 80044be:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <scalbn+0xf8>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	e7d5      	b.n	8004470 <scalbn+0x78>
 80044c4:	f3af 8000 	nop.w
 80044c8:	c2f8f359 	.word	0xc2f8f359
 80044cc:	01a56e1f 	.word	0x01a56e1f
 80044d0:	8800759c 	.word	0x8800759c
 80044d4:	7e37e43c 	.word	0x7e37e43c
 80044d8:	8800759c 	.word	0x8800759c
 80044dc:	fe37e43c 	.word	0xfe37e43c
 80044e0:	c2f8f359 	.word	0xc2f8f359
 80044e4:	81a56e1f 	.word	0x81a56e1f
 80044e8:	43500000 	.word	0x43500000
 80044ec:	ffff3cb0 	.word	0xffff3cb0
 80044f0:	3c900000 	.word	0x3c900000
 80044f4:	00000000 	.word	0x00000000

080044f8 <floor>:
 80044f8:	ec51 0b10 	vmov	r0, r1, d0
 80044fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004504:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8004508:	2e13      	cmp	r6, #19
 800450a:	ee10 5a10 	vmov	r5, s0
 800450e:	ee10 8a10 	vmov	r8, s0
 8004512:	460c      	mov	r4, r1
 8004514:	dc31      	bgt.n	800457a <floor+0x82>
 8004516:	2e00      	cmp	r6, #0
 8004518:	da14      	bge.n	8004544 <floor+0x4c>
 800451a:	a333      	add	r3, pc, #204	; (adr r3, 80045e8 <floor+0xf0>)
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	f7fb fe58 	bl	80001d4 <__adddf3>
 8004524:	2200      	movs	r2, #0
 8004526:	2300      	movs	r3, #0
 8004528:	f7fc fa9a 	bl	8000a60 <__aeabi_dcmpgt>
 800452c:	b138      	cbz	r0, 800453e <floor+0x46>
 800452e:	2c00      	cmp	r4, #0
 8004530:	da53      	bge.n	80045da <floor+0xe2>
 8004532:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004536:	4325      	orrs	r5, r4
 8004538:	d052      	beq.n	80045e0 <floor+0xe8>
 800453a:	4c2d      	ldr	r4, [pc, #180]	; (80045f0 <floor+0xf8>)
 800453c:	2500      	movs	r5, #0
 800453e:	4621      	mov	r1, r4
 8004540:	4628      	mov	r0, r5
 8004542:	e024      	b.n	800458e <floor+0x96>
 8004544:	4f2b      	ldr	r7, [pc, #172]	; (80045f4 <floor+0xfc>)
 8004546:	4137      	asrs	r7, r6
 8004548:	ea01 0307 	and.w	r3, r1, r7
 800454c:	4303      	orrs	r3, r0
 800454e:	d01e      	beq.n	800458e <floor+0x96>
 8004550:	a325      	add	r3, pc, #148	; (adr r3, 80045e8 <floor+0xf0>)
 8004552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004556:	f7fb fe3d 	bl	80001d4 <__adddf3>
 800455a:	2200      	movs	r2, #0
 800455c:	2300      	movs	r3, #0
 800455e:	f7fc fa7f 	bl	8000a60 <__aeabi_dcmpgt>
 8004562:	2800      	cmp	r0, #0
 8004564:	d0eb      	beq.n	800453e <floor+0x46>
 8004566:	2c00      	cmp	r4, #0
 8004568:	bfbe      	ittt	lt
 800456a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800456e:	4133      	asrlt	r3, r6
 8004570:	18e4      	addlt	r4, r4, r3
 8004572:	ea24 0407 	bic.w	r4, r4, r7
 8004576:	2500      	movs	r5, #0
 8004578:	e7e1      	b.n	800453e <floor+0x46>
 800457a:	2e33      	cmp	r6, #51	; 0x33
 800457c:	dd0b      	ble.n	8004596 <floor+0x9e>
 800457e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004582:	d104      	bne.n	800458e <floor+0x96>
 8004584:	ee10 2a10 	vmov	r2, s0
 8004588:	460b      	mov	r3, r1
 800458a:	f7fb fe23 	bl	80001d4 <__adddf3>
 800458e:	ec41 0b10 	vmov	d0, r0, r1
 8004592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004596:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800459a:	f04f 37ff 	mov.w	r7, #4294967295
 800459e:	40df      	lsrs	r7, r3
 80045a0:	4238      	tst	r0, r7
 80045a2:	d0f4      	beq.n	800458e <floor+0x96>
 80045a4:	a310      	add	r3, pc, #64	; (adr r3, 80045e8 <floor+0xf0>)
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	f7fb fe13 	bl	80001d4 <__adddf3>
 80045ae:	2200      	movs	r2, #0
 80045b0:	2300      	movs	r3, #0
 80045b2:	f7fc fa55 	bl	8000a60 <__aeabi_dcmpgt>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d0c1      	beq.n	800453e <floor+0x46>
 80045ba:	2c00      	cmp	r4, #0
 80045bc:	da0a      	bge.n	80045d4 <floor+0xdc>
 80045be:	2e14      	cmp	r6, #20
 80045c0:	d101      	bne.n	80045c6 <floor+0xce>
 80045c2:	3401      	adds	r4, #1
 80045c4:	e006      	b.n	80045d4 <floor+0xdc>
 80045c6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80045ca:	2301      	movs	r3, #1
 80045cc:	40b3      	lsls	r3, r6
 80045ce:	441d      	add	r5, r3
 80045d0:	45a8      	cmp	r8, r5
 80045d2:	d8f6      	bhi.n	80045c2 <floor+0xca>
 80045d4:	ea25 0507 	bic.w	r5, r5, r7
 80045d8:	e7b1      	b.n	800453e <floor+0x46>
 80045da:	2500      	movs	r5, #0
 80045dc:	462c      	mov	r4, r5
 80045de:	e7ae      	b.n	800453e <floor+0x46>
 80045e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80045e4:	e7ab      	b.n	800453e <floor+0x46>
 80045e6:	bf00      	nop
 80045e8:	8800759c 	.word	0x8800759c
 80045ec:	7e37e43c 	.word	0x7e37e43c
 80045f0:	bff00000 	.word	0xbff00000
 80045f4:	000fffff 	.word	0x000fffff

080045f8 <_init>:
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fa:	bf00      	nop
 80045fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fe:	bc08      	pop	{r3}
 8004600:	469e      	mov	lr, r3
 8004602:	4770      	bx	lr

08004604 <_fini>:
 8004604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004606:	bf00      	nop
 8004608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460a:	bc08      	pop	{r3}
 800460c:	469e      	mov	lr, r3
 800460e:	4770      	bx	lr
