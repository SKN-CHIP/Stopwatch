
Buzzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f8c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001114  08001114  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001114  08001114  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08001114  08001114  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001114  08001114  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001114  08001114  00011114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001118  08001118  00011118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800111c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000001c  08001138  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08001138  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000447e  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b84  00000000  00000000  0002450d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000510  00000000  00000000  00025098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003bf  00000000  00000000  000255a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f6a3  00000000  00000000  00025967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003a30  00000000  00000000  0004500a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b1344  00000000  00000000  00048a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001458  00000000  00000000  000f9d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000fb1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080010fc 	.word	0x080010fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	080010fc 	.word	0x080010fc

080001c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f003 0307 	and.w	r3, r3, #7
 80001d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	68ba      	ldr	r2, [r7, #8]
 80001e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001e4:	4013      	ands	r3, r2
 80001e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fa:	4a04      	ldr	r2, [pc, #16]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	60d3      	str	r3, [r2, #12]
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <__NVIC_GetPriorityGrouping+0x18>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	0a1b      	lsrs	r3, r3, #8
 800021a:	f003 0307 	and.w	r3, r3, #7
}
 800021e:	4618      	mov	r0, r3
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	6039      	str	r1, [r7, #0]
 8000236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023c:	2b00      	cmp	r3, #0
 800023e:	db0a      	blt.n	8000256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	b2da      	uxtb	r2, r3
 8000244:	490c      	ldr	r1, [pc, #48]	; (8000278 <__NVIC_SetPriority+0x4c>)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	0112      	lsls	r2, r2, #4
 800024c:	b2d2      	uxtb	r2, r2
 800024e:	440b      	add	r3, r1
 8000250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000254:	e00a      	b.n	800026c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	b2da      	uxtb	r2, r3
 800025a:	4908      	ldr	r1, [pc, #32]	; (800027c <__NVIC_SetPriority+0x50>)
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	f003 030f 	and.w	r3, r3, #15
 8000262:	3b04      	subs	r3, #4
 8000264:	0112      	lsls	r2, r2, #4
 8000266:	b2d2      	uxtb	r2, r2
 8000268:	440b      	add	r3, r1
 800026a:	761a      	strb	r2, [r3, #24]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	e000e100 	.word	0xe000e100
 800027c:	e000ed00 	.word	0xe000ed00

08000280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000280:	b480      	push	{r7}
 8000282:	b089      	sub	sp, #36	; 0x24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	f003 0307 	and.w	r3, r3, #7
 8000292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000294:	69fb      	ldr	r3, [r7, #28]
 8000296:	f1c3 0307 	rsb	r3, r3, #7
 800029a:	2b04      	cmp	r3, #4
 800029c:	bf28      	it	cs
 800029e:	2304      	movcs	r3, #4
 80002a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a2:	69fb      	ldr	r3, [r7, #28]
 80002a4:	3304      	adds	r3, #4
 80002a6:	2b06      	cmp	r3, #6
 80002a8:	d902      	bls.n	80002b0 <NVIC_EncodePriority+0x30>
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	3b03      	subs	r3, #3
 80002ae:	e000      	b.n	80002b2 <NVIC_EncodePriority+0x32>
 80002b0:	2300      	movs	r3, #0
 80002b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b4:	f04f 32ff 	mov.w	r2, #4294967295
 80002b8:	69bb      	ldr	r3, [r7, #24]
 80002ba:	fa02 f303 	lsl.w	r3, r2, r3
 80002be:	43da      	mvns	r2, r3
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	401a      	ands	r2, r3
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002c8:	f04f 31ff 	mov.w	r1, #4294967295
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	43d9      	mvns	r1, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d8:	4313      	orrs	r3, r2
         );
}
 80002da:	4618      	mov	r0, r3
 80002dc:	3724      	adds	r7, #36	; 0x24
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
	...

080002e8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <LL_RCC_MSI_Enable+0x1c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <LL_RCC_MSI_Enable+0x1c>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	6013      	str	r3, [r2, #0]
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000

08000308 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <LL_RCC_MSI_IsReady+0x20>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f003 0302 	and.w	r3, r3, #2
 8000314:	2b02      	cmp	r3, #2
 8000316:	d101      	bne.n	800031c <LL_RCC_MSI_IsReady+0x14>
 8000318:	2301      	movs	r3, #1
 800031a:	e000      	b.n	800031e <LL_RCC_MSI_IsReady+0x16>
 800031c:	2300      	movs	r3, #0
}
 800031e:	4618      	mov	r0, r3
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40021000 	.word	0x40021000

0800032c <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a04      	ldr	r2, [pc, #16]	; (8000348 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8000336:	f043 0308 	orr.w	r3, r3, #8
 800033a:	6013      	str	r3, [r2, #0]
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	40021000 	.word	0x40021000

0800034c <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <LL_RCC_MSI_SetRange+0x24>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800035c:	4904      	ldr	r1, [pc, #16]	; (8000370 <LL_RCC_MSI_SetRange+0x24>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4313      	orrs	r3, r2
 8000362:	600b      	str	r3, [r1, #0]
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	40021000 	.word	0x40021000

08000374 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	021b      	lsls	r3, r3, #8
 8000388:	4904      	ldr	r1, [pc, #16]	; (800039c <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800038a:	4313      	orrs	r3, r2
 800038c:	604b      	str	r3, [r1, #4]
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000

080003a0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <LL_RCC_SetSysClkSource+0x24>)
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	f023 0203 	bic.w	r2, r3, #3
 80003b0:	4904      	ldr	r1, [pc, #16]	; (80003c4 <LL_RCC_SetSysClkSource+0x24>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4313      	orrs	r3, r2
 80003b6:	608b      	str	r3, [r1, #8]
}
 80003b8:	bf00      	nop
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	40021000 	.word	0x40021000

080003c8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003cc:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <LL_RCC_GetSysClkSource+0x18>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	f003 030c 	and.w	r3, r3, #12
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000

080003e4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <LL_RCC_SetAHBPrescaler+0x24>)
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80003f4:	4904      	ldr	r1, [pc, #16]	; (8000408 <LL_RCC_SetAHBPrescaler+0x24>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	608b      	str	r3, [r1, #8]
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	40021000 	.word	0x40021000

0800040c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000416:	689b      	ldr	r3, [r3, #8]
 8000418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800041c:	4904      	ldr	r1, [pc, #16]	; (8000430 <LL_RCC_SetAPB1Prescaler+0x24>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4313      	orrs	r3, r2
 8000422:	608b      	str	r3, [r1, #8]
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000

08000434 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <LL_RCC_SetAPB2Prescaler+0x24>)
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000444:	4904      	ldr	r1, [pc, #16]	; (8000458 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4313      	orrs	r3, r2
 800044a:	608b      	str	r3, [r1, #8]
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000

0800045c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <LL_RCC_PLL_Enable+0x1c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <LL_RCC_PLL_Enable+0x1c>)
 8000466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800046a:	6013      	str	r3, [r2, #0]
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000

0800047c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000480:	4b07      	ldr	r3, [pc, #28]	; (80004a0 <LL_RCC_PLL_IsReady+0x24>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000488:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800048c:	d101      	bne.n	8000492 <LL_RCC_PLL_IsReady+0x16>
 800048e:	2301      	movs	r3, #1
 8000490:	e000      	b.n	8000494 <LL_RCC_PLL_IsReady+0x18>
 8000492:	2300      	movs	r3, #0
}
 8000494:	4618      	mov	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
 80004b0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80004b2:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80004b4:	68da      	ldr	r2, [r3, #12]
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80004b8:	4013      	ands	r3, r2
 80004ba:	68f9      	ldr	r1, [r7, #12]
 80004bc:	68ba      	ldr	r2, [r7, #8]
 80004be:	4311      	orrs	r1, r2
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	0212      	lsls	r2, r2, #8
 80004c4:	4311      	orrs	r1, r2
 80004c6:	683a      	ldr	r2, [r7, #0]
 80004c8:	430a      	orrs	r2, r1
 80004ca:	4904      	ldr	r1, [pc, #16]	; (80004dc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80004cc:	4313      	orrs	r3, r2
 80004ce:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80004d0:	bf00      	nop
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	40021000 	.word	0x40021000
 80004e0:	f9ff808c 	.word	0xf9ff808c

080004e4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	4a04      	ldr	r2, [pc, #16]	; (8000500 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80004ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004f2:	60d3      	str	r3, [r2, #12]
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000

08000504 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800050e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000510:	4907      	ldr	r1, [pc, #28]	; (8000530 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4313      	orrs	r3, r2
 8000516:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800051a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4013      	ands	r3, r2
 8000520:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000522:	68fb      	ldr	r3, [r7, #12]
}
 8000524:	bf00      	nop
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	40021000 	.word	0x40021000

08000534 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <LL_APB1_GRP1_EnableClock+0x2c>)
 800053e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000540:	4907      	ldr	r1, [pc, #28]	; (8000560 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4313      	orrs	r3, r2
 8000546:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <LL_APB1_GRP1_EnableClock+0x2c>)
 800054a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4013      	ands	r3, r2
 8000550:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000552:	68fb      	ldr	r3, [r7, #12]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	40021000 	.word	0x40021000

08000564 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <LL_APB2_GRP1_EnableClock+0x2c>)
 800056e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000570:	4907      	ldr	r1, [pc, #28]	; (8000590 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4313      	orrs	r3, r2
 8000576:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <LL_APB2_GRP1_EnableClock+0x2c>)
 800057a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4013      	ands	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	40021000 	.word	0x40021000

08000594 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_FLASH_SetLatency+0x24>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f023 0207 	bic.w	r2, r3, #7
 80005a4:	4904      	ldr	r1, [pc, #16]	; (80005b8 <LL_FLASH_SetLatency+0x24>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	600b      	str	r3, [r1, #0]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40022000 	.word	0x40022000

080005bc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <LL_FLASH_GetLatency+0x18>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f003 0307 	and.w	r3, r3, #7
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40022000 	.word	0x40022000

080005d8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80005e8:	4904      	ldr	r1, [pc, #16]	; (80005fc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4313      	orrs	r3, r2
 80005ee:	600b      	str	r3, [r1, #0]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	40007000 	.word	0x40007000

08000600 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800060c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000610:	d101      	bne.n	8000616 <LL_PWR_IsActiveFlag_VOS+0x16>
 8000612:	2301      	movs	r3, #1
 8000614:	e000      	b.n	8000618 <LL_PWR_IsActiveFlag_VOS+0x18>
 8000616:	2300      	movs	r3, #0
}
 8000618:	4618      	mov	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40007000 	.word	0x40007000

08000628 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f043 0201 	orr.w	r2, r3, #1
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	601a      	str	r2, [r3, #0]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	431a      	orrs	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	601a      	str	r2, [r3, #0]
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	683a      	ldr	r2, [r7, #0]
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80006aa:	b480      	push	{r7}
 80006ac:	b083      	sub	sp, #12
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
 80006b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	431a      	orrs	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	605a      	str	r2, [r3, #4]
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	609a      	str	r2, [r3, #8]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f06f 0201 	mvn.w	r2, #1
 80006fe:	611a      	str	r2, [r3, #16]
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	691b      	ldr	r3, [r3, #16]
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	2b01      	cmp	r3, #1
 800071e:	d101      	bne.n	8000724 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000720:	2301      	movs	r3, #1
 8000722:	e000      	b.n	8000726 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	f043 0201 	orr.w	r2, r3, #1
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	615a      	str	r2, [r3, #20]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	683a      	ldr	r2, [r7, #0]
 8000760:	619a      	str	r2, [r3, #24]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	683a      	ldr	r2, [r7, #0]
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800078e:	2001      	movs	r0, #1
 8000790:	f7ff fee8 	bl	8000564 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000794:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000798:	f7ff fecc 	bl	8000534 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800079c:	2003      	movs	r0, #3
 800079e:	f7ff fd13 	bl	80001c8 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80007a2:	f7ff fd35 	bl	8000210 <__NVIC_GetPriorityGrouping>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2200      	movs	r2, #0
 80007aa:	210f      	movs	r1, #15
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fd67 	bl	8000280 <NVIC_EncodePriority>
 80007b2:	4603      	mov	r3, r0
 80007b4:	4619      	mov	r1, r3
 80007b6:	f04f 30ff 	mov.w	r0, #4294967295
 80007ba:	f7ff fd37 	bl	800022c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007be:	f000 f807 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c2:	f000 f88b 	bl	80008dc <MX_GPIO_Init>
  MX_TIM6_Init();
 80007c6:	f000 f855 	bl	8000874 <MX_TIM6_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  LedTest();
 80007ca:	f000 f8e9 	bl	80009a0 <LedTest>
 80007ce:	e7fc      	b.n	80007ca <main+0x40>

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff fedd 	bl	8000594 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 80007da:	bf00      	nop
 80007dc:	f7ff feee 	bl	80005bc <LL_FLASH_GetLatency>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d1fa      	bne.n	80007dc <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80007e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ea:	f7ff fef5 	bl	80005d8 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 80007ee:	bf00      	nop
 80007f0:	f7ff ff06 	bl	8000600 <LL_PWR_IsActiveFlag_VOS>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d1fa      	bne.n	80007f0 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 80007fa:	f7ff fd75 	bl	80002e8 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 80007fe:	bf00      	nop
 8000800:	f7ff fd82 	bl	8000308 <LL_RCC_MSI_IsReady>
 8000804:	4603      	mov	r3, r0
 8000806:	2b01      	cmp	r3, #1
 8000808:	d1fa      	bne.n	8000800 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 800080a:	f7ff fd8f 	bl	800032c <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 800080e:	2060      	movs	r0, #96	; 0x60
 8000810:	f7ff fd9c 	bl	800034c <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff fdad 	bl	8000374 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 16, LL_RCC_PLLR_DIV_2);
 800081a:	2300      	movs	r3, #0
 800081c:	2210      	movs	r2, #16
 800081e:	2100      	movs	r1, #0
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff fe3f 	bl	80004a4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8000826:	f7ff fe5d 	bl	80004e4 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 800082a:	f7ff fe17 	bl	800045c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800082e:	bf00      	nop
 8000830:	f7ff fe24 	bl	800047c <LL_RCC_PLL_IsReady>
 8000834:	4603      	mov	r3, r0
 8000836:	2b01      	cmp	r3, #1
 8000838:	d1fa      	bne.n	8000830 <SystemClock_Config+0x60>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800083a:	2003      	movs	r0, #3
 800083c:	f7ff fdb0 	bl	80003a0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000840:	bf00      	nop
 8000842:	f7ff fdc1 	bl	80003c8 <LL_RCC_GetSysClkSource>
 8000846:	4603      	mov	r3, r0
 8000848:	2b0c      	cmp	r3, #12
 800084a:	d1fa      	bne.n	8000842 <SystemClock_Config+0x72>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800084c:	2000      	movs	r0, #0
 800084e:	f7ff fdc9 	bl	80003e4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000852:	2000      	movs	r0, #0
 8000854:	f7ff fdda 	bl	800040c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff fdeb 	bl	8000434 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(32000000);
 800085e:	4804      	ldr	r0, [pc, #16]	; (8000870 <SystemClock_Config+0xa0>)
 8000860:	f000 fc0a 	bl	8001078 <LL_Init1msTick>

  LL_SetSystemCoreClock(32000000);
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <SystemClock_Config+0xa0>)
 8000866:	f000 fc15 	bl	8001094 <LL_SetSystemCoreClock>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	01e84800 	.word	0x01e84800

08000874 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8000888:	2010      	movs	r0, #16
 800088a:	f7ff fe53 	bl	8000534 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 3;
 800088e:	2303      	movs	r3, #3
 8000890:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8000896:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800089a:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	4619      	mov	r1, r3
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <MX_TIM6_Init+0x64>)
 80008a2:	f000 fb3b 	bl	8000f1c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 80008a6:	480c      	ldr	r0, [pc, #48]	; (80008d8 <MX_TIM6_Init+0x64>)
 80008a8:	f7ff fee1 	bl	800066e <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 80008ac:	2100      	movs	r1, #0
 80008ae:	480a      	ldr	r0, [pc, #40]	; (80008d8 <MX_TIM6_Init+0x64>)
 80008b0:	f7ff fefb 	bl	80006aa <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 80008b4:	4808      	ldr	r0, [pc, #32]	; (80008d8 <MX_TIM6_Init+0x64>)
 80008b6:	f7ff ff0b 	bl	80006d0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */
 // LL_TIM_SetClockSource(TIM6, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_SetCounterMode(TIM6, LL_TIM_COUNTERMODE_UP);
 80008ba:	2100      	movs	r1, #0
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <MX_TIM6_Init+0x64>)
 80008be:	f7ff fec3 	bl	8000648 <LL_TIM_SetCounterMode>
  LL_TIM_ClearFlag_UPDATE(TIM6);
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_TIM6_Init+0x64>)
 80008c4:	f7ff ff14 	bl	80006f0 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 80008c8:	4803      	ldr	r0, [pc, #12]	; (80008d8 <MX_TIM6_Init+0x64>)
 80008ca:	f7ff fead 	bl	8000628 <LL_TIM_EnableCounter>

  /* USER CODE END TIM6_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40001000 	.word	0x40001000

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	463b      	mov	r3, r7
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
 80008f0:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80008f2:	2080      	movs	r0, #128	; 0x80
 80008f4:	f7ff fe06 	bl	8000504 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f7ff fe03 	bl	8000504 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80008fe:	2004      	movs	r0, #4
 8000900:	f7ff fe00 	bl	8000504 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, test_Pin|Buzzer_Pin);
 8000904:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090c:	f7ff ff2f 	bl	800076e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Led_GPIO_Port, Led_Pin);
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	4813      	ldr	r0, [pc, #76]	; (8000960 <MX_GPIO_Init+0x84>)
 8000914:	f7ff ff2b 	bl	800076e <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = test_Pin|Buzzer_Pin;
 8000918:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800091c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800091e:	2301      	movs	r3, #1
 8000920:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	463b      	mov	r3, r7
 8000930:	4619      	mov	r1, r3
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f000 fa49 	bl	8000dcc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Led_Pin;
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800093e:	2301      	movs	r3, #1
 8000940:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	4803      	ldr	r0, [pc, #12]	; (8000960 <MX_GPIO_Init+0x84>)
 8000954:	f000 fa3a 	bl	8000dcc <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000958:	bf00      	nop
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	48000800 	.word	0x48000800

08000964 <Damian_Marudzi>:

/* USER CODE BEGIN 4 */

void Damian_Marudzi(uint16_t czas)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
	LL_TIM_GenerateEvent_UPDATE(TIM6);
 800096e:	480b      	ldr	r0, [pc, #44]	; (800099c <Damian_Marudzi+0x38>)
 8000970:	f7ff fedf 	bl	8000732 <LL_TIM_GenerateEvent_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIM6);
 8000974:	4809      	ldr	r0, [pc, #36]	; (800099c <Damian_Marudzi+0x38>)
 8000976:	f7ff febb 	bl	80006f0 <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_SetAutoReload(TIM6, czas);
 800097a:	88fb      	ldrh	r3, [r7, #6]
 800097c:	4619      	mov	r1, r3
 800097e:	4807      	ldr	r0, [pc, #28]	; (800099c <Damian_Marudzi+0x38>)
 8000980:	f7ff fe85 	bl	800068e <LL_TIM_SetAutoReload>
	while(LL_TIM_IsActiveFlag_UPDATE(TIM6) == 0);
 8000984:	bf00      	nop
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <Damian_Marudzi+0x38>)
 8000988:	f7ff fec0 	bl	800070c <LL_TIM_IsActiveFlag_UPDATE>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d0f9      	beq.n	8000986 <Damian_Marudzi+0x22>
}
 8000992:	bf00      	nop
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40001000 	.word	0x40001000

080009a0 <LedTest>:
void LedTest()
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(Led_GPIO_Port, Led_Pin);
 80009a6:	2180      	movs	r1, #128	; 0x80
 80009a8:	482d      	ldr	r0, [pc, #180]	; (8000a60 <LedTest+0xc0>)
 80009aa:	f7ff fee0 	bl	800076e <LL_GPIO_ResetOutputPin>
	Damian_Marudzi(450);
 80009ae:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80009b2:	f7ff ffd7 	bl	8000964 <Damian_Marudzi>
	for(int i=0; i<8; i++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	e049      	b.n	8000a50 <LedTest+0xb0>
	{
		if(i == 0)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d12c      	bne.n	8000a1c <LedTest+0x7c>
		{
			for(int j= 24; j>=0; j--)
 80009c2:	2318      	movs	r3, #24
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	e025      	b.n	8000a14 <LedTest+0x74>
			{
				if(tablicaLed[j] == zero)
 80009c8:	4a26      	ldr	r2, [pc, #152]	; (8000a64 <LedTest+0xc4>)
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	4413      	add	r3, r2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d10e      	bne.n	80009f2 <LedTest+0x52>
				{
					LL_GPIO_SetOutputPin(Led_GPIO_Port, Led_Pin);
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	4822      	ldr	r0, [pc, #136]	; (8000a60 <LedTest+0xc0>)
 80009d8:	f7ff febb 	bl	8000752 <LL_GPIO_SetOutputPin>
					Damian_Marudzi(3);
 80009dc:	2003      	movs	r0, #3
 80009de:	f7ff ffc1 	bl	8000964 <Damian_Marudzi>
					LL_GPIO_ResetOutputPin(Led_GPIO_Port, Led_Pin);
 80009e2:	2180      	movs	r1, #128	; 0x80
 80009e4:	481e      	ldr	r0, [pc, #120]	; (8000a60 <LedTest+0xc0>)
 80009e6:	f7ff fec2 	bl	800076e <LL_GPIO_ResetOutputPin>
					Damian_Marudzi(7);
 80009ea:	2007      	movs	r0, #7
 80009ec:	f7ff ffba 	bl	8000964 <Damian_Marudzi>
 80009f0:	e00d      	b.n	8000a0e <LedTest+0x6e>
				}
				else
				{
					LL_GPIO_SetOutputPin(Led_GPIO_Port, Led_Pin);
 80009f2:	2180      	movs	r1, #128	; 0x80
 80009f4:	481a      	ldr	r0, [pc, #104]	; (8000a60 <LedTest+0xc0>)
 80009f6:	f7ff feac 	bl	8000752 <LL_GPIO_SetOutputPin>
					Damian_Marudzi(7);
 80009fa:	2007      	movs	r0, #7
 80009fc:	f7ff ffb2 	bl	8000964 <Damian_Marudzi>
					LL_GPIO_ResetOutputPin(Led_GPIO_Port, Led_Pin);
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	4817      	ldr	r0, [pc, #92]	; (8000a60 <LedTest+0xc0>)
 8000a04:	f7ff feb3 	bl	800076e <LL_GPIO_ResetOutputPin>
					Damian_Marudzi(3);
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f7ff ffab 	bl	8000964 <Damian_Marudzi>
			for(int j= 24; j>=0; j--)
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	3b01      	subs	r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	dad6      	bge.n	80009c8 <LedTest+0x28>
 8000a1a:	e016      	b.n	8000a4a <LedTest+0xaa>
				}
			}
		}
		else
		{
			for(int j=24; j>=0;j--)
 8000a1c:	2318      	movs	r3, #24
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	e010      	b.n	8000a44 <LedTest+0xa4>
			{

				LL_GPIO_SetOutputPin(Led_GPIO_Port, Led_Pin);
 8000a22:	2180      	movs	r1, #128	; 0x80
 8000a24:	480e      	ldr	r0, [pc, #56]	; (8000a60 <LedTest+0xc0>)
 8000a26:	f7ff fe94 	bl	8000752 <LL_GPIO_SetOutputPin>
				Damian_Marudzi(3);
 8000a2a:	2003      	movs	r0, #3
 8000a2c:	f7ff ff9a 	bl	8000964 <Damian_Marudzi>
				LL_GPIO_ResetOutputPin(Led_GPIO_Port, Led_Pin);
 8000a30:	2180      	movs	r1, #128	; 0x80
 8000a32:	480b      	ldr	r0, [pc, #44]	; (8000a60 <LedTest+0xc0>)
 8000a34:	f7ff fe9b 	bl	800076e <LL_GPIO_ResetOutputPin>
				Damian_Marudzi(7);
 8000a38:	2007      	movs	r0, #7
 8000a3a:	f7ff ff93 	bl	8000964 <Damian_Marudzi>
			for(int j=24; j>=0;j--)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3b01      	subs	r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	daeb      	bge.n	8000a22 <LedTest+0x82>
	for(int i=0; i<8; i++)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2b07      	cmp	r3, #7
 8000a54:	ddb2      	ble.n	80009bc <LedTest+0x1c>
			}

		}
	}

}
 8000a56:	bf00      	nop
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	48000800 	.word	0x48000800
 8000a64:	20000000 	.word	0x20000000

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a6c:	e7fe      	b.n	8000a6c <NMI_Handler+0x4>

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae8:	f7ff ffea 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	; (8000b24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <LoopForever+0xe>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	; (8000b30 <LoopForever+0x16>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b12:	f000 facf 	bl	80010b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b16:	f7ff fe38 	bl	800078a <main>

08000b1a <LoopForever>:

LoopForever:
    b LoopForever
 8000b1a:	e7fe      	b.n	8000b1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b28:	0800111c 	.word	0x0800111c
  ldr r2, =_sbss
 8000b2c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000b30:	20000038 	.word	0x20000038

08000b34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC1_2_IRQHandler>

08000b36 <LL_GPIO_SetPinMode>:
{
 8000b36:	b480      	push	{r7}
 8000b38:	b08b      	sub	sp, #44	; 0x2c
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	fa93 f3a3 	rbit	r3, r3
 8000b50:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d101      	bne.n	8000b60 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000b5c:	2320      	movs	r3, #32
 8000b5e:	e003      	b.n	8000b68 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	fab3 f383 	clz	r3, r3
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	401a      	ands	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b78:	6a3b      	ldr	r3, [r7, #32]
 8000b7a:	fa93 f3a3 	rbit	r3, r3
 8000b7e:	61fb      	str	r3, [r7, #28]
  return result;
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000b8a:	2320      	movs	r3, #32
 8000b8c:	e003      	b.n	8000b96 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	fab3 f383 	clz	r3, r3
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	6879      	ldr	r1, [r7, #4]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	372c      	adds	r7, #44	; 0x2c
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <LL_GPIO_SetPinOutputType>:
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	401a      	ands	r2, r3
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	fb01 f303 	mul.w	r3, r1, r3
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	605a      	str	r2, [r3, #4]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <LL_GPIO_SetPinSpeed>:
{
 8000be0:	b480      	push	{r7}
 8000be2:	b08b      	sub	sp, #44	; 0x2c
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa93 f3a3 	rbit	r3, r3
 8000bfa:	613b      	str	r3, [r7, #16]
  return result;
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d101      	bne.n	8000c0a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000c06:	2320      	movs	r3, #32
 8000c08:	e003      	b.n	8000c12 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	fab3 f383 	clz	r3, r3
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	2103      	movs	r1, #3
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	401a      	ands	r2, r3
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c22:	6a3b      	ldr	r3, [r7, #32]
 8000c24:	fa93 f3a3 	rbit	r3, r3
 8000c28:	61fb      	str	r3, [r7, #28]
  return result;
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d101      	bne.n	8000c38 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000c34:	2320      	movs	r3, #32
 8000c36:	e003      	b.n	8000c40 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3a:	fab3 f383 	clz	r3, r3
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	609a      	str	r2, [r3, #8]
}
 8000c4e:	bf00      	nop
 8000c50:	372c      	adds	r7, #44	; 0x2c
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <LL_GPIO_SetPinPull>:
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b08b      	sub	sp, #44	; 0x2c
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	68da      	ldr	r2, [r3, #12]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	fa93 f3a3 	rbit	r3, r3
 8000c74:	613b      	str	r3, [r7, #16]
  return result;
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000c80:	2320      	movs	r3, #32
 8000c82:	e003      	b.n	8000c8c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fab3 f383 	clz	r3, r3
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	2103      	movs	r1, #3
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	401a      	ands	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	fa93 f3a3 	rbit	r3, r3
 8000ca2:	61fb      	str	r3, [r7, #28]
  return result;
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000cae:	2320      	movs	r3, #32
 8000cb0:	e003      	b.n	8000cba <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	fab3 f383 	clz	r3, r3
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	60da      	str	r2, [r3, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	372c      	adds	r7, #44	; 0x2c
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <LL_GPIO_SetAFPin_0_7>:
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b08b      	sub	sp, #44	; 0x2c
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	6a1a      	ldr	r2, [r3, #32]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa93 f3a3 	rbit	r3, r3
 8000cee:	613b      	str	r3, [r7, #16]
  return result;
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8000cfa:	2320      	movs	r3, #32
 8000cfc:	e003      	b.n	8000d06 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	fab3 f383 	clz	r3, r3
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	210f      	movs	r1, #15
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	401a      	ands	r2, r3
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d16:	6a3b      	ldr	r3, [r7, #32]
 8000d18:	fa93 f3a3 	rbit	r3, r3
 8000d1c:	61fb      	str	r3, [r7, #28]
  return result;
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d101      	bne.n	8000d2c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8000d28:	2320      	movs	r3, #32
 8000d2a:	e003      	b.n	8000d34 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	fab3 f383 	clz	r3, r3
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	621a      	str	r2, [r3, #32]
}
 8000d42:	bf00      	nop
 8000d44:	372c      	adds	r7, #44	; 0x2c
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <LL_GPIO_SetAFPin_8_15>:
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b08b      	sub	sp, #44	; 0x2c
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa93 f3a3 	rbit	r3, r3
 8000d6a:	613b      	str	r3, [r7, #16]
  return result;
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d101      	bne.n	8000d7a <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8000d76:	2320      	movs	r3, #32
 8000d78:	e003      	b.n	8000d82 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	fab3 f383 	clz	r3, r3
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	210f      	movs	r1, #15
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d94:	6a3b      	ldr	r3, [r7, #32]
 8000d96:	fa93 f3a3 	rbit	r3, r3
 8000d9a:	61fb      	str	r3, [r7, #28]
  return result;
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8000da6:	2320      	movs	r3, #32
 8000da8:	e003      	b.n	8000db2 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8000daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dac:	fab3 f383 	clz	r3, r3
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	6879      	ldr	r1, [r7, #4]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000dc0:	bf00      	nop
 8000dc2:	372c      	adds	r7, #44	; 0x2c
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	fa93 f3a3 	rbit	r3, r3
 8000de2:	60fb      	str	r3, [r7, #12]
  return result;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <LL_GPIO_Init+0x26>
    return 32U;
 8000dee:	2320      	movs	r3, #32
 8000df0:	e003      	b.n	8000dfa <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	fab3 f383 	clz	r3, r3
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000dfc:	e048      	b.n	8000e90 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	2101      	movs	r1, #1
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d03a      	beq.n	8000e8a <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d003      	beq.n	8000e24 <LL_GPIO_Init+0x58>
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d10e      	bne.n	8000e42 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	69b9      	ldr	r1, [r7, #24]
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff fed7 	bl	8000be0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	6819      	ldr	r1, [r3, #0]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff feb7 	bl	8000bb0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	461a      	mov	r2, r3
 8000e48:	69b9      	ldr	r1, [r7, #24]
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ff05 	bl	8000c5a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d111      	bne.n	8000e7c <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	2bff      	cmp	r3, #255	; 0xff
 8000e5c:	d807      	bhi.n	8000e6e <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	461a      	mov	r2, r3
 8000e64:	69b9      	ldr	r1, [r7, #24]
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ff34 	bl	8000cd4 <LL_GPIO_SetAFPin_0_7>
 8000e6c:	e006      	b.n	8000e7c <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	461a      	mov	r2, r3
 8000e74:	69b9      	ldr	r1, [r7, #24]
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ff69 	bl	8000d4e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	461a      	mov	r2, r3
 8000e82:	69b9      	ldr	r1, [r7, #24]
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff fe56 	bl	8000b36 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	fa22 f303 	lsr.w	r3, r2, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1af      	bne.n	8000dfe <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3720      	adds	r7, #32
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <LL_TIM_SetPrescaler>:
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <LL_TIM_SetAutoReload>:
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LL_TIM_SetRepetitionCounter>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <LL_TIM_GenerateEvent_UPDATE>:
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	f043 0201 	orr.w	r2, r3, #1
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	615a      	str	r2, [r3, #20]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a3d      	ldr	r2, [pc, #244]	; (8001024 <LL_TIM_Init+0x108>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d013      	beq.n	8000f5c <LL_TIM_Init+0x40>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f3a:	d00f      	beq.n	8000f5c <LL_TIM_Init+0x40>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a3a      	ldr	r2, [pc, #232]	; (8001028 <LL_TIM_Init+0x10c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d00b      	beq.n	8000f5c <LL_TIM_Init+0x40>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a39      	ldr	r2, [pc, #228]	; (800102c <LL_TIM_Init+0x110>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d007      	beq.n	8000f5c <LL_TIM_Init+0x40>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a38      	ldr	r2, [pc, #224]	; (8001030 <LL_TIM_Init+0x114>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d003      	beq.n	8000f5c <LL_TIM_Init+0x40>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a37      	ldr	r2, [pc, #220]	; (8001034 <LL_TIM_Init+0x118>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d106      	bne.n	8000f6a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a2d      	ldr	r2, [pc, #180]	; (8001024 <LL_TIM_Init+0x108>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d01f      	beq.n	8000fb2 <LL_TIM_Init+0x96>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f78:	d01b      	beq.n	8000fb2 <LL_TIM_Init+0x96>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a2a      	ldr	r2, [pc, #168]	; (8001028 <LL_TIM_Init+0x10c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d017      	beq.n	8000fb2 <LL_TIM_Init+0x96>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a29      	ldr	r2, [pc, #164]	; (800102c <LL_TIM_Init+0x110>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d013      	beq.n	8000fb2 <LL_TIM_Init+0x96>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a28      	ldr	r2, [pc, #160]	; (8001030 <LL_TIM_Init+0x114>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00f      	beq.n	8000fb2 <LL_TIM_Init+0x96>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a27      	ldr	r2, [pc, #156]	; (8001034 <LL_TIM_Init+0x118>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d00b      	beq.n	8000fb2 <LL_TIM_Init+0x96>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a26      	ldr	r2, [pc, #152]	; (8001038 <LL_TIM_Init+0x11c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d007      	beq.n	8000fb2 <LL_TIM_Init+0x96>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a25      	ldr	r2, [pc, #148]	; (800103c <LL_TIM_Init+0x120>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d003      	beq.n	8000fb2 <LL_TIM_Init+0x96>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a24      	ldr	r2, [pc, #144]	; (8001040 <LL_TIM_Init+0x124>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d106      	bne.n	8000fc0 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff79 	bl	8000ec4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff65 	bl	8000ea8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a10      	ldr	r2, [pc, #64]	; (8001024 <LL_TIM_Init+0x108>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d00f      	beq.n	8001006 <LL_TIM_Init+0xea>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a12      	ldr	r2, [pc, #72]	; (8001034 <LL_TIM_Init+0x118>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d00b      	beq.n	8001006 <LL_TIM_Init+0xea>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a11      	ldr	r2, [pc, #68]	; (8001038 <LL_TIM_Init+0x11c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d007      	beq.n	8001006 <LL_TIM_Init+0xea>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a10      	ldr	r2, [pc, #64]	; (800103c <LL_TIM_Init+0x120>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d003      	beq.n	8001006 <LL_TIM_Init+0xea>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <LL_TIM_Init+0x124>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d105      	bne.n	8001012 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	4619      	mov	r1, r3
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff67 	bl	8000ee0 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ff72 	bl	8000efc <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40012c00 	.word	0x40012c00
 8001028:	40000400 	.word	0x40000400
 800102c:	40000800 	.word	0x40000800
 8001030:	40000c00 	.word	0x40000c00
 8001034:	40013400 	.word	0x40013400
 8001038:	40014000 	.word	0x40014000
 800103c:	40014400 	.word	0x40014400
 8001040:	40014800 	.word	0x40014800

08001044 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4a07      	ldr	r2, [pc, #28]	; (8001074 <LL_InitTick+0x30>)
 8001058:	3b01      	subs	r3, #1
 800105a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <LL_InitTick+0x30>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <LL_InitTick+0x30>)
 8001064:	2205      	movs	r2, #5
 8001066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000e010 	.word	0xe000e010

08001078 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001080:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ffdd 	bl	8001044 <LL_InitTick>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <LL_SetSystemCoreClock+0x1c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000018 	.word	0x20000018

080010b4 <__libc_init_array>:
 80010b4:	b570      	push	{r4, r5, r6, lr}
 80010b6:	4d0d      	ldr	r5, [pc, #52]	; (80010ec <__libc_init_array+0x38>)
 80010b8:	4c0d      	ldr	r4, [pc, #52]	; (80010f0 <__libc_init_array+0x3c>)
 80010ba:	1b64      	subs	r4, r4, r5
 80010bc:	10a4      	asrs	r4, r4, #2
 80010be:	2600      	movs	r6, #0
 80010c0:	42a6      	cmp	r6, r4
 80010c2:	d109      	bne.n	80010d8 <__libc_init_array+0x24>
 80010c4:	4d0b      	ldr	r5, [pc, #44]	; (80010f4 <__libc_init_array+0x40>)
 80010c6:	4c0c      	ldr	r4, [pc, #48]	; (80010f8 <__libc_init_array+0x44>)
 80010c8:	f000 f818 	bl	80010fc <_init>
 80010cc:	1b64      	subs	r4, r4, r5
 80010ce:	10a4      	asrs	r4, r4, #2
 80010d0:	2600      	movs	r6, #0
 80010d2:	42a6      	cmp	r6, r4
 80010d4:	d105      	bne.n	80010e2 <__libc_init_array+0x2e>
 80010d6:	bd70      	pop	{r4, r5, r6, pc}
 80010d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80010dc:	4798      	blx	r3
 80010de:	3601      	adds	r6, #1
 80010e0:	e7ee      	b.n	80010c0 <__libc_init_array+0xc>
 80010e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80010e6:	4798      	blx	r3
 80010e8:	3601      	adds	r6, #1
 80010ea:	e7f2      	b.n	80010d2 <__libc_init_array+0x1e>
 80010ec:	08001114 	.word	0x08001114
 80010f0:	08001114 	.word	0x08001114
 80010f4:	08001114 	.word	0x08001114
 80010f8:	08001118 	.word	0x08001118

080010fc <_init>:
 80010fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fe:	bf00      	nop
 8001100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001102:	bc08      	pop	{r3}
 8001104:	469e      	mov	lr, r3
 8001106:	4770      	bx	lr

08001108 <_fini>:
 8001108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110a:	bf00      	nop
 800110c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800110e:	bc08      	pop	{r3}
 8001110:	469e      	mov	lr, r3
 8001112:	4770      	bx	lr
