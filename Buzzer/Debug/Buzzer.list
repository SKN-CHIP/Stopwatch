
Buzzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006238  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080063c8  080063c8  000163c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006660  08006660  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006660  08006660  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006660  08006660  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006660  08006660  00016660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006664  08006664  00016664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  20000060  080066c8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  080066c8  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009802  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a9b  00000000  00000000  000298d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c28  00000000  00000000  0002b370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092e  00000000  00000000  0002bf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a7f  00000000  00000000  0002c8c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000095dc  00000000  00000000  0004f345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba6cc  00000000  00000000  00058921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003de0  00000000  00000000  00112ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00116dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063b0 	.word	0x080063b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080063b0 	.word	0x080063b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	69db      	ldr	r3, [r3, #28]
 8000c58:	f003 0320 	and.w	r3, r3, #32
 8000c5c:	2b20      	cmp	r3, #32
 8000c5e:	d101      	bne.n	8000c64 <LL_USART_IsActiveFlag_RXNE+0x18>
 8000c60:	2301      	movs	r3, #1
 8000c62:	e000      	b.n	8000c66 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c82:	2b40      	cmp	r3, #64	; 0x40
 8000c84:	d101      	bne.n	8000c8a <LL_USART_IsActiveFlag_TC+0x18>
 8000c86:	2301      	movs	r3, #1
 8000c88:	e000      	b.n	8000c8c <LL_USART_IsActiveFlag_TC+0x1a>
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	69db      	ldr	r3, [r3, #28]
 8000ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ca8:	2b80      	cmp	r3, #128	; 0x80
 8000caa:	d101      	bne.n	8000cb0 <LL_USART_IsActiveFlag_TXE+0x18>
 8000cac:	2301      	movs	r3, #1
 8000cae:	e000      	b.n	8000cb2 <LL_USART_IsActiveFlag_TXE+0x1a>
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	b2db      	uxtb	r3, r3
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000ce6:	78fb      	ldrb	r3, [r7, #3]
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <_write>:
#include "communication.h"

#define LINE_MAX_LENGTH 50
#define ASCII_OFFSET 48

int _write(int file, uint8_t *buf, int nbytes){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint8_t num_of_byte = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	75fb      	strb	r3, [r7, #23]
  while (num_of_byte <= nbytes - 1){
 8000d0c:	e011      	b.n	8000d32 <_write+0x36>
    while (!LL_USART_IsActiveFlag_TXE(USART2));
 8000d0e:	bf00      	nop
 8000d10:	4810      	ldr	r0, [pc, #64]	; (8000d54 <_write+0x58>)
 8000d12:	f7ff ffc1 	bl	8000c98 <LL_USART_IsActiveFlag_TXE>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f9      	beq.n	8000d10 <_write+0x14>
    LL_USART_TransmitData8(USART2, buf[num_of_byte++]);
 8000d1c:	7dfb      	ldrb	r3, [r7, #23]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	75fa      	strb	r2, [r7, #23]
 8000d22:	461a      	mov	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	4413      	add	r3, r2
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <_write+0x58>)
 8000d2e:	f7ff ffd4 	bl	8000cda <LL_USART_TransmitData8>
  while (num_of_byte <= nbytes - 1){
 8000d32:	7dfb      	ldrb	r3, [r7, #23]
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	dce9      	bgt.n	8000d0e <_write+0x12>
  }
  while (!LL_USART_IsActiveFlag_TC(USART2));
 8000d3a:	bf00      	nop
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <_write+0x58>)
 8000d3e:	f7ff ff98 	bl	8000c72 <LL_USART_IsActiveFlag_TC>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d0f9      	beq.n	8000d3c <_write+0x40>
  return nbytes;
 8000d48:	687b      	ldr	r3, [r7, #4]
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40004400 	.word	0x40004400

08000d58 <decompose_data>:

void decompose_data(uint8_t message[], uint8_t length){
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
	extern struct bluetooth_data data;
	data.check_sum = (message[length - 1] - ASCII_OFFSET) * 10; //48 = ASCII offset
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	0092      	lsls	r2, r2, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	3320      	adds	r3, #32
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b43      	ldr	r3, [pc, #268]	; (8000e8c <decompose_data+0x134>)
 8000d7e:	70da      	strb	r2, [r3, #3]
	data.check_sum += message[length] - ASCII_OFFSET;
 8000d80:	4b42      	ldr	r3, [pc, #264]	; (8000e8c <decompose_data+0x134>)
 8000d82:	78da      	ldrb	r2, [r3, #3]
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	440b      	add	r3, r1
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	3b30      	subs	r3, #48	; 0x30
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <decompose_data+0x134>)
 8000d96:	70da      	strb	r2, [r3, #3]
	uint8_t sum = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < length - 1; ++i){
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	e00b      	b.n	8000dba <decompose_data+0x62>
		sum += message[i] - ASCII_OFFSET;
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	4413      	add	r3, r2
 8000da8:	781a      	ldrb	r2, [r3, #0]
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	4413      	add	r3, r2
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	3b30      	subs	r3, #48	; 0x30
 8000db2:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < length - 1; ++i){
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	3301      	adds	r3, #1
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dbee      	blt.n	8000da2 <decompose_data+0x4a>
	}
	if(data.check_sum != sum){
 8000dc4:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <decompose_data+0x134>)
 8000dc6:	78db      	ldrb	r3, [r3, #3]
 8000dc8:	7bfa      	ldrb	r2, [r7, #15]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d155      	bne.n	8000e7a <decompose_data+0x122>
		return;
	}
	data.device_address = message[0] - ASCII_OFFSET;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	3b30      	subs	r3, #48	; 0x30
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <decompose_data+0x134>)
 8000dd8:	701a      	strb	r2, [r3, #0]

	if(data.device_address == 1){
 8000dda:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <decompose_data+0x134>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d122      	bne.n	8000e28 <decompose_data+0xd0>
		data.value1 = (message[1] - ASCII_OFFSET) * 10 + message[2] - ASCII_OFFSET;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3301      	adds	r3, #1
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	0092      	lsls	r2, r2, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3302      	adds	r3, #2
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4413      	add	r3, r2
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	3b10      	subs	r3, #16
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <decompose_data+0x134>)
 8000e02:	705a      	strb	r2, [r3, #1]
		data.value2 = (message[3] - ASCII_OFFSET) * 10 + message[4] - ASCII_OFFSET;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3303      	adds	r3, #3
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	0092      	lsls	r2, r2, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3304      	adds	r3, #4
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	3b10      	subs	r3, #16
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <decompose_data+0x134>)
 8000e24:	709a      	strb	r2, [r3, #2]
 8000e26:	e024      	b.n	8000e72 <decompose_data+0x11a>
	}
	else if(data.device_address == 2){
 8000e28:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <decompose_data+0x134>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d10e      	bne.n	8000e4e <decompose_data+0xf6>
		data.value1 = message[1] - ASCII_OFFSET;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3301      	adds	r3, #1
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	3b30      	subs	r3, #48	; 0x30
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <decompose_data+0x134>)
 8000e3c:	705a      	strb	r2, [r3, #1]
		data.value2 = message[2] - ASCII_OFFSET;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3302      	adds	r3, #2
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	3b30      	subs	r3, #48	; 0x30
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <decompose_data+0x134>)
 8000e4a:	709a      	strb	r2, [r3, #2]
 8000e4c:	e011      	b.n	8000e72 <decompose_data+0x11a>
	}
	else if(data.device_address == 3){
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <decompose_data+0x134>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d113      	bne.n	8000e7e <decompose_data+0x126>
		data.value1 = message[1] - ASCII_OFFSET;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	3b30      	subs	r3, #48	; 0x30
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <decompose_data+0x134>)
 8000e62:	705a      	strb	r2, [r3, #1]
		data.value2 = message[2] - ASCII_OFFSET;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3302      	adds	r3, #2
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	3b30      	subs	r3, #48	; 0x30
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <decompose_data+0x134>)
 8000e70:	709a      	strb	r2, [r3, #2]
	}
	else {
		return;
	}
	data.flag = 1;
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <decompose_data+0x134>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	711a      	strb	r2, [r3, #4]
 8000e78:	e002      	b.n	8000e80 <decompose_data+0x128>
		return;
 8000e7a:	bf00      	nop
 8000e7c:	e000      	b.n	8000e80 <decompose_data+0x128>
		return;
 8000e7e:	bf00      	nop
}
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	200000b4 	.word	0x200000b4

08000e90 <usart_append>:


static void usart_append(uint8_t value){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]

	static char line_buffer_usart[LINE_MAX_LENGTH + 1];
	static uint8_t line_length_usart = 0;

	if(value == '\r')
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b0d      	cmp	r3, #13
 8000e9e:	d02f      	beq.n	8000f00 <usart_append+0x70>
		return;

	if(value == '\n'){
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	2b0a      	cmp	r3, #10
 8000ea4:	d11a      	bne.n	8000edc <usart_append+0x4c>
		line_buffer_usart[line_length_usart] = '\0';
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <usart_append+0x78>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <usart_append+0x7c>)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	5499      	strb	r1, [r3, r2]
		printf("Received: %s\r\n", line_buffer_usart);
 8000eb2:	4916      	ldr	r1, [pc, #88]	; (8000f0c <usart_append+0x7c>)
 8000eb4:	4816      	ldr	r0, [pc, #88]	; (8000f10 <usart_append+0x80>)
 8000eb6:	f003 fb65 	bl	8004584 <iprintf>
		decompose_data((uint8_t*)line_buffer_usart, line_length_usart-1);
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <usart_append+0x78>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4811      	ldr	r0, [pc, #68]	; (8000f0c <usart_append+0x7c>)
 8000ec6:	f7ff ff47 	bl	8000d58 <decompose_data>
		memset(line_buffer_usart, '\0', LINE_MAX_LENGTH);
 8000eca:	2232      	movs	r2, #50	; 0x32
 8000ecc:	2100      	movs	r1, #0
 8000ece:	480f      	ldr	r0, [pc, #60]	; (8000f0c <usart_append+0x7c>)
 8000ed0:	f003 fbad 	bl	800462e <memset>
		line_length_usart = 0;
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <usart_append+0x78>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	e012      	b.n	8000f02 <usart_append+0x72>
	}
	else
	{
		if (line_length_usart >= LINE_MAX_LENGTH) {
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <usart_append+0x78>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b31      	cmp	r3, #49	; 0x31
 8000ee2:	d902      	bls.n	8000eea <usart_append+0x5a>
			line_length_usart = 0;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <usart_append+0x78>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
		}
		line_buffer_usart[line_length_usart++] = value;
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <usart_append+0x78>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	b2d1      	uxtb	r1, r2
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <usart_append+0x78>)
 8000ef4:	7011      	strb	r1, [r2, #0]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <usart_append+0x7c>)
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	5453      	strb	r3, [r2, r1]
 8000efe:	e000      	b.n	8000f02 <usart_append+0x72>
		return;
 8000f00:	bf00      	nop
	}
}
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	2000007c 	.word	0x2000007c
 8000f0c:	20000080 	.word	0x20000080
 8000f10:	080063c8 	.word	0x080063c8

08000f14 <USART1_IRQHandler>:
	num_of_byte = 0;
}


void USART1_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
	uint8_t received_byte;
	if(LL_USART_IsActiveFlag_RXNE(USART1))
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <USART1_IRQHandler+0x2c>)
 8000f1c:	f7ff fe96 	bl	8000c4c <LL_USART_IsActiveFlag_RXNE>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d008      	beq.n	8000f38 <USART1_IRQHandler+0x24>
	{
	  received_byte = LL_USART_ReceiveData8(USART1);
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <USART1_IRQHandler+0x2c>)
 8000f28:	f7ff fec9 	bl	8000cbe <LL_USART_ReceiveData8>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	71fb      	strb	r3, [r7, #7]
	  usart_append(received_byte);
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ffac 	bl	8000e90 <usart_append>
	}
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40013800 	.word	0x40013800

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4907      	ldr	r1, [pc, #28]	; (8000f98 <__NVIC_EnableIRQ+0x38>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001062:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001064:	4907      	ldr	r1, [pc, #28]	; (8001084 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4313      	orrs	r3, r2
 800106a:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800106e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4013      	ands	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	40021000 	.word	0x40021000

08001088 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8001096:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <LL_DMA_EnableChannel+0x40>)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	4413      	add	r3, r2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4908      	ldr	r1, [pc, #32]	; (80010c8 <LL_DMA_EnableChannel+0x40>)
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	440a      	add	r2, r1
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	4611      	mov	r1, r2
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	440a      	add	r2, r1
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6013      	str	r3, [r2, #0]
}
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	080063d8 	.word	0x080063d8

080010cc <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 80010da:	4a0c      	ldr	r2, [pc, #48]	; (800110c <LL_DMA_DisableChannel+0x40>)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <LL_DMA_DisableChannel+0x40>)
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	440a      	add	r2, r1
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	4611      	mov	r1, r2
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	440a      	add	r2, r1
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	6013      	str	r3, [r2, #0]
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	080063d8 	.word	0x080063d8

08001110 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <LL_DMA_SetDataTransferDirection+0x4c>)
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	4413      	add	r3, r2
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	4413      	add	r3, r2
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001134:	f023 0310 	bic.w	r3, r3, #16
 8001138:	4908      	ldr	r1, [pc, #32]	; (800115c <LL_DMA_SetDataTransferDirection+0x4c>)
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	440a      	add	r2, r1
 800113e:	7812      	ldrb	r2, [r2, #0]
 8001140:	4611      	mov	r1, r2
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	440a      	add	r2, r1
 8001146:	4611      	mov	r1, r2
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	4313      	orrs	r3, r2
 800114c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800114e:	bf00      	nop
 8001150:	371c      	adds	r7, #28
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	080063d8 	.word	0x080063d8

08001160 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8001170:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <LL_DMA_SetMode+0x48>)
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	4413      	add	r3, r2
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	4413      	add	r3, r2
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f023 0220 	bic.w	r2, r3, #32
 8001184:	4908      	ldr	r1, [pc, #32]	; (80011a8 <LL_DMA_SetMode+0x48>)
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	440b      	add	r3, r1
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	440b      	add	r3, r1
 8001192:	4619      	mov	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4313      	orrs	r3, r2
 8001198:	600b      	str	r3, [r1, #0]
             Mode);
}
 800119a:	bf00      	nop
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	080063d8 	.word	0x080063d8

080011ac <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80011bc:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <LL_DMA_SetPeriphIncMode+0x48>)
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	4413      	add	r3, r2
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	4413      	add	r3, r2
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80011d0:	4908      	ldr	r1, [pc, #32]	; (80011f4 <LL_DMA_SetPeriphIncMode+0x48>)
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	440b      	add	r3, r1
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	440b      	add	r3, r1
 80011de:	4619      	mov	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80011e6:	bf00      	nop
 80011e8:	371c      	adds	r7, #28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	080063d8 	.word	0x080063d8

080011f8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <LL_DMA_SetMemoryIncMode+0x48>)
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	4413      	add	r3, r2
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	4413      	add	r3, r2
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800121c:	4908      	ldr	r1, [pc, #32]	; (8001240 <LL_DMA_SetMemoryIncMode+0x48>)
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	440b      	add	r3, r1
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	440b      	add	r3, r1
 800122a:	4619      	mov	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8001232:	bf00      	nop
 8001234:	371c      	adds	r7, #28
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	080063d8 	.word	0x080063d8

08001244 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <LL_DMA_SetPeriphSize+0x48>)
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	4413      	add	r3, r2
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001268:	4908      	ldr	r1, [pc, #32]	; (800128c <LL_DMA_SetPeriphSize+0x48>)
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	440b      	add	r3, r1
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	440b      	add	r3, r1
 8001276:	4619      	mov	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4313      	orrs	r3, r2
 800127c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800127e:	bf00      	nop
 8001280:	371c      	adds	r7, #28
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	080063d8 	.word	0x080063d8

08001290 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <LL_DMA_SetMemorySize+0x48>)
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	4413      	add	r3, r2
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	4413      	add	r3, r2
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80012b4:	4908      	ldr	r1, [pc, #32]	; (80012d8 <LL_DMA_SetMemorySize+0x48>)
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	440b      	add	r3, r1
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	440b      	add	r3, r1
 80012c2:	4619      	mov	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80012ca:	bf00      	nop
 80012cc:	371c      	adds	r7, #28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	080063d8 	.word	0x080063d8

080012dc <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	4413      	add	r3, r2
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	4413      	add	r3, r2
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001300:	4908      	ldr	r1, [pc, #32]	; (8001324 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	440b      	add	r3, r1
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	440b      	add	r3, r1
 800130e:	4619      	mov	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]
             Priority);
}
 8001316:	bf00      	nop
 8001318:	371c      	adds	r7, #28
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	080063d8 	.word	0x080063d8

08001328 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <LL_DMA_SetDataLength+0x48>)
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	4413      	add	r3, r2
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	0c1b      	lsrs	r3, r3, #16
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	4908      	ldr	r1, [pc, #32]	; (8001370 <LL_DMA_SetDataLength+0x48>)
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	440a      	add	r2, r1
 8001352:	7812      	ldrb	r2, [r2, #0]
 8001354:	4611      	mov	r1, r2
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	440a      	add	r2, r1
 800135a:	4611      	mov	r1, r2
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4313      	orrs	r3, r2
 8001360:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8001362:	bf00      	nop
 8001364:	371c      	adds	r7, #28
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	080063d8 	.word	0x080063d8

08001374 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	2b10      	cmp	r3, #16
 800138a:	d114      	bne.n	80013b6 <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 800138c:	4a17      	ldr	r2, [pc, #92]	; (80013ec <LL_DMA_ConfigAddresses+0x78>)
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	4413      	add	r3, r2
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	4413      	add	r3, r2
 800139a:	461a      	mov	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 80013a0:	4a12      	ldr	r2, [pc, #72]	; (80013ec <LL_DMA_ConfigAddresses+0x78>)
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	4413      	add	r3, r2
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	4413      	add	r3, r2
 80013ae:	461a      	mov	r2, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
  }
}
 80013b4:	e013      	b.n	80013de <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 80013b6:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <LL_DMA_ConfigAddresses+0x78>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4413      	add	r3, r2
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	4413      	add	r3, r2
 80013c4:	461a      	mov	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 80013ca:	4a08      	ldr	r2, [pc, #32]	; (80013ec <LL_DMA_ConfigAddresses+0x78>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4413      	add	r3, r2
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	4413      	add	r3, r2
 80013d8:	461a      	mov	r2, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	60d3      	str	r3, [r2, #12]
}
 80013de:	bf00      	nop
 80013e0:	371c      	adds	r7, #28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	080063d8 	.word	0x080063d8

080013f0 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	33a8      	adds	r3, #168	; 0xa8
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	210f      	movs	r1, #15
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	401a      	ands	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	210f      	movs	r1, #15
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa93 f3a3 	rbit	r3, r3
 8001422:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <LL_DMA_SetPeriphRequest+0x42>
  {
    return 32U;
 800142e:	2320      	movs	r3, #32
 8001430:	e003      	b.n	800143a <LL_DMA_SetPeriphRequest+0x4a>
  }
  return __builtin_clz(value);
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	fab3 f383 	clz	r3, r3
 8001438:	b2db      	uxtb	r3, r3
 800143a:	4619      	mov	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	408b      	lsls	r3, r1
 8001440:	68f9      	ldr	r1, [r7, #12]
 8001442:	31a8      	adds	r1, #168	; 0xa8
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << ((Channel) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
}
 8001448:	bf00      	nop
 800144a:	3724      	adds	r7, #36	; 0x24
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6)) ? 1UL : 0UL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001464:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001468:	d101      	bne.n	800146e <LL_DMA_IsActiveFlag_TC6+0x1a>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <LL_DMA_IsActiveFlag_TC6+0x1c>
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_DMA_IsActiveFlag_TE6>:
  * @rmtoll ISR          TEIF6         LL_DMA_IsActiveFlag_TE6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE6(DMA_TypeDef *DMAx)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF6) == (DMA_ISR_TEIF6)) ? 1UL : 0UL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800148c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001490:	d101      	bne.n	8001496 <LL_DMA_IsActiveFlag_TE6+0x1a>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <LL_DMA_IsActiveFlag_TE6+0x1c>
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014b2:	605a      	str	r2, [r3, #4]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80014ce:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <LL_DMA_EnableIT_TC+0x40>)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <LL_DMA_EnableIT_TC+0x40>)
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	440a      	add	r2, r1
 80014e4:	7812      	ldrb	r2, [r2, #0]
 80014e6:	4611      	mov	r1, r2
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	440a      	add	r2, r1
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6013      	str	r3, [r2, #0]
}
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	080063d8 	.word	0x080063d8

08001504 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <LL_DMA_EnableIT_TE+0x40>)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4908      	ldr	r1, [pc, #32]	; (8001544 <LL_DMA_EnableIT_TE+0x40>)
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	440a      	add	r2, r1
 8001528:	7812      	ldrb	r2, [r2, #0]
 800152a:	4611      	mov	r1, r2
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	440a      	add	r2, r1
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	6013      	str	r3, [r2, #0]
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	080063d8 	.word	0x080063d8

08001548 <LL_DMA_DisableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 8001556:	4a0c      	ldr	r2, [pc, #48]	; (8001588 <LL_DMA_DisableIT_TC+0x40>)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	4413      	add	r3, r2
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4413      	add	r3, r2
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <LL_DMA_DisableIT_TC+0x40>)
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	440a      	add	r2, r1
 800156c:	7812      	ldrb	r2, [r2, #0]
 800156e:	4611      	mov	r1, r2
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	440a      	add	r2, r1
 8001574:	f023 0302 	bic.w	r3, r3, #2
 8001578:	6013      	str	r3, [r2, #0]
}
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	080063d8 	.word	0x080063d8

0800158c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f043 0201 	orr.w	r2, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	601a      	str	r2, [r3, #0]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1a      	ldr	r2, [r3, #32]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	621a      	str	r2, [r3, #32]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <LL_TIM_EnableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_EnableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	60da      	str	r2, [r3, #12]
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <enable_timer3>:
 *  Created on: Mar 14, 2024
 *      Author: patry
 */
#include "main.h"

void enable_timer3(){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	LL_TIM_EnableDMAReq_CC1(TIM3);
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <enable_timer3+0x1c>)
 80015f6:	f7ff ffea 	bl	80015ce <LL_TIM_EnableDMAReq_CC1>
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 80015fa:	2101      	movs	r1, #1
 80015fc:	4803      	ldr	r0, [pc, #12]	; (800160c <enable_timer3+0x1c>)
 80015fe:	f7ff ffd5 	bl	80015ac <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM3);
 8001602:	4802      	ldr	r0, [pc, #8]	; (800160c <enable_timer3+0x1c>)
 8001604:	f7ff ffc2 	bl	800158c <LL_TIM_EnableCounter>

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40000400 	.word	0x40000400

08001610 <generate_signal>:


void generate_signal(uint8_t* data, uint32_t data_length){
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af02      	add	r7, sp, #8
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6, (uint32_t)data, (uint32_t)&TIM3->CCR1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	2310      	movs	r3, #16
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <generate_signal+0x3c>)
 8001622:	2105      	movs	r1, #5
 8001624:	480a      	ldr	r0, [pc, #40]	; (8001650 <generate_signal+0x40>)
 8001626:	f7ff fea5 	bl	8001374 <LL_DMA_ConfigAddresses>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, data_length);
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	2105      	movs	r1, #5
 800162e:	4808      	ldr	r0, [pc, #32]	; (8001650 <generate_signal+0x40>)
 8001630:	f7ff fe7a 	bl	8001328 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8001634:	2105      	movs	r1, #5
 8001636:	4806      	ldr	r0, [pc, #24]	; (8001650 <generate_signal+0x40>)
 8001638:	f7ff ff42 	bl	80014c0 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800163c:	2105      	movs	r1, #5
 800163e:	4804      	ldr	r0, [pc, #16]	; (8001650 <generate_signal+0x40>)
 8001640:	f7ff fd22 	bl	8001088 <LL_DMA_EnableChannel>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40000434 	.word	0x40000434
 8001650:	40020000 	.word	0x40020000

08001654 <dma_init>:


void dma_init(void){
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001658:	2001      	movs	r0, #1
 800165a:	f7ff fcfd 	bl	8001058 <LL_AHB1_GRP1_EnableClock>
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800165e:	f7ff fc71 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 8001662:	4603      	mov	r3, r0
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fcc1 	bl	8000ff0 <NVIC_EncodePriority>
 800166e:	4603      	mov	r3, r0
 8001670:	4619      	mov	r1, r3
 8001672:	2010      	movs	r0, #16
 8001674:	f7ff fc92 	bl	8000f9c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001678:	2010      	movs	r0, #16
 800167a:	f7ff fc71 	bl	8000f60 <__NVIC_EnableIRQ>

  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_5);
 800167e:	2205      	movs	r2, #5
 8001680:	2105      	movs	r1, #5
 8001682:	4816      	ldr	r0, [pc, #88]	; (80016dc <dma_init+0x88>)
 8001684:	f7ff feb4 	bl	80013f0 <LL_DMA_SetPeriphRequest>
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001688:	2210      	movs	r2, #16
 800168a:	2105      	movs	r1, #5
 800168c:	4813      	ldr	r0, [pc, #76]	; (80016dc <dma_init+0x88>)
 800168e:	f7ff fd3f 	bl	8001110 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 8001692:	2200      	movs	r2, #0
 8001694:	2105      	movs	r1, #5
 8001696:	4811      	ldr	r0, [pc, #68]	; (80016dc <dma_init+0x88>)
 8001698:	f7ff fe20 	bl	80012dc <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 800169c:	2200      	movs	r2, #0
 800169e:	2105      	movs	r1, #5
 80016a0:	480e      	ldr	r0, [pc, #56]	; (80016dc <dma_init+0x88>)
 80016a2:	f7ff fd5d 	bl	8001160 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2105      	movs	r1, #5
 80016aa:	480c      	ldr	r0, [pc, #48]	; (80016dc <dma_init+0x88>)
 80016ac:	f7ff fd7e 	bl	80011ac <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	2105      	movs	r1, #5
 80016b4:	4809      	ldr	r0, [pc, #36]	; (80016dc <dma_init+0x88>)
 80016b6:	f7ff fd9f 	bl	80011f8 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_HALFWORD);
 80016ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016be:	2105      	movs	r1, #5
 80016c0:	4806      	ldr	r0, [pc, #24]	; (80016dc <dma_init+0x88>)
 80016c2:	f7ff fdbf 	bl	8001244 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2105      	movs	r1, #5
 80016ca:	4804      	ldr	r0, [pc, #16]	; (80016dc <dma_init+0x88>)
 80016cc:	f7ff fde0 	bl	8001290 <LL_DMA_SetMemorySize>

	LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_6);
 80016d0:	2105      	movs	r1, #5
 80016d2:	4802      	ldr	r0, [pc, #8]	; (80016dc <dma_init+0x88>)
 80016d4:	f7ff ff16 	bl	8001504 <LL_DMA_EnableIT_TE>

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40020000 	.word	0x40020000

080016e0 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == 1){
 80016e4:	480b      	ldr	r0, [pc, #44]	; (8001714 <DMA1_Channel6_IRQHandler+0x34>)
 80016e6:	f7ff feb5 	bl	8001454 <LL_DMA_IsActiveFlag_TC6>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d10b      	bne.n	8001708 <DMA1_Channel6_IRQHandler+0x28>
		LL_DMA_ClearFlag_TC6(DMA1);
 80016f0:	4808      	ldr	r0, [pc, #32]	; (8001714 <DMA1_Channel6_IRQHandler+0x34>)
 80016f2:	f7ff fed7 	bl	80014a4 <LL_DMA_ClearFlag_TC6>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 80016f6:	2105      	movs	r1, #5
 80016f8:	4806      	ldr	r0, [pc, #24]	; (8001714 <DMA1_Channel6_IRQHandler+0x34>)
 80016fa:	f7ff fce7 	bl	80010cc <LL_DMA_DisableChannel>
		LL_DMA_DisableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 80016fe:	2105      	movs	r1, #5
 8001700:	4804      	ldr	r0, [pc, #16]	; (8001714 <DMA1_Channel6_IRQHandler+0x34>)
 8001702:	f7ff ff21 	bl	8001548 <LL_DMA_DisableIT_TC>
	}
	else if(LL_DMA_IsActiveFlag_TE6(DMA1)){
		//nananana
	}

}
 8001706:	e002      	b.n	800170e <DMA1_Channel6_IRQHandler+0x2e>
	else if(LL_DMA_IsActiveFlag_TE6(DMA1)){
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <DMA1_Channel6_IRQHandler+0x34>)
 800170a:	f7ff feb7 	bl	800147c <LL_DMA_IsActiveFlag_TE6>
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40020000 	.word	0x40020000

08001718 <__NVIC_SetPriorityGrouping>:
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <__NVIC_SetPriorityGrouping+0x44>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001734:	4013      	ands	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174a:	4a04      	ldr	r2, [pc, #16]	; (800175c <__NVIC_SetPriorityGrouping+0x44>)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	60d3      	str	r3, [r2, #12]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_GetPriorityGrouping>:
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <__NVIC_GetPriorityGrouping+0x18>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	f003 0307 	and.w	r3, r3, #7
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <__NVIC_EnableIRQ>:
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	2b00      	cmp	r3, #0
 800178c:	db0b      	blt.n	80017a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	f003 021f 	and.w	r2, r3, #31
 8001794:	4907      	ldr	r1, [pc, #28]	; (80017b4 <__NVIC_EnableIRQ+0x38>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	2001      	movs	r0, #1
 800179e:	fa00 f202 	lsl.w	r2, r0, r2
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <__NVIC_SetPriority>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	db0a      	blt.n	80017e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	490c      	ldr	r1, [pc, #48]	; (8001804 <__NVIC_SetPriority+0x4c>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	440b      	add	r3, r1
 80017dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017e0:	e00a      	b.n	80017f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4908      	ldr	r1, [pc, #32]	; (8001808 <__NVIC_SetPriority+0x50>)
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	3b04      	subs	r3, #4
 80017f0:	0112      	lsls	r2, r2, #4
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	440b      	add	r3, r1
 80017f6:	761a      	strb	r2, [r3, #24]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <NVIC_EncodePriority>:
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f1c3 0307 	rsb	r3, r3, #7
 8001826:	2b04      	cmp	r3, #4
 8001828:	bf28      	it	cs
 800182a:	2304      	movcs	r3, #4
 800182c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3304      	adds	r3, #4
 8001832:	2b06      	cmp	r3, #6
 8001834:	d902      	bls.n	800183c <NVIC_EncodePriority+0x30>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3b03      	subs	r3, #3
 800183a:	e000      	b.n	800183e <NVIC_EncodePriority+0x32>
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	f04f 32ff 	mov.w	r2, #4294967295
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43da      	mvns	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	401a      	ands	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
 800185e:	43d9      	mvns	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	4313      	orrs	r3, r2
}
 8001866:	4618      	mov	r0, r3
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <LL_RCC_MSI_Enable+0x1c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <LL_RCC_MSI_Enable+0x1c>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000

08001894 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <LL_RCC_MSI_IsReady+0x20>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d101      	bne.n	80018a8 <LL_RCC_MSI_IsReady+0x14>
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <LL_RCC_MSI_IsReady+0x16>
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	40021000 	.word	0x40021000

080018b8 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80018c2:	f043 0308 	orr.w	r3, r3, #8
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000

080018d8 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <LL_RCC_MSI_SetRange+0x24>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e8:	4904      	ldr	r1, [pc, #16]	; (80018fc <LL_RCC_MSI_SetRange+0x24>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40021000 	.word	0x40021000

08001900 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	4904      	ldr	r1, [pc, #16]	; (8001928 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8001916:	4313      	orrs	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000

0800192c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <LL_RCC_SetSysClkSource+0x24>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f023 0203 	bic.w	r2, r3, #3
 800193c:	4904      	ldr	r1, [pc, #16]	; (8001950 <LL_RCC_SetSysClkSource+0x24>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4313      	orrs	r3, r2
 8001942:	608b      	str	r3, [r1, #8]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	40021000 	.word	0x40021000

08001954 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <LL_RCC_GetSysClkSource+0x18>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 030c 	and.w	r3, r3, #12
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40021000 	.word	0x40021000

08001970 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <LL_RCC_SetAHBPrescaler+0x24>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001980:	4904      	ldr	r1, [pc, #16]	; (8001994 <LL_RCC_SetAHBPrescaler+0x24>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	40021000 	.word	0x40021000

08001998 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <LL_RCC_SetAPB1Prescaler+0x24>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019a8:	4904      	ldr	r1, [pc, #16]	; (80019bc <LL_RCC_SetAPB1Prescaler+0x24>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	40021000 	.word	0x40021000

080019c0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019d0:	4904      	ldr	r1, [pc, #16]	; (80019e4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	40021000 	.word	0x40021000

080019e8 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <LL_RCC_SetUSARTClockSource+0x30>)
 80019f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	0c1b      	lsrs	r3, r3, #16
 80019fa:	43db      	mvns	r3, r3
 80019fc:	401a      	ands	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	4905      	ldr	r1, [pc, #20]	; (8001a18 <LL_RCC_SetUSARTClockSource+0x30>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000

08001a1c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <LL_RCC_PLL_Enable+0x1c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <LL_RCC_PLL_Enable+0x1c>)
 8001a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000

08001a3c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001a40:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <LL_RCC_PLL_IsReady+0x24>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a4c:	d101      	bne.n	8001a52 <LL_RCC_PLL_IsReady+0x16>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <LL_RCC_PLL_IsReady+0x18>
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000

08001a64 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	68f9      	ldr	r1, [r7, #12]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	4311      	orrs	r1, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	0212      	lsls	r2, r2, #8
 8001a84:	4311      	orrs	r1, r2
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	4904      	ldr	r1, [pc, #16]	; (8001a9c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	f9ff808c 	.word	0xf9ff808c

08001aa4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ab2:	60d3      	str	r3, [r2, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001ace:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ad0:	4907      	ldr	r1, [pc, #28]	; (8001af0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001ada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	40021000 	.word	0x40021000

08001af4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001afe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b00:	4907      	ldr	r1, [pc, #28]	; (8001b20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	40021000 	.word	0x40021000

08001b24 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b30:	4907      	ldr	r1, [pc, #28]	; (8001b50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	40021000 	.word	0x40021000

08001b54 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <LL_FLASH_SetLatency+0x24>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 0207 	bic.w	r2, r3, #7
 8001b64:	4904      	ldr	r1, [pc, #16]	; (8001b78 <LL_FLASH_SetLatency+0x24>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	40022000 	.word	0x40022000

08001b7c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <LL_FLASH_GetLatency+0x18>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0307 	and.w	r3, r3, #7
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40022000 	.word	0x40022000

08001b98 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001ba8:	4904      	ldr	r1, [pc, #16]	; (8001bbc <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	40007000 	.word	0x40007000

08001bc0 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd0:	d101      	bne.n	8001bd6 <LL_PWR_IsActiveFlag_VOS+0x16>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <LL_PWR_IsActiveFlag_VOS+0x18>
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40007000 	.word	0x40007000

08001be8 <LL_TIM_EnableCounter>:
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	601a      	str	r2, [r3, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_TIM_SetCounterMode>:
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	601a      	str	r2, [r3, #0]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_TIM_DisableARRPreload>:
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	601a      	str	r2, [r3, #0]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <LL_TIM_SetAutoReload>:
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <LL_TIM_OC_DisableFast>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d028      	beq.n	8001cce <LL_TIM_OC_DisableFast+0x62>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d023      	beq.n	8001cca <LL_TIM_OC_DisableFast+0x5e>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b10      	cmp	r3, #16
 8001c86:	d01e      	beq.n	8001cc6 <LL_TIM_OC_DisableFast+0x5a>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2b40      	cmp	r3, #64	; 0x40
 8001c8c:	d019      	beq.n	8001cc2 <LL_TIM_OC_DisableFast+0x56>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c94:	d013      	beq.n	8001cbe <LL_TIM_OC_DisableFast+0x52>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c9c:	d00d      	beq.n	8001cba <LL_TIM_OC_DisableFast+0x4e>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca4:	d007      	beq.n	8001cb6 <LL_TIM_OC_DisableFast+0x4a>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cac:	d101      	bne.n	8001cb2 <LL_TIM_OC_DisableFast+0x46>
 8001cae:	2307      	movs	r3, #7
 8001cb0:	e00e      	b.n	8001cd0 <LL_TIM_OC_DisableFast+0x64>
 8001cb2:	2308      	movs	r3, #8
 8001cb4:	e00c      	b.n	8001cd0 <LL_TIM_OC_DisableFast+0x64>
 8001cb6:	2306      	movs	r3, #6
 8001cb8:	e00a      	b.n	8001cd0 <LL_TIM_OC_DisableFast+0x64>
 8001cba:	2305      	movs	r3, #5
 8001cbc:	e008      	b.n	8001cd0 <LL_TIM_OC_DisableFast+0x64>
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	e006      	b.n	8001cd0 <LL_TIM_OC_DisableFast+0x64>
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e004      	b.n	8001cd0 <LL_TIM_OC_DisableFast+0x64>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e002      	b.n	8001cd0 <LL_TIM_OC_DisableFast+0x64>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <LL_TIM_OC_DisableFast+0x64>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3318      	adds	r3, #24
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	7bfb      	ldrb	r3, [r7, #15]
 8001cda:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <LL_TIM_OC_DisableFast+0x9c>)
 8001cdc:	5cd3      	ldrb	r3, [r2, r3]
 8001cde:	440b      	add	r3, r1
 8001ce0:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	4908      	ldr	r1, [pc, #32]	; (8001d0c <LL_TIM_OC_DisableFast+0xa0>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	4619      	mov	r1, r3
 8001cee:	2304      	movs	r3, #4
 8001cf0:	408b      	lsls	r3, r1
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	601a      	str	r2, [r3, #0]
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	080063e0 	.word	0x080063e0
 8001d0c:	080063ec 	.word	0x080063ec

08001d10 <LL_TIM_OC_EnablePreload>:
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d028      	beq.n	8001d72 <LL_TIM_OC_EnablePreload+0x62>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d023      	beq.n	8001d6e <LL_TIM_OC_EnablePreload+0x5e>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	2b10      	cmp	r3, #16
 8001d2a:	d01e      	beq.n	8001d6a <LL_TIM_OC_EnablePreload+0x5a>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2b40      	cmp	r3, #64	; 0x40
 8001d30:	d019      	beq.n	8001d66 <LL_TIM_OC_EnablePreload+0x56>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d38:	d013      	beq.n	8001d62 <LL_TIM_OC_EnablePreload+0x52>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d40:	d00d      	beq.n	8001d5e <LL_TIM_OC_EnablePreload+0x4e>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d48:	d007      	beq.n	8001d5a <LL_TIM_OC_EnablePreload+0x4a>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d50:	d101      	bne.n	8001d56 <LL_TIM_OC_EnablePreload+0x46>
 8001d52:	2307      	movs	r3, #7
 8001d54:	e00e      	b.n	8001d74 <LL_TIM_OC_EnablePreload+0x64>
 8001d56:	2308      	movs	r3, #8
 8001d58:	e00c      	b.n	8001d74 <LL_TIM_OC_EnablePreload+0x64>
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	e00a      	b.n	8001d74 <LL_TIM_OC_EnablePreload+0x64>
 8001d5e:	2305      	movs	r3, #5
 8001d60:	e008      	b.n	8001d74 <LL_TIM_OC_EnablePreload+0x64>
 8001d62:	2304      	movs	r3, #4
 8001d64:	e006      	b.n	8001d74 <LL_TIM_OC_EnablePreload+0x64>
 8001d66:	2303      	movs	r3, #3
 8001d68:	e004      	b.n	8001d74 <LL_TIM_OC_EnablePreload+0x64>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e002      	b.n	8001d74 <LL_TIM_OC_EnablePreload+0x64>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <LL_TIM_OC_EnablePreload+0x64>
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3318      	adds	r3, #24
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <LL_TIM_OC_EnablePreload+0x98>)
 8001d80:	5cd3      	ldrb	r3, [r2, r3]
 8001d82:	440b      	add	r3, r1
 8001d84:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	4907      	ldr	r1, [pc, #28]	; (8001dac <LL_TIM_OC_EnablePreload+0x9c>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	4619      	mov	r1, r3
 8001d92:	2308      	movs	r3, #8
 8001d94:	408b      	lsls	r3, r1
 8001d96:	431a      	orrs	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	601a      	str	r2, [r3, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	080063e0 	.word	0x080063e0
 8001dac:	080063ec 	.word	0x080063ec

08001db0 <LL_TIM_DisableExternalClock>:
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_TIM_SetClockSource>:
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001de2:	f023 0307 	bic.w	r3, r3, #7
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	609a      	str	r2, [r3, #8]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <LL_TIM_SetTriggerOutput>:
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	605a      	str	r2, [r3, #4]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_TIM_DisableMasterSlaveMode>:
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	609a      	str	r2, [r3, #8]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_TIM_ConfigETR>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f423 423f 	bic.w	r2, r3, #48896	; 0xbf00
 8001e56:	68b9      	ldr	r1, [r7, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4319      	orrs	r1, r3
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	430b      	orrs	r3, r1
 8001e60:	431a      	orrs	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	609a      	str	r2, [r3, #8]
}
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_TIM_SetOCRefClearInputSource>:
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 0208 	bic.w	r2, r3, #8
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_TIM_ClearFlag_UPDATE>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f06f 0201 	mvn.w	r2, #1
 8001ea6:	611a      	str	r2, [r3, #16]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_TIM_EnableIT_UPDATE>:
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f043 0201 	orr.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	60da      	str	r2, [r3, #12]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f043 0201 	orr.w	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	615a      	str	r2, [r3, #20]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_USART_Enable>:
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	601a      	str	r2, [r3, #0]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_USART_ConfigAsyncMode>:
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	609a      	str	r2, [r3, #8]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b085      	sub	sp, #20
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4013      	ands	r3, r2
 8001f98:	041a      	lsls	r2, r3, #16
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	43d9      	mvns	r1, r3
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	400b      	ands	r3, r1
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	619a      	str	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  int Buzz_Check = 0, Buzz = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f7ff fdae 	bl	8001b24 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001fc8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001fcc:	f7ff fd92 	bl	8001af4 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	f7ff fba1 	bl	8001718 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001fd6:	f7ff fbc3 	bl	8001760 <__NVIC_GetPriorityGrouping>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2200      	movs	r2, #0
 8001fde:	210f      	movs	r1, #15
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fc13 	bl	800180c <NVIC_EncodePriority>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f04f 30ff 	mov.w	r0, #4294967295
 8001fee:	f7ff fbe3 	bl	80017b8 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ff2:	f000 f82d 	bl	8002050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ff6:	f000 f9c3 	bl	8002380 <MX_GPIO_Init>
  MX_TIM6_Init();
 8001ffa:	f000 f8f7 	bl	80021ec <MX_TIM6_Init>
  MX_TIM3_Init();
 8001ffe:	f000 f879 	bl	80020f4 <MX_TIM3_Init>
  MX_TIM7_Init();
 8002002:	f000 f927 	bl	8002254 <MX_TIM7_Init>
  MX_USART2_UART_Init();
 8002006:	f000 f967 	bl	80022d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	  time = START_TIME;
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <main+0x98>)
 800200c:	220f      	movs	r2, #15
 800200e:	601a      	str	r2, [r3, #0]
  	  dma_init();
 8002010:	f7ff fb20 	bl	8001654 <dma_init>
  	  enable_timer3();
 8002014:	f7ff faec 	bl	80015f0 <enable_timer3>
  	  TM1637_gpio_init();
 8002018:	f000 fe90 	bl	8002d3c <TM1637_gpio_init>
  	  TM1637_Init();
 800201c:	f000 fd42 	bl	8002aa4 <TM1637_Init>
  	  TM1637_SetBrightness(8);
 8002020:	2008      	movs	r0, #8
 8002022:	f000 fdfd 	bl	8002c20 <TM1637_SetBrightness>
  	  LedStart();
 8002026:	f000 fb13 	bl	8002650 <LedStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	Buzz_Buzz_Up(&Buzz_Check);
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fc0d 	bl	800284c <Buzz_Buzz_Up>
  	Buzz_Buzz(500, 2, &Buzz, &Buzz_Check);
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	463a      	mov	r2, r7
 8002036:	2102      	movs	r1, #2
 8002038:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800203c:	f000 fbbe 	bl	80027bc <Buzz_Buzz>
  	LL_mDelay(500);
 8002040:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002044:	f002 f9a4 	bl	8004390 <LL_mDelay>
  	Buzz_Buzz_Up(&Buzz_Check);
 8002048:	e7ef      	b.n	800202a <main+0x76>
 800204a:	bf00      	nop
 800204c:	20000344 	.word	0x20000344

08002050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8002054:	2001      	movs	r0, #1
 8002056:	f7ff fd7d 	bl	8001b54 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 800205a:	bf00      	nop
 800205c:	f7ff fd8e 	bl	8001b7c <LL_FLASH_GetLatency>
 8002060:	4603      	mov	r3, r0
 8002062:	2b01      	cmp	r3, #1
 8002064:	d1fa      	bne.n	800205c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8002066:	f44f 7000 	mov.w	r0, #512	; 0x200
 800206a:	f7ff fd95 	bl	8001b98 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 800206e:	bf00      	nop
 8002070:	f7ff fda6 	bl	8001bc0 <LL_PWR_IsActiveFlag_VOS>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1fa      	bne.n	8002070 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 800207a:	f7ff fbfb 	bl	8001874 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 800207e:	bf00      	nop
 8002080:	f7ff fc08 	bl	8001894 <LL_RCC_MSI_IsReady>
 8002084:	4603      	mov	r3, r0
 8002086:	2b01      	cmp	r3, #1
 8002088:	d1fa      	bne.n	8002080 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 800208a:	f7ff fc15 	bl	80018b8 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 800208e:	2060      	movs	r0, #96	; 0x60
 8002090:	f7ff fc22 	bl	80018d8 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8002094:	2000      	movs	r0, #0
 8002096:	f7ff fc33 	bl	8001900 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 16, LL_RCC_PLLR_DIV_2);
 800209a:	2300      	movs	r3, #0
 800209c:	2210      	movs	r2, #16
 800209e:	2100      	movs	r1, #0
 80020a0:	2001      	movs	r0, #1
 80020a2:	f7ff fcdf 	bl	8001a64 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80020a6:	f7ff fcfd 	bl	8001aa4 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80020aa:	f7ff fcb7 	bl	8001a1c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80020ae:	bf00      	nop
 80020b0:	f7ff fcc4 	bl	8001a3c <LL_RCC_PLL_IsReady>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d1fa      	bne.n	80020b0 <SystemClock_Config+0x60>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80020ba:	2003      	movs	r0, #3
 80020bc:	f7ff fc36 	bl	800192c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80020c0:	bf00      	nop
 80020c2:	f7ff fc47 	bl	8001954 <LL_RCC_GetSysClkSource>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b0c      	cmp	r3, #12
 80020ca:	d1fa      	bne.n	80020c2 <SystemClock_Config+0x72>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80020cc:	2000      	movs	r0, #0
 80020ce:	f7ff fc4f 	bl	8001970 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80020d2:	2000      	movs	r0, #0
 80020d4:	f7ff fc60 	bl	8001998 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 80020d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020dc:	f7ff fc70 	bl	80019c0 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(32000000);
 80020e0:	4803      	ldr	r0, [pc, #12]	; (80020f0 <SystemClock_Config+0xa0>)
 80020e2:	f002 f947 	bl	8004374 <LL_Init1msTick>

  LL_SetSystemCoreClock(32000000);
 80020e6:	4802      	ldr	r0, [pc, #8]	; (80020f0 <SystemClock_Config+0xa0>)
 80020e8:	f002 f97a 	bl	80043e0 <LL_SetSystemCoreClock>
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	01e84800 	.word	0x01e84800

080020f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b094      	sub	sp, #80	; 0x50
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80020fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
 8002108:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800210a:	f107 031c 	add.w	r3, r7, #28
 800210e:	2220      	movs	r2, #32
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f002 fa8b 	bl	800462e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
 8002124:	611a      	str	r2, [r3, #16]
 8002126:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002128:	2002      	movs	r0, #2
 800212a:	f7ff fce3 	bl	8001af4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002132:	2300      	movs	r3, #0
 8002134:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 32-LL_TIM_IC_FILTER_FDIV1_N2;
 8002136:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <MX_TIM3_Init+0xf0>)
 8002138:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800213a:	2300      	movs	r3, #0
 800213c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800213e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002142:	4619      	mov	r1, r3
 8002144:	4828      	ldr	r0, [pc, #160]	; (80021e8 <MX_TIM3_Init+0xf4>)
 8002146:	f001 fc5f 	bl	8003a08 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800214a:	4827      	ldr	r0, [pc, #156]	; (80021e8 <MX_TIM3_Init+0xf4>)
 800214c:	f7ff fd6f 	bl	8001c2e <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002150:	2100      	movs	r1, #0
 8002152:	4825      	ldr	r0, [pc, #148]	; (80021e8 <MX_TIM3_Init+0xf4>)
 8002154:	f7ff fe3c 	bl	8001dd0 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8002158:	2101      	movs	r1, #1
 800215a:	4823      	ldr	r0, [pc, #140]	; (80021e8 <MX_TIM3_Init+0xf4>)
 800215c:	f7ff fdd8 	bl	8001d10 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002160:	2360      	movs	r3, #96	; 0x60
 8002162:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	461a      	mov	r2, r3
 800217a:	2101      	movs	r1, #1
 800217c:	481a      	ldr	r0, [pc, #104]	; (80021e8 <MX_TIM3_Init+0xf4>)
 800217e:	f001 fcd7 	bl	8003b30 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002182:	2101      	movs	r1, #1
 8002184:	4818      	ldr	r0, [pc, #96]	; (80021e8 <MX_TIM3_Init+0xf4>)
 8002186:	f7ff fd71 	bl	8001c6c <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM3, LL_TIM_OCREF_CLR_INT_NC);
 800218a:	2100      	movs	r1, #0
 800218c:	4816      	ldr	r0, [pc, #88]	; (80021e8 <MX_TIM3_Init+0xf4>)
 800218e:	f7ff fe70 	bl	8001e72 <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM3);
 8002192:	4815      	ldr	r0, [pc, #84]	; (80021e8 <MX_TIM3_Init+0xf4>)
 8002194:	f7ff fe0c 	bl	8001db0 <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM3, LL_TIM_ETR_POLARITY_NONINVERTED, LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
 8002198:	2300      	movs	r3, #0
 800219a:	2200      	movs	r2, #0
 800219c:	2100      	movs	r1, #0
 800219e:	4812      	ldr	r0, [pc, #72]	; (80021e8 <MX_TIM3_Init+0xf4>)
 80021a0:	f7ff fe4e 	bl	8001e40 <LL_TIM_ConfigETR>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80021a4:	2100      	movs	r1, #0
 80021a6:	4810      	ldr	r0, [pc, #64]	; (80021e8 <MX_TIM3_Init+0xf4>)
 80021a8:	f7ff fe27 	bl	8001dfa <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80021ac:	480e      	ldr	r0, [pc, #56]	; (80021e8 <MX_TIM3_Init+0xf4>)
 80021ae:	f7ff fe37 	bl	8001e20 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f7ff fc86 	bl	8001ac4 <LL_AHB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PA6   ------> TIM3_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80021b8:	2340      	movs	r3, #64	; 0x40
 80021ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021bc:	2302      	movs	r3, #2
 80021be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80021cc:	2302      	movs	r3, #2
 80021ce:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	4619      	mov	r1, r3
 80021d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d8:	f000 ff5a 	bl	8003090 <LL_GPIO_Init>

}
 80021dc:	bf00      	nop
 80021de:	3750      	adds	r7, #80	; 0x50
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	fff00020 	.word	0xfff00020
 80021e8:	40000400 	.word	0x40000400

080021ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8002200:	2010      	movs	r0, #16
 8002202:	f7ff fc77 	bl	8001af4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 31;
 8002206:	231f      	movs	r3, #31
 8002208:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 800220e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002212:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	4619      	mov	r1, r3
 8002218:	480d      	ldr	r0, [pc, #52]	; (8002250 <MX_TIM6_Init+0x64>)
 800221a:	f001 fbf5 	bl	8003a08 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 800221e:	480c      	ldr	r0, [pc, #48]	; (8002250 <MX_TIM6_Init+0x64>)
 8002220:	f7ff fd05 	bl	8001c2e <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8002224:	2100      	movs	r1, #0
 8002226:	480a      	ldr	r0, [pc, #40]	; (8002250 <MX_TIM6_Init+0x64>)
 8002228:	f7ff fde7 	bl	8001dfa <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 800222c:	4808      	ldr	r0, [pc, #32]	; (8002250 <MX_TIM6_Init+0x64>)
 800222e:	f7ff fdf7 	bl	8001e20 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */
 // LL_TIM_SetClockSource(TIM6, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_SetCounterMode(TIM6, LL_TIM_COUNTERMODE_UP);
 8002232:	2100      	movs	r1, #0
 8002234:	4806      	ldr	r0, [pc, #24]	; (8002250 <MX_TIM6_Init+0x64>)
 8002236:	f7ff fce7 	bl	8001c08 <LL_TIM_SetCounterMode>
  LL_TIM_ClearFlag_UPDATE(TIM6);
 800223a:	4805      	ldr	r0, [pc, #20]	; (8002250 <MX_TIM6_Init+0x64>)
 800223c:	f7ff fe2c 	bl	8001e98 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 8002240:	4803      	ldr	r0, [pc, #12]	; (8002250 <MX_TIM6_Init+0x64>)
 8002242:	f7ff fcd1 	bl	8001be8 <LL_TIM_EnableCounter>

  /* USER CODE END TIM6_Init 2 */

}
 8002246:	bf00      	nop
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40001000 	.word	0x40001000

08002254 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8002268:	2020      	movs	r0, #32
 800226a:	f7ff fc43 	bl	8001af4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 32000-LL_TIM_IC_FILTER_FDIV1_N2;
 800226e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8002272:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <MX_TIM7_Init+0x7c>)
 800227a:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	4619      	mov	r1, r3
 8002280:	4814      	ldr	r0, [pc, #80]	; (80022d4 <MX_TIM7_Init+0x80>)
 8002282:	f001 fbc1 	bl	8003a08 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 8002286:	4813      	ldr	r0, [pc, #76]	; (80022d4 <MX_TIM7_Init+0x80>)
 8002288:	f7ff fcd1 	bl	8001c2e <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 800228c:	2100      	movs	r1, #0
 800228e:	4811      	ldr	r0, [pc, #68]	; (80022d4 <MX_TIM7_Init+0x80>)
 8002290:	f7ff fdb3 	bl	8001dfa <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8002294:	480f      	ldr	r0, [pc, #60]	; (80022d4 <MX_TIM7_Init+0x80>)
 8002296:	f7ff fdc3 	bl	8001e20 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  LL_TIM_SetCounterMode(TIM7, LL_TIM_COUNTERMODE_UP);
 800229a:	2100      	movs	r1, #0
 800229c:	480d      	ldr	r0, [pc, #52]	; (80022d4 <MX_TIM7_Init+0x80>)
 800229e:	f7ff fcb3 	bl	8001c08 <LL_TIM_SetCounterMode>
  LL_TIM_GenerateEvent_UPDATE(TIM7);
 80022a2:	480c      	ldr	r0, [pc, #48]	; (80022d4 <MX_TIM7_Init+0x80>)
 80022a4:	f7ff fe29 	bl	8001efa <LL_TIM_GenerateEvent_UPDATE>
  LL_TIM_ClearFlag_UPDATE(TIM7);
 80022a8:	480a      	ldr	r0, [pc, #40]	; (80022d4 <MX_TIM7_Init+0x80>)
 80022aa:	f7ff fdf5 	bl	8001e98 <LL_TIM_ClearFlag_UPDATE>
  NVIC_SetPriority(TIM7_IRQn, 0);
 80022ae:	2100      	movs	r1, #0
 80022b0:	2037      	movs	r0, #55	; 0x37
 80022b2:	f7ff fa81 	bl	80017b8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 80022b6:	2037      	movs	r0, #55	; 0x37
 80022b8:	f7ff fa60 	bl	800177c <__NVIC_EnableIRQ>
  LL_TIM_EnableIT_UPDATE(TIM7);
 80022bc:	4805      	ldr	r0, [pc, #20]	; (80022d4 <MX_TIM7_Init+0x80>)
 80022be:	f7ff fe0c 	bl	8001eda <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM7);
 80022c2:	4804      	ldr	r0, [pc, #16]	; (80022d4 <MX_TIM7_Init+0x80>)
 80022c4:	f7ff fc90 	bl	8001be8 <LL_TIM_EnableCounter>
  /* USER CODE END TIM7_Init 2 */

}
 80022c8:	bf00      	nop
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	fff003e8 	.word	0xfff003e8
 80022d4:	40001400 	.word	0x40001400

080022d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08e      	sub	sp, #56	; 0x38
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80022de:	f107 031c 	add.w	r3, r7, #28
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]
 80022ec:	611a      	str	r2, [r3, #16]
 80022ee:	615a      	str	r2, [r3, #20]
 80022f0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
 8002300:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8002302:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8002306:	f7ff fb6f 	bl	80019e8 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800230a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800230e:	f7ff fbf1 	bl	8001af4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002312:	2001      	movs	r0, #1
 8002314:	f7ff fbd6 	bl	8001ac4 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8002318:	230c      	movs	r3, #12
 800231a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800231c:	2302      	movs	r3, #2
 800231e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800232c:	2307      	movs	r3, #7
 800232e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	4619      	mov	r1, r3
 8002334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002338:	f000 feaa 	bl	8003090 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800233c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002340:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002342:	2300      	movs	r3, #0
 8002344:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800234a:	2300      	movs	r3, #0
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800234e:	230c      	movs	r3, #12
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002352:	2300      	movs	r3, #0
 8002354:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002356:	2300      	movs	r3, #0
 8002358:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800235a:	f107 031c 	add.w	r3, r7, #28
 800235e:	4619      	mov	r1, r3
 8002360:	4806      	ldr	r0, [pc, #24]	; (800237c <MX_USART2_UART_Init+0xa4>)
 8002362:	f001 ff71 	bl	8004248 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002366:	4805      	ldr	r0, [pc, #20]	; (800237c <MX_USART2_UART_Init+0xa4>)
 8002368:	f7ff fde7 	bl	8001f3a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800236c:	4803      	ldr	r0, [pc, #12]	; (800237c <MX_USART2_UART_Init+0xa4>)
 800236e:	f7ff fdd4 	bl	8001f1a <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002372:	bf00      	nop
 8002374:	3738      	adds	r7, #56	; 0x38
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40004400 	.word	0x40004400

08002380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002386:	463b      	mov	r3, r7
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
 8002394:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8002396:	2080      	movs	r0, #128	; 0x80
 8002398:	f7ff fb94 	bl	8001ac4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800239c:	2001      	movs	r0, #1
 800239e:	f7ff fb91 	bl	8001ac4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80023a2:	2002      	movs	r0, #2
 80023a4:	f7ff fb8e 	bl	8001ac4 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, test_Pin|Buzz_Buzz_Pin);
 80023a8:	f44f 7108 	mov.w	r1, #544	; 0x220
 80023ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b0:	f7ff fdd9 	bl	8001f66 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Led_GPIO_Port, Led_Pin);
 80023b4:	2140      	movs	r1, #64	; 0x40
 80023b6:	4813      	ldr	r0, [pc, #76]	; (8002404 <MX_GPIO_Init+0x84>)
 80023b8:	f7ff fdd5 	bl	8001f66 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = test_Pin|Buzz_Buzz_Pin;
 80023bc:	f44f 7308 	mov.w	r3, #544	; 0x220
 80023c0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80023c2:	2301      	movs	r3, #1
 80023c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d2:	463b      	mov	r3, r7
 80023d4:	4619      	mov	r1, r3
 80023d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023da:	f000 fe59 	bl	8003090 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Led_Pin;
 80023de:	2340      	movs	r3, #64	; 0x40
 80023e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80023e2:	2301      	movs	r3, #1
 80023e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80023f2:	463b      	mov	r3, r7
 80023f4:	4619      	mov	r1, r3
 80023f6:	4803      	ldr	r0, [pc, #12]	; (8002404 <MX_GPIO_Init+0x84>)
 80023f8:	f000 fe4a 	bl	8003090 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023fc:	bf00      	nop
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	48000400 	.word	0x48000400

08002408 <WS2812_Send>:
	LL_TIM_ClearFlag_UPDATE(TIM6);
	LL_TIM_SetAutoReload(TIM6, czas);
	while(LL_TIM_IsActiveFlag_UPDATE(TIM6) == 0);
}
void WS2812_Send (void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
	uint32_t color;
	Set_Brightness(2);
 8002412:	2002      	movs	r0, #2
 8002414:	f000 f86c 	bl	80024f0 <Set_Brightness>

	for (int i=0; i<50; i++)
 8002418:	2300      	movs	r3, #0
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	e00a      	b.n	8002434 <WS2812_Send+0x2c>
	{
		pwmData[indx] = 0;
 800241e:	4a32      	ldr	r2, [pc, #200]	; (80024e8 <WS2812_Send+0xe0>)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2100      	movs	r1, #0
 8002424:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3301      	adds	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	3301      	adds	r3, #1
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	2b31      	cmp	r3, #49	; 0x31
 8002438:	ddf1      	ble.n	800241e <WS2812_Send+0x16>
	}

	for (int i= 0; i<MAX_LED; i++)
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	e036      	b.n	80024ae <WS2812_Send+0xa6>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8002440:	4a2a      	ldr	r2, [pc, #168]	; (80024ec <WS2812_Send+0xe4>)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	785b      	ldrb	r3, [r3, #1]
 800244a:	041a      	lsls	r2, r3, #16
 800244c:	4927      	ldr	r1, [pc, #156]	; (80024ec <WS2812_Send+0xe4>)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	789b      	ldrb	r3, [r3, #2]
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	431a      	orrs	r2, r3
 800245a:	4924      	ldr	r1, [pc, #144]	; (80024ec <WS2812_Send+0xe4>)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	78db      	ldrb	r3, [r3, #3]
 8002464:	4313      	orrs	r3, r2
 8002466:	603b      	str	r3, [r7, #0]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8002468:	2317      	movs	r3, #23
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	e019      	b.n	80024a2 <WS2812_Send+0x9a>
		{
			if (color&(1<<i))
 800246e:	2201      	movs	r2, #1
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	461a      	mov	r2, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <WS2812_Send+0x84>
			{
				pwmData[indx] = 27;  // 2/3 of 90
 8002480:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <WS2812_Send+0xe0>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	211b      	movs	r1, #27
 8002486:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800248a:	e004      	b.n	8002496 <WS2812_Send+0x8e>
			}

			else pwmData[indx] = 13;  // 1/3 of 90
 800248c:	4a16      	ldr	r2, [pc, #88]	; (80024e8 <WS2812_Send+0xe0>)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	210d      	movs	r1, #13
 8002492:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	3b01      	subs	r3, #1
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	dae2      	bge.n	800246e <WS2812_Send+0x66>
	for (int i= 0; i<MAX_LED; i++)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	3301      	adds	r3, #1
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b07      	cmp	r3, #7
 80024b2:	ddc5      	ble.n	8002440 <WS2812_Send+0x38>
		}

	}

	for (int i=0; i<50; i++)
 80024b4:	2300      	movs	r3, #0
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	e00a      	b.n	80024d0 <WS2812_Send+0xc8>
	{
		pwmData[indx] = 0;
 80024ba:	4a0b      	ldr	r2, [pc, #44]	; (80024e8 <WS2812_Send+0xe0>)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	2100      	movs	r1, #0
 80024c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3301      	adds	r3, #1
 80024c8:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3301      	adds	r3, #1
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b31      	cmp	r3, #49	; 0x31
 80024d4:	ddf1      	ble.n	80024ba <WS2812_Send+0xb2>
	}

	generate_signal(pwmData,sizeof(pwmData));
 80024d6:	f44f 7112 	mov.w	r1, #584	; 0x248
 80024da:	4803      	ldr	r0, [pc, #12]	; (80024e8 <WS2812_Send+0xe0>)
 80024dc:	f7ff f898 	bl	8001610 <generate_signal>
}
 80024e0:	bf00      	nop
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	200000fc 	.word	0x200000fc
 80024ec:	200000dc 	.word	0x200000dc

080024f0 <Set_Brightness>:
void Set_Brightness (int brightness)  // 0-45
{
 80024f0:	b5b0      	push	{r4, r5, r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b2d      	cmp	r3, #45	; 0x2d
 80024fc:	dd01      	ble.n	8002502 <Set_Brightness+0x12>
 80024fe:	232d      	movs	r3, #45	; 0x2d
 8002500:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	e060      	b.n	80025ca <Set_Brightness+0xda>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8002508:	4a37      	ldr	r2, [pc, #220]	; (80025e8 <Set_Brightness+0xf8>)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8002510:	4a36      	ldr	r2, [pc, #216]	; (80025ec <Set_Brightness+0xfc>)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8002518:	2301      	movs	r3, #1
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	e04f      	b.n	80025be <Set_Brightness+0xce>
		{
			float angle = 90-brightness;  // in degrees
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8002524:	ee07 3a90 	vmov	s15, r3
 8002528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800252c:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f7fe f801 	bl	8000538 <__aeabi_f2d>
 8002536:	a32a      	add	r3, pc, #168	; (adr r3, 80025e0 <Set_Brightness+0xf0>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe f854 	bl	80005e8 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	4b28      	ldr	r3, [pc, #160]	; (80025f0 <Set_Brightness+0x100>)
 800254e:	f7fe f975 	bl	800083c <__aeabi_ddiv>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	f7fe fb27 	bl	8000bac <__aeabi_d2f>
 800255e:	4603      	mov	r3, r0
 8002560:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8002562:	4a21      	ldr	r2, [pc, #132]	; (80025e8 <Set_Brightness+0xf8>)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	441a      	add	r2, r3
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4413      	add	r3, r2
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fd ffcf 	bl	8000514 <__aeabi_i2d>
 8002576:	4604      	mov	r4, r0
 8002578:	460d      	mov	r5, r1
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f7fd ffdc 	bl	8000538 <__aeabi_f2d>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	ec43 2b10 	vmov	d0, r2, r3
 8002588:	f002 fe72 	bl	8005270 <tan>
 800258c:	ec53 2b10 	vmov	r2, r3, d0
 8002590:	4620      	mov	r0, r4
 8002592:	4629      	mov	r1, r5
 8002594:	f7fe f952 	bl	800083c <__aeabi_ddiv>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	f7fe fae4 	bl	8000b6c <__aeabi_d2uiz>
 80025a4:	4603      	mov	r3, r0
 80025a6:	b2d9      	uxtb	r1, r3
 80025a8:	4a10      	ldr	r2, [pc, #64]	; (80025ec <Set_Brightness+0xfc>)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	441a      	add	r2, r3
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4413      	add	r3, r2
 80025b4:	460a      	mov	r2, r1
 80025b6:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	3301      	adds	r3, #1
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	ddac      	ble.n	800251e <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	3301      	adds	r3, #1
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b07      	cmp	r3, #7
 80025ce:	dd9b      	ble.n	8002508 <Set_Brightness+0x18>
		}
	}

#endif

}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bdb0      	pop	{r4, r5, r7, pc}
 80025da:	bf00      	nop
 80025dc:	f3af 8000 	nop.w
 80025e0:	53c8d4f1 	.word	0x53c8d4f1
 80025e4:	400921fb 	.word	0x400921fb
 80025e8:	200000bc 	.word	0x200000bc
 80025ec:	200000dc 	.word	0x200000dc
 80025f0:	40668000 	.word	0x40668000

080025f4 <Set_LED>:
void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	b2d9      	uxtb	r1, r3
 8002606:	4a11      	ldr	r2, [pc, #68]	; (800264c <Set_LED+0x58>)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	b2d9      	uxtb	r1, r3
 8002612:	4a0e      	ldr	r2, [pc, #56]	; (800264c <Set_LED+0x58>)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	460a      	mov	r2, r1
 800261c:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	b2d9      	uxtb	r1, r3
 8002622:	4a0a      	ldr	r2, [pc, #40]	; (800264c <Set_LED+0x58>)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	460a      	mov	r2, r1
 800262c:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	b2d9      	uxtb	r1, r3
 8002632:	4a06      	ldr	r2, [pc, #24]	; (800264c <Set_LED+0x58>)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	460a      	mov	r2, r1
 800263c:	70da      	strb	r2, [r3, #3]
}
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	200000bc 	.word	0x200000bc

08002650 <LedStart>:
			}
		break;
	}
}
void LedStart(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
	Set_LED(0, 0, 0, 255);
 8002654:	23ff      	movs	r3, #255	; 0xff
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	2000      	movs	r0, #0
 800265c:	f7ff ffca 	bl	80025f4 <Set_LED>
	Set_LED(1, 0, 0, 255);
 8002660:	23ff      	movs	r3, #255	; 0xff
 8002662:	2200      	movs	r2, #0
 8002664:	2100      	movs	r1, #0
 8002666:	2001      	movs	r0, #1
 8002668:	f7ff ffc4 	bl	80025f4 <Set_LED>
	Set_LED(2, 0, 0, 255);
 800266c:	23ff      	movs	r3, #255	; 0xff
 800266e:	2200      	movs	r2, #0
 8002670:	2100      	movs	r1, #0
 8002672:	2002      	movs	r0, #2
 8002674:	f7ff ffbe 	bl	80025f4 <Set_LED>
	Set_LED(3, 0, 0, 255);
 8002678:	23ff      	movs	r3, #255	; 0xff
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	2003      	movs	r0, #3
 8002680:	f7ff ffb8 	bl	80025f4 <Set_LED>
	Set_LED(4, 0, 0, 255);
 8002684:	23ff      	movs	r3, #255	; 0xff
 8002686:	2200      	movs	r2, #0
 8002688:	2100      	movs	r1, #0
 800268a:	2004      	movs	r0, #4
 800268c:	f7ff ffb2 	bl	80025f4 <Set_LED>
	Set_LED(5, 0, 0, 255);
 8002690:	23ff      	movs	r3, #255	; 0xff
 8002692:	2200      	movs	r2, #0
 8002694:	2100      	movs	r1, #0
 8002696:	2005      	movs	r0, #5
 8002698:	f7ff ffac 	bl	80025f4 <Set_LED>
	Set_LED(6, 0, 0, 255);
 800269c:	23ff      	movs	r3, #255	; 0xff
 800269e:	2200      	movs	r2, #0
 80026a0:	2100      	movs	r1, #0
 80026a2:	2006      	movs	r0, #6
 80026a4:	f7ff ffa6 	bl	80025f4 <Set_LED>
	WS2812_Send();
 80026a8:	f7ff feae 	bl	8002408 <WS2812_Send>
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <TIM7_IRQHandler>:
		WS2812_Send();
		Damian_Marudzi(50000000);
	}
}
void TIM7_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7) == 1)
 80026b4:	480f      	ldr	r0, [pc, #60]	; (80026f4 <TIM7_IRQHandler+0x44>)
 80026b6:	f7ff fbfd 	bl	8001eb4 <LL_TIM_IsActiveFlag_UPDATE>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d117      	bne.n	80026f0 <TIM7_IRQHandler+0x40>
	{
		LL_GPIO_TogglePin(test_GPIO_Port, test_Pin);
 80026c0:	2120      	movs	r1, #32
 80026c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026c6:	f7ff fc5c 	bl	8001f82 <LL_GPIO_TogglePin>
		LL_TIM_ClearFlag_UPDATE(TIM7);
 80026ca:	480a      	ldr	r0, [pc, #40]	; (80026f4 <TIM7_IRQHandler+0x44>)
 80026cc:	f7ff fbe4 	bl	8001e98 <LL_TIM_ClearFlag_UPDATE>
		if(time>= DISPLAY_BLINK_TIME*-2)
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <TIM7_IRQHandler+0x48>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f113 0f06 	cmn.w	r3, #6
 80026d8:	db07      	blt.n	80026ea <TIM7_IRQHandler+0x3a>
		{
			UpdateDisplay();
 80026da:	f000 f80f 	bl	80026fc <UpdateDisplay>
			time--;
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <TIM7_IRQHandler+0x48>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <TIM7_IRQHandler+0x48>)
 80026e6:	6013      	str	r3, [r2, #0]
		{
			TM1637_SetBrightness(0);
		}

	}
}
 80026e8:	e002      	b.n	80026f0 <TIM7_IRQHandler+0x40>
			TM1637_SetBrightness(0);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f000 fa98 	bl	8002c20 <TM1637_SetBrightness>
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40001400 	.word	0x40001400
 80026f8:	20000344 	.word	0x20000344

080026fc <UpdateDisplay>:

void UpdateDisplay()
{
 80026fc:	b5b0      	push	{r4, r5, r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
	uint32_t displayData = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
	if(time<0 && time>= DISPLAY_BLINK_TIME*-2)
 8002706:	4b2a      	ldr	r3, [pc, #168]	; (80027b0 <UpdateDisplay+0xb4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	da13      	bge.n	8002736 <UpdateDisplay+0x3a>
 800270e:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <UpdateDisplay+0xb4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f113 0f06 	cmn.w	r3, #6
 8002716:	db0e      	blt.n	8002736 <UpdateDisplay+0x3a>
	{
		if(time%2!=0)
 8002718:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <UpdateDisplay+0xb4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <UpdateDisplay+0x2e>
		{
			dziala();
 8002724:	f000 fa34 	bl	8002b90 <dziala>
		}
		else
		{
			TM1637_DisplayDecimal(displayData,1);
		}
	  	return;
 8002728:	e03e      	b.n	80027a8 <UpdateDisplay+0xac>
			TM1637_DisplayDecimal(displayData,1);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2101      	movs	r1, #1
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f9c0 	bl	8002ab4 <TM1637_DisplayDecimal>
	  	return;
 8002734:	e038      	b.n	80027a8 <UpdateDisplay+0xac>
	}
	displayData = floor(time/60)*100+time%60;
 8002736:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <UpdateDisplay+0xb4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <UpdateDisplay+0xb8>)
 800273c:	fb82 1203 	smull	r1, r2, r2, r3
 8002740:	441a      	add	r2, r3
 8002742:	1152      	asrs	r2, r2, #5
 8002744:	17db      	asrs	r3, r3, #31
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	4618      	mov	r0, r3
 800274a:	f7fd fee3 	bl	8000514 <__aeabi_i2d>
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <UpdateDisplay+0xbc>)
 8002754:	f7fd ff48 	bl	80005e8 <__aeabi_dmul>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4614      	mov	r4, r2
 800275e:	461d      	mov	r5, r3
 8002760:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <UpdateDisplay+0xb4>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <UpdateDisplay+0xb8>)
 8002766:	fb83 1302 	smull	r1, r3, r3, r2
 800276a:	4413      	add	r3, r2
 800276c:	1159      	asrs	r1, r3, #5
 800276e:	17d3      	asrs	r3, r2, #31
 8002770:	1ac9      	subs	r1, r1, r3
 8002772:	460b      	mov	r3, r1
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	1a5b      	subs	r3, r3, r1
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	1ad1      	subs	r1, r2, r3
 800277c:	4608      	mov	r0, r1
 800277e:	f7fd fec9 	bl	8000514 <__aeabi_i2d>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4620      	mov	r0, r4
 8002788:	4629      	mov	r1, r5
 800278a:	f7fd fd77 	bl	800027c <__adddf3>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4610      	mov	r0, r2
 8002794:	4619      	mov	r1, r3
 8002796:	f7fe f9e9 	bl	8000b6c <__aeabi_d2uiz>
 800279a:	4603      	mov	r3, r0
 800279c:	607b      	str	r3, [r7, #4]
	TM1637_DisplayDecimal(displayData,1);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2101      	movs	r1, #1
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f986 	bl	8002ab4 <TM1637_DisplayDecimal>
}
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bdb0      	pop	{r4, r5, r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000344 	.word	0x20000344
 80027b4:	88888889 	.word	0x88888889
 80027b8:	40590000 	.word	0x40590000

080027bc <Buzz_Buzz>:

void Buzz_Buzz(int czas, int ile, int* Buzz, int* Buzz_Check)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	603b      	str	r3, [r7, #0]
	if((*Buzz == 0) && (*Buzz_Check == 1)){
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d110      	bne.n	80027f4 <Buzz_Buzz+0x38>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d10c      	bne.n	80027f4 <Buzz_Buzz+0x38>
		*Buzz = ile*2;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	005a      	lsls	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	601a      	str	r2, [r3, #0]
		LL_TIM_SetAutoReload(TIM6, czas/2 - 1);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	0fda      	lsrs	r2, r3, #31
 80027e6:	4413      	add	r3, r2
 80027e8:	105b      	asrs	r3, r3, #1
 80027ea:	3b01      	subs	r3, #1
 80027ec:	4619      	mov	r1, r3
 80027ee:	4816      	ldr	r0, [pc, #88]	; (8002848 <Buzz_Buzz+0x8c>)
 80027f0:	f7ff fa2d 	bl	8001c4e <LL_TIM_SetAutoReload>
	}
	if((*Buzz > 0) && (*Buzz_Check == 1) && (LL_TIM_IsActiveFlag_UPDATE(TIM6) == 1)){
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	dd21      	ble.n	8002840 <Buzz_Buzz+0x84>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d11d      	bne.n	8002840 <Buzz_Buzz+0x84>
 8002804:	4810      	ldr	r0, [pc, #64]	; (8002848 <Buzz_Buzz+0x8c>)
 8002806:	f7ff fb55 	bl	8001eb4 <LL_TIM_IsActiveFlag_UPDATE>
 800280a:	4603      	mov	r3, r0
 800280c:	2b01      	cmp	r3, #1
 800280e:	d117      	bne.n	8002840 <Buzz_Buzz+0x84>
			LL_TIM_GenerateEvent_UPDATE(TIM6);
 8002810:	480d      	ldr	r0, [pc, #52]	; (8002848 <Buzz_Buzz+0x8c>)
 8002812:	f7ff fb72 	bl	8001efa <LL_TIM_GenerateEvent_UPDATE>
			LL_TIM_ClearFlag_UPDATE(TIM6);
 8002816:	480c      	ldr	r0, [pc, #48]	; (8002848 <Buzz_Buzz+0x8c>)
 8002818:	f7ff fb3e 	bl	8001e98 <LL_TIM_ClearFlag_UPDATE>
			LL_GPIO_TogglePin(Buzz_Buzz_GPIO_Port, Buzz_Buzz_Pin);
 800281c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002824:	f7ff fbad 	bl	8001f82 <LL_GPIO_TogglePin>
			*Buzz = *Buzz - 1;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	1e5a      	subs	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	601a      	str	r2, [r3, #0]
			if(*Buzz == 0){
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d102      	bne.n	8002840 <Buzz_Buzz+0x84>
				*Buzz_Check = 0;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
			}
	}
}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40001000 	.word	0x40001000

0800284c <Buzz_Buzz_Up>:
void Buzz_Buzz_Up(int* Buzz_Check){
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	*Buzz_Check = 1;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	601a      	str	r2, [r3, #0]
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002866:	b480      	push	{r7}
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800286a:	e7fe      	b.n	800286a <NMI_Handler+0x4>

0800286c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002870:	e7fe      	b.n	8002870 <HardFault_Handler+0x4>

08002872 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002872:	b480      	push	{r7}
 8002874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002876:	e7fe      	b.n	8002876 <MemManage_Handler+0x4>

08002878 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800287c:	e7fe      	b.n	800287c <BusFault_Handler+0x4>

0800287e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002882:	e7fe      	b.n	8002882 <UsageFault_Handler+0x4>

08002884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	e00a      	b.n	80028e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028ce:	f3af 8000 	nop.w
 80028d2:	4601      	mov	r1, r0
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	60ba      	str	r2, [r7, #8]
 80028da:	b2ca      	uxtb	r2, r1
 80028dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3301      	adds	r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	dbf0      	blt.n	80028ce <_read+0x12>
  }

  return len;
 80028ec:	687b      	ldr	r3, [r7, #4]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800291e:	605a      	str	r2, [r3, #4]
  return 0;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <_isatty>:

int _isatty(int file)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002936:	2301      	movs	r3, #1
}
 8002938:	4618      	mov	r0, r3
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002968:	4a14      	ldr	r2, [pc, #80]	; (80029bc <_sbrk+0x5c>)
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <_sbrk+0x60>)
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <_sbrk+0x64>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <_sbrk+0x64>)
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <_sbrk+0x68>)
 8002980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <_sbrk+0x64>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	429a      	cmp	r2, r3
 800298e:	d207      	bcs.n	80029a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002990:	f001 fe9c 	bl	80046cc <__errno>
 8002994:	4603      	mov	r3, r0
 8002996:	220c      	movs	r2, #12
 8002998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	e009      	b.n	80029b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <_sbrk+0x64>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <_sbrk+0x64>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <_sbrk+0x64>)
 80029b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029b2:	68fb      	ldr	r3, [r7, #12]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20018000 	.word	0x20018000
 80029c0:	00000400 	.word	0x00000400
 80029c4:	20000348 	.word	0x20000348
 80029c8:	20000498 	.word	0x20000498

080029cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80029d0:	4b06      	ldr	r3, [pc, #24]	; (80029ec <SystemInit+0x20>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	4a05      	ldr	r2, [pc, #20]	; (80029ec <SystemInit+0x20>)
 80029d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <LL_AHB2_GRP1_EnableClock>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029f8:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80029fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029fc:	4907      	ldr	r1, [pc, #28]	; (8002a1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002a06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	40021000 	.word	0x40021000

08002a20 <LL_GPIO_SetOutputPin>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	619a      	str	r2, [r3, #24]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <LL_GPIO_ResetOutputPin>:
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <TM1637_ClkHigh>:
    0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, // 0-7
    0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, // 8-9, A-F
    0x00
};

void TM1637_ClkHigh(void){
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(CLK_GPIO_PORT, CLK_PIN);
 8002a5c:	2180      	movs	r1, #128	; 0x80
 8002a5e:	4802      	ldr	r0, [pc, #8]	; (8002a68 <TM1637_ClkHigh+0x10>)
 8002a60:	f7ff ffde 	bl	8002a20 <LL_GPIO_SetOutputPin>
}
 8002a64:	bf00      	nop
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	48000800 	.word	0x48000800

08002a6c <TM1637_ClkLow>:

void TM1637_ClkLow(void){
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(CLK_GPIO_PORT, CLK_PIN);
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	4802      	ldr	r0, [pc, #8]	; (8002a7c <TM1637_ClkLow+0x10>)
 8002a74:	f7ff ffe2 	bl	8002a3c <LL_GPIO_ResetOutputPin>
}
 8002a78:	bf00      	nop
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	48000800 	.word	0x48000800

08002a80 <TM1637_DataHigh>:

void TM1637_DataHigh(void){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(DATA_GPIO_PORT, DATA_PIN);
 8002a84:	2180      	movs	r1, #128	; 0x80
 8002a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a8a:	f7ff ffc9 	bl	8002a20 <LL_GPIO_SetOutputPin>
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <TM1637_DataLow>:

void TM1637_DataLow(void){
 8002a92:	b580      	push	{r7, lr}
 8002a94:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(DATA_GPIO_PORT, DATA_PIN);
 8002a96:	2180      	movs	r1, #128	; 0x80
 8002a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a9c:	f7ff ffce 	bl	8002a3c <LL_GPIO_ResetOutputPin>
}
 8002aa0:	bf00      	nop
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <TM1637_Init>:
	}
}


void TM1637_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
    TM1637_SetBrightness(8);
 8002aa8:	2008      	movs	r0, #8
 8002aaa:	f000 f8b9 	bl	8002c20 <TM1637_SetBrightness>
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <TM1637_DisplayDecimal>:

void TM1637_DisplayDecimal(int v, int displaySeparator)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e032      	b.n	8002b2a <TM1637_DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4b30      	ldr	r3, [pc, #192]	; (8002b88 <TM1637_DisplayDecimal+0xd4>)
 8002ac8:	fb83 2301 	smull	r2, r3, r3, r1
 8002acc:	109a      	asrs	r2, r3, #2
 8002ace:	17cb      	asrs	r3, r1, #31
 8002ad0:	1ad2      	subs	r2, r2, r3
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	1aca      	subs	r2, r1, r3
 8002adc:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <TM1637_DisplayDecimal+0xd8>)
 8002ade:	5c99      	ldrb	r1, [r3, r2]
 8002ae0:	f107 020c 	add.w	r2, r7, #12
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	460a      	mov	r2, r1
 8002aea:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d110      	bne.n	8002b14 <TM1637_DisplayDecimal+0x60>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00d      	beq.n	8002b14 <TM1637_DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 8002af8:	f107 020c 	add.w	r2, r7, #12
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	4413      	add	r3, r2
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b06:	b2d9      	uxtb	r1, r3
 8002b08:	f107 020c 	add.w	r2, r7, #12
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	4413      	add	r3, r2
 8002b10:	460a      	mov	r2, r1
 8002b12:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a1c      	ldr	r2, [pc, #112]	; (8002b88 <TM1637_DisplayDecimal+0xd4>)
 8002b18:	fb82 1203 	smull	r1, r2, r2, r3
 8002b1c:	1092      	asrs	r2, r2, #2
 8002b1e:	17db      	asrs	r3, r3, #31
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	3301      	adds	r3, #1
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	ddc9      	ble.n	8002ac4 <TM1637_DisplayDecimal+0x10>
    }

    TM1637_Start();
 8002b30:	f000 f88b 	bl	8002c4a <TM1637_Start>
    TM1637_WriteByte(0x40);
 8002b34:	2040      	movs	r0, #64	; 0x40
 8002b36:	f000 f8ba 	bl	8002cae <TM1637_WriteByte>
    TM1637_ReadResult();
 8002b3a:	f000 f8a8 	bl	8002c8e <TM1637_ReadResult>
    TM1637_Stop();
 8002b3e:	f000 f891 	bl	8002c64 <TM1637_Stop>

    TM1637_Start();
 8002b42:	f000 f882 	bl	8002c4a <TM1637_Start>
    TM1637_WriteByte(0xc0);
 8002b46:	20c0      	movs	r0, #192	; 0xc0
 8002b48:	f000 f8b1 	bl	8002cae <TM1637_WriteByte>
    TM1637_ReadResult();
 8002b4c:	f000 f89f 	bl	8002c8e <TM1637_ReadResult>

    for (int i = 0; i < 4; ++i) {
 8002b50:	2300      	movs	r3, #0
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	e00e      	b.n	8002b74 <TM1637_DisplayDecimal+0xc0>
        TM1637_WriteByte(digitArr[3 - i]);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f1c3 0303 	rsb	r3, r3, #3
 8002b5c:	3318      	adds	r3, #24
 8002b5e:	443b      	add	r3, r7
 8002b60:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 f8a2 	bl	8002cae <TM1637_WriteByte>
        TM1637_ReadResult();
 8002b6a:	f000 f890 	bl	8002c8e <TM1637_ReadResult>
    for (int i = 0; i < 4; ++i) {
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	3301      	adds	r3, #1
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	dded      	ble.n	8002b56 <TM1637_DisplayDecimal+0xa2>
    }

    TM1637_Stop();
 8002b7a:	f000 f873 	bl	8002c64 <TM1637_Stop>
}
 8002b7e:	bf00      	nop
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	66666667 	.word	0x66666667
 8002b8c:	08006440 	.word	0x08006440

08002b90 <dziala>:

void dziala()
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	e013      	b.n	8002bc4 <dziala+0x34>
        digitArr[i] = 0x00;
 8002b9c:	1d3a      	adds	r2, r7, #4
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
        digitArr[i] |= 1 << 7;
 8002ba6:	1d3a      	adds	r2, r7, #4
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bb2:	b2d9      	uxtb	r1, r3
 8002bb4:	1d3a      	adds	r2, r7, #4
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4413      	add	r3, r2
 8002bba:	460a      	mov	r2, r1
 8002bbc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; ++i) {
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	dde8      	ble.n	8002b9c <dziala+0xc>
    }

    TM1637_Start();
 8002bca:	f000 f83e 	bl	8002c4a <TM1637_Start>
    TM1637_WriteByte(0x40);
 8002bce:	2040      	movs	r0, #64	; 0x40
 8002bd0:	f000 f86d 	bl	8002cae <TM1637_WriteByte>
    TM1637_ReadResult();
 8002bd4:	f000 f85b 	bl	8002c8e <TM1637_ReadResult>
    TM1637_Stop();
 8002bd8:	f000 f844 	bl	8002c64 <TM1637_Stop>

    TM1637_Start();
 8002bdc:	f000 f835 	bl	8002c4a <TM1637_Start>
    TM1637_WriteByte(0xc0);
 8002be0:	20c0      	movs	r0, #192	; 0xc0
 8002be2:	f000 f864 	bl	8002cae <TM1637_WriteByte>
    TM1637_ReadResult();
 8002be6:	f000 f852 	bl	8002c8e <TM1637_ReadResult>

    for (int i = 0; i < 4; ++i) {
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	e00e      	b.n	8002c0e <dziala+0x7e>
        TM1637_WriteByte(digitArr[3 - i]);
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f1c3 0303 	rsb	r3, r3, #3
 8002bf6:	3310      	adds	r3, #16
 8002bf8:	443b      	add	r3, r7
 8002bfa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f855 	bl	8002cae <TM1637_WriteByte>
        TM1637_ReadResult();
 8002c04:	f000 f843 	bl	8002c8e <TM1637_ReadResult>
    for (int i = 0; i < 4; ++i) {
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	dded      	ble.n	8002bf0 <dziala+0x60>
    }

    TM1637_Stop();
 8002c14:	f000 f826 	bl	8002c64 <TM1637_Stop>
}
 8002c18:	bf00      	nop
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <TM1637_SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void TM1637_SetBrightness(char brightness)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    TM1637_Start();
 8002c2a:	f000 f80e 	bl	8002c4a <TM1637_Start>
    TM1637_WriteByte(0x87 + brightness);
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	3b79      	subs	r3, #121	; 0x79
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 f83a 	bl	8002cae <TM1637_WriteByte>
    TM1637_ReadResult();
 8002c3a:	f000 f828 	bl	8002c8e <TM1637_ReadResult>
    TM1637_Stop();
 8002c3e:	f000 f811 	bl	8002c64 <TM1637_Stop>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <TM1637_Start>:

void TM1637_Start(void)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	af00      	add	r7, sp, #0
    TM1637_ClkHigh();
 8002c4e:	f7ff ff03 	bl	8002a58 <TM1637_ClkHigh>
    TM1637_DataHigh();
 8002c52:	f7ff ff15 	bl	8002a80 <TM1637_DataHigh>
    TM1637_DelayUsec(2);
 8002c56:	2002      	movs	r0, #2
 8002c58:	f000 f853 	bl	8002d02 <TM1637_DelayUsec>
    TM1637_DataLow();
 8002c5c:	f7ff ff19 	bl	8002a92 <TM1637_DataLow>
}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <TM1637_Stop>:

void TM1637_Stop(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 8002c68:	f7ff ff00 	bl	8002a6c <TM1637_ClkLow>
    TM1637_DelayUsec(2);
 8002c6c:	2002      	movs	r0, #2
 8002c6e:	f000 f848 	bl	8002d02 <TM1637_DelayUsec>
    TM1637_DataLow();
 8002c72:	f7ff ff0e 	bl	8002a92 <TM1637_DataLow>
    TM1637_DelayUsec(2);
 8002c76:	2002      	movs	r0, #2
 8002c78:	f000 f843 	bl	8002d02 <TM1637_DelayUsec>
    TM1637_ClkHigh();
 8002c7c:	f7ff feec 	bl	8002a58 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 8002c80:	2002      	movs	r0, #2
 8002c82:	f000 f83e 	bl	8002d02 <TM1637_DelayUsec>
    TM1637_DataHigh();
 8002c86:	f7ff fefb 	bl	8002a80 <TM1637_DataHigh>
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <TM1637_ReadResult>:

void TM1637_ReadResult(void)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 8002c92:	f7ff feeb 	bl	8002a6c <TM1637_ClkLow>
    TM1637_DelayUsec(5);
 8002c96:	2005      	movs	r0, #5
 8002c98:	f000 f833 	bl	8002d02 <TM1637_DelayUsec>

    TM1637_ClkHigh();
 8002c9c:	f7ff fedc 	bl	8002a58 <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 8002ca0:	2002      	movs	r0, #2
 8002ca2:	f000 f82e 	bl	8002d02 <TM1637_DelayUsec>
    TM1637_ClkLow();
 8002ca6:	f7ff fee1 	bl	8002a6c <TM1637_ClkLow>
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}

08002cae <TM1637_WriteByte>:

void TM1637_WriteByte(unsigned char b)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; ++i) {
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e019      	b.n	8002cf2 <TM1637_WriteByte+0x44>
		TM1637_ClkLow();
 8002cbe:	f7ff fed5 	bl	8002a6c <TM1637_ClkLow>
		if (b & 0x01) {
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <TM1637_WriteByte+0x24>
			TM1637_DataHigh();
 8002ccc:	f7ff fed8 	bl	8002a80 <TM1637_DataHigh>
 8002cd0:	e001      	b.n	8002cd6 <TM1637_WriteByte+0x28>
		}
		else {
			TM1637_DataLow();
 8002cd2:	f7ff fede 	bl	8002a92 <TM1637_DataLow>
		}
		TM1637_DelayUsec(3);
 8002cd6:	2003      	movs	r0, #3
 8002cd8:	f000 f813 	bl	8002d02 <TM1637_DelayUsec>
		b >>= 1;
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	085b      	lsrs	r3, r3, #1
 8002ce0:	71fb      	strb	r3, [r7, #7]
		TM1637_ClkHigh();
 8002ce2:	f7ff feb9 	bl	8002a58 <TM1637_ClkHigh>
		TM1637_DelayUsec(3);
 8002ce6:	2003      	movs	r0, #3
 8002ce8:	f000 f80b 	bl	8002d02 <TM1637_DelayUsec>
	for (int i = 0; i < 8; ++i) {
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b07      	cmp	r3, #7
 8002cf6:	dde2      	ble.n	8002cbe <TM1637_WriteByte+0x10>
	}
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <TM1637_DelayUsec>:

void TM1637_DelayUsec(unsigned int i)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b085      	sub	sp, #20
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 8002d0a:	e00d      	b.n	8002d28 <TM1637_DelayUsec+0x26>
        for (int j = 0; j < 500; ++j) {
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	e003      	b.n	8002d1a <TM1637_DelayUsec+0x18>
					__NOP();
 8002d12:	bf00      	nop
        for (int j = 0; j < 500; ++j) {
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3301      	adds	r3, #1
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d20:	dbf7      	blt.n	8002d12 <TM1637_DelayUsec+0x10>
    for (; i>0; i--) {
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1ee      	bne.n	8002d0c <TM1637_DelayUsec+0xa>
        }
    }
}
 8002d2e:	bf00      	nop
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <TM1637_gpio_init>:

void TM1637_gpio_init(){
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d42:	463b      	mov	r3, r7
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
 8002d50:	615a      	str	r2, [r3, #20]
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002d52:	2001      	movs	r0, #1
 8002d54:	f7ff fe4c 	bl	80029f0 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002d58:	2004      	movs	r0, #4
 8002d5a:	f7ff fe49 	bl	80029f0 <LL_AHB2_GRP1_EnableClock>

	GPIO_InitStruct.Pin = DATA_PIN;
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d62:	2301      	movs	r3, #1
 8002d64:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002d66:	2302      	movs	r3, #2
 8002d68:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(DATA_GPIO_PORT, &GPIO_InitStruct);
 8002d72:	463b      	mov	r3, r7
 8002d74:	4619      	mov	r1, r3
 8002d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d7a:	f000 f989 	bl	8003090 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = CLK_PIN;
 8002d7e:	2380      	movs	r3, #128	; 0x80
 8002d80:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d82:	2301      	movs	r3, #1
 8002d84:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002d86:	2302      	movs	r3, #2
 8002d88:	60bb      	str	r3, [r7, #8]
 	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(CLK_GPIO_PORT, &GPIO_InitStruct);
 8002d92:	463b      	mov	r3, r7
 8002d94:	4619      	mov	r1, r3
 8002d96:	4803      	ldr	r0, [pc, #12]	; (8002da4 <TM1637_gpio_init+0x68>)
 8002d98:	f000 f97a 	bl	8003090 <LL_GPIO_Init>
}
 8002d9c:	bf00      	nop
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	48000800 	.word	0x48000800

08002da8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002de0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002dac:	f7ff fe0e 	bl	80029cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002db0:	480c      	ldr	r0, [pc, #48]	; (8002de4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002db2:	490d      	ldr	r1, [pc, #52]	; (8002de8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002db4:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <LoopForever+0xe>)
  movs r3, #0
 8002db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002db8:	e002      	b.n	8002dc0 <LoopCopyDataInit>

08002dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dbe:	3304      	adds	r3, #4

08002dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc4:	d3f9      	bcc.n	8002dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002dc8:	4c0a      	ldr	r4, [pc, #40]	; (8002df4 <LoopForever+0x16>)
  movs r3, #0
 8002dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dcc:	e001      	b.n	8002dd2 <LoopFillZerobss>

08002dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd0:	3204      	adds	r2, #4

08002dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd4:	d3fb      	bcc.n	8002dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dd6:	f001 fc7f 	bl	80046d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dda:	f7ff f8eb 	bl	8001fb4 <main>

08002dde <LoopForever>:

LoopForever:
    b LoopForever
 8002dde:	e7fe      	b.n	8002dde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002de0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002de8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002dec:	08006668 	.word	0x08006668
  ldr r2, =_sbss
 8002df0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002df4:	20000498 	.word	0x20000498

08002df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002df8:	e7fe      	b.n	8002df8 <ADC1_2_IRQHandler>

08002dfa <LL_GPIO_SetPinMode>:
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b08b      	sub	sp, #44	; 0x2c
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	613b      	str	r3, [r7, #16]
  return result;
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002e20:	2320      	movs	r3, #32
 8002e22:	e003      	b.n	8002e2c <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	2103      	movs	r1, #3
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	401a      	ands	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	61fb      	str	r3, [r7, #28]
  return result;
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002e4e:	2320      	movs	r3, #32
 8002e50:	e003      	b.n	8002e5a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e62:	431a      	orrs	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	601a      	str	r2, [r3, #0]
}
 8002e68:	bf00      	nop
 8002e6a:	372c      	adds	r7, #44	; 0x2c
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_GPIO_SetPinOutputType>:
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	401a      	ands	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	431a      	orrs	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	605a      	str	r2, [r3, #4]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_GPIO_SetPinSpeed>:
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b08b      	sub	sp, #44	; 0x2c
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	613b      	str	r3, [r7, #16]
  return result;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002eca:	2320      	movs	r3, #32
 8002ecc:	e003      	b.n	8002ed6 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	fab3 f383 	clz	r3, r3
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	2103      	movs	r1, #3
 8002eda:	fa01 f303 	lsl.w	r3, r1, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	401a      	ands	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	61fb      	str	r3, [r7, #28]
  return result;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002ef8:	2320      	movs	r3, #32
 8002efa:	e003      	b.n	8002f04 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	609a      	str	r2, [r3, #8]
}
 8002f12:	bf00      	nop
 8002f14:	372c      	adds	r7, #44	; 0x2c
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_GPIO_SetPinPull>:
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b08b      	sub	sp, #44	; 0x2c
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	613b      	str	r3, [r7, #16]
  return result;
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002f44:	2320      	movs	r3, #32
 8002f46:	e003      	b.n	8002f50 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	fab3 f383 	clz	r3, r3
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	2103      	movs	r1, #3
 8002f54:	fa01 f303 	lsl.w	r3, r1, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	61fb      	str	r3, [r7, #28]
  return result;
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002f72:	2320      	movs	r3, #32
 8002f74:	e003      	b.n	8002f7e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	fab3 f383 	clz	r3, r3
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	fa01 f303 	lsl.w	r3, r1, r3
 8002f86:	431a      	orrs	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	60da      	str	r2, [r3, #12]
}
 8002f8c:	bf00      	nop
 8002f8e:	372c      	adds	r7, #44	; 0x2c
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <LL_GPIO_SetAFPin_0_7>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b08b      	sub	sp, #44	; 0x2c
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a1a      	ldr	r2, [r3, #32]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	613b      	str	r3, [r7, #16]
  return result;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002fbe:	2320      	movs	r3, #32
 8002fc0:	e003      	b.n	8002fca <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	fab3 f383 	clz	r3, r3
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	210f      	movs	r1, #15
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	401a      	ands	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	fa93 f3a3 	rbit	r3, r3
 8002fe0:	61fb      	str	r3, [r7, #28]
  return result;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002fec:	2320      	movs	r3, #32
 8002fee:	e003      	b.n	8002ff8 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8003000:	431a      	orrs	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	621a      	str	r2, [r3, #32]
}
 8003006:	bf00      	nop
 8003008:	372c      	adds	r7, #44	; 0x2c
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <LL_GPIO_SetAFPin_8_15>:
{
 8003012:	b480      	push	{r7}
 8003014:	b08b      	sub	sp, #44	; 0x2c
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	0a1b      	lsrs	r3, r3, #8
 8003026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	613b      	str	r3, [r7, #16]
  return result;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800303a:	2320      	movs	r3, #32
 800303c:	e003      	b.n	8003046 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	fab3 f383 	clz	r3, r3
 8003044:	b2db      	uxtb	r3, r3
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	210f      	movs	r1, #15
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	401a      	ands	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	0a1b      	lsrs	r3, r3, #8
 8003056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	61fb      	str	r3, [r7, #28]
  return result;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800306a:	2320      	movs	r3, #32
 800306c:	e003      	b.n	8003076 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	fa01 f303 	lsl.w	r3, r1, r3
 800307e:	431a      	orrs	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003084:	bf00      	nop
 8003086:	372c      	adds	r7, #44	; 0x2c
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	fa93 f3a3 	rbit	r3, r3
 80030a6:	60fb      	str	r3, [r7, #12]
  return result;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <LL_GPIO_Init+0x26>
    return 32U;
 80030b2:	2320      	movs	r3, #32
 80030b4:	e003      	b.n	80030be <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80030c0:	e048      	b.n	8003154 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	2101      	movs	r1, #1
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d03a      	beq.n	800314e <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d003      	beq.n	80030e8 <LL_GPIO_Init+0x58>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d10e      	bne.n	8003106 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	461a      	mov	r2, r3
 80030ee:	69b9      	ldr	r1, [r7, #24]
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff fed7 	bl	8002ea4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	6819      	ldr	r1, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	461a      	mov	r2, r3
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff feb7 	bl	8002e74 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	461a      	mov	r2, r3
 800310c:	69b9      	ldr	r1, [r7, #24]
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff ff05 	bl	8002f1e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d111      	bne.n	8003140 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2bff      	cmp	r3, #255	; 0xff
 8003120:	d807      	bhi.n	8003132 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	461a      	mov	r2, r3
 8003128:	69b9      	ldr	r1, [r7, #24]
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff ff34 	bl	8002f98 <LL_GPIO_SetAFPin_0_7>
 8003130:	e006      	b.n	8003140 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	461a      	mov	r2, r3
 8003138:	69b9      	ldr	r1, [r7, #24]
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff ff69 	bl	8003012 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	461a      	mov	r2, r3
 8003146:	69b9      	ldr	r1, [r7, #24]
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff fe56 	bl	8002dfa <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3301      	adds	r3, #1
 8003152:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	fa22 f303 	lsr.w	r3, r2, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1af      	bne.n	80030c2 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3720      	adds	r7, #32
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <LL_RCC_HSI_IsReady>:
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8003170:	4b07      	ldr	r3, [pc, #28]	; (8003190 <LL_RCC_HSI_IsReady+0x24>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317c:	d101      	bne.n	8003182 <LL_RCC_HSI_IsReady+0x16>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <LL_RCC_HSI_IsReady+0x18>
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000

08003194 <LL_RCC_LSE_IsReady>:
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8003198:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <LL_RCC_LSE_IsReady+0x24>)
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d101      	bne.n	80031aa <LL_RCC_LSE_IsReady+0x16>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <LL_RCC_LSE_IsReady+0x18>
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000

080031bc <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d101      	bne.n	80031d0 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	40021000 	.word	0x40021000

080031e0 <LL_RCC_MSI_GetRange>:
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <LL_RCC_MSI_GetRange+0x18>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000

080031fc <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003200:	4b04      	ldr	r3, [pc, #16]	; (8003214 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8003202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003206:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800320a:	4618      	mov	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	40021000 	.word	0x40021000

08003218 <LL_RCC_GetSysClkSource>:
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <LL_RCC_GetSysClkSource+0x18>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 030c 	and.w	r3, r3, #12
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000

08003234 <LL_RCC_GetAHBPrescaler>:
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003238:	4b04      	ldr	r3, [pc, #16]	; (800324c <LL_RCC_GetAHBPrescaler+0x18>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003240:	4618      	mov	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000

08003250 <LL_RCC_GetAPB1Prescaler>:
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000

0800326c <LL_RCC_GetAPB2Prescaler>:
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40021000 	.word	0x40021000

08003288 <LL_RCC_GetUSARTClockSource>:
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <LL_RCC_GetUSARTClockSource+0x24>)
 8003292:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	401a      	ands	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	4313      	orrs	r3, r2
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	40021000 	.word	0x40021000

080032b0 <LL_RCC_GetUARTClockSource>:
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <LL_RCC_GetUARTClockSource+0x24>)
 80032ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	401a      	ands	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	041b      	lsls	r3, r3, #16
 80032c6:	4313      	orrs	r3, r2
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	40021000 	.word	0x40021000

080032d8 <LL_RCC_PLL_GetMainSource>:
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <LL_RCC_PLL_GetMainSource+0x18>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0303 	and.w	r3, r3, #3
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000

080032f4 <LL_RCC_PLL_GetN>:
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80032f8:	4b04      	ldr	r3, [pc, #16]	; (800330c <LL_RCC_PLL_GetN+0x18>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003302:	4618      	mov	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	40021000 	.word	0x40021000

08003310 <LL_RCC_PLL_GetR>:
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <LL_RCC_PLL_GetR+0x18>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000

0800332c <LL_RCC_PLL_GetDivider>:
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <LL_RCC_PLL_GetDivider+0x18>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000

08003348 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b03      	cmp	r3, #3
 8003358:	d137      	bne.n	80033ca <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7ff ff94 	bl	8003288 <LL_RCC_GetUSARTClockSource>
 8003360:	4603      	mov	r3, r0
 8003362:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003366:	2b03      	cmp	r3, #3
 8003368:	f200 80b3 	bhi.w	80034d2 <LL_RCC_GetUSARTClockFreq+0x18a>
 800336c:	a201      	add	r2, pc, #4	; (adr r2, 8003374 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800336e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003372:	bf00      	nop
 8003374:	080033b3 	.word	0x080033b3
 8003378:	08003385 	.word	0x08003385
 800337c:	0800338d 	.word	0x0800338d
 8003380:	0800339f 	.word	0x0800339f
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003384:	f000 f956 	bl	8003634 <RCC_GetSystemClockFreq>
 8003388:	60f8      	str	r0, [r7, #12]
        break;
 800338a:	e0b3      	b.n	80034f4 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800338c:	f7ff feee 	bl	800316c <LL_RCC_HSI_IsReady>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 809f 	beq.w	80034d6 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8003398:	4b59      	ldr	r3, [pc, #356]	; (8003500 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800339a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800339c:	e09b      	b.n	80034d6 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800339e:	f7ff fef9 	bl	8003194 <LL_RCC_LSE_IsReady>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8098 	beq.w	80034da <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 80033aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ae:	60fb      	str	r3, [r7, #12]
        }
        break;
 80033b0:	e093      	b.n	80034da <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80033b2:	f000 f93f 	bl	8003634 <RCC_GetSystemClockFreq>
 80033b6:	4603      	mov	r3, r0
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 f9cb 	bl	8003754 <RCC_GetHCLKClockFreq>
 80033be:	4603      	mov	r3, r0
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 f9f1 	bl	80037a8 <RCC_GetPCLK2ClockFreq>
 80033c6:	60f8      	str	r0, [r7, #12]
        break;
 80033c8:	e094      	b.n	80034f4 <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b0c      	cmp	r3, #12
 80033ce:	d146      	bne.n	800345e <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff ff59 	bl	8003288 <LL_RCC_GetUSARTClockSource>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80033dc:	2b0c      	cmp	r3, #12
 80033de:	d87e      	bhi.n	80034de <LL_RCC_GetUSARTClockFreq+0x196>
 80033e0:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	08003447 	.word	0x08003447
 80033ec:	080034df 	.word	0x080034df
 80033f0:	080034df 	.word	0x080034df
 80033f4:	080034df 	.word	0x080034df
 80033f8:	0800341d 	.word	0x0800341d
 80033fc:	080034df 	.word	0x080034df
 8003400:	080034df 	.word	0x080034df
 8003404:	080034df 	.word	0x080034df
 8003408:	08003425 	.word	0x08003425
 800340c:	080034df 	.word	0x080034df
 8003410:	080034df 	.word	0x080034df
 8003414:	080034df 	.word	0x080034df
 8003418:	08003435 	.word	0x08003435
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800341c:	f000 f90a 	bl	8003634 <RCC_GetSystemClockFreq>
 8003420:	60f8      	str	r0, [r7, #12]
        break;
 8003422:	e067      	b.n	80034f4 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003424:	f7ff fea2 	bl	800316c <LL_RCC_HSI_IsReady>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d059      	beq.n	80034e2 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 800342e:	4b34      	ldr	r3, [pc, #208]	; (8003500 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8003430:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003432:	e056      	b.n	80034e2 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003434:	f7ff feae 	bl	8003194 <LL_RCC_LSE_IsReady>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d053      	beq.n	80034e6 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 800343e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003442:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003444:	e04f      	b.n	80034e6 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003446:	f000 f8f5 	bl	8003634 <RCC_GetSystemClockFreq>
 800344a:	4603      	mov	r3, r0
 800344c:	4618      	mov	r0, r3
 800344e:	f000 f981 	bl	8003754 <RCC_GetHCLKClockFreq>
 8003452:	4603      	mov	r3, r0
 8003454:	4618      	mov	r0, r3
 8003456:	f000 f993 	bl	8003780 <RCC_GetPCLK1ClockFreq>
 800345a:	60f8      	str	r0, [r7, #12]
        break;
 800345c:	e04a      	b.n	80034f4 <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b30      	cmp	r3, #48	; 0x30
 8003462:	d147      	bne.n	80034f4 <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff ff0f 	bl	8003288 <LL_RCC_GetUSARTClockSource>
 800346a:	4603      	mov	r3, r0
 800346c:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8003470:	d01a      	beq.n	80034a8 <LL_RCC_GetUSARTClockFreq+0x160>
 8003472:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8003476:	d838      	bhi.n	80034ea <LL_RCC_GetUSARTClockFreq+0x1a2>
 8003478:	4a22      	ldr	r2, [pc, #136]	; (8003504 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00c      	beq.n	8003498 <LL_RCC_GetUSARTClockFreq+0x150>
 800347e:	4a21      	ldr	r2, [pc, #132]	; (8003504 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d832      	bhi.n	80034ea <LL_RCC_GetUSARTClockFreq+0x1a2>
 8003484:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003488:	d017      	beq.n	80034ba <LL_RCC_GetUSARTClockFreq+0x172>
 800348a:	4a1f      	ldr	r2, [pc, #124]	; (8003508 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d12c      	bne.n	80034ea <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8003490:	f000 f8d0 	bl	8003634 <RCC_GetSystemClockFreq>
 8003494:	60f8      	str	r0, [r7, #12]
          break;
 8003496:	e02d      	b.n	80034f4 <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8003498:	f7ff fe68 	bl	800316c <LL_RCC_HSI_IsReady>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d025      	beq.n	80034ee <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 80034a2:	4b17      	ldr	r3, [pc, #92]	; (8003500 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80034a4:	60fb      	str	r3, [r7, #12]
          }
          break;
 80034a6:	e022      	b.n	80034ee <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 80034a8:	f7ff fe74 	bl	8003194 <LL_RCC_LSE_IsReady>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d01f      	beq.n	80034f2 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 80034b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034b6:	60fb      	str	r3, [r7, #12]
          }
          break;
 80034b8:	e01b      	b.n	80034f2 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80034ba:	f000 f8bb 	bl	8003634 <RCC_GetSystemClockFreq>
 80034be:	4603      	mov	r3, r0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f947 	bl	8003754 <RCC_GetHCLKClockFreq>
 80034c6:	4603      	mov	r3, r0
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 f959 	bl	8003780 <RCC_GetPCLK1ClockFreq>
 80034ce:	60f8      	str	r0, [r7, #12]
          break;
 80034d0:	e010      	b.n	80034f4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80034d2:	bf00      	nop
 80034d4:	e00e      	b.n	80034f4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80034d6:	bf00      	nop
 80034d8:	e00c      	b.n	80034f4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80034da:	bf00      	nop
 80034dc:	e00a      	b.n	80034f4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80034de:	bf00      	nop
 80034e0:	e008      	b.n	80034f4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80034e2:	bf00      	nop
 80034e4:	e006      	b.n	80034f4 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80034e6:	bf00      	nop
 80034e8:	e004      	b.n	80034f4 <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 80034ea:	bf00      	nop
 80034ec:	e002      	b.n	80034f4 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 80034ee:	bf00      	nop
 80034f0:	e000      	b.n	80034f4 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 80034f2:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80034f4:	68fb      	ldr	r3, [r7, #12]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	00f42400 	.word	0x00f42400
 8003504:	00300020 	.word	0x00300020
 8003508:	00300010 	.word	0x00300010

0800350c <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2bc0      	cmp	r3, #192	; 0xc0
 800351c:	d13b      	bne.n	8003596 <LL_RCC_GetUARTClockFreq+0x8a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff fec6 	bl	80032b0 <LL_RCC_GetUARTClockSource>
 8003524:	4603      	mov	r3, r0
 8003526:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800352a:	d01a      	beq.n	8003562 <LL_RCC_GetUARTClockFreq+0x56>
 800352c:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8003530:	d82c      	bhi.n	800358c <LL_RCC_GetUARTClockFreq+0x80>
 8003532:	4a3b      	ldr	r2, [pc, #236]	; (8003620 <LL_RCC_GetUARTClockFreq+0x114>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00c      	beq.n	8003552 <LL_RCC_GetUARTClockFreq+0x46>
 8003538:	4a39      	ldr	r2, [pc, #228]	; (8003620 <LL_RCC_GetUARTClockFreq+0x114>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d826      	bhi.n	800358c <LL_RCC_GetUARTClockFreq+0x80>
 800353e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003542:	d017      	beq.n	8003574 <LL_RCC_GetUARTClockFreq+0x68>
 8003544:	4a37      	ldr	r2, [pc, #220]	; (8003624 <LL_RCC_GetUARTClockFreq+0x118>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d120      	bne.n	800358c <LL_RCC_GetUARTClockFreq+0x80>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800354a:	f000 f873 	bl	8003634 <RCC_GetSystemClockFreq>
 800354e:	60f8      	str	r0, [r7, #12]
        break;
 8003550:	e021      	b.n	8003596 <LL_RCC_GetUARTClockFreq+0x8a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003552:	f7ff fe0b 	bl	800316c <LL_RCC_HSI_IsReady>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d019      	beq.n	8003590 <LL_RCC_GetUARTClockFreq+0x84>
        {
          uart_frequency = HSI_VALUE;
 800355c:	4b32      	ldr	r3, [pc, #200]	; (8003628 <LL_RCC_GetUARTClockFreq+0x11c>)
 800355e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003560:	e016      	b.n	8003590 <LL_RCC_GetUARTClockFreq+0x84>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003562:	f7ff fe17 	bl	8003194 <LL_RCC_LSE_IsReady>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d013      	beq.n	8003594 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = LSE_VALUE;
 800356c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003570:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003572:	e00f      	b.n	8003594 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003574:	f000 f85e 	bl	8003634 <RCC_GetSystemClockFreq>
 8003578:	4603      	mov	r3, r0
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f8ea 	bl	8003754 <RCC_GetHCLKClockFreq>
 8003580:	4603      	mov	r3, r0
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f8fc 	bl	8003780 <RCC_GetPCLK1ClockFreq>
 8003588:	60f8      	str	r0, [r7, #12]
        break;
 800358a:	e004      	b.n	8003596 <LL_RCC_GetUARTClockFreq+0x8a>

      default:
        break;
 800358c:	bf00      	nop
 800358e:	e002      	b.n	8003596 <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8003590:	bf00      	nop
 8003592:	e000      	b.n	8003596 <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8003594:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800359c:	d13b      	bne.n	8003616 <LL_RCC_GetUARTClockFreq+0x10a>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff fe86 	bl	80032b0 <LL_RCC_GetUARTClockSource>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80035aa:	d01a      	beq.n	80035e2 <LL_RCC_GetUARTClockFreq+0xd6>
 80035ac:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80035b0:	d82c      	bhi.n	800360c <LL_RCC_GetUARTClockFreq+0x100>
 80035b2:	4a1e      	ldr	r2, [pc, #120]	; (800362c <LL_RCC_GetUARTClockFreq+0x120>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00c      	beq.n	80035d2 <LL_RCC_GetUARTClockFreq+0xc6>
 80035b8:	4a1c      	ldr	r2, [pc, #112]	; (800362c <LL_RCC_GetUARTClockFreq+0x120>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d826      	bhi.n	800360c <LL_RCC_GetUARTClockFreq+0x100>
 80035be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035c2:	d017      	beq.n	80035f4 <LL_RCC_GetUARTClockFreq+0xe8>
 80035c4:	4a1a      	ldr	r2, [pc, #104]	; (8003630 <LL_RCC_GetUARTClockFreq+0x124>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d120      	bne.n	800360c <LL_RCC_GetUARTClockFreq+0x100>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80035ca:	f000 f833 	bl	8003634 <RCC_GetSystemClockFreq>
 80035ce:	60f8      	str	r0, [r7, #12]
        break;
 80035d0:	e021      	b.n	8003616 <LL_RCC_GetUARTClockFreq+0x10a>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80035d2:	f7ff fdcb 	bl	800316c <LL_RCC_HSI_IsReady>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d019      	beq.n	8003610 <LL_RCC_GetUARTClockFreq+0x104>
        {
          uart_frequency = HSI_VALUE;
 80035dc:	4b12      	ldr	r3, [pc, #72]	; (8003628 <LL_RCC_GetUARTClockFreq+0x11c>)
 80035de:	60fb      	str	r3, [r7, #12]
        }
        break;
 80035e0:	e016      	b.n	8003610 <LL_RCC_GetUARTClockFreq+0x104>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80035e2:	f7ff fdd7 	bl	8003194 <LL_RCC_LSE_IsReady>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d013      	beq.n	8003614 <LL_RCC_GetUARTClockFreq+0x108>
        {
          uart_frequency = LSE_VALUE;
 80035ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035f0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80035f2:	e00f      	b.n	8003614 <LL_RCC_GetUARTClockFreq+0x108>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80035f4:	f000 f81e 	bl	8003634 <RCC_GetSystemClockFreq>
 80035f8:	4603      	mov	r3, r0
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 f8aa 	bl	8003754 <RCC_GetHCLKClockFreq>
 8003600:	4603      	mov	r3, r0
 8003602:	4618      	mov	r0, r3
 8003604:	f000 f8bc 	bl	8003780 <RCC_GetPCLK1ClockFreq>
 8003608:	60f8      	str	r0, [r7, #12]
        break;
 800360a:	e004      	b.n	8003616 <LL_RCC_GetUARTClockFreq+0x10a>

      default:
        break;
 800360c:	bf00      	nop
 800360e:	e002      	b.n	8003616 <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8003610:	bf00      	nop
 8003612:	e000      	b.n	8003616 <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8003614:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8003616:	68fb      	ldr	r3, [r7, #12]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	00c00080 	.word	0x00c00080
 8003624:	00c00040 	.word	0x00c00040
 8003628:	00f42400 	.word	0x00f42400
 800362c:	03000200 	.word	0x03000200
 8003630:	03000100 	.word	0x03000100

08003634 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800363a:	f7ff fded 	bl	8003218 <LL_RCC_GetSysClkSource>
 800363e:	4603      	mov	r3, r0
 8003640:	2b0c      	cmp	r3, #12
 8003642:	d851      	bhi.n	80036e8 <RCC_GetSystemClockFreq+0xb4>
 8003644:	a201      	add	r2, pc, #4	; (adr r2, 800364c <RCC_GetSystemClockFreq+0x18>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	08003681 	.word	0x08003681
 8003650:	080036e9 	.word	0x080036e9
 8003654:	080036e9 	.word	0x080036e9
 8003658:	080036e9 	.word	0x080036e9
 800365c:	080036d5 	.word	0x080036d5
 8003660:	080036e9 	.word	0x080036e9
 8003664:	080036e9 	.word	0x080036e9
 8003668:	080036e9 	.word	0x080036e9
 800366c:	080036db 	.word	0x080036db
 8003670:	080036e9 	.word	0x080036e9
 8003674:	080036e9 	.word	0x080036e9
 8003678:	080036e9 	.word	0x080036e9
 800367c:	080036e1 	.word	0x080036e1
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003680:	f7ff fd9c 	bl	80031bc <LL_RCC_MSI_IsEnabledRangeSelect>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d111      	bne.n	80036ae <RCC_GetSystemClockFreq+0x7a>
 800368a:	f7ff fd97 	bl	80031bc <LL_RCC_MSI_IsEnabledRangeSelect>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d004      	beq.n	800369e <RCC_GetSystemClockFreq+0x6a>
 8003694:	f7ff fda4 	bl	80031e0 <LL_RCC_MSI_GetRange>
 8003698:	4603      	mov	r3, r0
 800369a:	0a1b      	lsrs	r3, r3, #8
 800369c:	e003      	b.n	80036a6 <RCC_GetSystemClockFreq+0x72>
 800369e:	f7ff fdad 	bl	80031fc <LL_RCC_MSI_GetRangeAfterStandby>
 80036a2:	4603      	mov	r3, r0
 80036a4:	0a1b      	lsrs	r3, r3, #8
 80036a6:	4a28      	ldr	r2, [pc, #160]	; (8003748 <RCC_GetSystemClockFreq+0x114>)
 80036a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ac:	e010      	b.n	80036d0 <RCC_GetSystemClockFreq+0x9c>
 80036ae:	f7ff fd85 	bl	80031bc <LL_RCC_MSI_IsEnabledRangeSelect>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d004      	beq.n	80036c2 <RCC_GetSystemClockFreq+0x8e>
 80036b8:	f7ff fd92 	bl	80031e0 <LL_RCC_MSI_GetRange>
 80036bc:	4603      	mov	r3, r0
 80036be:	091b      	lsrs	r3, r3, #4
 80036c0:	e003      	b.n	80036ca <RCC_GetSystemClockFreq+0x96>
 80036c2:	f7ff fd9b 	bl	80031fc <LL_RCC_MSI_GetRangeAfterStandby>
 80036c6:	4603      	mov	r3, r0
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <RCC_GetSystemClockFreq+0x114>)
 80036cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d0:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80036d2:	e033      	b.n	800373c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80036d4:	4b1d      	ldr	r3, [pc, #116]	; (800374c <RCC_GetSystemClockFreq+0x118>)
 80036d6:	607b      	str	r3, [r7, #4]
      break;
 80036d8:	e030      	b.n	800373c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80036da:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <RCC_GetSystemClockFreq+0x11c>)
 80036dc:	607b      	str	r3, [r7, #4]
      break;
 80036de:	e02d      	b.n	800373c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80036e0:	f000 f876 	bl	80037d0 <RCC_PLL_GetFreqDomain_SYS>
 80036e4:	6078      	str	r0, [r7, #4]
      break;
 80036e6:	e029      	b.n	800373c <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80036e8:	f7ff fd68 	bl	80031bc <LL_RCC_MSI_IsEnabledRangeSelect>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d111      	bne.n	8003716 <RCC_GetSystemClockFreq+0xe2>
 80036f2:	f7ff fd63 	bl	80031bc <LL_RCC_MSI_IsEnabledRangeSelect>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d004      	beq.n	8003706 <RCC_GetSystemClockFreq+0xd2>
 80036fc:	f7ff fd70 	bl	80031e0 <LL_RCC_MSI_GetRange>
 8003700:	4603      	mov	r3, r0
 8003702:	0a1b      	lsrs	r3, r3, #8
 8003704:	e003      	b.n	800370e <RCC_GetSystemClockFreq+0xda>
 8003706:	f7ff fd79 	bl	80031fc <LL_RCC_MSI_GetRangeAfterStandby>
 800370a:	4603      	mov	r3, r0
 800370c:	0a1b      	lsrs	r3, r3, #8
 800370e:	4a0e      	ldr	r2, [pc, #56]	; (8003748 <RCC_GetSystemClockFreq+0x114>)
 8003710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003714:	e010      	b.n	8003738 <RCC_GetSystemClockFreq+0x104>
 8003716:	f7ff fd51 	bl	80031bc <LL_RCC_MSI_IsEnabledRangeSelect>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d004      	beq.n	800372a <RCC_GetSystemClockFreq+0xf6>
 8003720:	f7ff fd5e 	bl	80031e0 <LL_RCC_MSI_GetRange>
 8003724:	4603      	mov	r3, r0
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	e003      	b.n	8003732 <RCC_GetSystemClockFreq+0xfe>
 800372a:	f7ff fd67 	bl	80031fc <LL_RCC_MSI_GetRangeAfterStandby>
 800372e:	4603      	mov	r3, r0
 8003730:	091b      	lsrs	r3, r3, #4
 8003732:	4a05      	ldr	r2, [pc, #20]	; (8003748 <RCC_GetSystemClockFreq+0x114>)
 8003734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003738:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800373a:	bf00      	nop
  }

  return frequency;
 800373c:	687b      	ldr	r3, [r7, #4]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	08006410 	.word	0x08006410
 800374c:	00f42400 	.word	0x00f42400
 8003750:	007a1200 	.word	0x007a1200

08003754 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800375c:	f7ff fd6a 	bl	8003234 <LL_RCC_GetAHBPrescaler>
 8003760:	4603      	mov	r3, r0
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	4a04      	ldr	r2, [pc, #16]	; (800377c <RCC_GetHCLKClockFreq+0x28>)
 800376a:	5cd3      	ldrb	r3, [r2, r3]
 800376c:	461a      	mov	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	40d3      	lsrs	r3, r2
}
 8003772:	4618      	mov	r0, r3
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	080063f8 	.word	0x080063f8

08003780 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003788:	f7ff fd62 	bl	8003250 <LL_RCC_GetAPB1Prescaler>
 800378c:	4603      	mov	r3, r0
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <RCC_GetPCLK1ClockFreq+0x24>)
 8003792:	5cd3      	ldrb	r3, [r2, r3]
 8003794:	461a      	mov	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	40d3      	lsrs	r3, r2
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	08006408 	.word	0x08006408

080037a8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80037b0:	f7ff fd5c 	bl	800326c <LL_RCC_GetAPB2Prescaler>
 80037b4:	4603      	mov	r3, r0
 80037b6:	0adb      	lsrs	r3, r3, #11
 80037b8:	4a04      	ldr	r2, [pc, #16]	; (80037cc <RCC_GetPCLK2ClockFreq+0x24>)
 80037ba:	5cd3      	ldrb	r3, [r2, r3]
 80037bc:	461a      	mov	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	40d3      	lsrs	r3, r2
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	08006408 	.word	0x08006408

080037d0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80037d6:	f7ff fd7f 	bl	80032d8 <LL_RCC_PLL_GetMainSource>
 80037da:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d036      	beq.n	8003850 <RCC_PLL_GetFreqDomain_SYS+0x80>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d836      	bhi.n	8003856 <RCC_PLL_GetFreqDomain_SYS+0x86>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d003      	beq.n	80037f6 <RCC_PLL_GetFreqDomain_SYS+0x26>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d02a      	beq.n	800384a <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80037f4:	e02f      	b.n	8003856 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80037f6:	f7ff fce1 	bl	80031bc <LL_RCC_MSI_IsEnabledRangeSelect>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d111      	bne.n	8003824 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8003800:	f7ff fcdc 	bl	80031bc <LL_RCC_MSI_IsEnabledRangeSelect>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d004      	beq.n	8003814 <RCC_PLL_GetFreqDomain_SYS+0x44>
 800380a:	f7ff fce9 	bl	80031e0 <LL_RCC_MSI_GetRange>
 800380e:	4603      	mov	r3, r0
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	e003      	b.n	800381c <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8003814:	f7ff fcf2 	bl	80031fc <LL_RCC_MSI_GetRangeAfterStandby>
 8003818:	4603      	mov	r3, r0
 800381a:	0a1b      	lsrs	r3, r3, #8
 800381c:	4a2f      	ldr	r2, [pc, #188]	; (80038dc <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800381e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003822:	e010      	b.n	8003846 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8003824:	f7ff fcca 	bl	80031bc <LL_RCC_MSI_IsEnabledRangeSelect>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d004      	beq.n	8003838 <RCC_PLL_GetFreqDomain_SYS+0x68>
 800382e:	f7ff fcd7 	bl	80031e0 <LL_RCC_MSI_GetRange>
 8003832:	4603      	mov	r3, r0
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	e003      	b.n	8003840 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8003838:	f7ff fce0 	bl	80031fc <LL_RCC_MSI_GetRangeAfterStandby>
 800383c:	4603      	mov	r3, r0
 800383e:	091b      	lsrs	r3, r3, #4
 8003840:	4a26      	ldr	r2, [pc, #152]	; (80038dc <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8003842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003846:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003848:	e02f      	b.n	80038aa <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800384a:	4b25      	ldr	r3, [pc, #148]	; (80038e0 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 800384c:	607b      	str	r3, [r7, #4]
      break;
 800384e:	e02c      	b.n	80038aa <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003850:	4b24      	ldr	r3, [pc, #144]	; (80038e4 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8003852:	607b      	str	r3, [r7, #4]
      break;
 8003854:	e029      	b.n	80038aa <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003856:	f7ff fcb1 	bl	80031bc <LL_RCC_MSI_IsEnabledRangeSelect>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d111      	bne.n	8003884 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8003860:	f7ff fcac 	bl	80031bc <LL_RCC_MSI_IsEnabledRangeSelect>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d004      	beq.n	8003874 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 800386a:	f7ff fcb9 	bl	80031e0 <LL_RCC_MSI_GetRange>
 800386e:	4603      	mov	r3, r0
 8003870:	0a1b      	lsrs	r3, r3, #8
 8003872:	e003      	b.n	800387c <RCC_PLL_GetFreqDomain_SYS+0xac>
 8003874:	f7ff fcc2 	bl	80031fc <LL_RCC_MSI_GetRangeAfterStandby>
 8003878:	4603      	mov	r3, r0
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	4a17      	ldr	r2, [pc, #92]	; (80038dc <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800387e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003882:	e010      	b.n	80038a6 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8003884:	f7ff fc9a 	bl	80031bc <LL_RCC_MSI_IsEnabledRangeSelect>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d004      	beq.n	8003898 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 800388e:	f7ff fca7 	bl	80031e0 <LL_RCC_MSI_GetRange>
 8003892:	4603      	mov	r3, r0
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	e003      	b.n	80038a0 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8003898:	f7ff fcb0 	bl	80031fc <LL_RCC_MSI_GetRangeAfterStandby>
 800389c:	4603      	mov	r3, r0
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	4a0e      	ldr	r2, [pc, #56]	; (80038dc <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80038a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a6:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80038a8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80038aa:	f7ff fd3f 	bl	800332c <LL_RCC_PLL_GetDivider>
 80038ae:	4603      	mov	r3, r0
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	3301      	adds	r3, #1
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	fbb2 f4f3 	udiv	r4, r2, r3
 80038ba:	f7ff fd1b 	bl	80032f4 <LL_RCC_PLL_GetN>
 80038be:	4603      	mov	r3, r0
 80038c0:	fb03 f404 	mul.w	r4, r3, r4
 80038c4:	f7ff fd24 	bl	8003310 <LL_RCC_PLL_GetR>
 80038c8:	4603      	mov	r3, r0
 80038ca:	0e5b      	lsrs	r3, r3, #25
 80038cc:	3301      	adds	r3, #1
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd90      	pop	{r4, r7, pc}
 80038dc:	08006410 	.word	0x08006410
 80038e0:	00f42400 	.word	0x00f42400
 80038e4:	007a1200 	.word	0x007a1200

080038e8 <LL_TIM_SetPrescaler>:
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <LL_TIM_SetAutoReload>:
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <LL_TIM_SetRepetitionCounter>:
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <LL_TIM_OC_SetCompareCH1>:
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <LL_TIM_OC_SetCompareCH2>:
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <LL_TIM_OC_SetCompareCH3>:
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <LL_TIM_OC_SetCompareCH4>:
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	641a      	str	r2, [r3, #64]	; 0x40
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <LL_TIM_OC_SetCompareCH5>:
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	659a      	str	r2, [r3, #88]	; 0x58
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <LL_TIM_OC_SetCompareCH6>:
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <LL_TIM_GenerateEvent_UPDATE>:
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f043 0201 	orr.w	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	615a      	str	r2, [r3, #20]
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a3d      	ldr	r2, [pc, #244]	; (8003b10 <LL_TIM_Init+0x108>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d013      	beq.n	8003a48 <LL_TIM_Init+0x40>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a26:	d00f      	beq.n	8003a48 <LL_TIM_Init+0x40>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a3a      	ldr	r2, [pc, #232]	; (8003b14 <LL_TIM_Init+0x10c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00b      	beq.n	8003a48 <LL_TIM_Init+0x40>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a39      	ldr	r2, [pc, #228]	; (8003b18 <LL_TIM_Init+0x110>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d007      	beq.n	8003a48 <LL_TIM_Init+0x40>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a38      	ldr	r2, [pc, #224]	; (8003b1c <LL_TIM_Init+0x114>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d003      	beq.n	8003a48 <LL_TIM_Init+0x40>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a37      	ldr	r2, [pc, #220]	; (8003b20 <LL_TIM_Init+0x118>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d106      	bne.n	8003a56 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a2d      	ldr	r2, [pc, #180]	; (8003b10 <LL_TIM_Init+0x108>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01f      	beq.n	8003a9e <LL_TIM_Init+0x96>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a64:	d01b      	beq.n	8003a9e <LL_TIM_Init+0x96>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a2a      	ldr	r2, [pc, #168]	; (8003b14 <LL_TIM_Init+0x10c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d017      	beq.n	8003a9e <LL_TIM_Init+0x96>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a29      	ldr	r2, [pc, #164]	; (8003b18 <LL_TIM_Init+0x110>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <LL_TIM_Init+0x96>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a28      	ldr	r2, [pc, #160]	; (8003b1c <LL_TIM_Init+0x114>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00f      	beq.n	8003a9e <LL_TIM_Init+0x96>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a27      	ldr	r2, [pc, #156]	; (8003b20 <LL_TIM_Init+0x118>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00b      	beq.n	8003a9e <LL_TIM_Init+0x96>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a26      	ldr	r2, [pc, #152]	; (8003b24 <LL_TIM_Init+0x11c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d007      	beq.n	8003a9e <LL_TIM_Init+0x96>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a25      	ldr	r2, [pc, #148]	; (8003b28 <LL_TIM_Init+0x120>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d003      	beq.n	8003a9e <LL_TIM_Init+0x96>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a24      	ldr	r2, [pc, #144]	; (8003b2c <LL_TIM_Init+0x124>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d106      	bne.n	8003aac <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ff23 	bl	8003904 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ff0f 	bl	80038e8 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a10      	ldr	r2, [pc, #64]	; (8003b10 <LL_TIM_Init+0x108>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00f      	beq.n	8003af2 <LL_TIM_Init+0xea>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <LL_TIM_Init+0x118>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00b      	beq.n	8003af2 <LL_TIM_Init+0xea>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a11      	ldr	r2, [pc, #68]	; (8003b24 <LL_TIM_Init+0x11c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d007      	beq.n	8003af2 <LL_TIM_Init+0xea>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a10      	ldr	r2, [pc, #64]	; (8003b28 <LL_TIM_Init+0x120>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d003      	beq.n	8003af2 <LL_TIM_Init+0xea>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a0f      	ldr	r2, [pc, #60]	; (8003b2c <LL_TIM_Init+0x124>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d105      	bne.n	8003afe <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	4619      	mov	r1, r3
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ff11 	bl	8003920 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7ff ff72 	bl	80039e8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	40012c00 	.word	0x40012c00
 8003b14:	40000400 	.word	0x40000400
 8003b18:	40000800 	.word	0x40000800
 8003b1c:	40000c00 	.word	0x40000c00
 8003b20:	40013400 	.word	0x40013400
 8003b24:	40014000 	.word	0x40014000
 8003b28:	40014400 	.word	0x40014400
 8003b2c:	40014800 	.word	0x40014800

08003b30 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b46:	d045      	beq.n	8003bd4 <LL_TIM_OC_Init+0xa4>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b4e:	d848      	bhi.n	8003be2 <LL_TIM_OC_Init+0xb2>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b56:	d036      	beq.n	8003bc6 <LL_TIM_OC_Init+0x96>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b5e:	d840      	bhi.n	8003be2 <LL_TIM_OC_Init+0xb2>
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b66:	d027      	beq.n	8003bb8 <LL_TIM_OC_Init+0x88>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6e:	d838      	bhi.n	8003be2 <LL_TIM_OC_Init+0xb2>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b76:	d018      	beq.n	8003baa <LL_TIM_OC_Init+0x7a>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b7e:	d830      	bhi.n	8003be2 <LL_TIM_OC_Init+0xb2>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d003      	beq.n	8003b8e <LL_TIM_OC_Init+0x5e>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d007      	beq.n	8003b9c <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003b8c:	e029      	b.n	8003be2 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f82d 	bl	8003bf0 <OC1Config>
 8003b96:	4603      	mov	r3, r0
 8003b98:	75fb      	strb	r3, [r7, #23]
      break;
 8003b9a:	e023      	b.n	8003be4 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f8a6 	bl	8003cf0 <OC2Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba8:	e01c      	b.n	8003be4 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f923 	bl	8003df8 <OC3Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb6:	e015      	b.n	8003be4 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f9a0 	bl	8003f00 <OC4Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc4:	e00e      	b.n	8003be4 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 fa05 	bl	8003fd8 <OC5Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd2:	e007      	b.n	8003be4 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 fa62 	bl	80040a0 <OC6Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	75fb      	strb	r3, [r7, #23]
      break;
 8003be0:	e000      	b.n	8003be4 <LL_TIM_OC_Init+0xb4>
      break;
 8003be2:	bf00      	nop
  }

  return result;
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	f023 0201 	bic.w	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0303 	bic.w	r3, r3, #3
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f023 0202 	bic.w	r2, r3, #2
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f023 0201 	bic.w	r2, r3, #1
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a22      	ldr	r2, [pc, #136]	; (8003cdc <OC1Config+0xec>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00f      	beq.n	8003c76 <OC1Config+0x86>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a21      	ldr	r2, [pc, #132]	; (8003ce0 <OC1Config+0xf0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00b      	beq.n	8003c76 <OC1Config+0x86>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a20      	ldr	r2, [pc, #128]	; (8003ce4 <OC1Config+0xf4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d007      	beq.n	8003c76 <OC1Config+0x86>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a1f      	ldr	r2, [pc, #124]	; (8003ce8 <OC1Config+0xf8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <OC1Config+0x86>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a1e      	ldr	r2, [pc, #120]	; (8003cec <OC1Config+0xfc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d11e      	bne.n	8003cb4 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f023 0208 	bic.w	r2, r3, #8
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f023 0204 	bic.w	r2, r3, #4
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff fe38 	bl	800393c <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40012c00 	.word	0x40012c00
 8003ce0:	40013400 	.word	0x40013400
 8003ce4:	40014000 	.word	0x40014000
 8003ce8:	40014400 	.word	0x40014400
 8003cec:	40014800 	.word	0x40014800

08003cf0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f023 0210 	bic.w	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	6812      	ldr	r2, [r2, #0]
 8003d2e:	0212      	lsls	r2, r2, #8
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f023 0220 	bic.w	r2, r3, #32
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f023 0210 	bic.w	r2, r3, #16
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	011b      	lsls	r3, r3, #4
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a23      	ldr	r2, [pc, #140]	; (8003de4 <OC2Config+0xf4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00f      	beq.n	8003d7c <OC2Config+0x8c>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a22      	ldr	r2, [pc, #136]	; (8003de8 <OC2Config+0xf8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00b      	beq.n	8003d7c <OC2Config+0x8c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a21      	ldr	r2, [pc, #132]	; (8003dec <OC2Config+0xfc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d007      	beq.n	8003d7c <OC2Config+0x8c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a20      	ldr	r2, [pc, #128]	; (8003df0 <OC2Config+0x100>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d003      	beq.n	8003d7c <OC2Config+0x8c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a1f      	ldr	r2, [pc, #124]	; (8003df4 <OC2Config+0x104>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d11f      	bne.n	8003dbc <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	019b      	lsls	r3, r3, #6
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	019b      	lsls	r3, r3, #6
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff fdc2 	bl	8003958 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40013400 	.word	0x40013400
 8003dec:	40014000 	.word	0x40014000
 8003df0:	40014400 	.word	0x40014400
 8003df4:	40014800 	.word	0x40014800

08003df8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0303 	bic.w	r3, r3, #3
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	6812      	ldr	r2, [r2, #0]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	4313      	orrs	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a23      	ldr	r2, [pc, #140]	; (8003eec <OC3Config+0xf4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00f      	beq.n	8003e82 <OC3Config+0x8a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a22      	ldr	r2, [pc, #136]	; (8003ef0 <OC3Config+0xf8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00b      	beq.n	8003e82 <OC3Config+0x8a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a21      	ldr	r2, [pc, #132]	; (8003ef4 <OC3Config+0xfc>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d007      	beq.n	8003e82 <OC3Config+0x8a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a20      	ldr	r2, [pc, #128]	; (8003ef8 <OC3Config+0x100>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d003      	beq.n	8003e82 <OC3Config+0x8a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a1f      	ldr	r2, [pc, #124]	; (8003efc <OC3Config+0x104>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d11f      	bne.n	8003ec2 <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	029b      	lsls	r3, r3, #10
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	029b      	lsls	r3, r3, #10
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	015b      	lsls	r3, r3, #5
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff fd4d 	bl	8003974 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40012c00 	.word	0x40012c00
 8003ef0:	40013400 	.word	0x40013400
 8003ef4:	40014000 	.word	0x40014000
 8003ef8:	40014400 	.word	0x40014400
 8003efc:	40014800 	.word	0x40014800

08003f00 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	0212      	lsls	r2, r2, #8
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	031b      	lsls	r3, r3, #12
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	031b      	lsls	r3, r3, #12
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a17      	ldr	r2, [pc, #92]	; (8003fc4 <OC4Config+0xc4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00f      	beq.n	8003f8c <OC4Config+0x8c>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a16      	ldr	r2, [pc, #88]	; (8003fc8 <OC4Config+0xc8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00b      	beq.n	8003f8c <OC4Config+0x8c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a15      	ldr	r2, [pc, #84]	; (8003fcc <OC4Config+0xcc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d007      	beq.n	8003f8c <OC4Config+0x8c>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a14      	ldr	r2, [pc, #80]	; (8003fd0 <OC4Config+0xd0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <OC4Config+0x8c>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a13      	ldr	r2, [pc, #76]	; (8003fd4 <OC4Config+0xd4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d107      	bne.n	8003f9c <OC4Config+0x9c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	019b      	lsls	r3, r3, #6
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4619      	mov	r1, r3
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff fcee 	bl	8003990 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40013400 	.word	0x40013400
 8003fcc:	40014000 	.word	0x40014000
 8003fd0:	40014400 	.word	0x40014400
 8003fd4:	40014800 	.word	0x40014800

08003fd8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	4313      	orrs	r3, r2
 800400a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	041b      	lsls	r3, r3, #16
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	041b      	lsls	r3, r3, #16
 8004028:	4313      	orrs	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a17      	ldr	r2, [pc, #92]	; (800408c <OC5Config+0xb4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00f      	beq.n	8004054 <OC5Config+0x7c>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a16      	ldr	r2, [pc, #88]	; (8004090 <OC5Config+0xb8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00b      	beq.n	8004054 <OC5Config+0x7c>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a15      	ldr	r2, [pc, #84]	; (8004094 <OC5Config+0xbc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d007      	beq.n	8004054 <OC5Config+0x7c>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a14      	ldr	r2, [pc, #80]	; (8004098 <OC5Config+0xc0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d003      	beq.n	8004054 <OC5Config+0x7c>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a13      	ldr	r2, [pc, #76]	; (800409c <OC5Config+0xc4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d109      	bne.n	8004068 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff fc99 	bl	80039ac <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40012c00 	.word	0x40012c00
 8004090:	40013400 	.word	0x40013400
 8004094:	40014000 	.word	0x40014000
 8004098:	40014400 	.word	0x40014400
 800409c:	40014800 	.word	0x40014800

080040a0 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	0212      	lsls	r2, r2, #8
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	051b      	lsls	r3, r3, #20
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	051b      	lsls	r3, r3, #20
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a16      	ldr	r2, [pc, #88]	; (8004154 <OC6Config+0xb4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00f      	beq.n	800411e <OC6Config+0x7e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a15      	ldr	r2, [pc, #84]	; (8004158 <OC6Config+0xb8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00b      	beq.n	800411e <OC6Config+0x7e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a14      	ldr	r2, [pc, #80]	; (800415c <OC6Config+0xbc>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d007      	beq.n	800411e <OC6Config+0x7e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a13      	ldr	r2, [pc, #76]	; (8004160 <OC6Config+0xc0>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d003      	beq.n	800411e <OC6Config+0x7e>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a12      	ldr	r2, [pc, #72]	; (8004164 <OC6Config+0xc4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d109      	bne.n	8004132 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	029b      	lsls	r3, r3, #10
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	4619      	mov	r1, r3
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff fc44 	bl	80039cc <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	40012c00 	.word	0x40012c00
 8004158:	40013400 	.word	0x40013400
 800415c:	40014000 	.word	0x40014000
 8004160:	40014400 	.word	0x40014400
 8004164:	40014800 	.word	0x40014800

08004168 <LL_USART_IsEnabled>:
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <LL_USART_IsEnabled+0x18>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <LL_USART_IsEnabled+0x1a>
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <LL_USART_SetStopBitsLength>:
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	605a      	str	r2, [r3, #4]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <LL_USART_SetHWFlowCtrl>:
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	609a      	str	r2, [r3, #8]
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <LL_USART_SetBaudRate>:
{
 80041da:	b480      	push	{r7}
 80041dc:	b087      	sub	sp, #28
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ee:	d11a      	bne.n	8004226 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	005a      	lsls	r2, r3, #1
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	085b      	lsrs	r3, r3, #1
 80041f8:	441a      	add	r2, r3
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004200:	b29b      	uxth	r3, r3
 8004202:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800420a:	4013      	ands	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	085b      	lsrs	r3, r3, #1
 8004212:	b29b      	uxth	r3, r3
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	60da      	str	r2, [r3, #12]
}
 8004224:	e00a      	b.n	800423c <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	085a      	lsrs	r2, r3, #1
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	441a      	add	r2, r3
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	b29b      	uxth	r3, r3
 8004236:	461a      	mov	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	60da      	str	r2, [r3, #12]
}
 800423c:	bf00      	nop
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004256:	2300      	movs	r3, #0
 8004258:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff ff84 	bl	8004168 <LL_USART_IsEnabled>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d15b      	bne.n	800431e <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	4b2f      	ldr	r3, [pc, #188]	; (8004328 <LL_USART_Init+0xe0>)
 800426c:	4013      	ands	r3, r2
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	6851      	ldr	r1, [r2, #4]
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	68d2      	ldr	r2, [r2, #12]
 8004276:	4311      	orrs	r1, r2
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	6912      	ldr	r2, [r2, #16]
 800427c:	4311      	orrs	r1, r2
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	6992      	ldr	r2, [r2, #24]
 8004282:	430a      	orrs	r2, r1
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	4619      	mov	r1, r3
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff ff7c 	bl	800418e <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	4619      	mov	r1, r3
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff ff89 	bl	80041b4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a21      	ldr	r2, [pc, #132]	; (800432c <LL_USART_Init+0xe4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d104      	bne.n	80042b4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80042aa:	2003      	movs	r0, #3
 80042ac:	f7ff f84c 	bl	8003348 <LL_RCC_GetUSARTClockFreq>
 80042b0:	60b8      	str	r0, [r7, #8]
 80042b2:	e023      	b.n	80042fc <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a1e      	ldr	r2, [pc, #120]	; (8004330 <LL_USART_Init+0xe8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d104      	bne.n	80042c6 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80042bc:	200c      	movs	r0, #12
 80042be:	f7ff f843 	bl	8003348 <LL_RCC_GetUSARTClockFreq>
 80042c2:	60b8      	str	r0, [r7, #8]
 80042c4:	e01a      	b.n	80042fc <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a1a      	ldr	r2, [pc, #104]	; (8004334 <LL_USART_Init+0xec>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d104      	bne.n	80042d8 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80042ce:	2030      	movs	r0, #48	; 0x30
 80042d0:	f7ff f83a 	bl	8003348 <LL_RCC_GetUSARTClockFreq>
 80042d4:	60b8      	str	r0, [r7, #8]
 80042d6:	e011      	b.n	80042fc <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a17      	ldr	r2, [pc, #92]	; (8004338 <LL_USART_Init+0xf0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d104      	bne.n	80042ea <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80042e0:	20c0      	movs	r0, #192	; 0xc0
 80042e2:	f7ff f913 	bl	800350c <LL_RCC_GetUARTClockFreq>
 80042e6:	60b8      	str	r0, [r7, #8]
 80042e8:	e008      	b.n	80042fc <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a13      	ldr	r2, [pc, #76]	; (800433c <LL_USART_Init+0xf4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d104      	bne.n	80042fc <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80042f2:	f44f 7040 	mov.w	r0, #768	; 0x300
 80042f6:	f7ff f909 	bl	800350c <LL_RCC_GetUARTClockFreq>
 80042fa:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 800430a:	2300      	movs	r3, #0
 800430c:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff ff5e 	bl	80041da <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800431e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	efff69f3 	.word	0xefff69f3
 800432c:	40013800 	.word	0x40013800
 8004330:	40004400 	.word	0x40004400
 8004334:	40004800 	.word	0x40004800
 8004338:	40004c00 	.word	0x40004c00
 800433c:	40005000 	.word	0x40005000

08004340 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004352:	4a07      	ldr	r2, [pc, #28]	; (8004370 <LL_InitTick+0x30>)
 8004354:	3b01      	subs	r3, #1
 8004356:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <LL_InitTick+0x30>)
 800435a:	2200      	movs	r2, #0
 800435c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800435e:	4b04      	ldr	r3, [pc, #16]	; (8004370 <LL_InitTick+0x30>)
 8004360:	2205      	movs	r2, #5
 8004362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	e000e010 	.word	0xe000e010

08004374 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800437c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff ffdd 	bl	8004340 <LL_InitTick>
}
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004398:	4b10      	ldr	r3, [pc, #64]	; (80043dc <LL_mDelay+0x4c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80043a2:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043aa:	d00c      	beq.n	80043c6 <LL_mDelay+0x36>
  {
    tmpDelay++;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3301      	adds	r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 80043b2:	e008      	b.n	80043c6 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80043b4:	4b09      	ldr	r3, [pc, #36]	; (80043dc <LL_mDelay+0x4c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <LL_mDelay+0x36>
    {
      tmpDelay--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f3      	bne.n	80043b4 <LL_mDelay+0x24>
    }
  }
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	e000e010 	.word	0xe000e010

080043e0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80043e8:	4a04      	ldr	r2, [pc, #16]	; (80043fc <LL_SetSystemCoreClock+0x1c>)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6013      	str	r3, [r2, #0]
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000000 	.word	0x20000000

08004400 <std>:
 8004400:	2300      	movs	r3, #0
 8004402:	b510      	push	{r4, lr}
 8004404:	4604      	mov	r4, r0
 8004406:	e9c0 3300 	strd	r3, r3, [r0]
 800440a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800440e:	6083      	str	r3, [r0, #8]
 8004410:	8181      	strh	r1, [r0, #12]
 8004412:	6643      	str	r3, [r0, #100]	; 0x64
 8004414:	81c2      	strh	r2, [r0, #14]
 8004416:	6183      	str	r3, [r0, #24]
 8004418:	4619      	mov	r1, r3
 800441a:	2208      	movs	r2, #8
 800441c:	305c      	adds	r0, #92	; 0x5c
 800441e:	f000 f906 	bl	800462e <memset>
 8004422:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <std+0x58>)
 8004424:	6263      	str	r3, [r4, #36]	; 0x24
 8004426:	4b0d      	ldr	r3, [pc, #52]	; (800445c <std+0x5c>)
 8004428:	62a3      	str	r3, [r4, #40]	; 0x28
 800442a:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <std+0x60>)
 800442c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800442e:	4b0d      	ldr	r3, [pc, #52]	; (8004464 <std+0x64>)
 8004430:	6323      	str	r3, [r4, #48]	; 0x30
 8004432:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <std+0x68>)
 8004434:	6224      	str	r4, [r4, #32]
 8004436:	429c      	cmp	r4, r3
 8004438:	d006      	beq.n	8004448 <std+0x48>
 800443a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800443e:	4294      	cmp	r4, r2
 8004440:	d002      	beq.n	8004448 <std+0x48>
 8004442:	33d0      	adds	r3, #208	; 0xd0
 8004444:	429c      	cmp	r4, r3
 8004446:	d105      	bne.n	8004454 <std+0x54>
 8004448:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800444c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004450:	f000 b966 	b.w	8004720 <__retarget_lock_init_recursive>
 8004454:	bd10      	pop	{r4, pc}
 8004456:	bf00      	nop
 8004458:	080045a9 	.word	0x080045a9
 800445c:	080045cb 	.word	0x080045cb
 8004460:	08004603 	.word	0x08004603
 8004464:	08004627 	.word	0x08004627
 8004468:	2000034c 	.word	0x2000034c

0800446c <stdio_exit_handler>:
 800446c:	4a02      	ldr	r2, [pc, #8]	; (8004478 <stdio_exit_handler+0xc>)
 800446e:	4903      	ldr	r1, [pc, #12]	; (800447c <stdio_exit_handler+0x10>)
 8004470:	4803      	ldr	r0, [pc, #12]	; (8004480 <stdio_exit_handler+0x14>)
 8004472:	f000 b869 	b.w	8004548 <_fwalk_sglue>
 8004476:	bf00      	nop
 8004478:	20000004 	.word	0x20000004
 800447c:	08004fcd 	.word	0x08004fcd
 8004480:	20000010 	.word	0x20000010

08004484 <cleanup_stdio>:
 8004484:	6841      	ldr	r1, [r0, #4]
 8004486:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <cleanup_stdio+0x34>)
 8004488:	4299      	cmp	r1, r3
 800448a:	b510      	push	{r4, lr}
 800448c:	4604      	mov	r4, r0
 800448e:	d001      	beq.n	8004494 <cleanup_stdio+0x10>
 8004490:	f000 fd9c 	bl	8004fcc <_fflush_r>
 8004494:	68a1      	ldr	r1, [r4, #8]
 8004496:	4b09      	ldr	r3, [pc, #36]	; (80044bc <cleanup_stdio+0x38>)
 8004498:	4299      	cmp	r1, r3
 800449a:	d002      	beq.n	80044a2 <cleanup_stdio+0x1e>
 800449c:	4620      	mov	r0, r4
 800449e:	f000 fd95 	bl	8004fcc <_fflush_r>
 80044a2:	68e1      	ldr	r1, [r4, #12]
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <cleanup_stdio+0x3c>)
 80044a6:	4299      	cmp	r1, r3
 80044a8:	d004      	beq.n	80044b4 <cleanup_stdio+0x30>
 80044aa:	4620      	mov	r0, r4
 80044ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044b0:	f000 bd8c 	b.w	8004fcc <_fflush_r>
 80044b4:	bd10      	pop	{r4, pc}
 80044b6:	bf00      	nop
 80044b8:	2000034c 	.word	0x2000034c
 80044bc:	200003b4 	.word	0x200003b4
 80044c0:	2000041c 	.word	0x2000041c

080044c4 <global_stdio_init.part.0>:
 80044c4:	b510      	push	{r4, lr}
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <global_stdio_init.part.0+0x30>)
 80044c8:	4c0b      	ldr	r4, [pc, #44]	; (80044f8 <global_stdio_init.part.0+0x34>)
 80044ca:	4a0c      	ldr	r2, [pc, #48]	; (80044fc <global_stdio_init.part.0+0x38>)
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	4620      	mov	r0, r4
 80044d0:	2200      	movs	r2, #0
 80044d2:	2104      	movs	r1, #4
 80044d4:	f7ff ff94 	bl	8004400 <std>
 80044d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80044dc:	2201      	movs	r2, #1
 80044de:	2109      	movs	r1, #9
 80044e0:	f7ff ff8e 	bl	8004400 <std>
 80044e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80044e8:	2202      	movs	r2, #2
 80044ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ee:	2112      	movs	r1, #18
 80044f0:	f7ff bf86 	b.w	8004400 <std>
 80044f4:	20000484 	.word	0x20000484
 80044f8:	2000034c 	.word	0x2000034c
 80044fc:	0800446d 	.word	0x0800446d

08004500 <__sfp_lock_acquire>:
 8004500:	4801      	ldr	r0, [pc, #4]	; (8004508 <__sfp_lock_acquire+0x8>)
 8004502:	f000 b90e 	b.w	8004722 <__retarget_lock_acquire_recursive>
 8004506:	bf00      	nop
 8004508:	2000048d 	.word	0x2000048d

0800450c <__sfp_lock_release>:
 800450c:	4801      	ldr	r0, [pc, #4]	; (8004514 <__sfp_lock_release+0x8>)
 800450e:	f000 b909 	b.w	8004724 <__retarget_lock_release_recursive>
 8004512:	bf00      	nop
 8004514:	2000048d 	.word	0x2000048d

08004518 <__sinit>:
 8004518:	b510      	push	{r4, lr}
 800451a:	4604      	mov	r4, r0
 800451c:	f7ff fff0 	bl	8004500 <__sfp_lock_acquire>
 8004520:	6a23      	ldr	r3, [r4, #32]
 8004522:	b11b      	cbz	r3, 800452c <__sinit+0x14>
 8004524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004528:	f7ff bff0 	b.w	800450c <__sfp_lock_release>
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <__sinit+0x28>)
 800452e:	6223      	str	r3, [r4, #32]
 8004530:	4b04      	ldr	r3, [pc, #16]	; (8004544 <__sinit+0x2c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f5      	bne.n	8004524 <__sinit+0xc>
 8004538:	f7ff ffc4 	bl	80044c4 <global_stdio_init.part.0>
 800453c:	e7f2      	b.n	8004524 <__sinit+0xc>
 800453e:	bf00      	nop
 8004540:	08004485 	.word	0x08004485
 8004544:	20000484 	.word	0x20000484

08004548 <_fwalk_sglue>:
 8004548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800454c:	4607      	mov	r7, r0
 800454e:	4688      	mov	r8, r1
 8004550:	4614      	mov	r4, r2
 8004552:	2600      	movs	r6, #0
 8004554:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004558:	f1b9 0901 	subs.w	r9, r9, #1
 800455c:	d505      	bpl.n	800456a <_fwalk_sglue+0x22>
 800455e:	6824      	ldr	r4, [r4, #0]
 8004560:	2c00      	cmp	r4, #0
 8004562:	d1f7      	bne.n	8004554 <_fwalk_sglue+0xc>
 8004564:	4630      	mov	r0, r6
 8004566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800456a:	89ab      	ldrh	r3, [r5, #12]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d907      	bls.n	8004580 <_fwalk_sglue+0x38>
 8004570:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004574:	3301      	adds	r3, #1
 8004576:	d003      	beq.n	8004580 <_fwalk_sglue+0x38>
 8004578:	4629      	mov	r1, r5
 800457a:	4638      	mov	r0, r7
 800457c:	47c0      	blx	r8
 800457e:	4306      	orrs	r6, r0
 8004580:	3568      	adds	r5, #104	; 0x68
 8004582:	e7e9      	b.n	8004558 <_fwalk_sglue+0x10>

08004584 <iprintf>:
 8004584:	b40f      	push	{r0, r1, r2, r3}
 8004586:	b507      	push	{r0, r1, r2, lr}
 8004588:	4906      	ldr	r1, [pc, #24]	; (80045a4 <iprintf+0x20>)
 800458a:	ab04      	add	r3, sp, #16
 800458c:	6808      	ldr	r0, [r1, #0]
 800458e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004592:	6881      	ldr	r1, [r0, #8]
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	f000 f9e9 	bl	800496c <_vfiprintf_r>
 800459a:	b003      	add	sp, #12
 800459c:	f85d eb04 	ldr.w	lr, [sp], #4
 80045a0:	b004      	add	sp, #16
 80045a2:	4770      	bx	lr
 80045a4:	2000005c 	.word	0x2000005c

080045a8 <__sread>:
 80045a8:	b510      	push	{r4, lr}
 80045aa:	460c      	mov	r4, r1
 80045ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b0:	f000 f868 	bl	8004684 <_read_r>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	bfab      	itete	ge
 80045b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80045ba:	89a3      	ldrhlt	r3, [r4, #12]
 80045bc:	181b      	addge	r3, r3, r0
 80045be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80045c2:	bfac      	ite	ge
 80045c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80045c6:	81a3      	strhlt	r3, [r4, #12]
 80045c8:	bd10      	pop	{r4, pc}

080045ca <__swrite>:
 80045ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ce:	461f      	mov	r7, r3
 80045d0:	898b      	ldrh	r3, [r1, #12]
 80045d2:	05db      	lsls	r3, r3, #23
 80045d4:	4605      	mov	r5, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	4616      	mov	r6, r2
 80045da:	d505      	bpl.n	80045e8 <__swrite+0x1e>
 80045dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e0:	2302      	movs	r3, #2
 80045e2:	2200      	movs	r2, #0
 80045e4:	f000 f83c 	bl	8004660 <_lseek_r>
 80045e8:	89a3      	ldrh	r3, [r4, #12]
 80045ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045f2:	81a3      	strh	r3, [r4, #12]
 80045f4:	4632      	mov	r2, r6
 80045f6:	463b      	mov	r3, r7
 80045f8:	4628      	mov	r0, r5
 80045fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045fe:	f000 b853 	b.w	80046a8 <_write_r>

08004602 <__sseek>:
 8004602:	b510      	push	{r4, lr}
 8004604:	460c      	mov	r4, r1
 8004606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800460a:	f000 f829 	bl	8004660 <_lseek_r>
 800460e:	1c43      	adds	r3, r0, #1
 8004610:	89a3      	ldrh	r3, [r4, #12]
 8004612:	bf15      	itete	ne
 8004614:	6560      	strne	r0, [r4, #84]	; 0x54
 8004616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800461a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800461e:	81a3      	strheq	r3, [r4, #12]
 8004620:	bf18      	it	ne
 8004622:	81a3      	strhne	r3, [r4, #12]
 8004624:	bd10      	pop	{r4, pc}

08004626 <__sclose>:
 8004626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800462a:	f000 b809 	b.w	8004640 <_close_r>

0800462e <memset>:
 800462e:	4402      	add	r2, r0
 8004630:	4603      	mov	r3, r0
 8004632:	4293      	cmp	r3, r2
 8004634:	d100      	bne.n	8004638 <memset+0xa>
 8004636:	4770      	bx	lr
 8004638:	f803 1b01 	strb.w	r1, [r3], #1
 800463c:	e7f9      	b.n	8004632 <memset+0x4>
	...

08004640 <_close_r>:
 8004640:	b538      	push	{r3, r4, r5, lr}
 8004642:	4d06      	ldr	r5, [pc, #24]	; (800465c <_close_r+0x1c>)
 8004644:	2300      	movs	r3, #0
 8004646:	4604      	mov	r4, r0
 8004648:	4608      	mov	r0, r1
 800464a:	602b      	str	r3, [r5, #0]
 800464c:	f7fe f953 	bl	80028f6 <_close>
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	d102      	bne.n	800465a <_close_r+0x1a>
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	b103      	cbz	r3, 800465a <_close_r+0x1a>
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	bd38      	pop	{r3, r4, r5, pc}
 800465c:	20000488 	.word	0x20000488

08004660 <_lseek_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	4d07      	ldr	r5, [pc, #28]	; (8004680 <_lseek_r+0x20>)
 8004664:	4604      	mov	r4, r0
 8004666:	4608      	mov	r0, r1
 8004668:	4611      	mov	r1, r2
 800466a:	2200      	movs	r2, #0
 800466c:	602a      	str	r2, [r5, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	f7fe f968 	bl	8002944 <_lseek>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d102      	bne.n	800467e <_lseek_r+0x1e>
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	b103      	cbz	r3, 800467e <_lseek_r+0x1e>
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	20000488 	.word	0x20000488

08004684 <_read_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	4d07      	ldr	r5, [pc, #28]	; (80046a4 <_read_r+0x20>)
 8004688:	4604      	mov	r4, r0
 800468a:	4608      	mov	r0, r1
 800468c:	4611      	mov	r1, r2
 800468e:	2200      	movs	r2, #0
 8004690:	602a      	str	r2, [r5, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	f7fe f912 	bl	80028bc <_read>
 8004698:	1c43      	adds	r3, r0, #1
 800469a:	d102      	bne.n	80046a2 <_read_r+0x1e>
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	b103      	cbz	r3, 80046a2 <_read_r+0x1e>
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	bd38      	pop	{r3, r4, r5, pc}
 80046a4:	20000488 	.word	0x20000488

080046a8 <_write_r>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	4d07      	ldr	r5, [pc, #28]	; (80046c8 <_write_r+0x20>)
 80046ac:	4604      	mov	r4, r0
 80046ae:	4608      	mov	r0, r1
 80046b0:	4611      	mov	r1, r2
 80046b2:	2200      	movs	r2, #0
 80046b4:	602a      	str	r2, [r5, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f7fc fb20 	bl	8000cfc <_write>
 80046bc:	1c43      	adds	r3, r0, #1
 80046be:	d102      	bne.n	80046c6 <_write_r+0x1e>
 80046c0:	682b      	ldr	r3, [r5, #0]
 80046c2:	b103      	cbz	r3, 80046c6 <_write_r+0x1e>
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	bd38      	pop	{r3, r4, r5, pc}
 80046c8:	20000488 	.word	0x20000488

080046cc <__errno>:
 80046cc:	4b01      	ldr	r3, [pc, #4]	; (80046d4 <__errno+0x8>)
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	2000005c 	.word	0x2000005c

080046d8 <__libc_init_array>:
 80046d8:	b570      	push	{r4, r5, r6, lr}
 80046da:	4d0d      	ldr	r5, [pc, #52]	; (8004710 <__libc_init_array+0x38>)
 80046dc:	4c0d      	ldr	r4, [pc, #52]	; (8004714 <__libc_init_array+0x3c>)
 80046de:	1b64      	subs	r4, r4, r5
 80046e0:	10a4      	asrs	r4, r4, #2
 80046e2:	2600      	movs	r6, #0
 80046e4:	42a6      	cmp	r6, r4
 80046e6:	d109      	bne.n	80046fc <__libc_init_array+0x24>
 80046e8:	4d0b      	ldr	r5, [pc, #44]	; (8004718 <__libc_init_array+0x40>)
 80046ea:	4c0c      	ldr	r4, [pc, #48]	; (800471c <__libc_init_array+0x44>)
 80046ec:	f001 fe60 	bl	80063b0 <_init>
 80046f0:	1b64      	subs	r4, r4, r5
 80046f2:	10a4      	asrs	r4, r4, #2
 80046f4:	2600      	movs	r6, #0
 80046f6:	42a6      	cmp	r6, r4
 80046f8:	d105      	bne.n	8004706 <__libc_init_array+0x2e>
 80046fa:	bd70      	pop	{r4, r5, r6, pc}
 80046fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004700:	4798      	blx	r3
 8004702:	3601      	adds	r6, #1
 8004704:	e7ee      	b.n	80046e4 <__libc_init_array+0xc>
 8004706:	f855 3b04 	ldr.w	r3, [r5], #4
 800470a:	4798      	blx	r3
 800470c:	3601      	adds	r6, #1
 800470e:	e7f2      	b.n	80046f6 <__libc_init_array+0x1e>
 8004710:	08006660 	.word	0x08006660
 8004714:	08006660 	.word	0x08006660
 8004718:	08006660 	.word	0x08006660
 800471c:	08006664 	.word	0x08006664

08004720 <__retarget_lock_init_recursive>:
 8004720:	4770      	bx	lr

08004722 <__retarget_lock_acquire_recursive>:
 8004722:	4770      	bx	lr

08004724 <__retarget_lock_release_recursive>:
 8004724:	4770      	bx	lr
	...

08004728 <_free_r>:
 8004728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800472a:	2900      	cmp	r1, #0
 800472c:	d044      	beq.n	80047b8 <_free_r+0x90>
 800472e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004732:	9001      	str	r0, [sp, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	f1a1 0404 	sub.w	r4, r1, #4
 800473a:	bfb8      	it	lt
 800473c:	18e4      	addlt	r4, r4, r3
 800473e:	f000 f8df 	bl	8004900 <__malloc_lock>
 8004742:	4a1e      	ldr	r2, [pc, #120]	; (80047bc <_free_r+0x94>)
 8004744:	9801      	ldr	r0, [sp, #4]
 8004746:	6813      	ldr	r3, [r2, #0]
 8004748:	b933      	cbnz	r3, 8004758 <_free_r+0x30>
 800474a:	6063      	str	r3, [r4, #4]
 800474c:	6014      	str	r4, [r2, #0]
 800474e:	b003      	add	sp, #12
 8004750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004754:	f000 b8da 	b.w	800490c <__malloc_unlock>
 8004758:	42a3      	cmp	r3, r4
 800475a:	d908      	bls.n	800476e <_free_r+0x46>
 800475c:	6825      	ldr	r5, [r4, #0]
 800475e:	1961      	adds	r1, r4, r5
 8004760:	428b      	cmp	r3, r1
 8004762:	bf01      	itttt	eq
 8004764:	6819      	ldreq	r1, [r3, #0]
 8004766:	685b      	ldreq	r3, [r3, #4]
 8004768:	1949      	addeq	r1, r1, r5
 800476a:	6021      	streq	r1, [r4, #0]
 800476c:	e7ed      	b.n	800474a <_free_r+0x22>
 800476e:	461a      	mov	r2, r3
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	b10b      	cbz	r3, 8004778 <_free_r+0x50>
 8004774:	42a3      	cmp	r3, r4
 8004776:	d9fa      	bls.n	800476e <_free_r+0x46>
 8004778:	6811      	ldr	r1, [r2, #0]
 800477a:	1855      	adds	r5, r2, r1
 800477c:	42a5      	cmp	r5, r4
 800477e:	d10b      	bne.n	8004798 <_free_r+0x70>
 8004780:	6824      	ldr	r4, [r4, #0]
 8004782:	4421      	add	r1, r4
 8004784:	1854      	adds	r4, r2, r1
 8004786:	42a3      	cmp	r3, r4
 8004788:	6011      	str	r1, [r2, #0]
 800478a:	d1e0      	bne.n	800474e <_free_r+0x26>
 800478c:	681c      	ldr	r4, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	6053      	str	r3, [r2, #4]
 8004792:	440c      	add	r4, r1
 8004794:	6014      	str	r4, [r2, #0]
 8004796:	e7da      	b.n	800474e <_free_r+0x26>
 8004798:	d902      	bls.n	80047a0 <_free_r+0x78>
 800479a:	230c      	movs	r3, #12
 800479c:	6003      	str	r3, [r0, #0]
 800479e:	e7d6      	b.n	800474e <_free_r+0x26>
 80047a0:	6825      	ldr	r5, [r4, #0]
 80047a2:	1961      	adds	r1, r4, r5
 80047a4:	428b      	cmp	r3, r1
 80047a6:	bf04      	itt	eq
 80047a8:	6819      	ldreq	r1, [r3, #0]
 80047aa:	685b      	ldreq	r3, [r3, #4]
 80047ac:	6063      	str	r3, [r4, #4]
 80047ae:	bf04      	itt	eq
 80047b0:	1949      	addeq	r1, r1, r5
 80047b2:	6021      	streq	r1, [r4, #0]
 80047b4:	6054      	str	r4, [r2, #4]
 80047b6:	e7ca      	b.n	800474e <_free_r+0x26>
 80047b8:	b003      	add	sp, #12
 80047ba:	bd30      	pop	{r4, r5, pc}
 80047bc:	20000490 	.word	0x20000490

080047c0 <sbrk_aligned>:
 80047c0:	b570      	push	{r4, r5, r6, lr}
 80047c2:	4e0e      	ldr	r6, [pc, #56]	; (80047fc <sbrk_aligned+0x3c>)
 80047c4:	460c      	mov	r4, r1
 80047c6:	6831      	ldr	r1, [r6, #0]
 80047c8:	4605      	mov	r5, r0
 80047ca:	b911      	cbnz	r1, 80047d2 <sbrk_aligned+0x12>
 80047cc:	f000 fcbc 	bl	8005148 <_sbrk_r>
 80047d0:	6030      	str	r0, [r6, #0]
 80047d2:	4621      	mov	r1, r4
 80047d4:	4628      	mov	r0, r5
 80047d6:	f000 fcb7 	bl	8005148 <_sbrk_r>
 80047da:	1c43      	adds	r3, r0, #1
 80047dc:	d00a      	beq.n	80047f4 <sbrk_aligned+0x34>
 80047de:	1cc4      	adds	r4, r0, #3
 80047e0:	f024 0403 	bic.w	r4, r4, #3
 80047e4:	42a0      	cmp	r0, r4
 80047e6:	d007      	beq.n	80047f8 <sbrk_aligned+0x38>
 80047e8:	1a21      	subs	r1, r4, r0
 80047ea:	4628      	mov	r0, r5
 80047ec:	f000 fcac 	bl	8005148 <_sbrk_r>
 80047f0:	3001      	adds	r0, #1
 80047f2:	d101      	bne.n	80047f8 <sbrk_aligned+0x38>
 80047f4:	f04f 34ff 	mov.w	r4, #4294967295
 80047f8:	4620      	mov	r0, r4
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	20000494 	.word	0x20000494

08004800 <_malloc_r>:
 8004800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004804:	1ccd      	adds	r5, r1, #3
 8004806:	f025 0503 	bic.w	r5, r5, #3
 800480a:	3508      	adds	r5, #8
 800480c:	2d0c      	cmp	r5, #12
 800480e:	bf38      	it	cc
 8004810:	250c      	movcc	r5, #12
 8004812:	2d00      	cmp	r5, #0
 8004814:	4607      	mov	r7, r0
 8004816:	db01      	blt.n	800481c <_malloc_r+0x1c>
 8004818:	42a9      	cmp	r1, r5
 800481a:	d905      	bls.n	8004828 <_malloc_r+0x28>
 800481c:	230c      	movs	r3, #12
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	2600      	movs	r6, #0
 8004822:	4630      	mov	r0, r6
 8004824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004828:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80048fc <_malloc_r+0xfc>
 800482c:	f000 f868 	bl	8004900 <__malloc_lock>
 8004830:	f8d8 3000 	ldr.w	r3, [r8]
 8004834:	461c      	mov	r4, r3
 8004836:	bb5c      	cbnz	r4, 8004890 <_malloc_r+0x90>
 8004838:	4629      	mov	r1, r5
 800483a:	4638      	mov	r0, r7
 800483c:	f7ff ffc0 	bl	80047c0 <sbrk_aligned>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	4604      	mov	r4, r0
 8004844:	d155      	bne.n	80048f2 <_malloc_r+0xf2>
 8004846:	f8d8 4000 	ldr.w	r4, [r8]
 800484a:	4626      	mov	r6, r4
 800484c:	2e00      	cmp	r6, #0
 800484e:	d145      	bne.n	80048dc <_malloc_r+0xdc>
 8004850:	2c00      	cmp	r4, #0
 8004852:	d048      	beq.n	80048e6 <_malloc_r+0xe6>
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	4631      	mov	r1, r6
 8004858:	4638      	mov	r0, r7
 800485a:	eb04 0903 	add.w	r9, r4, r3
 800485e:	f000 fc73 	bl	8005148 <_sbrk_r>
 8004862:	4581      	cmp	r9, r0
 8004864:	d13f      	bne.n	80048e6 <_malloc_r+0xe6>
 8004866:	6821      	ldr	r1, [r4, #0]
 8004868:	1a6d      	subs	r5, r5, r1
 800486a:	4629      	mov	r1, r5
 800486c:	4638      	mov	r0, r7
 800486e:	f7ff ffa7 	bl	80047c0 <sbrk_aligned>
 8004872:	3001      	adds	r0, #1
 8004874:	d037      	beq.n	80048e6 <_malloc_r+0xe6>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	442b      	add	r3, r5
 800487a:	6023      	str	r3, [r4, #0]
 800487c:	f8d8 3000 	ldr.w	r3, [r8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d038      	beq.n	80048f6 <_malloc_r+0xf6>
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	42a2      	cmp	r2, r4
 8004888:	d12b      	bne.n	80048e2 <_malloc_r+0xe2>
 800488a:	2200      	movs	r2, #0
 800488c:	605a      	str	r2, [r3, #4]
 800488e:	e00f      	b.n	80048b0 <_malloc_r+0xb0>
 8004890:	6822      	ldr	r2, [r4, #0]
 8004892:	1b52      	subs	r2, r2, r5
 8004894:	d41f      	bmi.n	80048d6 <_malloc_r+0xd6>
 8004896:	2a0b      	cmp	r2, #11
 8004898:	d917      	bls.n	80048ca <_malloc_r+0xca>
 800489a:	1961      	adds	r1, r4, r5
 800489c:	42a3      	cmp	r3, r4
 800489e:	6025      	str	r5, [r4, #0]
 80048a0:	bf18      	it	ne
 80048a2:	6059      	strne	r1, [r3, #4]
 80048a4:	6863      	ldr	r3, [r4, #4]
 80048a6:	bf08      	it	eq
 80048a8:	f8c8 1000 	streq.w	r1, [r8]
 80048ac:	5162      	str	r2, [r4, r5]
 80048ae:	604b      	str	r3, [r1, #4]
 80048b0:	4638      	mov	r0, r7
 80048b2:	f104 060b 	add.w	r6, r4, #11
 80048b6:	f000 f829 	bl	800490c <__malloc_unlock>
 80048ba:	f026 0607 	bic.w	r6, r6, #7
 80048be:	1d23      	adds	r3, r4, #4
 80048c0:	1af2      	subs	r2, r6, r3
 80048c2:	d0ae      	beq.n	8004822 <_malloc_r+0x22>
 80048c4:	1b9b      	subs	r3, r3, r6
 80048c6:	50a3      	str	r3, [r4, r2]
 80048c8:	e7ab      	b.n	8004822 <_malloc_r+0x22>
 80048ca:	42a3      	cmp	r3, r4
 80048cc:	6862      	ldr	r2, [r4, #4]
 80048ce:	d1dd      	bne.n	800488c <_malloc_r+0x8c>
 80048d0:	f8c8 2000 	str.w	r2, [r8]
 80048d4:	e7ec      	b.n	80048b0 <_malloc_r+0xb0>
 80048d6:	4623      	mov	r3, r4
 80048d8:	6864      	ldr	r4, [r4, #4]
 80048da:	e7ac      	b.n	8004836 <_malloc_r+0x36>
 80048dc:	4634      	mov	r4, r6
 80048de:	6876      	ldr	r6, [r6, #4]
 80048e0:	e7b4      	b.n	800484c <_malloc_r+0x4c>
 80048e2:	4613      	mov	r3, r2
 80048e4:	e7cc      	b.n	8004880 <_malloc_r+0x80>
 80048e6:	230c      	movs	r3, #12
 80048e8:	603b      	str	r3, [r7, #0]
 80048ea:	4638      	mov	r0, r7
 80048ec:	f000 f80e 	bl	800490c <__malloc_unlock>
 80048f0:	e797      	b.n	8004822 <_malloc_r+0x22>
 80048f2:	6025      	str	r5, [r4, #0]
 80048f4:	e7dc      	b.n	80048b0 <_malloc_r+0xb0>
 80048f6:	605b      	str	r3, [r3, #4]
 80048f8:	deff      	udf	#255	; 0xff
 80048fa:	bf00      	nop
 80048fc:	20000490 	.word	0x20000490

08004900 <__malloc_lock>:
 8004900:	4801      	ldr	r0, [pc, #4]	; (8004908 <__malloc_lock+0x8>)
 8004902:	f7ff bf0e 	b.w	8004722 <__retarget_lock_acquire_recursive>
 8004906:	bf00      	nop
 8004908:	2000048c 	.word	0x2000048c

0800490c <__malloc_unlock>:
 800490c:	4801      	ldr	r0, [pc, #4]	; (8004914 <__malloc_unlock+0x8>)
 800490e:	f7ff bf09 	b.w	8004724 <__retarget_lock_release_recursive>
 8004912:	bf00      	nop
 8004914:	2000048c 	.word	0x2000048c

08004918 <__sfputc_r>:
 8004918:	6893      	ldr	r3, [r2, #8]
 800491a:	3b01      	subs	r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	b410      	push	{r4}
 8004920:	6093      	str	r3, [r2, #8]
 8004922:	da08      	bge.n	8004936 <__sfputc_r+0x1e>
 8004924:	6994      	ldr	r4, [r2, #24]
 8004926:	42a3      	cmp	r3, r4
 8004928:	db01      	blt.n	800492e <__sfputc_r+0x16>
 800492a:	290a      	cmp	r1, #10
 800492c:	d103      	bne.n	8004936 <__sfputc_r+0x1e>
 800492e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004932:	f000 bb73 	b.w	800501c <__swbuf_r>
 8004936:	6813      	ldr	r3, [r2, #0]
 8004938:	1c58      	adds	r0, r3, #1
 800493a:	6010      	str	r0, [r2, #0]
 800493c:	7019      	strb	r1, [r3, #0]
 800493e:	4608      	mov	r0, r1
 8004940:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004944:	4770      	bx	lr

08004946 <__sfputs_r>:
 8004946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004948:	4606      	mov	r6, r0
 800494a:	460f      	mov	r7, r1
 800494c:	4614      	mov	r4, r2
 800494e:	18d5      	adds	r5, r2, r3
 8004950:	42ac      	cmp	r4, r5
 8004952:	d101      	bne.n	8004958 <__sfputs_r+0x12>
 8004954:	2000      	movs	r0, #0
 8004956:	e007      	b.n	8004968 <__sfputs_r+0x22>
 8004958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800495c:	463a      	mov	r2, r7
 800495e:	4630      	mov	r0, r6
 8004960:	f7ff ffda 	bl	8004918 <__sfputc_r>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	d1f3      	bne.n	8004950 <__sfputs_r+0xa>
 8004968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800496c <_vfiprintf_r>:
 800496c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004970:	460d      	mov	r5, r1
 8004972:	b09d      	sub	sp, #116	; 0x74
 8004974:	4614      	mov	r4, r2
 8004976:	4698      	mov	r8, r3
 8004978:	4606      	mov	r6, r0
 800497a:	b118      	cbz	r0, 8004984 <_vfiprintf_r+0x18>
 800497c:	6a03      	ldr	r3, [r0, #32]
 800497e:	b90b      	cbnz	r3, 8004984 <_vfiprintf_r+0x18>
 8004980:	f7ff fdca 	bl	8004518 <__sinit>
 8004984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004986:	07d9      	lsls	r1, r3, #31
 8004988:	d405      	bmi.n	8004996 <_vfiprintf_r+0x2a>
 800498a:	89ab      	ldrh	r3, [r5, #12]
 800498c:	059a      	lsls	r2, r3, #22
 800498e:	d402      	bmi.n	8004996 <_vfiprintf_r+0x2a>
 8004990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004992:	f7ff fec6 	bl	8004722 <__retarget_lock_acquire_recursive>
 8004996:	89ab      	ldrh	r3, [r5, #12]
 8004998:	071b      	lsls	r3, r3, #28
 800499a:	d501      	bpl.n	80049a0 <_vfiprintf_r+0x34>
 800499c:	692b      	ldr	r3, [r5, #16]
 800499e:	b99b      	cbnz	r3, 80049c8 <_vfiprintf_r+0x5c>
 80049a0:	4629      	mov	r1, r5
 80049a2:	4630      	mov	r0, r6
 80049a4:	f000 fb78 	bl	8005098 <__swsetup_r>
 80049a8:	b170      	cbz	r0, 80049c8 <_vfiprintf_r+0x5c>
 80049aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049ac:	07dc      	lsls	r4, r3, #31
 80049ae:	d504      	bpl.n	80049ba <_vfiprintf_r+0x4e>
 80049b0:	f04f 30ff 	mov.w	r0, #4294967295
 80049b4:	b01d      	add	sp, #116	; 0x74
 80049b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ba:	89ab      	ldrh	r3, [r5, #12]
 80049bc:	0598      	lsls	r0, r3, #22
 80049be:	d4f7      	bmi.n	80049b0 <_vfiprintf_r+0x44>
 80049c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049c2:	f7ff feaf 	bl	8004724 <__retarget_lock_release_recursive>
 80049c6:	e7f3      	b.n	80049b0 <_vfiprintf_r+0x44>
 80049c8:	2300      	movs	r3, #0
 80049ca:	9309      	str	r3, [sp, #36]	; 0x24
 80049cc:	2320      	movs	r3, #32
 80049ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80049d6:	2330      	movs	r3, #48	; 0x30
 80049d8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004b8c <_vfiprintf_r+0x220>
 80049dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049e0:	f04f 0901 	mov.w	r9, #1
 80049e4:	4623      	mov	r3, r4
 80049e6:	469a      	mov	sl, r3
 80049e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049ec:	b10a      	cbz	r2, 80049f2 <_vfiprintf_r+0x86>
 80049ee:	2a25      	cmp	r2, #37	; 0x25
 80049f0:	d1f9      	bne.n	80049e6 <_vfiprintf_r+0x7a>
 80049f2:	ebba 0b04 	subs.w	fp, sl, r4
 80049f6:	d00b      	beq.n	8004a10 <_vfiprintf_r+0xa4>
 80049f8:	465b      	mov	r3, fp
 80049fa:	4622      	mov	r2, r4
 80049fc:	4629      	mov	r1, r5
 80049fe:	4630      	mov	r0, r6
 8004a00:	f7ff ffa1 	bl	8004946 <__sfputs_r>
 8004a04:	3001      	adds	r0, #1
 8004a06:	f000 80a9 	beq.w	8004b5c <_vfiprintf_r+0x1f0>
 8004a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a0c:	445a      	add	r2, fp
 8004a0e:	9209      	str	r2, [sp, #36]	; 0x24
 8004a10:	f89a 3000 	ldrb.w	r3, [sl]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 80a1 	beq.w	8004b5c <_vfiprintf_r+0x1f0>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a24:	f10a 0a01 	add.w	sl, sl, #1
 8004a28:	9304      	str	r3, [sp, #16]
 8004a2a:	9307      	str	r3, [sp, #28]
 8004a2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a30:	931a      	str	r3, [sp, #104]	; 0x68
 8004a32:	4654      	mov	r4, sl
 8004a34:	2205      	movs	r2, #5
 8004a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a3a:	4854      	ldr	r0, [pc, #336]	; (8004b8c <_vfiprintf_r+0x220>)
 8004a3c:	f7fb fbc8 	bl	80001d0 <memchr>
 8004a40:	9a04      	ldr	r2, [sp, #16]
 8004a42:	b9d8      	cbnz	r0, 8004a7c <_vfiprintf_r+0x110>
 8004a44:	06d1      	lsls	r1, r2, #27
 8004a46:	bf44      	itt	mi
 8004a48:	2320      	movmi	r3, #32
 8004a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a4e:	0713      	lsls	r3, r2, #28
 8004a50:	bf44      	itt	mi
 8004a52:	232b      	movmi	r3, #43	; 0x2b
 8004a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a58:	f89a 3000 	ldrb.w	r3, [sl]
 8004a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a5e:	d015      	beq.n	8004a8c <_vfiprintf_r+0x120>
 8004a60:	9a07      	ldr	r2, [sp, #28]
 8004a62:	4654      	mov	r4, sl
 8004a64:	2000      	movs	r0, #0
 8004a66:	f04f 0c0a 	mov.w	ip, #10
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a70:	3b30      	subs	r3, #48	; 0x30
 8004a72:	2b09      	cmp	r3, #9
 8004a74:	d94d      	bls.n	8004b12 <_vfiprintf_r+0x1a6>
 8004a76:	b1b0      	cbz	r0, 8004aa6 <_vfiprintf_r+0x13a>
 8004a78:	9207      	str	r2, [sp, #28]
 8004a7a:	e014      	b.n	8004aa6 <_vfiprintf_r+0x13a>
 8004a7c:	eba0 0308 	sub.w	r3, r0, r8
 8004a80:	fa09 f303 	lsl.w	r3, r9, r3
 8004a84:	4313      	orrs	r3, r2
 8004a86:	9304      	str	r3, [sp, #16]
 8004a88:	46a2      	mov	sl, r4
 8004a8a:	e7d2      	b.n	8004a32 <_vfiprintf_r+0xc6>
 8004a8c:	9b03      	ldr	r3, [sp, #12]
 8004a8e:	1d19      	adds	r1, r3, #4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	9103      	str	r1, [sp, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bfbb      	ittet	lt
 8004a98:	425b      	neglt	r3, r3
 8004a9a:	f042 0202 	orrlt.w	r2, r2, #2
 8004a9e:	9307      	strge	r3, [sp, #28]
 8004aa0:	9307      	strlt	r3, [sp, #28]
 8004aa2:	bfb8      	it	lt
 8004aa4:	9204      	strlt	r2, [sp, #16]
 8004aa6:	7823      	ldrb	r3, [r4, #0]
 8004aa8:	2b2e      	cmp	r3, #46	; 0x2e
 8004aaa:	d10c      	bne.n	8004ac6 <_vfiprintf_r+0x15a>
 8004aac:	7863      	ldrb	r3, [r4, #1]
 8004aae:	2b2a      	cmp	r3, #42	; 0x2a
 8004ab0:	d134      	bne.n	8004b1c <_vfiprintf_r+0x1b0>
 8004ab2:	9b03      	ldr	r3, [sp, #12]
 8004ab4:	1d1a      	adds	r2, r3, #4
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	9203      	str	r2, [sp, #12]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	bfb8      	it	lt
 8004abe:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ac2:	3402      	adds	r4, #2
 8004ac4:	9305      	str	r3, [sp, #20]
 8004ac6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004b9c <_vfiprintf_r+0x230>
 8004aca:	7821      	ldrb	r1, [r4, #0]
 8004acc:	2203      	movs	r2, #3
 8004ace:	4650      	mov	r0, sl
 8004ad0:	f7fb fb7e 	bl	80001d0 <memchr>
 8004ad4:	b138      	cbz	r0, 8004ae6 <_vfiprintf_r+0x17a>
 8004ad6:	9b04      	ldr	r3, [sp, #16]
 8004ad8:	eba0 000a 	sub.w	r0, r0, sl
 8004adc:	2240      	movs	r2, #64	; 0x40
 8004ade:	4082      	lsls	r2, r0
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	3401      	adds	r4, #1
 8004ae4:	9304      	str	r3, [sp, #16]
 8004ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aea:	4829      	ldr	r0, [pc, #164]	; (8004b90 <_vfiprintf_r+0x224>)
 8004aec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004af0:	2206      	movs	r2, #6
 8004af2:	f7fb fb6d 	bl	80001d0 <memchr>
 8004af6:	2800      	cmp	r0, #0
 8004af8:	d03f      	beq.n	8004b7a <_vfiprintf_r+0x20e>
 8004afa:	4b26      	ldr	r3, [pc, #152]	; (8004b94 <_vfiprintf_r+0x228>)
 8004afc:	bb1b      	cbnz	r3, 8004b46 <_vfiprintf_r+0x1da>
 8004afe:	9b03      	ldr	r3, [sp, #12]
 8004b00:	3307      	adds	r3, #7
 8004b02:	f023 0307 	bic.w	r3, r3, #7
 8004b06:	3308      	adds	r3, #8
 8004b08:	9303      	str	r3, [sp, #12]
 8004b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b0c:	443b      	add	r3, r7
 8004b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b10:	e768      	b.n	80049e4 <_vfiprintf_r+0x78>
 8004b12:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b16:	460c      	mov	r4, r1
 8004b18:	2001      	movs	r0, #1
 8004b1a:	e7a6      	b.n	8004a6a <_vfiprintf_r+0xfe>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	3401      	adds	r4, #1
 8004b20:	9305      	str	r3, [sp, #20]
 8004b22:	4619      	mov	r1, r3
 8004b24:	f04f 0c0a 	mov.w	ip, #10
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b2e:	3a30      	subs	r2, #48	; 0x30
 8004b30:	2a09      	cmp	r2, #9
 8004b32:	d903      	bls.n	8004b3c <_vfiprintf_r+0x1d0>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0c6      	beq.n	8004ac6 <_vfiprintf_r+0x15a>
 8004b38:	9105      	str	r1, [sp, #20]
 8004b3a:	e7c4      	b.n	8004ac6 <_vfiprintf_r+0x15a>
 8004b3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b40:	4604      	mov	r4, r0
 8004b42:	2301      	movs	r3, #1
 8004b44:	e7f0      	b.n	8004b28 <_vfiprintf_r+0x1bc>
 8004b46:	ab03      	add	r3, sp, #12
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	462a      	mov	r2, r5
 8004b4c:	4b12      	ldr	r3, [pc, #72]	; (8004b98 <_vfiprintf_r+0x22c>)
 8004b4e:	a904      	add	r1, sp, #16
 8004b50:	4630      	mov	r0, r6
 8004b52:	f3af 8000 	nop.w
 8004b56:	4607      	mov	r7, r0
 8004b58:	1c78      	adds	r0, r7, #1
 8004b5a:	d1d6      	bne.n	8004b0a <_vfiprintf_r+0x19e>
 8004b5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b5e:	07d9      	lsls	r1, r3, #31
 8004b60:	d405      	bmi.n	8004b6e <_vfiprintf_r+0x202>
 8004b62:	89ab      	ldrh	r3, [r5, #12]
 8004b64:	059a      	lsls	r2, r3, #22
 8004b66:	d402      	bmi.n	8004b6e <_vfiprintf_r+0x202>
 8004b68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b6a:	f7ff fddb 	bl	8004724 <__retarget_lock_release_recursive>
 8004b6e:	89ab      	ldrh	r3, [r5, #12]
 8004b70:	065b      	lsls	r3, r3, #25
 8004b72:	f53f af1d 	bmi.w	80049b0 <_vfiprintf_r+0x44>
 8004b76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b78:	e71c      	b.n	80049b4 <_vfiprintf_r+0x48>
 8004b7a:	ab03      	add	r3, sp, #12
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	462a      	mov	r2, r5
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <_vfiprintf_r+0x22c>)
 8004b82:	a904      	add	r1, sp, #16
 8004b84:	4630      	mov	r0, r6
 8004b86:	f000 f879 	bl	8004c7c <_printf_i>
 8004b8a:	e7e4      	b.n	8004b56 <_vfiprintf_r+0x1ea>
 8004b8c:	08006451 	.word	0x08006451
 8004b90:	0800645b 	.word	0x0800645b
 8004b94:	00000000 	.word	0x00000000
 8004b98:	08004947 	.word	0x08004947
 8004b9c:	08006457 	.word	0x08006457

08004ba0 <_printf_common>:
 8004ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba4:	4616      	mov	r6, r2
 8004ba6:	4699      	mov	r9, r3
 8004ba8:	688a      	ldr	r2, [r1, #8]
 8004baa:	690b      	ldr	r3, [r1, #16]
 8004bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	bfb8      	it	lt
 8004bb4:	4613      	movlt	r3, r2
 8004bb6:	6033      	str	r3, [r6, #0]
 8004bb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bbc:	4607      	mov	r7, r0
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	b10a      	cbz	r2, 8004bc6 <_printf_common+0x26>
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	6033      	str	r3, [r6, #0]
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	0699      	lsls	r1, r3, #26
 8004bca:	bf42      	ittt	mi
 8004bcc:	6833      	ldrmi	r3, [r6, #0]
 8004bce:	3302      	addmi	r3, #2
 8004bd0:	6033      	strmi	r3, [r6, #0]
 8004bd2:	6825      	ldr	r5, [r4, #0]
 8004bd4:	f015 0506 	ands.w	r5, r5, #6
 8004bd8:	d106      	bne.n	8004be8 <_printf_common+0x48>
 8004bda:	f104 0a19 	add.w	sl, r4, #25
 8004bde:	68e3      	ldr	r3, [r4, #12]
 8004be0:	6832      	ldr	r2, [r6, #0]
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	42ab      	cmp	r3, r5
 8004be6:	dc26      	bgt.n	8004c36 <_printf_common+0x96>
 8004be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bec:	1e13      	subs	r3, r2, #0
 8004bee:	6822      	ldr	r2, [r4, #0]
 8004bf0:	bf18      	it	ne
 8004bf2:	2301      	movne	r3, #1
 8004bf4:	0692      	lsls	r2, r2, #26
 8004bf6:	d42b      	bmi.n	8004c50 <_printf_common+0xb0>
 8004bf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	4638      	mov	r0, r7
 8004c00:	47c0      	blx	r8
 8004c02:	3001      	adds	r0, #1
 8004c04:	d01e      	beq.n	8004c44 <_printf_common+0xa4>
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	6922      	ldr	r2, [r4, #16]
 8004c0a:	f003 0306 	and.w	r3, r3, #6
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	bf02      	ittt	eq
 8004c12:	68e5      	ldreq	r5, [r4, #12]
 8004c14:	6833      	ldreq	r3, [r6, #0]
 8004c16:	1aed      	subeq	r5, r5, r3
 8004c18:	68a3      	ldr	r3, [r4, #8]
 8004c1a:	bf0c      	ite	eq
 8004c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c20:	2500      	movne	r5, #0
 8004c22:	4293      	cmp	r3, r2
 8004c24:	bfc4      	itt	gt
 8004c26:	1a9b      	subgt	r3, r3, r2
 8004c28:	18ed      	addgt	r5, r5, r3
 8004c2a:	2600      	movs	r6, #0
 8004c2c:	341a      	adds	r4, #26
 8004c2e:	42b5      	cmp	r5, r6
 8004c30:	d11a      	bne.n	8004c68 <_printf_common+0xc8>
 8004c32:	2000      	movs	r0, #0
 8004c34:	e008      	b.n	8004c48 <_printf_common+0xa8>
 8004c36:	2301      	movs	r3, #1
 8004c38:	4652      	mov	r2, sl
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	47c0      	blx	r8
 8004c40:	3001      	adds	r0, #1
 8004c42:	d103      	bne.n	8004c4c <_printf_common+0xac>
 8004c44:	f04f 30ff 	mov.w	r0, #4294967295
 8004c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c4c:	3501      	adds	r5, #1
 8004c4e:	e7c6      	b.n	8004bde <_printf_common+0x3e>
 8004c50:	18e1      	adds	r1, r4, r3
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	2030      	movs	r0, #48	; 0x30
 8004c56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c5a:	4422      	add	r2, r4
 8004c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c64:	3302      	adds	r3, #2
 8004c66:	e7c7      	b.n	8004bf8 <_printf_common+0x58>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	4649      	mov	r1, r9
 8004c6e:	4638      	mov	r0, r7
 8004c70:	47c0      	blx	r8
 8004c72:	3001      	adds	r0, #1
 8004c74:	d0e6      	beq.n	8004c44 <_printf_common+0xa4>
 8004c76:	3601      	adds	r6, #1
 8004c78:	e7d9      	b.n	8004c2e <_printf_common+0x8e>
	...

08004c7c <_printf_i>:
 8004c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c80:	7e0f      	ldrb	r7, [r1, #24]
 8004c82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c84:	2f78      	cmp	r7, #120	; 0x78
 8004c86:	4691      	mov	r9, r2
 8004c88:	4680      	mov	r8, r0
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	469a      	mov	sl, r3
 8004c8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c92:	d807      	bhi.n	8004ca4 <_printf_i+0x28>
 8004c94:	2f62      	cmp	r7, #98	; 0x62
 8004c96:	d80a      	bhi.n	8004cae <_printf_i+0x32>
 8004c98:	2f00      	cmp	r7, #0
 8004c9a:	f000 80d4 	beq.w	8004e46 <_printf_i+0x1ca>
 8004c9e:	2f58      	cmp	r7, #88	; 0x58
 8004ca0:	f000 80c0 	beq.w	8004e24 <_printf_i+0x1a8>
 8004ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cac:	e03a      	b.n	8004d24 <_printf_i+0xa8>
 8004cae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cb2:	2b15      	cmp	r3, #21
 8004cb4:	d8f6      	bhi.n	8004ca4 <_printf_i+0x28>
 8004cb6:	a101      	add	r1, pc, #4	; (adr r1, 8004cbc <_printf_i+0x40>)
 8004cb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cbc:	08004d15 	.word	0x08004d15
 8004cc0:	08004d29 	.word	0x08004d29
 8004cc4:	08004ca5 	.word	0x08004ca5
 8004cc8:	08004ca5 	.word	0x08004ca5
 8004ccc:	08004ca5 	.word	0x08004ca5
 8004cd0:	08004ca5 	.word	0x08004ca5
 8004cd4:	08004d29 	.word	0x08004d29
 8004cd8:	08004ca5 	.word	0x08004ca5
 8004cdc:	08004ca5 	.word	0x08004ca5
 8004ce0:	08004ca5 	.word	0x08004ca5
 8004ce4:	08004ca5 	.word	0x08004ca5
 8004ce8:	08004e2d 	.word	0x08004e2d
 8004cec:	08004d55 	.word	0x08004d55
 8004cf0:	08004de7 	.word	0x08004de7
 8004cf4:	08004ca5 	.word	0x08004ca5
 8004cf8:	08004ca5 	.word	0x08004ca5
 8004cfc:	08004e4f 	.word	0x08004e4f
 8004d00:	08004ca5 	.word	0x08004ca5
 8004d04:	08004d55 	.word	0x08004d55
 8004d08:	08004ca5 	.word	0x08004ca5
 8004d0c:	08004ca5 	.word	0x08004ca5
 8004d10:	08004def 	.word	0x08004def
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	1d1a      	adds	r2, r3, #4
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	602a      	str	r2, [r5, #0]
 8004d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d24:	2301      	movs	r3, #1
 8004d26:	e09f      	b.n	8004e68 <_printf_i+0x1ec>
 8004d28:	6820      	ldr	r0, [r4, #0]
 8004d2a:	682b      	ldr	r3, [r5, #0]
 8004d2c:	0607      	lsls	r7, r0, #24
 8004d2e:	f103 0104 	add.w	r1, r3, #4
 8004d32:	6029      	str	r1, [r5, #0]
 8004d34:	d501      	bpl.n	8004d3a <_printf_i+0xbe>
 8004d36:	681e      	ldr	r6, [r3, #0]
 8004d38:	e003      	b.n	8004d42 <_printf_i+0xc6>
 8004d3a:	0646      	lsls	r6, r0, #25
 8004d3c:	d5fb      	bpl.n	8004d36 <_printf_i+0xba>
 8004d3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d42:	2e00      	cmp	r6, #0
 8004d44:	da03      	bge.n	8004d4e <_printf_i+0xd2>
 8004d46:	232d      	movs	r3, #45	; 0x2d
 8004d48:	4276      	negs	r6, r6
 8004d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d4e:	485a      	ldr	r0, [pc, #360]	; (8004eb8 <_printf_i+0x23c>)
 8004d50:	230a      	movs	r3, #10
 8004d52:	e012      	b.n	8004d7a <_printf_i+0xfe>
 8004d54:	682b      	ldr	r3, [r5, #0]
 8004d56:	6820      	ldr	r0, [r4, #0]
 8004d58:	1d19      	adds	r1, r3, #4
 8004d5a:	6029      	str	r1, [r5, #0]
 8004d5c:	0605      	lsls	r5, r0, #24
 8004d5e:	d501      	bpl.n	8004d64 <_printf_i+0xe8>
 8004d60:	681e      	ldr	r6, [r3, #0]
 8004d62:	e002      	b.n	8004d6a <_printf_i+0xee>
 8004d64:	0641      	lsls	r1, r0, #25
 8004d66:	d5fb      	bpl.n	8004d60 <_printf_i+0xe4>
 8004d68:	881e      	ldrh	r6, [r3, #0]
 8004d6a:	4853      	ldr	r0, [pc, #332]	; (8004eb8 <_printf_i+0x23c>)
 8004d6c:	2f6f      	cmp	r7, #111	; 0x6f
 8004d6e:	bf0c      	ite	eq
 8004d70:	2308      	moveq	r3, #8
 8004d72:	230a      	movne	r3, #10
 8004d74:	2100      	movs	r1, #0
 8004d76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d7a:	6865      	ldr	r5, [r4, #4]
 8004d7c:	60a5      	str	r5, [r4, #8]
 8004d7e:	2d00      	cmp	r5, #0
 8004d80:	bfa2      	ittt	ge
 8004d82:	6821      	ldrge	r1, [r4, #0]
 8004d84:	f021 0104 	bicge.w	r1, r1, #4
 8004d88:	6021      	strge	r1, [r4, #0]
 8004d8a:	b90e      	cbnz	r6, 8004d90 <_printf_i+0x114>
 8004d8c:	2d00      	cmp	r5, #0
 8004d8e:	d04b      	beq.n	8004e28 <_printf_i+0x1ac>
 8004d90:	4615      	mov	r5, r2
 8004d92:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d96:	fb03 6711 	mls	r7, r3, r1, r6
 8004d9a:	5dc7      	ldrb	r7, [r0, r7]
 8004d9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004da0:	4637      	mov	r7, r6
 8004da2:	42bb      	cmp	r3, r7
 8004da4:	460e      	mov	r6, r1
 8004da6:	d9f4      	bls.n	8004d92 <_printf_i+0x116>
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d10b      	bne.n	8004dc4 <_printf_i+0x148>
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	07de      	lsls	r6, r3, #31
 8004db0:	d508      	bpl.n	8004dc4 <_printf_i+0x148>
 8004db2:	6923      	ldr	r3, [r4, #16]
 8004db4:	6861      	ldr	r1, [r4, #4]
 8004db6:	4299      	cmp	r1, r3
 8004db8:	bfde      	ittt	le
 8004dba:	2330      	movle	r3, #48	; 0x30
 8004dbc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004dc0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004dc4:	1b52      	subs	r2, r2, r5
 8004dc6:	6122      	str	r2, [r4, #16]
 8004dc8:	f8cd a000 	str.w	sl, [sp]
 8004dcc:	464b      	mov	r3, r9
 8004dce:	aa03      	add	r2, sp, #12
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	f7ff fee4 	bl	8004ba0 <_printf_common>
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d14a      	bne.n	8004e72 <_printf_i+0x1f6>
 8004ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8004de0:	b004      	add	sp, #16
 8004de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	f043 0320 	orr.w	r3, r3, #32
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	4833      	ldr	r0, [pc, #204]	; (8004ebc <_printf_i+0x240>)
 8004df0:	2778      	movs	r7, #120	; 0x78
 8004df2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	6829      	ldr	r1, [r5, #0]
 8004dfa:	061f      	lsls	r7, r3, #24
 8004dfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e00:	d402      	bmi.n	8004e08 <_printf_i+0x18c>
 8004e02:	065f      	lsls	r7, r3, #25
 8004e04:	bf48      	it	mi
 8004e06:	b2b6      	uxthmi	r6, r6
 8004e08:	07df      	lsls	r7, r3, #31
 8004e0a:	bf48      	it	mi
 8004e0c:	f043 0320 	orrmi.w	r3, r3, #32
 8004e10:	6029      	str	r1, [r5, #0]
 8004e12:	bf48      	it	mi
 8004e14:	6023      	strmi	r3, [r4, #0]
 8004e16:	b91e      	cbnz	r6, 8004e20 <_printf_i+0x1a4>
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	f023 0320 	bic.w	r3, r3, #32
 8004e1e:	6023      	str	r3, [r4, #0]
 8004e20:	2310      	movs	r3, #16
 8004e22:	e7a7      	b.n	8004d74 <_printf_i+0xf8>
 8004e24:	4824      	ldr	r0, [pc, #144]	; (8004eb8 <_printf_i+0x23c>)
 8004e26:	e7e4      	b.n	8004df2 <_printf_i+0x176>
 8004e28:	4615      	mov	r5, r2
 8004e2a:	e7bd      	b.n	8004da8 <_printf_i+0x12c>
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	6826      	ldr	r6, [r4, #0]
 8004e30:	6961      	ldr	r1, [r4, #20]
 8004e32:	1d18      	adds	r0, r3, #4
 8004e34:	6028      	str	r0, [r5, #0]
 8004e36:	0635      	lsls	r5, r6, #24
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	d501      	bpl.n	8004e40 <_printf_i+0x1c4>
 8004e3c:	6019      	str	r1, [r3, #0]
 8004e3e:	e002      	b.n	8004e46 <_printf_i+0x1ca>
 8004e40:	0670      	lsls	r0, r6, #25
 8004e42:	d5fb      	bpl.n	8004e3c <_printf_i+0x1c0>
 8004e44:	8019      	strh	r1, [r3, #0]
 8004e46:	2300      	movs	r3, #0
 8004e48:	6123      	str	r3, [r4, #16]
 8004e4a:	4615      	mov	r5, r2
 8004e4c:	e7bc      	b.n	8004dc8 <_printf_i+0x14c>
 8004e4e:	682b      	ldr	r3, [r5, #0]
 8004e50:	1d1a      	adds	r2, r3, #4
 8004e52:	602a      	str	r2, [r5, #0]
 8004e54:	681d      	ldr	r5, [r3, #0]
 8004e56:	6862      	ldr	r2, [r4, #4]
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	f7fb f9b8 	bl	80001d0 <memchr>
 8004e60:	b108      	cbz	r0, 8004e66 <_printf_i+0x1ea>
 8004e62:	1b40      	subs	r0, r0, r5
 8004e64:	6060      	str	r0, [r4, #4]
 8004e66:	6863      	ldr	r3, [r4, #4]
 8004e68:	6123      	str	r3, [r4, #16]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e70:	e7aa      	b.n	8004dc8 <_printf_i+0x14c>
 8004e72:	6923      	ldr	r3, [r4, #16]
 8004e74:	462a      	mov	r2, r5
 8004e76:	4649      	mov	r1, r9
 8004e78:	4640      	mov	r0, r8
 8004e7a:	47d0      	blx	sl
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d0ad      	beq.n	8004ddc <_printf_i+0x160>
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	079b      	lsls	r3, r3, #30
 8004e84:	d413      	bmi.n	8004eae <_printf_i+0x232>
 8004e86:	68e0      	ldr	r0, [r4, #12]
 8004e88:	9b03      	ldr	r3, [sp, #12]
 8004e8a:	4298      	cmp	r0, r3
 8004e8c:	bfb8      	it	lt
 8004e8e:	4618      	movlt	r0, r3
 8004e90:	e7a6      	b.n	8004de0 <_printf_i+0x164>
 8004e92:	2301      	movs	r3, #1
 8004e94:	4632      	mov	r2, r6
 8004e96:	4649      	mov	r1, r9
 8004e98:	4640      	mov	r0, r8
 8004e9a:	47d0      	blx	sl
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	d09d      	beq.n	8004ddc <_printf_i+0x160>
 8004ea0:	3501      	adds	r5, #1
 8004ea2:	68e3      	ldr	r3, [r4, #12]
 8004ea4:	9903      	ldr	r1, [sp, #12]
 8004ea6:	1a5b      	subs	r3, r3, r1
 8004ea8:	42ab      	cmp	r3, r5
 8004eaa:	dcf2      	bgt.n	8004e92 <_printf_i+0x216>
 8004eac:	e7eb      	b.n	8004e86 <_printf_i+0x20a>
 8004eae:	2500      	movs	r5, #0
 8004eb0:	f104 0619 	add.w	r6, r4, #25
 8004eb4:	e7f5      	b.n	8004ea2 <_printf_i+0x226>
 8004eb6:	bf00      	nop
 8004eb8:	08006462 	.word	0x08006462
 8004ebc:	08006473 	.word	0x08006473

08004ec0 <__sflush_r>:
 8004ec0:	898a      	ldrh	r2, [r1, #12]
 8004ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	0710      	lsls	r0, r2, #28
 8004eca:	460c      	mov	r4, r1
 8004ecc:	d458      	bmi.n	8004f80 <__sflush_r+0xc0>
 8004ece:	684b      	ldr	r3, [r1, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	dc05      	bgt.n	8004ee0 <__sflush_r+0x20>
 8004ed4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	dc02      	bgt.n	8004ee0 <__sflush_r+0x20>
 8004eda:	2000      	movs	r0, #0
 8004edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ee0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ee2:	2e00      	cmp	r6, #0
 8004ee4:	d0f9      	beq.n	8004eda <__sflush_r+0x1a>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004eec:	682f      	ldr	r7, [r5, #0]
 8004eee:	6a21      	ldr	r1, [r4, #32]
 8004ef0:	602b      	str	r3, [r5, #0]
 8004ef2:	d032      	beq.n	8004f5a <__sflush_r+0x9a>
 8004ef4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ef6:	89a3      	ldrh	r3, [r4, #12]
 8004ef8:	075a      	lsls	r2, r3, #29
 8004efa:	d505      	bpl.n	8004f08 <__sflush_r+0x48>
 8004efc:	6863      	ldr	r3, [r4, #4]
 8004efe:	1ac0      	subs	r0, r0, r3
 8004f00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f02:	b10b      	cbz	r3, 8004f08 <__sflush_r+0x48>
 8004f04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f06:	1ac0      	subs	r0, r0, r3
 8004f08:	2300      	movs	r3, #0
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f0e:	6a21      	ldr	r1, [r4, #32]
 8004f10:	4628      	mov	r0, r5
 8004f12:	47b0      	blx	r6
 8004f14:	1c43      	adds	r3, r0, #1
 8004f16:	89a3      	ldrh	r3, [r4, #12]
 8004f18:	d106      	bne.n	8004f28 <__sflush_r+0x68>
 8004f1a:	6829      	ldr	r1, [r5, #0]
 8004f1c:	291d      	cmp	r1, #29
 8004f1e:	d82b      	bhi.n	8004f78 <__sflush_r+0xb8>
 8004f20:	4a29      	ldr	r2, [pc, #164]	; (8004fc8 <__sflush_r+0x108>)
 8004f22:	410a      	asrs	r2, r1
 8004f24:	07d6      	lsls	r6, r2, #31
 8004f26:	d427      	bmi.n	8004f78 <__sflush_r+0xb8>
 8004f28:	2200      	movs	r2, #0
 8004f2a:	6062      	str	r2, [r4, #4]
 8004f2c:	04d9      	lsls	r1, r3, #19
 8004f2e:	6922      	ldr	r2, [r4, #16]
 8004f30:	6022      	str	r2, [r4, #0]
 8004f32:	d504      	bpl.n	8004f3e <__sflush_r+0x7e>
 8004f34:	1c42      	adds	r2, r0, #1
 8004f36:	d101      	bne.n	8004f3c <__sflush_r+0x7c>
 8004f38:	682b      	ldr	r3, [r5, #0]
 8004f3a:	b903      	cbnz	r3, 8004f3e <__sflush_r+0x7e>
 8004f3c:	6560      	str	r0, [r4, #84]	; 0x54
 8004f3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f40:	602f      	str	r7, [r5, #0]
 8004f42:	2900      	cmp	r1, #0
 8004f44:	d0c9      	beq.n	8004eda <__sflush_r+0x1a>
 8004f46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f4a:	4299      	cmp	r1, r3
 8004f4c:	d002      	beq.n	8004f54 <__sflush_r+0x94>
 8004f4e:	4628      	mov	r0, r5
 8004f50:	f7ff fbea 	bl	8004728 <_free_r>
 8004f54:	2000      	movs	r0, #0
 8004f56:	6360      	str	r0, [r4, #52]	; 0x34
 8004f58:	e7c0      	b.n	8004edc <__sflush_r+0x1c>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	47b0      	blx	r6
 8004f60:	1c41      	adds	r1, r0, #1
 8004f62:	d1c8      	bne.n	8004ef6 <__sflush_r+0x36>
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0c5      	beq.n	8004ef6 <__sflush_r+0x36>
 8004f6a:	2b1d      	cmp	r3, #29
 8004f6c:	d001      	beq.n	8004f72 <__sflush_r+0xb2>
 8004f6e:	2b16      	cmp	r3, #22
 8004f70:	d101      	bne.n	8004f76 <__sflush_r+0xb6>
 8004f72:	602f      	str	r7, [r5, #0]
 8004f74:	e7b1      	b.n	8004eda <__sflush_r+0x1a>
 8004f76:	89a3      	ldrh	r3, [r4, #12]
 8004f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f7c:	81a3      	strh	r3, [r4, #12]
 8004f7e:	e7ad      	b.n	8004edc <__sflush_r+0x1c>
 8004f80:	690f      	ldr	r7, [r1, #16]
 8004f82:	2f00      	cmp	r7, #0
 8004f84:	d0a9      	beq.n	8004eda <__sflush_r+0x1a>
 8004f86:	0793      	lsls	r3, r2, #30
 8004f88:	680e      	ldr	r6, [r1, #0]
 8004f8a:	bf08      	it	eq
 8004f8c:	694b      	ldreq	r3, [r1, #20]
 8004f8e:	600f      	str	r7, [r1, #0]
 8004f90:	bf18      	it	ne
 8004f92:	2300      	movne	r3, #0
 8004f94:	eba6 0807 	sub.w	r8, r6, r7
 8004f98:	608b      	str	r3, [r1, #8]
 8004f9a:	f1b8 0f00 	cmp.w	r8, #0
 8004f9e:	dd9c      	ble.n	8004eda <__sflush_r+0x1a>
 8004fa0:	6a21      	ldr	r1, [r4, #32]
 8004fa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004fa4:	4643      	mov	r3, r8
 8004fa6:	463a      	mov	r2, r7
 8004fa8:	4628      	mov	r0, r5
 8004faa:	47b0      	blx	r6
 8004fac:	2800      	cmp	r0, #0
 8004fae:	dc06      	bgt.n	8004fbe <__sflush_r+0xfe>
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fb6:	81a3      	strh	r3, [r4, #12]
 8004fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbc:	e78e      	b.n	8004edc <__sflush_r+0x1c>
 8004fbe:	4407      	add	r7, r0
 8004fc0:	eba8 0800 	sub.w	r8, r8, r0
 8004fc4:	e7e9      	b.n	8004f9a <__sflush_r+0xda>
 8004fc6:	bf00      	nop
 8004fc8:	dfbffffe 	.word	0xdfbffffe

08004fcc <_fflush_r>:
 8004fcc:	b538      	push	{r3, r4, r5, lr}
 8004fce:	690b      	ldr	r3, [r1, #16]
 8004fd0:	4605      	mov	r5, r0
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	b913      	cbnz	r3, 8004fdc <_fflush_r+0x10>
 8004fd6:	2500      	movs	r5, #0
 8004fd8:	4628      	mov	r0, r5
 8004fda:	bd38      	pop	{r3, r4, r5, pc}
 8004fdc:	b118      	cbz	r0, 8004fe6 <_fflush_r+0x1a>
 8004fde:	6a03      	ldr	r3, [r0, #32]
 8004fe0:	b90b      	cbnz	r3, 8004fe6 <_fflush_r+0x1a>
 8004fe2:	f7ff fa99 	bl	8004518 <__sinit>
 8004fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f3      	beq.n	8004fd6 <_fflush_r+0xa>
 8004fee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ff0:	07d0      	lsls	r0, r2, #31
 8004ff2:	d404      	bmi.n	8004ffe <_fflush_r+0x32>
 8004ff4:	0599      	lsls	r1, r3, #22
 8004ff6:	d402      	bmi.n	8004ffe <_fflush_r+0x32>
 8004ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ffa:	f7ff fb92 	bl	8004722 <__retarget_lock_acquire_recursive>
 8004ffe:	4628      	mov	r0, r5
 8005000:	4621      	mov	r1, r4
 8005002:	f7ff ff5d 	bl	8004ec0 <__sflush_r>
 8005006:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005008:	07da      	lsls	r2, r3, #31
 800500a:	4605      	mov	r5, r0
 800500c:	d4e4      	bmi.n	8004fd8 <_fflush_r+0xc>
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	059b      	lsls	r3, r3, #22
 8005012:	d4e1      	bmi.n	8004fd8 <_fflush_r+0xc>
 8005014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005016:	f7ff fb85 	bl	8004724 <__retarget_lock_release_recursive>
 800501a:	e7dd      	b.n	8004fd8 <_fflush_r+0xc>

0800501c <__swbuf_r>:
 800501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501e:	460e      	mov	r6, r1
 8005020:	4614      	mov	r4, r2
 8005022:	4605      	mov	r5, r0
 8005024:	b118      	cbz	r0, 800502e <__swbuf_r+0x12>
 8005026:	6a03      	ldr	r3, [r0, #32]
 8005028:	b90b      	cbnz	r3, 800502e <__swbuf_r+0x12>
 800502a:	f7ff fa75 	bl	8004518 <__sinit>
 800502e:	69a3      	ldr	r3, [r4, #24]
 8005030:	60a3      	str	r3, [r4, #8]
 8005032:	89a3      	ldrh	r3, [r4, #12]
 8005034:	071a      	lsls	r2, r3, #28
 8005036:	d525      	bpl.n	8005084 <__swbuf_r+0x68>
 8005038:	6923      	ldr	r3, [r4, #16]
 800503a:	b31b      	cbz	r3, 8005084 <__swbuf_r+0x68>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	6922      	ldr	r2, [r4, #16]
 8005040:	1a98      	subs	r0, r3, r2
 8005042:	6963      	ldr	r3, [r4, #20]
 8005044:	b2f6      	uxtb	r6, r6
 8005046:	4283      	cmp	r3, r0
 8005048:	4637      	mov	r7, r6
 800504a:	dc04      	bgt.n	8005056 <__swbuf_r+0x3a>
 800504c:	4621      	mov	r1, r4
 800504e:	4628      	mov	r0, r5
 8005050:	f7ff ffbc 	bl	8004fcc <_fflush_r>
 8005054:	b9e0      	cbnz	r0, 8005090 <__swbuf_r+0x74>
 8005056:	68a3      	ldr	r3, [r4, #8]
 8005058:	3b01      	subs	r3, #1
 800505a:	60a3      	str	r3, [r4, #8]
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	6022      	str	r2, [r4, #0]
 8005062:	701e      	strb	r6, [r3, #0]
 8005064:	6962      	ldr	r2, [r4, #20]
 8005066:	1c43      	adds	r3, r0, #1
 8005068:	429a      	cmp	r2, r3
 800506a:	d004      	beq.n	8005076 <__swbuf_r+0x5a>
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	07db      	lsls	r3, r3, #31
 8005070:	d506      	bpl.n	8005080 <__swbuf_r+0x64>
 8005072:	2e0a      	cmp	r6, #10
 8005074:	d104      	bne.n	8005080 <__swbuf_r+0x64>
 8005076:	4621      	mov	r1, r4
 8005078:	4628      	mov	r0, r5
 800507a:	f7ff ffa7 	bl	8004fcc <_fflush_r>
 800507e:	b938      	cbnz	r0, 8005090 <__swbuf_r+0x74>
 8005080:	4638      	mov	r0, r7
 8005082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005084:	4621      	mov	r1, r4
 8005086:	4628      	mov	r0, r5
 8005088:	f000 f806 	bl	8005098 <__swsetup_r>
 800508c:	2800      	cmp	r0, #0
 800508e:	d0d5      	beq.n	800503c <__swbuf_r+0x20>
 8005090:	f04f 37ff 	mov.w	r7, #4294967295
 8005094:	e7f4      	b.n	8005080 <__swbuf_r+0x64>
	...

08005098 <__swsetup_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	4b2a      	ldr	r3, [pc, #168]	; (8005144 <__swsetup_r+0xac>)
 800509c:	4605      	mov	r5, r0
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	460c      	mov	r4, r1
 80050a2:	b118      	cbz	r0, 80050ac <__swsetup_r+0x14>
 80050a4:	6a03      	ldr	r3, [r0, #32]
 80050a6:	b90b      	cbnz	r3, 80050ac <__swsetup_r+0x14>
 80050a8:	f7ff fa36 	bl	8004518 <__sinit>
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050b2:	0718      	lsls	r0, r3, #28
 80050b4:	d422      	bmi.n	80050fc <__swsetup_r+0x64>
 80050b6:	06d9      	lsls	r1, r3, #27
 80050b8:	d407      	bmi.n	80050ca <__swsetup_r+0x32>
 80050ba:	2309      	movs	r3, #9
 80050bc:	602b      	str	r3, [r5, #0]
 80050be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050c2:	81a3      	strh	r3, [r4, #12]
 80050c4:	f04f 30ff 	mov.w	r0, #4294967295
 80050c8:	e034      	b.n	8005134 <__swsetup_r+0x9c>
 80050ca:	0758      	lsls	r0, r3, #29
 80050cc:	d512      	bpl.n	80050f4 <__swsetup_r+0x5c>
 80050ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050d0:	b141      	cbz	r1, 80050e4 <__swsetup_r+0x4c>
 80050d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050d6:	4299      	cmp	r1, r3
 80050d8:	d002      	beq.n	80050e0 <__swsetup_r+0x48>
 80050da:	4628      	mov	r0, r5
 80050dc:	f7ff fb24 	bl	8004728 <_free_r>
 80050e0:	2300      	movs	r3, #0
 80050e2:	6363      	str	r3, [r4, #52]	; 0x34
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050ea:	81a3      	strh	r3, [r4, #12]
 80050ec:	2300      	movs	r3, #0
 80050ee:	6063      	str	r3, [r4, #4]
 80050f0:	6923      	ldr	r3, [r4, #16]
 80050f2:	6023      	str	r3, [r4, #0]
 80050f4:	89a3      	ldrh	r3, [r4, #12]
 80050f6:	f043 0308 	orr.w	r3, r3, #8
 80050fa:	81a3      	strh	r3, [r4, #12]
 80050fc:	6923      	ldr	r3, [r4, #16]
 80050fe:	b94b      	cbnz	r3, 8005114 <__swsetup_r+0x7c>
 8005100:	89a3      	ldrh	r3, [r4, #12]
 8005102:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800510a:	d003      	beq.n	8005114 <__swsetup_r+0x7c>
 800510c:	4621      	mov	r1, r4
 800510e:	4628      	mov	r0, r5
 8005110:	f000 f850 	bl	80051b4 <__smakebuf_r>
 8005114:	89a0      	ldrh	r0, [r4, #12]
 8005116:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800511a:	f010 0301 	ands.w	r3, r0, #1
 800511e:	d00a      	beq.n	8005136 <__swsetup_r+0x9e>
 8005120:	2300      	movs	r3, #0
 8005122:	60a3      	str	r3, [r4, #8]
 8005124:	6963      	ldr	r3, [r4, #20]
 8005126:	425b      	negs	r3, r3
 8005128:	61a3      	str	r3, [r4, #24]
 800512a:	6923      	ldr	r3, [r4, #16]
 800512c:	b943      	cbnz	r3, 8005140 <__swsetup_r+0xa8>
 800512e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005132:	d1c4      	bne.n	80050be <__swsetup_r+0x26>
 8005134:	bd38      	pop	{r3, r4, r5, pc}
 8005136:	0781      	lsls	r1, r0, #30
 8005138:	bf58      	it	pl
 800513a:	6963      	ldrpl	r3, [r4, #20]
 800513c:	60a3      	str	r3, [r4, #8]
 800513e:	e7f4      	b.n	800512a <__swsetup_r+0x92>
 8005140:	2000      	movs	r0, #0
 8005142:	e7f7      	b.n	8005134 <__swsetup_r+0x9c>
 8005144:	2000005c 	.word	0x2000005c

08005148 <_sbrk_r>:
 8005148:	b538      	push	{r3, r4, r5, lr}
 800514a:	4d06      	ldr	r5, [pc, #24]	; (8005164 <_sbrk_r+0x1c>)
 800514c:	2300      	movs	r3, #0
 800514e:	4604      	mov	r4, r0
 8005150:	4608      	mov	r0, r1
 8005152:	602b      	str	r3, [r5, #0]
 8005154:	f7fd fc04 	bl	8002960 <_sbrk>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d102      	bne.n	8005162 <_sbrk_r+0x1a>
 800515c:	682b      	ldr	r3, [r5, #0]
 800515e:	b103      	cbz	r3, 8005162 <_sbrk_r+0x1a>
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	bd38      	pop	{r3, r4, r5, pc}
 8005164:	20000488 	.word	0x20000488

08005168 <__swhatbuf_r>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	460c      	mov	r4, r1
 800516c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005170:	2900      	cmp	r1, #0
 8005172:	b096      	sub	sp, #88	; 0x58
 8005174:	4615      	mov	r5, r2
 8005176:	461e      	mov	r6, r3
 8005178:	da0d      	bge.n	8005196 <__swhatbuf_r+0x2e>
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005180:	f04f 0100 	mov.w	r1, #0
 8005184:	bf0c      	ite	eq
 8005186:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800518a:	2340      	movne	r3, #64	; 0x40
 800518c:	2000      	movs	r0, #0
 800518e:	6031      	str	r1, [r6, #0]
 8005190:	602b      	str	r3, [r5, #0]
 8005192:	b016      	add	sp, #88	; 0x58
 8005194:	bd70      	pop	{r4, r5, r6, pc}
 8005196:	466a      	mov	r2, sp
 8005198:	f000 f848 	bl	800522c <_fstat_r>
 800519c:	2800      	cmp	r0, #0
 800519e:	dbec      	blt.n	800517a <__swhatbuf_r+0x12>
 80051a0:	9901      	ldr	r1, [sp, #4]
 80051a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80051a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80051aa:	4259      	negs	r1, r3
 80051ac:	4159      	adcs	r1, r3
 80051ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051b2:	e7eb      	b.n	800518c <__swhatbuf_r+0x24>

080051b4 <__smakebuf_r>:
 80051b4:	898b      	ldrh	r3, [r1, #12]
 80051b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051b8:	079d      	lsls	r5, r3, #30
 80051ba:	4606      	mov	r6, r0
 80051bc:	460c      	mov	r4, r1
 80051be:	d507      	bpl.n	80051d0 <__smakebuf_r+0x1c>
 80051c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	6123      	str	r3, [r4, #16]
 80051c8:	2301      	movs	r3, #1
 80051ca:	6163      	str	r3, [r4, #20]
 80051cc:	b002      	add	sp, #8
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
 80051d0:	ab01      	add	r3, sp, #4
 80051d2:	466a      	mov	r2, sp
 80051d4:	f7ff ffc8 	bl	8005168 <__swhatbuf_r>
 80051d8:	9900      	ldr	r1, [sp, #0]
 80051da:	4605      	mov	r5, r0
 80051dc:	4630      	mov	r0, r6
 80051de:	f7ff fb0f 	bl	8004800 <_malloc_r>
 80051e2:	b948      	cbnz	r0, 80051f8 <__smakebuf_r+0x44>
 80051e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051e8:	059a      	lsls	r2, r3, #22
 80051ea:	d4ef      	bmi.n	80051cc <__smakebuf_r+0x18>
 80051ec:	f023 0303 	bic.w	r3, r3, #3
 80051f0:	f043 0302 	orr.w	r3, r3, #2
 80051f4:	81a3      	strh	r3, [r4, #12]
 80051f6:	e7e3      	b.n	80051c0 <__smakebuf_r+0xc>
 80051f8:	89a3      	ldrh	r3, [r4, #12]
 80051fa:	6020      	str	r0, [r4, #0]
 80051fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005200:	81a3      	strh	r3, [r4, #12]
 8005202:	9b00      	ldr	r3, [sp, #0]
 8005204:	6163      	str	r3, [r4, #20]
 8005206:	9b01      	ldr	r3, [sp, #4]
 8005208:	6120      	str	r0, [r4, #16]
 800520a:	b15b      	cbz	r3, 8005224 <__smakebuf_r+0x70>
 800520c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005210:	4630      	mov	r0, r6
 8005212:	f000 f81d 	bl	8005250 <_isatty_r>
 8005216:	b128      	cbz	r0, 8005224 <__smakebuf_r+0x70>
 8005218:	89a3      	ldrh	r3, [r4, #12]
 800521a:	f023 0303 	bic.w	r3, r3, #3
 800521e:	f043 0301 	orr.w	r3, r3, #1
 8005222:	81a3      	strh	r3, [r4, #12]
 8005224:	89a3      	ldrh	r3, [r4, #12]
 8005226:	431d      	orrs	r5, r3
 8005228:	81a5      	strh	r5, [r4, #12]
 800522a:	e7cf      	b.n	80051cc <__smakebuf_r+0x18>

0800522c <_fstat_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	4d07      	ldr	r5, [pc, #28]	; (800524c <_fstat_r+0x20>)
 8005230:	2300      	movs	r3, #0
 8005232:	4604      	mov	r4, r0
 8005234:	4608      	mov	r0, r1
 8005236:	4611      	mov	r1, r2
 8005238:	602b      	str	r3, [r5, #0]
 800523a:	f7fd fb68 	bl	800290e <_fstat>
 800523e:	1c43      	adds	r3, r0, #1
 8005240:	d102      	bne.n	8005248 <_fstat_r+0x1c>
 8005242:	682b      	ldr	r3, [r5, #0]
 8005244:	b103      	cbz	r3, 8005248 <_fstat_r+0x1c>
 8005246:	6023      	str	r3, [r4, #0]
 8005248:	bd38      	pop	{r3, r4, r5, pc}
 800524a:	bf00      	nop
 800524c:	20000488 	.word	0x20000488

08005250 <_isatty_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4d06      	ldr	r5, [pc, #24]	; (800526c <_isatty_r+0x1c>)
 8005254:	2300      	movs	r3, #0
 8005256:	4604      	mov	r4, r0
 8005258:	4608      	mov	r0, r1
 800525a:	602b      	str	r3, [r5, #0]
 800525c:	f7fd fb67 	bl	800292e <_isatty>
 8005260:	1c43      	adds	r3, r0, #1
 8005262:	d102      	bne.n	800526a <_isatty_r+0x1a>
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	b103      	cbz	r3, 800526a <_isatty_r+0x1a>
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	bd38      	pop	{r3, r4, r5, pc}
 800526c:	20000488 	.word	0x20000488

08005270 <tan>:
 8005270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005272:	ec53 2b10 	vmov	r2, r3, d0
 8005276:	4816      	ldr	r0, [pc, #88]	; (80052d0 <tan+0x60>)
 8005278:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800527c:	4281      	cmp	r1, r0
 800527e:	dc07      	bgt.n	8005290 <tan+0x20>
 8005280:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80052c8 <tan+0x58>
 8005284:	2001      	movs	r0, #1
 8005286:	b005      	add	sp, #20
 8005288:	f85d eb04 	ldr.w	lr, [sp], #4
 800528c:	f000 b824 	b.w	80052d8 <__kernel_tan>
 8005290:	4810      	ldr	r0, [pc, #64]	; (80052d4 <tan+0x64>)
 8005292:	4281      	cmp	r1, r0
 8005294:	dd09      	ble.n	80052aa <tan+0x3a>
 8005296:	ee10 0a10 	vmov	r0, s0
 800529a:	4619      	mov	r1, r3
 800529c:	f7fa ffec 	bl	8000278 <__aeabi_dsub>
 80052a0:	ec41 0b10 	vmov	d0, r0, r1
 80052a4:	b005      	add	sp, #20
 80052a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80052aa:	4668      	mov	r0, sp
 80052ac:	f000 fa20 	bl	80056f0 <__ieee754_rem_pio2>
 80052b0:	0040      	lsls	r0, r0, #1
 80052b2:	f000 0002 	and.w	r0, r0, #2
 80052b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80052ba:	ed9d 0b00 	vldr	d0, [sp]
 80052be:	f1c0 0001 	rsb	r0, r0, #1
 80052c2:	f000 f809 	bl	80052d8 <__kernel_tan>
 80052c6:	e7ed      	b.n	80052a4 <tan+0x34>
	...
 80052d0:	3fe921fb 	.word	0x3fe921fb
 80052d4:	7fefffff 	.word	0x7fefffff

080052d8 <__kernel_tan>:
 80052d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052dc:	ed2d 8b06 	vpush	{d8-d10}
 80052e0:	ec5b ab10 	vmov	sl, fp, d0
 80052e4:	4be0      	ldr	r3, [pc, #896]	; (8005668 <__kernel_tan+0x390>)
 80052e6:	b083      	sub	sp, #12
 80052e8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80052ec:	429f      	cmp	r7, r3
 80052ee:	ec59 8b11 	vmov	r8, r9, d1
 80052f2:	4606      	mov	r6, r0
 80052f4:	f8cd b000 	str.w	fp, [sp]
 80052f8:	dc61      	bgt.n	80053be <__kernel_tan+0xe6>
 80052fa:	ee10 0a10 	vmov	r0, s0
 80052fe:	4659      	mov	r1, fp
 8005300:	f7fb fc0c 	bl	8000b1c <__aeabi_d2iz>
 8005304:	4605      	mov	r5, r0
 8005306:	2800      	cmp	r0, #0
 8005308:	f040 8083 	bne.w	8005412 <__kernel_tan+0x13a>
 800530c:	1c73      	adds	r3, r6, #1
 800530e:	4652      	mov	r2, sl
 8005310:	4313      	orrs	r3, r2
 8005312:	433b      	orrs	r3, r7
 8005314:	d112      	bne.n	800533c <__kernel_tan+0x64>
 8005316:	ec4b ab10 	vmov	d0, sl, fp
 800531a:	f000 fbef 	bl	8005afc <fabs>
 800531e:	49d3      	ldr	r1, [pc, #844]	; (800566c <__kernel_tan+0x394>)
 8005320:	ec53 2b10 	vmov	r2, r3, d0
 8005324:	2000      	movs	r0, #0
 8005326:	f7fb fa89 	bl	800083c <__aeabi_ddiv>
 800532a:	4682      	mov	sl, r0
 800532c:	468b      	mov	fp, r1
 800532e:	ec4b ab10 	vmov	d0, sl, fp
 8005332:	b003      	add	sp, #12
 8005334:	ecbd 8b06 	vpop	{d8-d10}
 8005338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800533c:	2e01      	cmp	r6, #1
 800533e:	d0f6      	beq.n	800532e <__kernel_tan+0x56>
 8005340:	4642      	mov	r2, r8
 8005342:	464b      	mov	r3, r9
 8005344:	4650      	mov	r0, sl
 8005346:	4659      	mov	r1, fp
 8005348:	f7fa ff98 	bl	800027c <__adddf3>
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	460f      	mov	r7, r1
 8005352:	2000      	movs	r0, #0
 8005354:	49c6      	ldr	r1, [pc, #792]	; (8005670 <__kernel_tan+0x398>)
 8005356:	f7fb fa71 	bl	800083c <__aeabi_ddiv>
 800535a:	e9cd 0100 	strd	r0, r1, [sp]
 800535e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005362:	462e      	mov	r6, r5
 8005364:	4652      	mov	r2, sl
 8005366:	462c      	mov	r4, r5
 8005368:	4630      	mov	r0, r6
 800536a:	461d      	mov	r5, r3
 800536c:	4639      	mov	r1, r7
 800536e:	465b      	mov	r3, fp
 8005370:	f7fa ff82 	bl	8000278 <__aeabi_dsub>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4640      	mov	r0, r8
 800537a:	4649      	mov	r1, r9
 800537c:	f7fa ff7c 	bl	8000278 <__aeabi_dsub>
 8005380:	4632      	mov	r2, r6
 8005382:	462b      	mov	r3, r5
 8005384:	f7fb f930 	bl	80005e8 <__aeabi_dmul>
 8005388:	4632      	mov	r2, r6
 800538a:	4680      	mov	r8, r0
 800538c:	4689      	mov	r9, r1
 800538e:	462b      	mov	r3, r5
 8005390:	4630      	mov	r0, r6
 8005392:	4639      	mov	r1, r7
 8005394:	f7fb f928 	bl	80005e8 <__aeabi_dmul>
 8005398:	4bb4      	ldr	r3, [pc, #720]	; (800566c <__kernel_tan+0x394>)
 800539a:	2200      	movs	r2, #0
 800539c:	f7fa ff6e 	bl	800027c <__adddf3>
 80053a0:	4602      	mov	r2, r0
 80053a2:	460b      	mov	r3, r1
 80053a4:	4640      	mov	r0, r8
 80053a6:	4649      	mov	r1, r9
 80053a8:	f7fa ff68 	bl	800027c <__adddf3>
 80053ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053b0:	f7fb f91a 	bl	80005e8 <__aeabi_dmul>
 80053b4:	4622      	mov	r2, r4
 80053b6:	462b      	mov	r3, r5
 80053b8:	f7fa ff60 	bl	800027c <__adddf3>
 80053bc:	e7b5      	b.n	800532a <__kernel_tan+0x52>
 80053be:	4bad      	ldr	r3, [pc, #692]	; (8005674 <__kernel_tan+0x39c>)
 80053c0:	429f      	cmp	r7, r3
 80053c2:	dd26      	ble.n	8005412 <__kernel_tan+0x13a>
 80053c4:	9b00      	ldr	r3, [sp, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	da09      	bge.n	80053de <__kernel_tan+0x106>
 80053ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80053ce:	469b      	mov	fp, r3
 80053d0:	ee10 aa10 	vmov	sl, s0
 80053d4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80053d8:	ee11 8a10 	vmov	r8, s2
 80053dc:	4699      	mov	r9, r3
 80053de:	4652      	mov	r2, sl
 80053e0:	465b      	mov	r3, fp
 80053e2:	a183      	add	r1, pc, #524	; (adr r1, 80055f0 <__kernel_tan+0x318>)
 80053e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053e8:	f7fa ff46 	bl	8000278 <__aeabi_dsub>
 80053ec:	4642      	mov	r2, r8
 80053ee:	464b      	mov	r3, r9
 80053f0:	4604      	mov	r4, r0
 80053f2:	460d      	mov	r5, r1
 80053f4:	a180      	add	r1, pc, #512	; (adr r1, 80055f8 <__kernel_tan+0x320>)
 80053f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053fa:	f7fa ff3d 	bl	8000278 <__aeabi_dsub>
 80053fe:	4622      	mov	r2, r4
 8005400:	462b      	mov	r3, r5
 8005402:	f7fa ff3b 	bl	800027c <__adddf3>
 8005406:	f04f 0800 	mov.w	r8, #0
 800540a:	4682      	mov	sl, r0
 800540c:	468b      	mov	fp, r1
 800540e:	f04f 0900 	mov.w	r9, #0
 8005412:	4652      	mov	r2, sl
 8005414:	465b      	mov	r3, fp
 8005416:	4650      	mov	r0, sl
 8005418:	4659      	mov	r1, fp
 800541a:	f7fb f8e5 	bl	80005e8 <__aeabi_dmul>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	ec43 2b18 	vmov	d8, r2, r3
 8005426:	f7fb f8df 	bl	80005e8 <__aeabi_dmul>
 800542a:	ec53 2b18 	vmov	r2, r3, d8
 800542e:	4604      	mov	r4, r0
 8005430:	460d      	mov	r5, r1
 8005432:	4650      	mov	r0, sl
 8005434:	4659      	mov	r1, fp
 8005436:	f7fb f8d7 	bl	80005e8 <__aeabi_dmul>
 800543a:	a371      	add	r3, pc, #452	; (adr r3, 8005600 <__kernel_tan+0x328>)
 800543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005440:	ec41 0b19 	vmov	d9, r0, r1
 8005444:	4620      	mov	r0, r4
 8005446:	4629      	mov	r1, r5
 8005448:	f7fb f8ce 	bl	80005e8 <__aeabi_dmul>
 800544c:	a36e      	add	r3, pc, #440	; (adr r3, 8005608 <__kernel_tan+0x330>)
 800544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005452:	f7fa ff13 	bl	800027c <__adddf3>
 8005456:	4622      	mov	r2, r4
 8005458:	462b      	mov	r3, r5
 800545a:	f7fb f8c5 	bl	80005e8 <__aeabi_dmul>
 800545e:	a36c      	add	r3, pc, #432	; (adr r3, 8005610 <__kernel_tan+0x338>)
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f7fa ff0a 	bl	800027c <__adddf3>
 8005468:	4622      	mov	r2, r4
 800546a:	462b      	mov	r3, r5
 800546c:	f7fb f8bc 	bl	80005e8 <__aeabi_dmul>
 8005470:	a369      	add	r3, pc, #420	; (adr r3, 8005618 <__kernel_tan+0x340>)
 8005472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005476:	f7fa ff01 	bl	800027c <__adddf3>
 800547a:	4622      	mov	r2, r4
 800547c:	462b      	mov	r3, r5
 800547e:	f7fb f8b3 	bl	80005e8 <__aeabi_dmul>
 8005482:	a367      	add	r3, pc, #412	; (adr r3, 8005620 <__kernel_tan+0x348>)
 8005484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005488:	f7fa fef8 	bl	800027c <__adddf3>
 800548c:	4622      	mov	r2, r4
 800548e:	462b      	mov	r3, r5
 8005490:	f7fb f8aa 	bl	80005e8 <__aeabi_dmul>
 8005494:	a364      	add	r3, pc, #400	; (adr r3, 8005628 <__kernel_tan+0x350>)
 8005496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549a:	f7fa feef 	bl	800027c <__adddf3>
 800549e:	ec53 2b18 	vmov	r2, r3, d8
 80054a2:	f7fb f8a1 	bl	80005e8 <__aeabi_dmul>
 80054a6:	a362      	add	r3, pc, #392	; (adr r3, 8005630 <__kernel_tan+0x358>)
 80054a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ac:	ec41 0b1a 	vmov	d10, r0, r1
 80054b0:	4620      	mov	r0, r4
 80054b2:	4629      	mov	r1, r5
 80054b4:	f7fb f898 	bl	80005e8 <__aeabi_dmul>
 80054b8:	a35f      	add	r3, pc, #380	; (adr r3, 8005638 <__kernel_tan+0x360>)
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	f7fa fedd 	bl	800027c <__adddf3>
 80054c2:	4622      	mov	r2, r4
 80054c4:	462b      	mov	r3, r5
 80054c6:	f7fb f88f 	bl	80005e8 <__aeabi_dmul>
 80054ca:	a35d      	add	r3, pc, #372	; (adr r3, 8005640 <__kernel_tan+0x368>)
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	f7fa fed4 	bl	800027c <__adddf3>
 80054d4:	4622      	mov	r2, r4
 80054d6:	462b      	mov	r3, r5
 80054d8:	f7fb f886 	bl	80005e8 <__aeabi_dmul>
 80054dc:	a35a      	add	r3, pc, #360	; (adr r3, 8005648 <__kernel_tan+0x370>)
 80054de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e2:	f7fa fecb 	bl	800027c <__adddf3>
 80054e6:	4622      	mov	r2, r4
 80054e8:	462b      	mov	r3, r5
 80054ea:	f7fb f87d 	bl	80005e8 <__aeabi_dmul>
 80054ee:	a358      	add	r3, pc, #352	; (adr r3, 8005650 <__kernel_tan+0x378>)
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	f7fa fec2 	bl	800027c <__adddf3>
 80054f8:	4622      	mov	r2, r4
 80054fa:	462b      	mov	r3, r5
 80054fc:	f7fb f874 	bl	80005e8 <__aeabi_dmul>
 8005500:	a355      	add	r3, pc, #340	; (adr r3, 8005658 <__kernel_tan+0x380>)
 8005502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005506:	f7fa feb9 	bl	800027c <__adddf3>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	ec51 0b1a 	vmov	r0, r1, d10
 8005512:	f7fa feb3 	bl	800027c <__adddf3>
 8005516:	ec53 2b19 	vmov	r2, r3, d9
 800551a:	f7fb f865 	bl	80005e8 <__aeabi_dmul>
 800551e:	4642      	mov	r2, r8
 8005520:	464b      	mov	r3, r9
 8005522:	f7fa feab 	bl	800027c <__adddf3>
 8005526:	ec53 2b18 	vmov	r2, r3, d8
 800552a:	f7fb f85d 	bl	80005e8 <__aeabi_dmul>
 800552e:	4642      	mov	r2, r8
 8005530:	464b      	mov	r3, r9
 8005532:	f7fa fea3 	bl	800027c <__adddf3>
 8005536:	a34a      	add	r3, pc, #296	; (adr r3, 8005660 <__kernel_tan+0x388>)
 8005538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553c:	4604      	mov	r4, r0
 800553e:	460d      	mov	r5, r1
 8005540:	ec51 0b19 	vmov	r0, r1, d9
 8005544:	f7fb f850 	bl	80005e8 <__aeabi_dmul>
 8005548:	4622      	mov	r2, r4
 800554a:	462b      	mov	r3, r5
 800554c:	f7fa fe96 	bl	800027c <__adddf3>
 8005550:	460b      	mov	r3, r1
 8005552:	ec41 0b18 	vmov	d8, r0, r1
 8005556:	4602      	mov	r2, r0
 8005558:	4659      	mov	r1, fp
 800555a:	4650      	mov	r0, sl
 800555c:	f7fa fe8e 	bl	800027c <__adddf3>
 8005560:	4b44      	ldr	r3, [pc, #272]	; (8005674 <__kernel_tan+0x39c>)
 8005562:	429f      	cmp	r7, r3
 8005564:	4604      	mov	r4, r0
 8005566:	460d      	mov	r5, r1
 8005568:	f340 8086 	ble.w	8005678 <__kernel_tan+0x3a0>
 800556c:	4630      	mov	r0, r6
 800556e:	f7fa ffd1 	bl	8000514 <__aeabi_i2d>
 8005572:	4622      	mov	r2, r4
 8005574:	4680      	mov	r8, r0
 8005576:	4689      	mov	r9, r1
 8005578:	462b      	mov	r3, r5
 800557a:	4620      	mov	r0, r4
 800557c:	4629      	mov	r1, r5
 800557e:	f7fb f833 	bl	80005e8 <__aeabi_dmul>
 8005582:	4642      	mov	r2, r8
 8005584:	4606      	mov	r6, r0
 8005586:	460f      	mov	r7, r1
 8005588:	464b      	mov	r3, r9
 800558a:	4620      	mov	r0, r4
 800558c:	4629      	mov	r1, r5
 800558e:	f7fa fe75 	bl	800027c <__adddf3>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4630      	mov	r0, r6
 8005598:	4639      	mov	r1, r7
 800559a:	f7fb f94f 	bl	800083c <__aeabi_ddiv>
 800559e:	ec53 2b18 	vmov	r2, r3, d8
 80055a2:	f7fa fe69 	bl	8000278 <__aeabi_dsub>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4650      	mov	r0, sl
 80055ac:	4659      	mov	r1, fp
 80055ae:	f7fa fe63 	bl	8000278 <__aeabi_dsub>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	f7fa fe61 	bl	800027c <__adddf3>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4640      	mov	r0, r8
 80055c0:	4649      	mov	r1, r9
 80055c2:	f7fa fe59 	bl	8000278 <__aeabi_dsub>
 80055c6:	9b00      	ldr	r3, [sp, #0]
 80055c8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80055cc:	f00a 0a02 	and.w	sl, sl, #2
 80055d0:	4604      	mov	r4, r0
 80055d2:	f1ca 0001 	rsb	r0, sl, #1
 80055d6:	460d      	mov	r5, r1
 80055d8:	f7fa ff9c 	bl	8000514 <__aeabi_i2d>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	4620      	mov	r0, r4
 80055e2:	4629      	mov	r1, r5
 80055e4:	f7fb f800 	bl	80005e8 <__aeabi_dmul>
 80055e8:	e69f      	b.n	800532a <__kernel_tan+0x52>
 80055ea:	bf00      	nop
 80055ec:	f3af 8000 	nop.w
 80055f0:	54442d18 	.word	0x54442d18
 80055f4:	3fe921fb 	.word	0x3fe921fb
 80055f8:	33145c07 	.word	0x33145c07
 80055fc:	3c81a626 	.word	0x3c81a626
 8005600:	74bf7ad4 	.word	0x74bf7ad4
 8005604:	3efb2a70 	.word	0x3efb2a70
 8005608:	32f0a7e9 	.word	0x32f0a7e9
 800560c:	3f12b80f 	.word	0x3f12b80f
 8005610:	1a8d1068 	.word	0x1a8d1068
 8005614:	3f3026f7 	.word	0x3f3026f7
 8005618:	fee08315 	.word	0xfee08315
 800561c:	3f57dbc8 	.word	0x3f57dbc8
 8005620:	e96e8493 	.word	0xe96e8493
 8005624:	3f8226e3 	.word	0x3f8226e3
 8005628:	1bb341fe 	.word	0x1bb341fe
 800562c:	3faba1ba 	.word	0x3faba1ba
 8005630:	db605373 	.word	0xdb605373
 8005634:	bef375cb 	.word	0xbef375cb
 8005638:	a03792a6 	.word	0xa03792a6
 800563c:	3f147e88 	.word	0x3f147e88
 8005640:	f2f26501 	.word	0xf2f26501
 8005644:	3f4344d8 	.word	0x3f4344d8
 8005648:	c9560328 	.word	0xc9560328
 800564c:	3f6d6d22 	.word	0x3f6d6d22
 8005650:	8406d637 	.word	0x8406d637
 8005654:	3f9664f4 	.word	0x3f9664f4
 8005658:	1110fe7a 	.word	0x1110fe7a
 800565c:	3fc11111 	.word	0x3fc11111
 8005660:	55555563 	.word	0x55555563
 8005664:	3fd55555 	.word	0x3fd55555
 8005668:	3e2fffff 	.word	0x3e2fffff
 800566c:	3ff00000 	.word	0x3ff00000
 8005670:	bff00000 	.word	0xbff00000
 8005674:	3fe59427 	.word	0x3fe59427
 8005678:	2e01      	cmp	r6, #1
 800567a:	d02f      	beq.n	80056dc <__kernel_tan+0x404>
 800567c:	460f      	mov	r7, r1
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	4689      	mov	r9, r1
 8005684:	2000      	movs	r0, #0
 8005686:	4917      	ldr	r1, [pc, #92]	; (80056e4 <__kernel_tan+0x40c>)
 8005688:	f7fb f8d8 	bl	800083c <__aeabi_ddiv>
 800568c:	2600      	movs	r6, #0
 800568e:	e9cd 0100 	strd	r0, r1, [sp]
 8005692:	4652      	mov	r2, sl
 8005694:	465b      	mov	r3, fp
 8005696:	4630      	mov	r0, r6
 8005698:	4639      	mov	r1, r7
 800569a:	f7fa fded 	bl	8000278 <__aeabi_dsub>
 800569e:	e9dd 4500 	ldrd	r4, r5, [sp]
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	ec51 0b18 	vmov	r0, r1, d8
 80056aa:	f7fa fde5 	bl	8000278 <__aeabi_dsub>
 80056ae:	4632      	mov	r2, r6
 80056b0:	462b      	mov	r3, r5
 80056b2:	f7fa ff99 	bl	80005e8 <__aeabi_dmul>
 80056b6:	46b0      	mov	r8, r6
 80056b8:	460f      	mov	r7, r1
 80056ba:	4642      	mov	r2, r8
 80056bc:	462b      	mov	r3, r5
 80056be:	4634      	mov	r4, r6
 80056c0:	4649      	mov	r1, r9
 80056c2:	4606      	mov	r6, r0
 80056c4:	4640      	mov	r0, r8
 80056c6:	f7fa ff8f 	bl	80005e8 <__aeabi_dmul>
 80056ca:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <__kernel_tan+0x410>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	f7fa fdd5 	bl	800027c <__adddf3>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4630      	mov	r0, r6
 80056d8:	4639      	mov	r1, r7
 80056da:	e665      	b.n	80053a8 <__kernel_tan+0xd0>
 80056dc:	4682      	mov	sl, r0
 80056de:	468b      	mov	fp, r1
 80056e0:	e625      	b.n	800532e <__kernel_tan+0x56>
 80056e2:	bf00      	nop
 80056e4:	bff00000 	.word	0xbff00000
 80056e8:	3ff00000 	.word	0x3ff00000
 80056ec:	00000000 	.word	0x00000000

080056f0 <__ieee754_rem_pio2>:
 80056f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f4:	ed2d 8b02 	vpush	{d8}
 80056f8:	ec55 4b10 	vmov	r4, r5, d0
 80056fc:	4bca      	ldr	r3, [pc, #808]	; (8005a28 <__ieee754_rem_pio2+0x338>)
 80056fe:	b08b      	sub	sp, #44	; 0x2c
 8005700:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005704:	4598      	cmp	r8, r3
 8005706:	4682      	mov	sl, r0
 8005708:	9502      	str	r5, [sp, #8]
 800570a:	dc08      	bgt.n	800571e <__ieee754_rem_pio2+0x2e>
 800570c:	2200      	movs	r2, #0
 800570e:	2300      	movs	r3, #0
 8005710:	ed80 0b00 	vstr	d0, [r0]
 8005714:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005718:	f04f 0b00 	mov.w	fp, #0
 800571c:	e028      	b.n	8005770 <__ieee754_rem_pio2+0x80>
 800571e:	4bc3      	ldr	r3, [pc, #780]	; (8005a2c <__ieee754_rem_pio2+0x33c>)
 8005720:	4598      	cmp	r8, r3
 8005722:	dc78      	bgt.n	8005816 <__ieee754_rem_pio2+0x126>
 8005724:	9b02      	ldr	r3, [sp, #8]
 8005726:	4ec2      	ldr	r6, [pc, #776]	; (8005a30 <__ieee754_rem_pio2+0x340>)
 8005728:	2b00      	cmp	r3, #0
 800572a:	ee10 0a10 	vmov	r0, s0
 800572e:	a3b0      	add	r3, pc, #704	; (adr r3, 80059f0 <__ieee754_rem_pio2+0x300>)
 8005730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005734:	4629      	mov	r1, r5
 8005736:	dd39      	ble.n	80057ac <__ieee754_rem_pio2+0xbc>
 8005738:	f7fa fd9e 	bl	8000278 <__aeabi_dsub>
 800573c:	45b0      	cmp	r8, r6
 800573e:	4604      	mov	r4, r0
 8005740:	460d      	mov	r5, r1
 8005742:	d01b      	beq.n	800577c <__ieee754_rem_pio2+0x8c>
 8005744:	a3ac      	add	r3, pc, #688	; (adr r3, 80059f8 <__ieee754_rem_pio2+0x308>)
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	f7fa fd95 	bl	8000278 <__aeabi_dsub>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	e9ca 2300 	strd	r2, r3, [sl]
 8005756:	4620      	mov	r0, r4
 8005758:	4629      	mov	r1, r5
 800575a:	f7fa fd8d 	bl	8000278 <__aeabi_dsub>
 800575e:	a3a6      	add	r3, pc, #664	; (adr r3, 80059f8 <__ieee754_rem_pio2+0x308>)
 8005760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005764:	f7fa fd88 	bl	8000278 <__aeabi_dsub>
 8005768:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800576c:	f04f 0b01 	mov.w	fp, #1
 8005770:	4658      	mov	r0, fp
 8005772:	b00b      	add	sp, #44	; 0x2c
 8005774:	ecbd 8b02 	vpop	{d8}
 8005778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577c:	a3a0      	add	r3, pc, #640	; (adr r3, 8005a00 <__ieee754_rem_pio2+0x310>)
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	f7fa fd79 	bl	8000278 <__aeabi_dsub>
 8005786:	a3a0      	add	r3, pc, #640	; (adr r3, 8005a08 <__ieee754_rem_pio2+0x318>)
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	4604      	mov	r4, r0
 800578e:	460d      	mov	r5, r1
 8005790:	f7fa fd72 	bl	8000278 <__aeabi_dsub>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	e9ca 2300 	strd	r2, r3, [sl]
 800579c:	4620      	mov	r0, r4
 800579e:	4629      	mov	r1, r5
 80057a0:	f7fa fd6a 	bl	8000278 <__aeabi_dsub>
 80057a4:	a398      	add	r3, pc, #608	; (adr r3, 8005a08 <__ieee754_rem_pio2+0x318>)
 80057a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057aa:	e7db      	b.n	8005764 <__ieee754_rem_pio2+0x74>
 80057ac:	f7fa fd66 	bl	800027c <__adddf3>
 80057b0:	45b0      	cmp	r8, r6
 80057b2:	4604      	mov	r4, r0
 80057b4:	460d      	mov	r5, r1
 80057b6:	d016      	beq.n	80057e6 <__ieee754_rem_pio2+0xf6>
 80057b8:	a38f      	add	r3, pc, #572	; (adr r3, 80059f8 <__ieee754_rem_pio2+0x308>)
 80057ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057be:	f7fa fd5d 	bl	800027c <__adddf3>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	e9ca 2300 	strd	r2, r3, [sl]
 80057ca:	4620      	mov	r0, r4
 80057cc:	4629      	mov	r1, r5
 80057ce:	f7fa fd53 	bl	8000278 <__aeabi_dsub>
 80057d2:	a389      	add	r3, pc, #548	; (adr r3, 80059f8 <__ieee754_rem_pio2+0x308>)
 80057d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d8:	f7fa fd50 	bl	800027c <__adddf3>
 80057dc:	f04f 3bff 	mov.w	fp, #4294967295
 80057e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80057e4:	e7c4      	b.n	8005770 <__ieee754_rem_pio2+0x80>
 80057e6:	a386      	add	r3, pc, #536	; (adr r3, 8005a00 <__ieee754_rem_pio2+0x310>)
 80057e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ec:	f7fa fd46 	bl	800027c <__adddf3>
 80057f0:	a385      	add	r3, pc, #532	; (adr r3, 8005a08 <__ieee754_rem_pio2+0x318>)
 80057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f6:	4604      	mov	r4, r0
 80057f8:	460d      	mov	r5, r1
 80057fa:	f7fa fd3f 	bl	800027c <__adddf3>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	e9ca 2300 	strd	r2, r3, [sl]
 8005806:	4620      	mov	r0, r4
 8005808:	4629      	mov	r1, r5
 800580a:	f7fa fd35 	bl	8000278 <__aeabi_dsub>
 800580e:	a37e      	add	r3, pc, #504	; (adr r3, 8005a08 <__ieee754_rem_pio2+0x318>)
 8005810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005814:	e7e0      	b.n	80057d8 <__ieee754_rem_pio2+0xe8>
 8005816:	4b87      	ldr	r3, [pc, #540]	; (8005a34 <__ieee754_rem_pio2+0x344>)
 8005818:	4598      	cmp	r8, r3
 800581a:	f300 80d8 	bgt.w	80059ce <__ieee754_rem_pio2+0x2de>
 800581e:	f000 f96d 	bl	8005afc <fabs>
 8005822:	ec55 4b10 	vmov	r4, r5, d0
 8005826:	ee10 0a10 	vmov	r0, s0
 800582a:	a379      	add	r3, pc, #484	; (adr r3, 8005a10 <__ieee754_rem_pio2+0x320>)
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	4629      	mov	r1, r5
 8005832:	f7fa fed9 	bl	80005e8 <__aeabi_dmul>
 8005836:	4b80      	ldr	r3, [pc, #512]	; (8005a38 <__ieee754_rem_pio2+0x348>)
 8005838:	2200      	movs	r2, #0
 800583a:	f7fa fd1f 	bl	800027c <__adddf3>
 800583e:	f7fb f96d 	bl	8000b1c <__aeabi_d2iz>
 8005842:	4683      	mov	fp, r0
 8005844:	f7fa fe66 	bl	8000514 <__aeabi_i2d>
 8005848:	4602      	mov	r2, r0
 800584a:	460b      	mov	r3, r1
 800584c:	ec43 2b18 	vmov	d8, r2, r3
 8005850:	a367      	add	r3, pc, #412	; (adr r3, 80059f0 <__ieee754_rem_pio2+0x300>)
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	f7fa fec7 	bl	80005e8 <__aeabi_dmul>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4620      	mov	r0, r4
 8005860:	4629      	mov	r1, r5
 8005862:	f7fa fd09 	bl	8000278 <__aeabi_dsub>
 8005866:	a364      	add	r3, pc, #400	; (adr r3, 80059f8 <__ieee754_rem_pio2+0x308>)
 8005868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586c:	4606      	mov	r6, r0
 800586e:	460f      	mov	r7, r1
 8005870:	ec51 0b18 	vmov	r0, r1, d8
 8005874:	f7fa feb8 	bl	80005e8 <__aeabi_dmul>
 8005878:	f1bb 0f1f 	cmp.w	fp, #31
 800587c:	4604      	mov	r4, r0
 800587e:	460d      	mov	r5, r1
 8005880:	dc0d      	bgt.n	800589e <__ieee754_rem_pio2+0x1ae>
 8005882:	4b6e      	ldr	r3, [pc, #440]	; (8005a3c <__ieee754_rem_pio2+0x34c>)
 8005884:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800588c:	4543      	cmp	r3, r8
 800588e:	d006      	beq.n	800589e <__ieee754_rem_pio2+0x1ae>
 8005890:	4622      	mov	r2, r4
 8005892:	462b      	mov	r3, r5
 8005894:	4630      	mov	r0, r6
 8005896:	4639      	mov	r1, r7
 8005898:	f7fa fcee 	bl	8000278 <__aeabi_dsub>
 800589c:	e00e      	b.n	80058bc <__ieee754_rem_pio2+0x1cc>
 800589e:	462b      	mov	r3, r5
 80058a0:	4622      	mov	r2, r4
 80058a2:	4630      	mov	r0, r6
 80058a4:	4639      	mov	r1, r7
 80058a6:	f7fa fce7 	bl	8000278 <__aeabi_dsub>
 80058aa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80058ae:	9303      	str	r3, [sp, #12]
 80058b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80058b4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80058b8:	2b10      	cmp	r3, #16
 80058ba:	dc02      	bgt.n	80058c2 <__ieee754_rem_pio2+0x1d2>
 80058bc:	e9ca 0100 	strd	r0, r1, [sl]
 80058c0:	e039      	b.n	8005936 <__ieee754_rem_pio2+0x246>
 80058c2:	a34f      	add	r3, pc, #316	; (adr r3, 8005a00 <__ieee754_rem_pio2+0x310>)
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	ec51 0b18 	vmov	r0, r1, d8
 80058cc:	f7fa fe8c 	bl	80005e8 <__aeabi_dmul>
 80058d0:	4604      	mov	r4, r0
 80058d2:	460d      	mov	r5, r1
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4630      	mov	r0, r6
 80058da:	4639      	mov	r1, r7
 80058dc:	f7fa fccc 	bl	8000278 <__aeabi_dsub>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4680      	mov	r8, r0
 80058e6:	4689      	mov	r9, r1
 80058e8:	4630      	mov	r0, r6
 80058ea:	4639      	mov	r1, r7
 80058ec:	f7fa fcc4 	bl	8000278 <__aeabi_dsub>
 80058f0:	4622      	mov	r2, r4
 80058f2:	462b      	mov	r3, r5
 80058f4:	f7fa fcc0 	bl	8000278 <__aeabi_dsub>
 80058f8:	a343      	add	r3, pc, #268	; (adr r3, 8005a08 <__ieee754_rem_pio2+0x318>)
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	4604      	mov	r4, r0
 8005900:	460d      	mov	r5, r1
 8005902:	ec51 0b18 	vmov	r0, r1, d8
 8005906:	f7fa fe6f 	bl	80005e8 <__aeabi_dmul>
 800590a:	4622      	mov	r2, r4
 800590c:	462b      	mov	r3, r5
 800590e:	f7fa fcb3 	bl	8000278 <__aeabi_dsub>
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	4604      	mov	r4, r0
 8005918:	460d      	mov	r5, r1
 800591a:	4640      	mov	r0, r8
 800591c:	4649      	mov	r1, r9
 800591e:	f7fa fcab 	bl	8000278 <__aeabi_dsub>
 8005922:	9a03      	ldr	r2, [sp, #12]
 8005924:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b31      	cmp	r3, #49	; 0x31
 800592c:	dc24      	bgt.n	8005978 <__ieee754_rem_pio2+0x288>
 800592e:	e9ca 0100 	strd	r0, r1, [sl]
 8005932:	4646      	mov	r6, r8
 8005934:	464f      	mov	r7, r9
 8005936:	e9da 8900 	ldrd	r8, r9, [sl]
 800593a:	4630      	mov	r0, r6
 800593c:	4642      	mov	r2, r8
 800593e:	464b      	mov	r3, r9
 8005940:	4639      	mov	r1, r7
 8005942:	f7fa fc99 	bl	8000278 <__aeabi_dsub>
 8005946:	462b      	mov	r3, r5
 8005948:	4622      	mov	r2, r4
 800594a:	f7fa fc95 	bl	8000278 <__aeabi_dsub>
 800594e:	9b02      	ldr	r3, [sp, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005956:	f6bf af0b 	bge.w	8005770 <__ieee754_rem_pio2+0x80>
 800595a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800595e:	f8ca 3004 	str.w	r3, [sl, #4]
 8005962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005966:	f8ca 8000 	str.w	r8, [sl]
 800596a:	f8ca 0008 	str.w	r0, [sl, #8]
 800596e:	f8ca 300c 	str.w	r3, [sl, #12]
 8005972:	f1cb 0b00 	rsb	fp, fp, #0
 8005976:	e6fb      	b.n	8005770 <__ieee754_rem_pio2+0x80>
 8005978:	a327      	add	r3, pc, #156	; (adr r3, 8005a18 <__ieee754_rem_pio2+0x328>)
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	ec51 0b18 	vmov	r0, r1, d8
 8005982:	f7fa fe31 	bl	80005e8 <__aeabi_dmul>
 8005986:	4604      	mov	r4, r0
 8005988:	460d      	mov	r5, r1
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	4640      	mov	r0, r8
 8005990:	4649      	mov	r1, r9
 8005992:	f7fa fc71 	bl	8000278 <__aeabi_dsub>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4606      	mov	r6, r0
 800599c:	460f      	mov	r7, r1
 800599e:	4640      	mov	r0, r8
 80059a0:	4649      	mov	r1, r9
 80059a2:	f7fa fc69 	bl	8000278 <__aeabi_dsub>
 80059a6:	4622      	mov	r2, r4
 80059a8:	462b      	mov	r3, r5
 80059aa:	f7fa fc65 	bl	8000278 <__aeabi_dsub>
 80059ae:	a31c      	add	r3, pc, #112	; (adr r3, 8005a20 <__ieee754_rem_pio2+0x330>)
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	4604      	mov	r4, r0
 80059b6:	460d      	mov	r5, r1
 80059b8:	ec51 0b18 	vmov	r0, r1, d8
 80059bc:	f7fa fe14 	bl	80005e8 <__aeabi_dmul>
 80059c0:	4622      	mov	r2, r4
 80059c2:	462b      	mov	r3, r5
 80059c4:	f7fa fc58 	bl	8000278 <__aeabi_dsub>
 80059c8:	4604      	mov	r4, r0
 80059ca:	460d      	mov	r5, r1
 80059cc:	e760      	b.n	8005890 <__ieee754_rem_pio2+0x1a0>
 80059ce:	4b1c      	ldr	r3, [pc, #112]	; (8005a40 <__ieee754_rem_pio2+0x350>)
 80059d0:	4598      	cmp	r8, r3
 80059d2:	dd37      	ble.n	8005a44 <__ieee754_rem_pio2+0x354>
 80059d4:	ee10 2a10 	vmov	r2, s0
 80059d8:	462b      	mov	r3, r5
 80059da:	4620      	mov	r0, r4
 80059dc:	4629      	mov	r1, r5
 80059de:	f7fa fc4b 	bl	8000278 <__aeabi_dsub>
 80059e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80059e6:	e9ca 0100 	strd	r0, r1, [sl]
 80059ea:	e695      	b.n	8005718 <__ieee754_rem_pio2+0x28>
 80059ec:	f3af 8000 	nop.w
 80059f0:	54400000 	.word	0x54400000
 80059f4:	3ff921fb 	.word	0x3ff921fb
 80059f8:	1a626331 	.word	0x1a626331
 80059fc:	3dd0b461 	.word	0x3dd0b461
 8005a00:	1a600000 	.word	0x1a600000
 8005a04:	3dd0b461 	.word	0x3dd0b461
 8005a08:	2e037073 	.word	0x2e037073
 8005a0c:	3ba3198a 	.word	0x3ba3198a
 8005a10:	6dc9c883 	.word	0x6dc9c883
 8005a14:	3fe45f30 	.word	0x3fe45f30
 8005a18:	2e000000 	.word	0x2e000000
 8005a1c:	3ba3198a 	.word	0x3ba3198a
 8005a20:	252049c1 	.word	0x252049c1
 8005a24:	397b839a 	.word	0x397b839a
 8005a28:	3fe921fb 	.word	0x3fe921fb
 8005a2c:	4002d97b 	.word	0x4002d97b
 8005a30:	3ff921fb 	.word	0x3ff921fb
 8005a34:	413921fb 	.word	0x413921fb
 8005a38:	3fe00000 	.word	0x3fe00000
 8005a3c:	08006484 	.word	0x08006484
 8005a40:	7fefffff 	.word	0x7fefffff
 8005a44:	ea4f 5628 	mov.w	r6, r8, asr #20
 8005a48:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8005a4c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8005a50:	4620      	mov	r0, r4
 8005a52:	460d      	mov	r5, r1
 8005a54:	f7fb f862 	bl	8000b1c <__aeabi_d2iz>
 8005a58:	f7fa fd5c 	bl	8000514 <__aeabi_i2d>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4620      	mov	r0, r4
 8005a62:	4629      	mov	r1, r5
 8005a64:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a68:	f7fa fc06 	bl	8000278 <__aeabi_dsub>
 8005a6c:	4b21      	ldr	r3, [pc, #132]	; (8005af4 <__ieee754_rem_pio2+0x404>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f7fa fdba 	bl	80005e8 <__aeabi_dmul>
 8005a74:	460d      	mov	r5, r1
 8005a76:	4604      	mov	r4, r0
 8005a78:	f7fb f850 	bl	8000b1c <__aeabi_d2iz>
 8005a7c:	f7fa fd4a 	bl	8000514 <__aeabi_i2d>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4620      	mov	r0, r4
 8005a86:	4629      	mov	r1, r5
 8005a88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005a8c:	f7fa fbf4 	bl	8000278 <__aeabi_dsub>
 8005a90:	4b18      	ldr	r3, [pc, #96]	; (8005af4 <__ieee754_rem_pio2+0x404>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	f7fa fda8 	bl	80005e8 <__aeabi_dmul>
 8005a98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005a9c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8005aa0:	2703      	movs	r7, #3
 8005aa2:	2400      	movs	r4, #0
 8005aa4:	2500      	movs	r5, #0
 8005aa6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8005aaa:	4622      	mov	r2, r4
 8005aac:	462b      	mov	r3, r5
 8005aae:	46b9      	mov	r9, r7
 8005ab0:	3f01      	subs	r7, #1
 8005ab2:	f7fb f801 	bl	8000ab8 <__aeabi_dcmpeq>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d1f5      	bne.n	8005aa6 <__ieee754_rem_pio2+0x3b6>
 8005aba:	4b0f      	ldr	r3, [pc, #60]	; (8005af8 <__ieee754_rem_pio2+0x408>)
 8005abc:	9301      	str	r3, [sp, #4]
 8005abe:	2302      	movs	r3, #2
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	4632      	mov	r2, r6
 8005ac4:	464b      	mov	r3, r9
 8005ac6:	4651      	mov	r1, sl
 8005ac8:	a804      	add	r0, sp, #16
 8005aca:	f000 f821 	bl	8005b10 <__kernel_rem_pio2>
 8005ace:	9b02      	ldr	r3, [sp, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	4683      	mov	fp, r0
 8005ad4:	f6bf ae4c 	bge.w	8005770 <__ieee754_rem_pio2+0x80>
 8005ad8:	e9da 2100 	ldrd	r2, r1, [sl]
 8005adc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ae0:	e9ca 2300 	strd	r2, r3, [sl]
 8005ae4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005ae8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005aec:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005af0:	e73f      	b.n	8005972 <__ieee754_rem_pio2+0x282>
 8005af2:	bf00      	nop
 8005af4:	41700000 	.word	0x41700000
 8005af8:	08006504 	.word	0x08006504

08005afc <fabs>:
 8005afc:	ec51 0b10 	vmov	r0, r1, d0
 8005b00:	ee10 2a10 	vmov	r2, s0
 8005b04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005b08:	ec43 2b10 	vmov	d0, r2, r3
 8005b0c:	4770      	bx	lr
	...

08005b10 <__kernel_rem_pio2>:
 8005b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b14:	ed2d 8b02 	vpush	{d8}
 8005b18:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005b1c:	f112 0f14 	cmn.w	r2, #20
 8005b20:	9306      	str	r3, [sp, #24]
 8005b22:	9104      	str	r1, [sp, #16]
 8005b24:	4bc2      	ldr	r3, [pc, #776]	; (8005e30 <__kernel_rem_pio2+0x320>)
 8005b26:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005b28:	9009      	str	r0, [sp, #36]	; 0x24
 8005b2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	9b06      	ldr	r3, [sp, #24]
 8005b32:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b36:	bfa8      	it	ge
 8005b38:	1ed4      	subge	r4, r2, #3
 8005b3a:	9305      	str	r3, [sp, #20]
 8005b3c:	bfb2      	itee	lt
 8005b3e:	2400      	movlt	r4, #0
 8005b40:	2318      	movge	r3, #24
 8005b42:	fb94 f4f3 	sdivge	r4, r4, r3
 8005b46:	f06f 0317 	mvn.w	r3, #23
 8005b4a:	fb04 3303 	mla	r3, r4, r3, r3
 8005b4e:	eb03 0a02 	add.w	sl, r3, r2
 8005b52:	9b00      	ldr	r3, [sp, #0]
 8005b54:	9a05      	ldr	r2, [sp, #20]
 8005b56:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8005e20 <__kernel_rem_pio2+0x310>
 8005b5a:	eb03 0802 	add.w	r8, r3, r2
 8005b5e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005b60:	1aa7      	subs	r7, r4, r2
 8005b62:	ae20      	add	r6, sp, #128	; 0x80
 8005b64:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005b68:	2500      	movs	r5, #0
 8005b6a:	4545      	cmp	r5, r8
 8005b6c:	dd13      	ble.n	8005b96 <__kernel_rem_pio2+0x86>
 8005b6e:	9b06      	ldr	r3, [sp, #24]
 8005b70:	aa20      	add	r2, sp, #128	; 0x80
 8005b72:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005b76:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005b7a:	f04f 0800 	mov.w	r8, #0
 8005b7e:	9b00      	ldr	r3, [sp, #0]
 8005b80:	4598      	cmp	r8, r3
 8005b82:	dc31      	bgt.n	8005be8 <__kernel_rem_pio2+0xd8>
 8005b84:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8005e20 <__kernel_rem_pio2+0x310>
 8005b88:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005b8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b90:	462f      	mov	r7, r5
 8005b92:	2600      	movs	r6, #0
 8005b94:	e01b      	b.n	8005bce <__kernel_rem_pio2+0xbe>
 8005b96:	42ef      	cmn	r7, r5
 8005b98:	d407      	bmi.n	8005baa <__kernel_rem_pio2+0x9a>
 8005b9a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005b9e:	f7fa fcb9 	bl	8000514 <__aeabi_i2d>
 8005ba2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005ba6:	3501      	adds	r5, #1
 8005ba8:	e7df      	b.n	8005b6a <__kernel_rem_pio2+0x5a>
 8005baa:	ec51 0b18 	vmov	r0, r1, d8
 8005bae:	e7f8      	b.n	8005ba2 <__kernel_rem_pio2+0x92>
 8005bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bb4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005bb8:	f7fa fd16 	bl	80005e8 <__aeabi_dmul>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bc4:	f7fa fb5a 	bl	800027c <__adddf3>
 8005bc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bcc:	3601      	adds	r6, #1
 8005bce:	9b05      	ldr	r3, [sp, #20]
 8005bd0:	429e      	cmp	r6, r3
 8005bd2:	f1a7 0708 	sub.w	r7, r7, #8
 8005bd6:	ddeb      	ble.n	8005bb0 <__kernel_rem_pio2+0xa0>
 8005bd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005bdc:	f108 0801 	add.w	r8, r8, #1
 8005be0:	ecab 7b02 	vstmia	fp!, {d7}
 8005be4:	3508      	adds	r5, #8
 8005be6:	e7ca      	b.n	8005b7e <__kernel_rem_pio2+0x6e>
 8005be8:	9b00      	ldr	r3, [sp, #0]
 8005bea:	aa0c      	add	r2, sp, #48	; 0x30
 8005bec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005bf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bf2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005bf4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005bf8:	9c00      	ldr	r4, [sp, #0]
 8005bfa:	930a      	str	r3, [sp, #40]	; 0x28
 8005bfc:	00e3      	lsls	r3, r4, #3
 8005bfe:	9308      	str	r3, [sp, #32]
 8005c00:	ab98      	add	r3, sp, #608	; 0x260
 8005c02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c06:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005c0a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8005c0e:	ab70      	add	r3, sp, #448	; 0x1c0
 8005c10:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8005c14:	46c3      	mov	fp, r8
 8005c16:	46a1      	mov	r9, r4
 8005c18:	f1b9 0f00 	cmp.w	r9, #0
 8005c1c:	f1a5 0508 	sub.w	r5, r5, #8
 8005c20:	dc77      	bgt.n	8005d12 <__kernel_rem_pio2+0x202>
 8005c22:	ec47 6b10 	vmov	d0, r6, r7
 8005c26:	4650      	mov	r0, sl
 8005c28:	f000 fac2 	bl	80061b0 <scalbn>
 8005c2c:	ec57 6b10 	vmov	r6, r7, d0
 8005c30:	2200      	movs	r2, #0
 8005c32:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005c36:	ee10 0a10 	vmov	r0, s0
 8005c3a:	4639      	mov	r1, r7
 8005c3c:	f7fa fcd4 	bl	80005e8 <__aeabi_dmul>
 8005c40:	ec41 0b10 	vmov	d0, r0, r1
 8005c44:	f000 fb34 	bl	80062b0 <floor>
 8005c48:	4b7a      	ldr	r3, [pc, #488]	; (8005e34 <__kernel_rem_pio2+0x324>)
 8005c4a:	ec51 0b10 	vmov	r0, r1, d0
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f7fa fcca 	bl	80005e8 <__aeabi_dmul>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4630      	mov	r0, r6
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	f7fa fb0c 	bl	8000278 <__aeabi_dsub>
 8005c60:	460f      	mov	r7, r1
 8005c62:	4606      	mov	r6, r0
 8005c64:	f7fa ff5a 	bl	8000b1c <__aeabi_d2iz>
 8005c68:	9002      	str	r0, [sp, #8]
 8005c6a:	f7fa fc53 	bl	8000514 <__aeabi_i2d>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4630      	mov	r0, r6
 8005c74:	4639      	mov	r1, r7
 8005c76:	f7fa faff 	bl	8000278 <__aeabi_dsub>
 8005c7a:	f1ba 0f00 	cmp.w	sl, #0
 8005c7e:	4606      	mov	r6, r0
 8005c80:	460f      	mov	r7, r1
 8005c82:	dd6d      	ble.n	8005d60 <__kernel_rem_pio2+0x250>
 8005c84:	1e61      	subs	r1, r4, #1
 8005c86:	ab0c      	add	r3, sp, #48	; 0x30
 8005c88:	9d02      	ldr	r5, [sp, #8]
 8005c8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c8e:	f1ca 0018 	rsb	r0, sl, #24
 8005c92:	fa43 f200 	asr.w	r2, r3, r0
 8005c96:	4415      	add	r5, r2
 8005c98:	4082      	lsls	r2, r0
 8005c9a:	1a9b      	subs	r3, r3, r2
 8005c9c:	aa0c      	add	r2, sp, #48	; 0x30
 8005c9e:	9502      	str	r5, [sp, #8]
 8005ca0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005ca4:	f1ca 0217 	rsb	r2, sl, #23
 8005ca8:	fa43 fb02 	asr.w	fp, r3, r2
 8005cac:	f1bb 0f00 	cmp.w	fp, #0
 8005cb0:	dd65      	ble.n	8005d7e <__kernel_rem_pio2+0x26e>
 8005cb2:	9b02      	ldr	r3, [sp, #8]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	9302      	str	r3, [sp, #8]
 8005cba:	4615      	mov	r5, r2
 8005cbc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005cc0:	4294      	cmp	r4, r2
 8005cc2:	f300 809f 	bgt.w	8005e04 <__kernel_rem_pio2+0x2f4>
 8005cc6:	f1ba 0f00 	cmp.w	sl, #0
 8005cca:	dd07      	ble.n	8005cdc <__kernel_rem_pio2+0x1cc>
 8005ccc:	f1ba 0f01 	cmp.w	sl, #1
 8005cd0:	f000 80c1 	beq.w	8005e56 <__kernel_rem_pio2+0x346>
 8005cd4:	f1ba 0f02 	cmp.w	sl, #2
 8005cd8:	f000 80c7 	beq.w	8005e6a <__kernel_rem_pio2+0x35a>
 8005cdc:	f1bb 0f02 	cmp.w	fp, #2
 8005ce0:	d14d      	bne.n	8005d7e <__kernel_rem_pio2+0x26e>
 8005ce2:	4632      	mov	r2, r6
 8005ce4:	463b      	mov	r3, r7
 8005ce6:	4954      	ldr	r1, [pc, #336]	; (8005e38 <__kernel_rem_pio2+0x328>)
 8005ce8:	2000      	movs	r0, #0
 8005cea:	f7fa fac5 	bl	8000278 <__aeabi_dsub>
 8005cee:	4606      	mov	r6, r0
 8005cf0:	460f      	mov	r7, r1
 8005cf2:	2d00      	cmp	r5, #0
 8005cf4:	d043      	beq.n	8005d7e <__kernel_rem_pio2+0x26e>
 8005cf6:	4650      	mov	r0, sl
 8005cf8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8005e28 <__kernel_rem_pio2+0x318>
 8005cfc:	f000 fa58 	bl	80061b0 <scalbn>
 8005d00:	4630      	mov	r0, r6
 8005d02:	4639      	mov	r1, r7
 8005d04:	ec53 2b10 	vmov	r2, r3, d0
 8005d08:	f7fa fab6 	bl	8000278 <__aeabi_dsub>
 8005d0c:	4606      	mov	r6, r0
 8005d0e:	460f      	mov	r7, r1
 8005d10:	e035      	b.n	8005d7e <__kernel_rem_pio2+0x26e>
 8005d12:	4b4a      	ldr	r3, [pc, #296]	; (8005e3c <__kernel_rem_pio2+0x32c>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	4630      	mov	r0, r6
 8005d18:	4639      	mov	r1, r7
 8005d1a:	f7fa fc65 	bl	80005e8 <__aeabi_dmul>
 8005d1e:	f7fa fefd 	bl	8000b1c <__aeabi_d2iz>
 8005d22:	f7fa fbf7 	bl	8000514 <__aeabi_i2d>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	ec43 2b18 	vmov	d8, r2, r3
 8005d2e:	4b44      	ldr	r3, [pc, #272]	; (8005e40 <__kernel_rem_pio2+0x330>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	f7fa fc59 	bl	80005e8 <__aeabi_dmul>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	4639      	mov	r1, r7
 8005d3e:	f7fa fa9b 	bl	8000278 <__aeabi_dsub>
 8005d42:	f7fa feeb 	bl	8000b1c <__aeabi_d2iz>
 8005d46:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d4a:	f84b 0b04 	str.w	r0, [fp], #4
 8005d4e:	ec51 0b18 	vmov	r0, r1, d8
 8005d52:	f7fa fa93 	bl	800027c <__adddf3>
 8005d56:	f109 39ff 	add.w	r9, r9, #4294967295
 8005d5a:	4606      	mov	r6, r0
 8005d5c:	460f      	mov	r7, r1
 8005d5e:	e75b      	b.n	8005c18 <__kernel_rem_pio2+0x108>
 8005d60:	d106      	bne.n	8005d70 <__kernel_rem_pio2+0x260>
 8005d62:	1e63      	subs	r3, r4, #1
 8005d64:	aa0c      	add	r2, sp, #48	; 0x30
 8005d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d6a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8005d6e:	e79d      	b.n	8005cac <__kernel_rem_pio2+0x19c>
 8005d70:	4b34      	ldr	r3, [pc, #208]	; (8005e44 <__kernel_rem_pio2+0x334>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	f7fa febe 	bl	8000af4 <__aeabi_dcmpge>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	d140      	bne.n	8005dfe <__kernel_rem_pio2+0x2ee>
 8005d7c:	4683      	mov	fp, r0
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2300      	movs	r3, #0
 8005d82:	4630      	mov	r0, r6
 8005d84:	4639      	mov	r1, r7
 8005d86:	f7fa fe97 	bl	8000ab8 <__aeabi_dcmpeq>
 8005d8a:	2800      	cmp	r0, #0
 8005d8c:	f000 80c1 	beq.w	8005f12 <__kernel_rem_pio2+0x402>
 8005d90:	1e65      	subs	r5, r4, #1
 8005d92:	462b      	mov	r3, r5
 8005d94:	2200      	movs	r2, #0
 8005d96:	9900      	ldr	r1, [sp, #0]
 8005d98:	428b      	cmp	r3, r1
 8005d9a:	da6d      	bge.n	8005e78 <__kernel_rem_pio2+0x368>
 8005d9c:	2a00      	cmp	r2, #0
 8005d9e:	f000 808a 	beq.w	8005eb6 <__kernel_rem_pio2+0x3a6>
 8005da2:	ab0c      	add	r3, sp, #48	; 0x30
 8005da4:	f1aa 0a18 	sub.w	sl, sl, #24
 8005da8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80ae 	beq.w	8005f0e <__kernel_rem_pio2+0x3fe>
 8005db2:	4650      	mov	r0, sl
 8005db4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8005e28 <__kernel_rem_pio2+0x318>
 8005db8:	f000 f9fa 	bl	80061b0 <scalbn>
 8005dbc:	1c6b      	adds	r3, r5, #1
 8005dbe:	00da      	lsls	r2, r3, #3
 8005dc0:	9205      	str	r2, [sp, #20]
 8005dc2:	ec57 6b10 	vmov	r6, r7, d0
 8005dc6:	aa70      	add	r2, sp, #448	; 0x1c0
 8005dc8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8005e3c <__kernel_rem_pio2+0x32c>
 8005dcc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8005dd0:	462c      	mov	r4, r5
 8005dd2:	f04f 0800 	mov.w	r8, #0
 8005dd6:	2c00      	cmp	r4, #0
 8005dd8:	f280 80d4 	bge.w	8005f84 <__kernel_rem_pio2+0x474>
 8005ddc:	462c      	mov	r4, r5
 8005dde:	2c00      	cmp	r4, #0
 8005de0:	f2c0 8102 	blt.w	8005fe8 <__kernel_rem_pio2+0x4d8>
 8005de4:	4b18      	ldr	r3, [pc, #96]	; (8005e48 <__kernel_rem_pio2+0x338>)
 8005de6:	461e      	mov	r6, r3
 8005de8:	ab70      	add	r3, sp, #448	; 0x1c0
 8005dea:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8005dee:	1b2b      	subs	r3, r5, r4
 8005df0:	f04f 0900 	mov.w	r9, #0
 8005df4:	f04f 0a00 	mov.w	sl, #0
 8005df8:	2700      	movs	r7, #0
 8005dfa:	9306      	str	r3, [sp, #24]
 8005dfc:	e0e6      	b.n	8005fcc <__kernel_rem_pio2+0x4bc>
 8005dfe:	f04f 0b02 	mov.w	fp, #2
 8005e02:	e756      	b.n	8005cb2 <__kernel_rem_pio2+0x1a2>
 8005e04:	f8d8 3000 	ldr.w	r3, [r8]
 8005e08:	bb05      	cbnz	r5, 8005e4c <__kernel_rem_pio2+0x33c>
 8005e0a:	b123      	cbz	r3, 8005e16 <__kernel_rem_pio2+0x306>
 8005e0c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005e10:	f8c8 3000 	str.w	r3, [r8]
 8005e14:	2301      	movs	r3, #1
 8005e16:	3201      	adds	r2, #1
 8005e18:	f108 0804 	add.w	r8, r8, #4
 8005e1c:	461d      	mov	r5, r3
 8005e1e:	e74f      	b.n	8005cc0 <__kernel_rem_pio2+0x1b0>
	...
 8005e2c:	3ff00000 	.word	0x3ff00000
 8005e30:	08006650 	.word	0x08006650
 8005e34:	40200000 	.word	0x40200000
 8005e38:	3ff00000 	.word	0x3ff00000
 8005e3c:	3e700000 	.word	0x3e700000
 8005e40:	41700000 	.word	0x41700000
 8005e44:	3fe00000 	.word	0x3fe00000
 8005e48:	08006610 	.word	0x08006610
 8005e4c:	1acb      	subs	r3, r1, r3
 8005e4e:	f8c8 3000 	str.w	r3, [r8]
 8005e52:	462b      	mov	r3, r5
 8005e54:	e7df      	b.n	8005e16 <__kernel_rem_pio2+0x306>
 8005e56:	1e62      	subs	r2, r4, #1
 8005e58:	ab0c      	add	r3, sp, #48	; 0x30
 8005e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e5e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005e62:	a90c      	add	r1, sp, #48	; 0x30
 8005e64:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005e68:	e738      	b.n	8005cdc <__kernel_rem_pio2+0x1cc>
 8005e6a:	1e62      	subs	r2, r4, #1
 8005e6c:	ab0c      	add	r3, sp, #48	; 0x30
 8005e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e72:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005e76:	e7f4      	b.n	8005e62 <__kernel_rem_pio2+0x352>
 8005e78:	a90c      	add	r1, sp, #48	; 0x30
 8005e7a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	430a      	orrs	r2, r1
 8005e82:	e788      	b.n	8005d96 <__kernel_rem_pio2+0x286>
 8005e84:	3301      	adds	r3, #1
 8005e86:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005e8a:	2900      	cmp	r1, #0
 8005e8c:	d0fa      	beq.n	8005e84 <__kernel_rem_pio2+0x374>
 8005e8e:	9a08      	ldr	r2, [sp, #32]
 8005e90:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8005e94:	446a      	add	r2, sp
 8005e96:	3a98      	subs	r2, #152	; 0x98
 8005e98:	9208      	str	r2, [sp, #32]
 8005e9a:	9a06      	ldr	r2, [sp, #24]
 8005e9c:	a920      	add	r1, sp, #128	; 0x80
 8005e9e:	18a2      	adds	r2, r4, r2
 8005ea0:	18e3      	adds	r3, r4, r3
 8005ea2:	f104 0801 	add.w	r8, r4, #1
 8005ea6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8005eaa:	9302      	str	r3, [sp, #8]
 8005eac:	9b02      	ldr	r3, [sp, #8]
 8005eae:	4543      	cmp	r3, r8
 8005eb0:	da04      	bge.n	8005ebc <__kernel_rem_pio2+0x3ac>
 8005eb2:	461c      	mov	r4, r3
 8005eb4:	e6a2      	b.n	8005bfc <__kernel_rem_pio2+0xec>
 8005eb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e7e4      	b.n	8005e86 <__kernel_rem_pio2+0x376>
 8005ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ebe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005ec2:	f7fa fb27 	bl	8000514 <__aeabi_i2d>
 8005ec6:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ecc:	46ab      	mov	fp, r5
 8005ece:	461c      	mov	r4, r3
 8005ed0:	f04f 0900 	mov.w	r9, #0
 8005ed4:	2600      	movs	r6, #0
 8005ed6:	2700      	movs	r7, #0
 8005ed8:	9b05      	ldr	r3, [sp, #20]
 8005eda:	4599      	cmp	r9, r3
 8005edc:	dd06      	ble.n	8005eec <__kernel_rem_pio2+0x3dc>
 8005ede:	9b08      	ldr	r3, [sp, #32]
 8005ee0:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005ee4:	f108 0801 	add.w	r8, r8, #1
 8005ee8:	9308      	str	r3, [sp, #32]
 8005eea:	e7df      	b.n	8005eac <__kernel_rem_pio2+0x39c>
 8005eec:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005ef0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005ef4:	f7fa fb78 	bl	80005e8 <__aeabi_dmul>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4630      	mov	r0, r6
 8005efe:	4639      	mov	r1, r7
 8005f00:	f7fa f9bc 	bl	800027c <__adddf3>
 8005f04:	f109 0901 	add.w	r9, r9, #1
 8005f08:	4606      	mov	r6, r0
 8005f0a:	460f      	mov	r7, r1
 8005f0c:	e7e4      	b.n	8005ed8 <__kernel_rem_pio2+0x3c8>
 8005f0e:	3d01      	subs	r5, #1
 8005f10:	e747      	b.n	8005da2 <__kernel_rem_pio2+0x292>
 8005f12:	ec47 6b10 	vmov	d0, r6, r7
 8005f16:	f1ca 0000 	rsb	r0, sl, #0
 8005f1a:	f000 f949 	bl	80061b0 <scalbn>
 8005f1e:	ec57 6b10 	vmov	r6, r7, d0
 8005f22:	4ba0      	ldr	r3, [pc, #640]	; (80061a4 <__kernel_rem_pio2+0x694>)
 8005f24:	ee10 0a10 	vmov	r0, s0
 8005f28:	2200      	movs	r2, #0
 8005f2a:	4639      	mov	r1, r7
 8005f2c:	f7fa fde2 	bl	8000af4 <__aeabi_dcmpge>
 8005f30:	b1f8      	cbz	r0, 8005f72 <__kernel_rem_pio2+0x462>
 8005f32:	4b9d      	ldr	r3, [pc, #628]	; (80061a8 <__kernel_rem_pio2+0x698>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	4630      	mov	r0, r6
 8005f38:	4639      	mov	r1, r7
 8005f3a:	f7fa fb55 	bl	80005e8 <__aeabi_dmul>
 8005f3e:	f7fa fded 	bl	8000b1c <__aeabi_d2iz>
 8005f42:	4680      	mov	r8, r0
 8005f44:	f7fa fae6 	bl	8000514 <__aeabi_i2d>
 8005f48:	4b96      	ldr	r3, [pc, #600]	; (80061a4 <__kernel_rem_pio2+0x694>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f7fa fb4c 	bl	80005e8 <__aeabi_dmul>
 8005f50:	460b      	mov	r3, r1
 8005f52:	4602      	mov	r2, r0
 8005f54:	4639      	mov	r1, r7
 8005f56:	4630      	mov	r0, r6
 8005f58:	f7fa f98e 	bl	8000278 <__aeabi_dsub>
 8005f5c:	f7fa fdde 	bl	8000b1c <__aeabi_d2iz>
 8005f60:	1c65      	adds	r5, r4, #1
 8005f62:	ab0c      	add	r3, sp, #48	; 0x30
 8005f64:	f10a 0a18 	add.w	sl, sl, #24
 8005f68:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005f6c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005f70:	e71f      	b.n	8005db2 <__kernel_rem_pio2+0x2a2>
 8005f72:	4630      	mov	r0, r6
 8005f74:	4639      	mov	r1, r7
 8005f76:	f7fa fdd1 	bl	8000b1c <__aeabi_d2iz>
 8005f7a:	ab0c      	add	r3, sp, #48	; 0x30
 8005f7c:	4625      	mov	r5, r4
 8005f7e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005f82:	e716      	b.n	8005db2 <__kernel_rem_pio2+0x2a2>
 8005f84:	ab0c      	add	r3, sp, #48	; 0x30
 8005f86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005f8a:	f7fa fac3 	bl	8000514 <__aeabi_i2d>
 8005f8e:	4632      	mov	r2, r6
 8005f90:	463b      	mov	r3, r7
 8005f92:	f7fa fb29 	bl	80005e8 <__aeabi_dmul>
 8005f96:	4642      	mov	r2, r8
 8005f98:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005f9c:	464b      	mov	r3, r9
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	4639      	mov	r1, r7
 8005fa2:	f7fa fb21 	bl	80005e8 <__aeabi_dmul>
 8005fa6:	3c01      	subs	r4, #1
 8005fa8:	4606      	mov	r6, r0
 8005faa:	460f      	mov	r7, r1
 8005fac:	e713      	b.n	8005dd6 <__kernel_rem_pio2+0x2c6>
 8005fae:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8005fb2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8005fb6:	f7fa fb17 	bl	80005e8 <__aeabi_dmul>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4648      	mov	r0, r9
 8005fc0:	4651      	mov	r1, sl
 8005fc2:	f7fa f95b 	bl	800027c <__adddf3>
 8005fc6:	3701      	adds	r7, #1
 8005fc8:	4681      	mov	r9, r0
 8005fca:	468a      	mov	sl, r1
 8005fcc:	9b00      	ldr	r3, [sp, #0]
 8005fce:	429f      	cmp	r7, r3
 8005fd0:	dc02      	bgt.n	8005fd8 <__kernel_rem_pio2+0x4c8>
 8005fd2:	9b06      	ldr	r3, [sp, #24]
 8005fd4:	429f      	cmp	r7, r3
 8005fd6:	ddea      	ble.n	8005fae <__kernel_rem_pio2+0x49e>
 8005fd8:	9a06      	ldr	r2, [sp, #24]
 8005fda:	ab48      	add	r3, sp, #288	; 0x120
 8005fdc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8005fe0:	e9c6 9a00 	strd	r9, sl, [r6]
 8005fe4:	3c01      	subs	r4, #1
 8005fe6:	e6fa      	b.n	8005dde <__kernel_rem_pio2+0x2ce>
 8005fe8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	dc0b      	bgt.n	8006006 <__kernel_rem_pio2+0x4f6>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	dc39      	bgt.n	8006066 <__kernel_rem_pio2+0x556>
 8005ff2:	d05d      	beq.n	80060b0 <__kernel_rem_pio2+0x5a0>
 8005ff4:	9b02      	ldr	r3, [sp, #8]
 8005ff6:	f003 0007 	and.w	r0, r3, #7
 8005ffa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005ffe:	ecbd 8b02 	vpop	{d8}
 8006002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006006:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006008:	2b03      	cmp	r3, #3
 800600a:	d1f3      	bne.n	8005ff4 <__kernel_rem_pio2+0x4e4>
 800600c:	9b05      	ldr	r3, [sp, #20]
 800600e:	9500      	str	r5, [sp, #0]
 8006010:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006014:	eb0d 0403 	add.w	r4, sp, r3
 8006018:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800601c:	46a2      	mov	sl, r4
 800601e:	9b00      	ldr	r3, [sp, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	f1aa 0a08 	sub.w	sl, sl, #8
 8006026:	dc69      	bgt.n	80060fc <__kernel_rem_pio2+0x5ec>
 8006028:	46aa      	mov	sl, r5
 800602a:	f1ba 0f01 	cmp.w	sl, #1
 800602e:	f1a4 0408 	sub.w	r4, r4, #8
 8006032:	f300 8083 	bgt.w	800613c <__kernel_rem_pio2+0x62c>
 8006036:	9c05      	ldr	r4, [sp, #20]
 8006038:	ab48      	add	r3, sp, #288	; 0x120
 800603a:	441c      	add	r4, r3
 800603c:	2000      	movs	r0, #0
 800603e:	2100      	movs	r1, #0
 8006040:	2d01      	cmp	r5, #1
 8006042:	f300 809a 	bgt.w	800617a <__kernel_rem_pio2+0x66a>
 8006046:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800604a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800604e:	f1bb 0f00 	cmp.w	fp, #0
 8006052:	f040 8098 	bne.w	8006186 <__kernel_rem_pio2+0x676>
 8006056:	9b04      	ldr	r3, [sp, #16]
 8006058:	e9c3 7800 	strd	r7, r8, [r3]
 800605c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006060:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006064:	e7c6      	b.n	8005ff4 <__kernel_rem_pio2+0x4e4>
 8006066:	9e05      	ldr	r6, [sp, #20]
 8006068:	ab48      	add	r3, sp, #288	; 0x120
 800606a:	441e      	add	r6, r3
 800606c:	462c      	mov	r4, r5
 800606e:	2000      	movs	r0, #0
 8006070:	2100      	movs	r1, #0
 8006072:	2c00      	cmp	r4, #0
 8006074:	da33      	bge.n	80060de <__kernel_rem_pio2+0x5ce>
 8006076:	f1bb 0f00 	cmp.w	fp, #0
 800607a:	d036      	beq.n	80060ea <__kernel_rem_pio2+0x5da>
 800607c:	4602      	mov	r2, r0
 800607e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006082:	9c04      	ldr	r4, [sp, #16]
 8006084:	e9c4 2300 	strd	r2, r3, [r4]
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006090:	f7fa f8f2 	bl	8000278 <__aeabi_dsub>
 8006094:	ae4a      	add	r6, sp, #296	; 0x128
 8006096:	2401      	movs	r4, #1
 8006098:	42a5      	cmp	r5, r4
 800609a:	da29      	bge.n	80060f0 <__kernel_rem_pio2+0x5e0>
 800609c:	f1bb 0f00 	cmp.w	fp, #0
 80060a0:	d002      	beq.n	80060a8 <__kernel_rem_pio2+0x598>
 80060a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060a6:	4619      	mov	r1, r3
 80060a8:	9b04      	ldr	r3, [sp, #16]
 80060aa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80060ae:	e7a1      	b.n	8005ff4 <__kernel_rem_pio2+0x4e4>
 80060b0:	9c05      	ldr	r4, [sp, #20]
 80060b2:	ab48      	add	r3, sp, #288	; 0x120
 80060b4:	441c      	add	r4, r3
 80060b6:	2000      	movs	r0, #0
 80060b8:	2100      	movs	r1, #0
 80060ba:	2d00      	cmp	r5, #0
 80060bc:	da09      	bge.n	80060d2 <__kernel_rem_pio2+0x5c2>
 80060be:	f1bb 0f00 	cmp.w	fp, #0
 80060c2:	d002      	beq.n	80060ca <__kernel_rem_pio2+0x5ba>
 80060c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060c8:	4619      	mov	r1, r3
 80060ca:	9b04      	ldr	r3, [sp, #16]
 80060cc:	e9c3 0100 	strd	r0, r1, [r3]
 80060d0:	e790      	b.n	8005ff4 <__kernel_rem_pio2+0x4e4>
 80060d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80060d6:	f7fa f8d1 	bl	800027c <__adddf3>
 80060da:	3d01      	subs	r5, #1
 80060dc:	e7ed      	b.n	80060ba <__kernel_rem_pio2+0x5aa>
 80060de:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80060e2:	f7fa f8cb 	bl	800027c <__adddf3>
 80060e6:	3c01      	subs	r4, #1
 80060e8:	e7c3      	b.n	8006072 <__kernel_rem_pio2+0x562>
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	e7c8      	b.n	8006082 <__kernel_rem_pio2+0x572>
 80060f0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80060f4:	f7fa f8c2 	bl	800027c <__adddf3>
 80060f8:	3401      	adds	r4, #1
 80060fa:	e7cd      	b.n	8006098 <__kernel_rem_pio2+0x588>
 80060fc:	e9da 8900 	ldrd	r8, r9, [sl]
 8006100:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006104:	9b00      	ldr	r3, [sp, #0]
 8006106:	3b01      	subs	r3, #1
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	4632      	mov	r2, r6
 800610c:	463b      	mov	r3, r7
 800610e:	4640      	mov	r0, r8
 8006110:	4649      	mov	r1, r9
 8006112:	f7fa f8b3 	bl	800027c <__adddf3>
 8006116:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4640      	mov	r0, r8
 8006120:	4649      	mov	r1, r9
 8006122:	f7fa f8a9 	bl	8000278 <__aeabi_dsub>
 8006126:	4632      	mov	r2, r6
 8006128:	463b      	mov	r3, r7
 800612a:	f7fa f8a7 	bl	800027c <__adddf3>
 800612e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006132:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006136:	ed8a 7b00 	vstr	d7, [sl]
 800613a:	e770      	b.n	800601e <__kernel_rem_pio2+0x50e>
 800613c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006140:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006144:	4640      	mov	r0, r8
 8006146:	4632      	mov	r2, r6
 8006148:	463b      	mov	r3, r7
 800614a:	4649      	mov	r1, r9
 800614c:	f7fa f896 	bl	800027c <__adddf3>
 8006150:	e9cd 0100 	strd	r0, r1, [sp]
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	4640      	mov	r0, r8
 800615a:	4649      	mov	r1, r9
 800615c:	f7fa f88c 	bl	8000278 <__aeabi_dsub>
 8006160:	4632      	mov	r2, r6
 8006162:	463b      	mov	r3, r7
 8006164:	f7fa f88a 	bl	800027c <__adddf3>
 8006168:	ed9d 7b00 	vldr	d7, [sp]
 800616c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006170:	ed84 7b00 	vstr	d7, [r4]
 8006174:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006178:	e757      	b.n	800602a <__kernel_rem_pio2+0x51a>
 800617a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800617e:	f7fa f87d 	bl	800027c <__adddf3>
 8006182:	3d01      	subs	r5, #1
 8006184:	e75c      	b.n	8006040 <__kernel_rem_pio2+0x530>
 8006186:	9b04      	ldr	r3, [sp, #16]
 8006188:	9a04      	ldr	r2, [sp, #16]
 800618a:	601f      	str	r7, [r3, #0]
 800618c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006190:	605c      	str	r4, [r3, #4]
 8006192:	609d      	str	r5, [r3, #8]
 8006194:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006198:	60d3      	str	r3, [r2, #12]
 800619a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800619e:	6110      	str	r0, [r2, #16]
 80061a0:	6153      	str	r3, [r2, #20]
 80061a2:	e727      	b.n	8005ff4 <__kernel_rem_pio2+0x4e4>
 80061a4:	41700000 	.word	0x41700000
 80061a8:	3e700000 	.word	0x3e700000
 80061ac:	00000000 	.word	0x00000000

080061b0 <scalbn>:
 80061b0:	b570      	push	{r4, r5, r6, lr}
 80061b2:	ec55 4b10 	vmov	r4, r5, d0
 80061b6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80061ba:	4606      	mov	r6, r0
 80061bc:	462b      	mov	r3, r5
 80061be:	b999      	cbnz	r1, 80061e8 <scalbn+0x38>
 80061c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80061c4:	4323      	orrs	r3, r4
 80061c6:	d03f      	beq.n	8006248 <scalbn+0x98>
 80061c8:	4b35      	ldr	r3, [pc, #212]	; (80062a0 <scalbn+0xf0>)
 80061ca:	4629      	mov	r1, r5
 80061cc:	ee10 0a10 	vmov	r0, s0
 80061d0:	2200      	movs	r2, #0
 80061d2:	f7fa fa09 	bl	80005e8 <__aeabi_dmul>
 80061d6:	4b33      	ldr	r3, [pc, #204]	; (80062a4 <scalbn+0xf4>)
 80061d8:	429e      	cmp	r6, r3
 80061da:	4604      	mov	r4, r0
 80061dc:	460d      	mov	r5, r1
 80061de:	da10      	bge.n	8006202 <scalbn+0x52>
 80061e0:	a327      	add	r3, pc, #156	; (adr r3, 8006280 <scalbn+0xd0>)
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	e01f      	b.n	8006228 <scalbn+0x78>
 80061e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80061ec:	4291      	cmp	r1, r2
 80061ee:	d10c      	bne.n	800620a <scalbn+0x5a>
 80061f0:	ee10 2a10 	vmov	r2, s0
 80061f4:	4620      	mov	r0, r4
 80061f6:	4629      	mov	r1, r5
 80061f8:	f7fa f840 	bl	800027c <__adddf3>
 80061fc:	4604      	mov	r4, r0
 80061fe:	460d      	mov	r5, r1
 8006200:	e022      	b.n	8006248 <scalbn+0x98>
 8006202:	460b      	mov	r3, r1
 8006204:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006208:	3936      	subs	r1, #54	; 0x36
 800620a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800620e:	4296      	cmp	r6, r2
 8006210:	dd0d      	ble.n	800622e <scalbn+0x7e>
 8006212:	2d00      	cmp	r5, #0
 8006214:	a11c      	add	r1, pc, #112	; (adr r1, 8006288 <scalbn+0xd8>)
 8006216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800621a:	da02      	bge.n	8006222 <scalbn+0x72>
 800621c:	a11c      	add	r1, pc, #112	; (adr r1, 8006290 <scalbn+0xe0>)
 800621e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006222:	a319      	add	r3, pc, #100	; (adr r3, 8006288 <scalbn+0xd8>)
 8006224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006228:	f7fa f9de 	bl	80005e8 <__aeabi_dmul>
 800622c:	e7e6      	b.n	80061fc <scalbn+0x4c>
 800622e:	1872      	adds	r2, r6, r1
 8006230:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006234:	428a      	cmp	r2, r1
 8006236:	dcec      	bgt.n	8006212 <scalbn+0x62>
 8006238:	2a00      	cmp	r2, #0
 800623a:	dd08      	ble.n	800624e <scalbn+0x9e>
 800623c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006240:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006244:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006248:	ec45 4b10 	vmov	d0, r4, r5
 800624c:	bd70      	pop	{r4, r5, r6, pc}
 800624e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006252:	da08      	bge.n	8006266 <scalbn+0xb6>
 8006254:	2d00      	cmp	r5, #0
 8006256:	a10a      	add	r1, pc, #40	; (adr r1, 8006280 <scalbn+0xd0>)
 8006258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800625c:	dac0      	bge.n	80061e0 <scalbn+0x30>
 800625e:	a10e      	add	r1, pc, #56	; (adr r1, 8006298 <scalbn+0xe8>)
 8006260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006264:	e7bc      	b.n	80061e0 <scalbn+0x30>
 8006266:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800626a:	3236      	adds	r2, #54	; 0x36
 800626c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006270:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006274:	4620      	mov	r0, r4
 8006276:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <scalbn+0xf8>)
 8006278:	2200      	movs	r2, #0
 800627a:	e7d5      	b.n	8006228 <scalbn+0x78>
 800627c:	f3af 8000 	nop.w
 8006280:	c2f8f359 	.word	0xc2f8f359
 8006284:	01a56e1f 	.word	0x01a56e1f
 8006288:	8800759c 	.word	0x8800759c
 800628c:	7e37e43c 	.word	0x7e37e43c
 8006290:	8800759c 	.word	0x8800759c
 8006294:	fe37e43c 	.word	0xfe37e43c
 8006298:	c2f8f359 	.word	0xc2f8f359
 800629c:	81a56e1f 	.word	0x81a56e1f
 80062a0:	43500000 	.word	0x43500000
 80062a4:	ffff3cb0 	.word	0xffff3cb0
 80062a8:	3c900000 	.word	0x3c900000
 80062ac:	00000000 	.word	0x00000000

080062b0 <floor>:
 80062b0:	ec51 0b10 	vmov	r0, r1, d0
 80062b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80062b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062bc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80062c0:	2e13      	cmp	r6, #19
 80062c2:	ee10 5a10 	vmov	r5, s0
 80062c6:	ee10 8a10 	vmov	r8, s0
 80062ca:	460c      	mov	r4, r1
 80062cc:	dc31      	bgt.n	8006332 <floor+0x82>
 80062ce:	2e00      	cmp	r6, #0
 80062d0:	da14      	bge.n	80062fc <floor+0x4c>
 80062d2:	a333      	add	r3, pc, #204	; (adr r3, 80063a0 <floor+0xf0>)
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f7f9 ffd0 	bl	800027c <__adddf3>
 80062dc:	2200      	movs	r2, #0
 80062de:	2300      	movs	r3, #0
 80062e0:	f7fa fc12 	bl	8000b08 <__aeabi_dcmpgt>
 80062e4:	b138      	cbz	r0, 80062f6 <floor+0x46>
 80062e6:	2c00      	cmp	r4, #0
 80062e8:	da53      	bge.n	8006392 <floor+0xe2>
 80062ea:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80062ee:	4325      	orrs	r5, r4
 80062f0:	d052      	beq.n	8006398 <floor+0xe8>
 80062f2:	4c2d      	ldr	r4, [pc, #180]	; (80063a8 <floor+0xf8>)
 80062f4:	2500      	movs	r5, #0
 80062f6:	4621      	mov	r1, r4
 80062f8:	4628      	mov	r0, r5
 80062fa:	e024      	b.n	8006346 <floor+0x96>
 80062fc:	4f2b      	ldr	r7, [pc, #172]	; (80063ac <floor+0xfc>)
 80062fe:	4137      	asrs	r7, r6
 8006300:	ea01 0307 	and.w	r3, r1, r7
 8006304:	4303      	orrs	r3, r0
 8006306:	d01e      	beq.n	8006346 <floor+0x96>
 8006308:	a325      	add	r3, pc, #148	; (adr r3, 80063a0 <floor+0xf0>)
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	f7f9 ffb5 	bl	800027c <__adddf3>
 8006312:	2200      	movs	r2, #0
 8006314:	2300      	movs	r3, #0
 8006316:	f7fa fbf7 	bl	8000b08 <__aeabi_dcmpgt>
 800631a:	2800      	cmp	r0, #0
 800631c:	d0eb      	beq.n	80062f6 <floor+0x46>
 800631e:	2c00      	cmp	r4, #0
 8006320:	bfbe      	ittt	lt
 8006322:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006326:	4133      	asrlt	r3, r6
 8006328:	18e4      	addlt	r4, r4, r3
 800632a:	ea24 0407 	bic.w	r4, r4, r7
 800632e:	2500      	movs	r5, #0
 8006330:	e7e1      	b.n	80062f6 <floor+0x46>
 8006332:	2e33      	cmp	r6, #51	; 0x33
 8006334:	dd0b      	ble.n	800634e <floor+0x9e>
 8006336:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800633a:	d104      	bne.n	8006346 <floor+0x96>
 800633c:	ee10 2a10 	vmov	r2, s0
 8006340:	460b      	mov	r3, r1
 8006342:	f7f9 ff9b 	bl	800027c <__adddf3>
 8006346:	ec41 0b10 	vmov	d0, r0, r1
 800634a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800634e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006352:	f04f 37ff 	mov.w	r7, #4294967295
 8006356:	40df      	lsrs	r7, r3
 8006358:	4238      	tst	r0, r7
 800635a:	d0f4      	beq.n	8006346 <floor+0x96>
 800635c:	a310      	add	r3, pc, #64	; (adr r3, 80063a0 <floor+0xf0>)
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	f7f9 ff8b 	bl	800027c <__adddf3>
 8006366:	2200      	movs	r2, #0
 8006368:	2300      	movs	r3, #0
 800636a:	f7fa fbcd 	bl	8000b08 <__aeabi_dcmpgt>
 800636e:	2800      	cmp	r0, #0
 8006370:	d0c1      	beq.n	80062f6 <floor+0x46>
 8006372:	2c00      	cmp	r4, #0
 8006374:	da0a      	bge.n	800638c <floor+0xdc>
 8006376:	2e14      	cmp	r6, #20
 8006378:	d101      	bne.n	800637e <floor+0xce>
 800637a:	3401      	adds	r4, #1
 800637c:	e006      	b.n	800638c <floor+0xdc>
 800637e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006382:	2301      	movs	r3, #1
 8006384:	40b3      	lsls	r3, r6
 8006386:	441d      	add	r5, r3
 8006388:	45a8      	cmp	r8, r5
 800638a:	d8f6      	bhi.n	800637a <floor+0xca>
 800638c:	ea25 0507 	bic.w	r5, r5, r7
 8006390:	e7b1      	b.n	80062f6 <floor+0x46>
 8006392:	2500      	movs	r5, #0
 8006394:	462c      	mov	r4, r5
 8006396:	e7ae      	b.n	80062f6 <floor+0x46>
 8006398:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800639c:	e7ab      	b.n	80062f6 <floor+0x46>
 800639e:	bf00      	nop
 80063a0:	8800759c 	.word	0x8800759c
 80063a4:	7e37e43c 	.word	0x7e37e43c
 80063a8:	bff00000 	.word	0xbff00000
 80063ac:	000fffff 	.word	0x000fffff

080063b0 <_init>:
 80063b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b2:	bf00      	nop
 80063b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063b6:	bc08      	pop	{r3}
 80063b8:	469e      	mov	lr, r3
 80063ba:	4770      	bx	lr

080063bc <_fini>:
 80063bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063be:	bf00      	nop
 80063c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c2:	bc08      	pop	{r3}
 80063c4:	469e      	mov	lr, r3
 80063c6:	4770      	bx	lr
