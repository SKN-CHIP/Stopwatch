
Buzzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005718  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  080058a8  080058a8  000158a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005af8  08005af8  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08005af8  08005af8  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005af8  08005af8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005af8  08005af8  00015af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005afc  08005afc  00015afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  20000060  08005b60  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08005b60  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007e56  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000165a  00000000  00000000  00027f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d0  00000000  00000000  00029588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000069d  00000000  00000000  00029e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021dde  00000000  00000000  0002a4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006ee0  00000000  00000000  0004c2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b90f2  00000000  00000000  000531b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f8c  00000000  00000000  0010c2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0010f234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005890 	.word	0x08005890

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08005890 	.word	0x08005890

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	69db      	ldr	r3, [r3, #28]
 8000c58:	f003 0320 	and.w	r3, r3, #32
 8000c5c:	2b20      	cmp	r3, #32
 8000c5e:	d101      	bne.n	8000c64 <LL_USART_IsActiveFlag_RXNE+0x18>
 8000c60:	2301      	movs	r3, #1
 8000c62:	e000      	b.n	8000c66 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	b2db      	uxtb	r3, r3
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <decompose_data>:
	uint8_t value1; //minutes, diode number, flag state
	uint8_t value2; //seconds, diode color
	uint8_t check_sum;
};

void decompose_data(uint8_t message[], uint8_t length){
 8000c8e:	b480      	push	{r7}
 8000c90:	b087      	sub	sp, #28
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	460b      	mov	r3, r1
 8000c98:	70fb      	strb	r3, [r7, #3]
	struct bluetooth_data data = {0};
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
	data.check_sum = (message[length - 1] - ASCII_OFFSET) * 10; //48 = ASCII offset
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	0092      	lsls	r2, r2, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	3320      	adds	r3, #32
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	73fb      	strb	r3, [r7, #15]
	data.check_sum += message[length] - ASCII_OFFSET;
 8000cb8:	7bfa      	ldrb	r2, [r7, #15]
 8000cba:	78fb      	ldrb	r3, [r7, #3]
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	440b      	add	r3, r1
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	3b30      	subs	r3, #48	; 0x30
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	73fb      	strb	r3, [r7, #15]
	uint8_t sum = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < length - 1; ++i){
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	e00b      	b.n	8000cee <decompose_data+0x60>
		sum += message[i] - ASCII_OFFSET;
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	4413      	add	r3, r2
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	7dfb      	ldrb	r3, [r7, #23]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	3b30      	subs	r3, #48	; 0x30
 8000ce6:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < length - 1; ++i){
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	3301      	adds	r3, #1
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	78fb      	ldrb	r3, [r7, #3]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	dbee      	blt.n	8000cd6 <decompose_data+0x48>
	}
	if(data.check_sum != sum){
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	7dfa      	ldrb	r2, [r7, #23]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d142      	bne.n	8000d86 <decompose_data+0xf8>
		return;
	}
	data.device_address = message[0] - ASCII_OFFSET;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	3b30      	subs	r3, #48	; 0x30
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	733b      	strb	r3, [r7, #12]

	if(data.device_address == 1){
 8000d0a:	7b3b      	ldrb	r3, [r7, #12]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d120      	bne.n	8000d52 <decompose_data+0xc4>
		data.value1 = (message[1] - ASCII_OFFSET) * 10 + message[2] - ASCII_OFFSET;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3301      	adds	r3, #1
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	0092      	lsls	r2, r2, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3302      	adds	r3, #2
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	3b10      	subs	r3, #16
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	737b      	strb	r3, [r7, #13]
		data.value2 = (message[3] - ASCII_OFFSET) * 10 + message[4] - ASCII_OFFSET;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3303      	adds	r3, #3
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	0092      	lsls	r2, r2, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3304      	adds	r3, #4
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	3b10      	subs	r3, #16
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	73bb      	strb	r3, [r7, #14]
 8000d50:	e01c      	b.n	8000d8c <decompose_data+0xfe>
	}
	else if(data.device_address == 2){
 8000d52:	7b3b      	ldrb	r3, [r7, #12]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d10c      	bne.n	8000d72 <decompose_data+0xe4>
		data.value1 = message[1] - ASCII_OFFSET;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	3b30      	subs	r3, #48	; 0x30
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	737b      	strb	r3, [r7, #13]
		data.value2 = message[2] - ASCII_OFFSET;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3302      	adds	r3, #2
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	3b30      	subs	r3, #48	; 0x30
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	73bb      	strb	r3, [r7, #14]
 8000d70:	e00c      	b.n	8000d8c <decompose_data+0xfe>
	}
	else if(data.device_address == 3){
 8000d72:	7b3b      	ldrb	r3, [r7, #12]
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d108      	bne.n	8000d8a <decompose_data+0xfc>
		data.value1 = message[1] - ASCII_OFFSET;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	3b30      	subs	r3, #48	; 0x30
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	737b      	strb	r3, [r7, #13]
 8000d84:	e002      	b.n	8000d8c <decompose_data+0xfe>
		return;
 8000d86:	bf00      	nop
 8000d88:	e000      	b.n	8000d8c <decompose_data+0xfe>
	}
	else {
		return;
 8000d8a:	bf00      	nop
	}
}
 8000d8c:	371c      	adds	r7, #28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <usart_append>:


static void usart_append(uint8_t value){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]

	static char line_buffer_usart[LINE_MAX_LENGTH + 1];
	static uint8_t line_length_usart = 0;

	if(value == '\r')
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b0d      	cmp	r3, #13
 8000da6:	d02f      	beq.n	8000e08 <usart_append+0x70>
		return;

	if(value == '\n')
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	2b0a      	cmp	r3, #10
 8000dac:	d11a      	bne.n	8000de4 <usart_append+0x4c>
	{
		line_buffer_usart[line_length_usart] = '\0';
 8000dae:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <usart_append+0x78>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <usart_append+0x7c>)
 8000db6:	2100      	movs	r1, #0
 8000db8:	5499      	strb	r1, [r3, r2]
		printf("Received: %s\r\n", line_buffer_usart);
 8000dba:	4916      	ldr	r1, [pc, #88]	; (8000e14 <usart_append+0x7c>)
 8000dbc:	4816      	ldr	r0, [pc, #88]	; (8000e18 <usart_append+0x80>)
 8000dbe:	f002 fe51 	bl	8003a64 <iprintf>
		decompose_data((uint8_t*)line_buffer_usart, line_length_usart-1);
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <usart_append+0x78>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4811      	ldr	r0, [pc, #68]	; (8000e14 <usart_append+0x7c>)
 8000dce:	f7ff ff5e 	bl	8000c8e <decompose_data>
		memset(line_buffer_usart, '\0', LINE_MAX_LENGTH);
 8000dd2:	2232      	movs	r2, #50	; 0x32
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	480f      	ldr	r0, [pc, #60]	; (8000e14 <usart_append+0x7c>)
 8000dd8:	f002 fe99 	bl	8003b0e <memset>
		line_length_usart = 0;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <usart_append+0x78>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e012      	b.n	8000e0a <usart_append+0x72>
	}
	else
	{
		if (line_length_usart >= LINE_MAX_LENGTH) {
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <usart_append+0x78>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b31      	cmp	r3, #49	; 0x31
 8000dea:	d902      	bls.n	8000df2 <usart_append+0x5a>
			line_length_usart = 0;
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <usart_append+0x78>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
		}
		line_buffer_usart[line_length_usart++] = value;
 8000df2:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <usart_append+0x78>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	1c5a      	adds	r2, r3, #1
 8000df8:	b2d1      	uxtb	r1, r2
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <usart_append+0x78>)
 8000dfc:	7011      	strb	r1, [r2, #0]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <usart_append+0x7c>)
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	5453      	strb	r3, [r2, r1]
 8000e06:	e000      	b.n	8000e0a <usart_append+0x72>
		return;
 8000e08:	bf00      	nop
	}
}
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	2000007c 	.word	0x2000007c
 8000e14:	20000080 	.word	0x20000080
 8000e18:	080058a8 	.word	0x080058a8

08000e1c <USART1_IRQHandler>:
	num_of_byte = 0;
}


void USART1_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
	uint8_t received_byte;
	if(LL_USART_IsActiveFlag_RXNE(USART1))
 8000e22:	4809      	ldr	r0, [pc, #36]	; (8000e48 <USART1_IRQHandler+0x2c>)
 8000e24:	f7ff ff12 	bl	8000c4c <LL_USART_IsActiveFlag_RXNE>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d008      	beq.n	8000e40 <USART1_IRQHandler+0x24>
	{
	  received_byte = LL_USART_ReceiveData8(USART1);
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <USART1_IRQHandler+0x2c>)
 8000e30:	f7ff ff1f 	bl	8000c72 <LL_USART_ReceiveData8>
 8000e34:	4603      	mov	r3, r0
 8000e36:	71fb      	strb	r3, [r7, #7]
	  usart_append(received_byte);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ffac 	bl	8000d98 <usart_append>
	}
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40013800 	.word	0x40013800

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4907      	ldr	r1, [pc, #28]	; (8000ea0 <__NVIC_EnableIRQ+0x38>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f6c:	4907      	ldr	r1, [pc, #28]	; (8000f8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	40021000 	.word	0x40021000

08000f90 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000f9e:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <LL_DMA_EnableChannel+0x40>)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <LL_DMA_EnableChannel+0x40>)
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	440a      	add	r2, r1
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	440a      	add	r2, r1
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6013      	str	r3, [r2, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	080058b8 	.word	0x080058b8

08000fd4 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <LL_DMA_DisableChannel+0x40>)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4908      	ldr	r1, [pc, #32]	; (8001014 <LL_DMA_DisableChannel+0x40>)
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	440a      	add	r2, r1
 8000ff8:	7812      	ldrb	r2, [r2, #0]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	440a      	add	r2, r1
 8001000:	f023 0301 	bic.w	r3, r3, #1
 8001004:	6013      	str	r3, [r2, #0]
}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	080058b8 	.word	0x080058b8

08001018 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8001028:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <LL_DMA_SetDataTransferDirection+0x4c>)
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	4413      	add	r3, r2
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	4413      	add	r3, r2
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800103c:	f023 0310 	bic.w	r3, r3, #16
 8001040:	4908      	ldr	r1, [pc, #32]	; (8001064 <LL_DMA_SetDataTransferDirection+0x4c>)
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	440a      	add	r2, r1
 8001046:	7812      	ldrb	r2, [r2, #0]
 8001048:	4611      	mov	r1, r2
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	440a      	add	r2, r1
 800104e:	4611      	mov	r1, r2
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	4313      	orrs	r3, r2
 8001054:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8001056:	bf00      	nop
 8001058:	371c      	adds	r7, #28
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	080058b8 	.word	0x080058b8

08001068 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001068:	b480      	push	{r7}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <LL_DMA_SetMode+0x48>)
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	4413      	add	r3, r2
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f023 0220 	bic.w	r2, r3, #32
 800108c:	4908      	ldr	r1, [pc, #32]	; (80010b0 <LL_DMA_SetMode+0x48>)
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	440b      	add	r3, r1
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	440b      	add	r3, r1
 800109a:	4619      	mov	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
             Mode);
}
 80010a2:	bf00      	nop
 80010a4:	371c      	adds	r7, #28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	080058b8 	.word	0x080058b8

080010b4 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <LL_DMA_SetPeriphIncMode+0x48>)
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	4413      	add	r3, r2
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	4413      	add	r3, r2
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80010d8:	4908      	ldr	r1, [pc, #32]	; (80010fc <LL_DMA_SetPeriphIncMode+0x48>)
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	440b      	add	r3, r1
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	440b      	add	r3, r1
 80010e6:	4619      	mov	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80010ee:	bf00      	nop
 80010f0:	371c      	adds	r7, #28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	080058b8 	.word	0x080058b8

08001100 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001100:	b480      	push	{r7}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8001110:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <LL_DMA_SetMemoryIncMode+0x48>)
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	4413      	add	r3, r2
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	4413      	add	r3, r2
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001124:	4908      	ldr	r1, [pc, #32]	; (8001148 <LL_DMA_SetMemoryIncMode+0x48>)
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	440b      	add	r3, r1
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	440b      	add	r3, r1
 8001132:	4619      	mov	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4313      	orrs	r3, r2
 8001138:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800113a:	bf00      	nop
 800113c:	371c      	adds	r7, #28
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	080058b8 	.word	0x080058b8

0800114c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 800114c:	b480      	push	{r7}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <LL_DMA_SetPeriphSize+0x48>)
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	4413      	add	r3, r2
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	4413      	add	r3, r2
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001170:	4908      	ldr	r1, [pc, #32]	; (8001194 <LL_DMA_SetPeriphSize+0x48>)
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	440b      	add	r3, r1
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	440b      	add	r3, r1
 800117e:	4619      	mov	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4313      	orrs	r3, r2
 8001184:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8001186:	bf00      	nop
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	080058b8 	.word	0x080058b8

08001198 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80011a8:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <LL_DMA_SetMemorySize+0x48>)
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	4413      	add	r3, r2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	4413      	add	r3, r2
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80011bc:	4908      	ldr	r1, [pc, #32]	; (80011e0 <LL_DMA_SetMemorySize+0x48>)
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	440b      	add	r3, r1
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	440b      	add	r3, r1
 80011ca:	4619      	mov	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80011d2:	bf00      	nop
 80011d4:	371c      	adds	r7, #28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	080058b8 	.word	0x080058b8

080011e4 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b087      	sub	sp, #28
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <LL_DMA_SetChannelPriorityLevel+0x48>)
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	4413      	add	r3, r2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	4413      	add	r3, r2
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001208:	4908      	ldr	r1, [pc, #32]	; (800122c <LL_DMA_SetChannelPriorityLevel+0x48>)
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	440b      	add	r3, r1
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	440b      	add	r3, r1
 8001216:	4619      	mov	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]
             Priority);
}
 800121e:	bf00      	nop
 8001220:	371c      	adds	r7, #28
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	080058b8 	.word	0x080058b8

08001230 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <LL_DMA_SetDataLength+0x48>)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	4413      	add	r3, r2
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	4413      	add	r3, r2
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	0c1b      	lsrs	r3, r3, #16
 8001252:	041b      	lsls	r3, r3, #16
 8001254:	4908      	ldr	r1, [pc, #32]	; (8001278 <LL_DMA_SetDataLength+0x48>)
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	440a      	add	r2, r1
 800125a:	7812      	ldrb	r2, [r2, #0]
 800125c:	4611      	mov	r1, r2
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	440a      	add	r2, r1
 8001262:	4611      	mov	r1, r2
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	4313      	orrs	r3, r2
 8001268:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800126a:	bf00      	nop
 800126c:	371c      	adds	r7, #28
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	080058b8 	.word	0x080058b8

0800127c <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	2b10      	cmp	r3, #16
 8001292:	d114      	bne.n	80012be <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 8001294:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <LL_DMA_ConfigAddresses+0x78>)
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	4413      	add	r3, r2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	4413      	add	r3, r2
 80012a2:	461a      	mov	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <LL_DMA_ConfigAddresses+0x78>)
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	4413      	add	r3, r2
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	4413      	add	r3, r2
 80012b6:	461a      	mov	r2, r3
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
  }
}
 80012bc:	e013      	b.n	80012e6 <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 80012be:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <LL_DMA_ConfigAddresses+0x78>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	4413      	add	r3, r2
 80012cc:	461a      	mov	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 80012d2:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <LL_DMA_ConfigAddresses+0x78>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	4413      	add	r3, r2
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	4413      	add	r3, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	60d3      	str	r3, [r2, #12]
}
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	080058b8 	.word	0x080058b8

080012f8 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	33a8      	adds	r3, #168	; 0xa8
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	210f      	movs	r1, #15
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	401a      	ands	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	210f      	movs	r1, #15
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa93 f3a3 	rbit	r3, r3
 800132a:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <LL_DMA_SetPeriphRequest+0x42>
  {
    return 32U;
 8001336:	2320      	movs	r3, #32
 8001338:	e003      	b.n	8001342 <LL_DMA_SetPeriphRequest+0x4a>
  }
  return __builtin_clz(value);
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	fab3 f383 	clz	r3, r3
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4619      	mov	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	408b      	lsls	r3, r1
 8001348:	68f9      	ldr	r1, [r7, #12]
 800134a:	31a8      	adds	r1, #168	; 0xa8
 800134c:	4313      	orrs	r3, r2
 800134e:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << ((Channel) * 4U), PeriphRequest << DMA_POSITION_CSELR_CXS);
}
 8001350:	bf00      	nop
 8001352:	3724      	adds	r7, #36	; 0x24
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6)) ? 1UL : 0UL);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001370:	d101      	bne.n	8001376 <LL_DMA_IsActiveFlag_TC6+0x1a>
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <LL_DMA_IsActiveFlag_TC6+0x1c>
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_DMA_IsActiveFlag_TE6>:
  * @rmtoll ISR          TEIF6         LL_DMA_IsActiveFlag_TE6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE6(DMA_TypeDef *DMAx)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF6) == (DMA_ISR_TEIF6)) ? 1UL : 0UL);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001394:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001398:	d101      	bne.n	800139e <LL_DMA_IsActiveFlag_TE6+0x1a>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <LL_DMA_IsActiveFlag_TE6+0x1c>
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80013ba:	605a      	str	r2, [r3, #4]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 80013d6:	4a0c      	ldr	r2, [pc, #48]	; (8001408 <LL_DMA_EnableIT_TC+0x40>)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4908      	ldr	r1, [pc, #32]	; (8001408 <LL_DMA_EnableIT_TC+0x40>)
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	440a      	add	r2, r1
 80013ec:	7812      	ldrb	r2, [r2, #0]
 80013ee:	4611      	mov	r1, r2
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	440a      	add	r2, r1
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6013      	str	r3, [r2, #0]
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	080058b8 	.word	0x080058b8

0800140c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TEIE);
 800141a:	4a0c      	ldr	r2, [pc, #48]	; (800144c <LL_DMA_EnableIT_TE+0x40>)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	4413      	add	r3, r2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4908      	ldr	r1, [pc, #32]	; (800144c <LL_DMA_EnableIT_TE+0x40>)
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	440a      	add	r2, r1
 8001430:	7812      	ldrb	r2, [r2, #0]
 8001432:	4611      	mov	r1, r2
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	440a      	add	r2, r1
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	6013      	str	r3, [r2, #0]
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	080058b8 	.word	0x080058b8

08001450 <LL_DMA_DisableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_TCIE);
 800145e:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <LL_DMA_DisableIT_TC+0x40>)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4413      	add	r3, r2
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461a      	mov	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4413      	add	r3, r2
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <LL_DMA_DisableIT_TC+0x40>)
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	440a      	add	r2, r1
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	4611      	mov	r1, r2
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	440a      	add	r2, r1
 800147c:	f023 0302 	bic.w	r3, r3, #2
 8001480:	6013      	str	r3, [r2, #0]
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	080058b8 	.word	0x080058b8

08001494 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f043 0201 	orr.w	r2, r3, #1
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	601a      	str	r2, [r3, #0]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a1a      	ldr	r2, [r3, #32]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	621a      	str	r2, [r3, #32]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <LL_TIM_EnableDMAReq_CC1>:
  * @rmtoll DIER         CC1DE         LL_TIM_EnableDMAReq_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1DE);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	60da      	str	r2, [r3, #12]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <enable_timer3>:
 *  Created on: Mar 14, 2024
 *      Author: patry
 */
#include "main.h"

void enable_timer3(){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	LL_TIM_EnableDMAReq_CC1(TIM3);
 80014fc:	4805      	ldr	r0, [pc, #20]	; (8001514 <enable_timer3+0x1c>)
 80014fe:	f7ff ffea 	bl	80014d6 <LL_TIM_EnableDMAReq_CC1>
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 8001502:	2101      	movs	r1, #1
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <enable_timer3+0x1c>)
 8001506:	f7ff ffd5 	bl	80014b4 <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM3);
 800150a:	4802      	ldr	r0, [pc, #8]	; (8001514 <enable_timer3+0x1c>)
 800150c:	f7ff ffc2 	bl	8001494 <LL_TIM_EnableCounter>

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40000400 	.word	0x40000400

08001518 <generate_signal>:


void generate_signal(uint8_t* data, uint32_t data_length){
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af02      	add	r7, sp, #8
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
	LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6, (uint32_t)data, (uint32_t)&TIM3->CCR1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	2310      	movs	r3, #16
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <generate_signal+0x3c>)
 800152a:	2105      	movs	r1, #5
 800152c:	480a      	ldr	r0, [pc, #40]	; (8001558 <generate_signal+0x40>)
 800152e:	f7ff fea5 	bl	800127c <LL_DMA_ConfigAddresses>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, data_length);
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	2105      	movs	r1, #5
 8001536:	4808      	ldr	r0, [pc, #32]	; (8001558 <generate_signal+0x40>)
 8001538:	f7ff fe7a 	bl	8001230 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 800153c:	2105      	movs	r1, #5
 800153e:	4806      	ldr	r0, [pc, #24]	; (8001558 <generate_signal+0x40>)
 8001540:	f7ff ff42 	bl	80013c8 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001544:	2105      	movs	r1, #5
 8001546:	4804      	ldr	r0, [pc, #16]	; (8001558 <generate_signal+0x40>)
 8001548:	f7ff fd22 	bl	8000f90 <LL_DMA_EnableChannel>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40000434 	.word	0x40000434
 8001558:	40020000 	.word	0x40020000

0800155c <dma_init>:


void dma_init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001560:	2001      	movs	r0, #1
 8001562:	f7ff fcfd 	bl	8000f60 <LL_AHB1_GRP1_EnableClock>
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001566:	f7ff fc71 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 800156a:	4603      	mov	r3, r0
 800156c:	2200      	movs	r2, #0
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fcc1 	bl	8000ef8 <NVIC_EncodePriority>
 8001576:	4603      	mov	r3, r0
 8001578:	4619      	mov	r1, r3
 800157a:	2010      	movs	r0, #16
 800157c:	f7ff fc92 	bl	8000ea4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001580:	2010      	movs	r0, #16
 8001582:	f7ff fc71 	bl	8000e68 <__NVIC_EnableIRQ>

  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_6, LL_DMA_REQUEST_5);
 8001586:	2205      	movs	r2, #5
 8001588:	2105      	movs	r1, #5
 800158a:	4816      	ldr	r0, [pc, #88]	; (80015e4 <dma_init+0x88>)
 800158c:	f7ff feb4 	bl	80012f8 <LL_DMA_SetPeriphRequest>
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001590:	2210      	movs	r2, #16
 8001592:	2105      	movs	r1, #5
 8001594:	4813      	ldr	r0, [pc, #76]	; (80015e4 <dma_init+0x88>)
 8001596:	f7ff fd3f 	bl	8001018 <LL_DMA_SetDataTransferDirection>
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 800159a:	2200      	movs	r2, #0
 800159c:	2105      	movs	r1, #5
 800159e:	4811      	ldr	r0, [pc, #68]	; (80015e4 <dma_init+0x88>)
 80015a0:	f7ff fe20 	bl	80011e4 <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2105      	movs	r1, #5
 80015a8:	480e      	ldr	r0, [pc, #56]	; (80015e4 <dma_init+0x88>)
 80015aa:	f7ff fd5d 	bl	8001068 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2105      	movs	r1, #5
 80015b2:	480c      	ldr	r0, [pc, #48]	; (80015e4 <dma_init+0x88>)
 80015b4:	f7ff fd7e 	bl	80010b4 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80015b8:	2280      	movs	r2, #128	; 0x80
 80015ba:	2105      	movs	r1, #5
 80015bc:	4809      	ldr	r0, [pc, #36]	; (80015e4 <dma_init+0x88>)
 80015be:	f7ff fd9f 	bl	8001100 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_HALFWORD);
 80015c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c6:	2105      	movs	r1, #5
 80015c8:	4806      	ldr	r0, [pc, #24]	; (80015e4 <dma_init+0x88>)
 80015ca:	f7ff fdbf 	bl	800114c <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2105      	movs	r1, #5
 80015d2:	4804      	ldr	r0, [pc, #16]	; (80015e4 <dma_init+0x88>)
 80015d4:	f7ff fde0 	bl	8001198 <LL_DMA_SetMemorySize>

	LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_6);
 80015d8:	2105      	movs	r1, #5
 80015da:	4802      	ldr	r0, [pc, #8]	; (80015e4 <dma_init+0x88>)
 80015dc:	f7ff ff16 	bl	800140c <LL_DMA_EnableIT_TE>

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40020000 	.word	0x40020000

080015e8 <DMA1_Channel6_IRQHandler>:

void DMA1_Channel6_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

	if(LL_DMA_IsActiveFlag_TC6(DMA1) == 1)
 80015ec:	480b      	ldr	r0, [pc, #44]	; (800161c <DMA1_Channel6_IRQHandler+0x34>)
 80015ee:	f7ff feb5 	bl	800135c <LL_DMA_IsActiveFlag_TC6>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10b      	bne.n	8001610 <DMA1_Channel6_IRQHandler+0x28>
	{
		LL_DMA_ClearFlag_TC6(DMA1);
 80015f8:	4808      	ldr	r0, [pc, #32]	; (800161c <DMA1_Channel6_IRQHandler+0x34>)
 80015fa:	f7ff fed7 	bl	80013ac <LL_DMA_ClearFlag_TC6>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 80015fe:	2105      	movs	r1, #5
 8001600:	4806      	ldr	r0, [pc, #24]	; (800161c <DMA1_Channel6_IRQHandler+0x34>)
 8001602:	f7ff fce7 	bl	8000fd4 <LL_DMA_DisableChannel>
		LL_DMA_DisableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8001606:	2105      	movs	r1, #5
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <DMA1_Channel6_IRQHandler+0x34>)
 800160a:	f7ff ff21 	bl	8001450 <LL_DMA_DisableIT_TC>
	}
	else if(LL_DMA_IsActiveFlag_TE6(DMA1)){
		//nananana
	}

}
 800160e:	e002      	b.n	8001616 <DMA1_Channel6_IRQHandler+0x2e>
	else if(LL_DMA_IsActiveFlag_TE6(DMA1)){
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <DMA1_Channel6_IRQHandler+0x34>)
 8001612:	f7ff feb7 	bl	8001384 <LL_DMA_IsActiveFlag_TE6>
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40020000 	.word	0x40020000

08001620 <__NVIC_SetPriorityGrouping>:
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <__NVIC_EnableIRQ+0x38>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <LL_RCC_MSI_Enable+0x1c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <LL_RCC_MSI_Enable+0x1c>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000

0800179c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <LL_RCC_MSI_IsReady+0x20>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d101      	bne.n	80017b0 <LL_RCC_MSI_IsReady+0x14>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <LL_RCC_MSI_IsReady+0x16>
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40021000 	.word	0x40021000

080017c0 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a04      	ldr	r2, [pc, #16]	; (80017dc <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80017ca:	f043 0308 	orr.w	r3, r3, #8
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000

080017e0 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <LL_RCC_MSI_SetRange+0x24>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f0:	4904      	ldr	r1, [pc, #16]	; (8001804 <LL_RCC_MSI_SetRange+0x24>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	40021000 	.word	0x40021000

08001808 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	4904      	ldr	r1, [pc, #16]	; (8001830 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000

08001834 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <LL_RCC_SetSysClkSource+0x24>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f023 0203 	bic.w	r2, r3, #3
 8001844:	4904      	ldr	r1, [pc, #16]	; (8001858 <LL_RCC_SetSysClkSource+0x24>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40021000 	.word	0x40021000

0800185c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <LL_RCC_GetSysClkSource+0x18>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 030c 	and.w	r3, r3, #12
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000

08001878 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <LL_RCC_SetAHBPrescaler+0x24>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001888:	4904      	ldr	r1, [pc, #16]	; (800189c <LL_RCC_SetAHBPrescaler+0x24>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4313      	orrs	r3, r2
 800188e:	608b      	str	r3, [r1, #8]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	40021000 	.word	0x40021000

080018a0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018b0:	4904      	ldr	r1, [pc, #16]	; (80018c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	608b      	str	r3, [r1, #8]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	40021000 	.word	0x40021000

080018c8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <LL_RCC_SetAPB2Prescaler+0x24>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018d8:	4904      	ldr	r1, [pc, #16]	; (80018ec <LL_RCC_SetAPB2Prescaler+0x24>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4313      	orrs	r3, r2
 80018de:	608b      	str	r3, [r1, #8]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40021000 	.word	0x40021000

080018f0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <LL_RCC_PLL_Enable+0x1c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <LL_RCC_PLL_Enable+0x1c>)
 80018fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000

08001910 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001914:	4b07      	ldr	r3, [pc, #28]	; (8001934 <LL_RCC_PLL_IsReady+0x24>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001920:	d101      	bne.n	8001926 <LL_RCC_PLL_IsReady+0x16>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <LL_RCC_PLL_IsReady+0x18>
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000

08001938 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
 8001944:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800194c:	4013      	ands	r3, r2
 800194e:	68f9      	ldr	r1, [r7, #12]
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	4311      	orrs	r1, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	0212      	lsls	r2, r2, #8
 8001958:	4311      	orrs	r1, r2
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	4904      	ldr	r1, [pc, #16]	; (8001970 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001960:	4313      	orrs	r3, r2
 8001962:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	40021000 	.word	0x40021000
 8001974:	f9ff808c 	.word	0xf9ff808c

08001978 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	4a04      	ldr	r2, [pc, #16]	; (8001994 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001986:	60d3      	str	r3, [r2, #12]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40021000 	.word	0x40021000

08001998 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80019a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019a4:	4907      	ldr	r1, [pc, #28]	; (80019c4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80019ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4013      	ands	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	40021000 	.word	0x40021000

080019c8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019d4:	4907      	ldr	r1, [pc, #28]	; (80019f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4313      	orrs	r3, r2
 80019da:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80019de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4013      	ands	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019e6:	68fb      	ldr	r3, [r7, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	40021000 	.word	0x40021000

080019f8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a04:	4907      	ldr	r1, [pc, #28]	; (8001a24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4013      	ands	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a16:	68fb      	ldr	r3, [r7, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40021000 	.word	0x40021000

08001a28 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <LL_FLASH_SetLatency+0x24>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f023 0207 	bic.w	r2, r3, #7
 8001a38:	4904      	ldr	r1, [pc, #16]	; (8001a4c <LL_FLASH_SetLatency+0x24>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	600b      	str	r3, [r1, #0]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	40022000 	.word	0x40022000

08001a50 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <LL_FLASH_GetLatency+0x18>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0307 	and.w	r3, r3, #7
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40022000 	.word	0x40022000

08001a6c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001a7c:	4904      	ldr	r1, [pc, #16]	; (8001a90 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	600b      	str	r3, [r1, #0]
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	40007000 	.word	0x40007000

08001a94 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa4:	d101      	bne.n	8001aaa <LL_PWR_IsActiveFlag_VOS+0x16>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <LL_PWR_IsActiveFlag_VOS+0x18>
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40007000 	.word	0x40007000

08001abc <LL_TIM_EnableCounter>:
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f043 0201 	orr.w	r2, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	601a      	str	r2, [r3, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_TIM_SetCounterMode>:
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	601a      	str	r2, [r3, #0]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_TIM_DisableARRPreload>:
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	601a      	str	r2, [r3, #0]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <LL_TIM_SetAutoReload>:
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <LL_TIM_OC_DisableFast>:
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d028      	beq.n	8001ba2 <LL_TIM_OC_DisableFast+0x62>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d023      	beq.n	8001b9e <LL_TIM_OC_DisableFast+0x5e>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b10      	cmp	r3, #16
 8001b5a:	d01e      	beq.n	8001b9a <LL_TIM_OC_DisableFast+0x5a>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2b40      	cmp	r3, #64	; 0x40
 8001b60:	d019      	beq.n	8001b96 <LL_TIM_OC_DisableFast+0x56>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b68:	d013      	beq.n	8001b92 <LL_TIM_OC_DisableFast+0x52>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b70:	d00d      	beq.n	8001b8e <LL_TIM_OC_DisableFast+0x4e>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b78:	d007      	beq.n	8001b8a <LL_TIM_OC_DisableFast+0x4a>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b80:	d101      	bne.n	8001b86 <LL_TIM_OC_DisableFast+0x46>
 8001b82:	2307      	movs	r3, #7
 8001b84:	e00e      	b.n	8001ba4 <LL_TIM_OC_DisableFast+0x64>
 8001b86:	2308      	movs	r3, #8
 8001b88:	e00c      	b.n	8001ba4 <LL_TIM_OC_DisableFast+0x64>
 8001b8a:	2306      	movs	r3, #6
 8001b8c:	e00a      	b.n	8001ba4 <LL_TIM_OC_DisableFast+0x64>
 8001b8e:	2305      	movs	r3, #5
 8001b90:	e008      	b.n	8001ba4 <LL_TIM_OC_DisableFast+0x64>
 8001b92:	2304      	movs	r3, #4
 8001b94:	e006      	b.n	8001ba4 <LL_TIM_OC_DisableFast+0x64>
 8001b96:	2303      	movs	r3, #3
 8001b98:	e004      	b.n	8001ba4 <LL_TIM_OC_DisableFast+0x64>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e002      	b.n	8001ba4 <LL_TIM_OC_DisableFast+0x64>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <LL_TIM_OC_DisableFast+0x64>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3318      	adds	r3, #24
 8001baa:	4619      	mov	r1, r3
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <LL_TIM_OC_DisableFast+0x9c>)
 8001bb0:	5cd3      	ldrb	r3, [r2, r3]
 8001bb2:	440b      	add	r3, r1
 8001bb4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	4908      	ldr	r1, [pc, #32]	; (8001be0 <LL_TIM_OC_DisableFast+0xa0>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	408b      	lsls	r3, r1
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	401a      	ands	r2, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	601a      	str	r2, [r3, #0]
}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	080058c0 	.word	0x080058c0
 8001be0:	080058cc 	.word	0x080058cc

08001be4 <LL_TIM_OC_EnablePreload>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d028      	beq.n	8001c46 <LL_TIM_OC_EnablePreload+0x62>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d023      	beq.n	8001c42 <LL_TIM_OC_EnablePreload+0x5e>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b10      	cmp	r3, #16
 8001bfe:	d01e      	beq.n	8001c3e <LL_TIM_OC_EnablePreload+0x5a>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2b40      	cmp	r3, #64	; 0x40
 8001c04:	d019      	beq.n	8001c3a <LL_TIM_OC_EnablePreload+0x56>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c0c:	d013      	beq.n	8001c36 <LL_TIM_OC_EnablePreload+0x52>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c14:	d00d      	beq.n	8001c32 <LL_TIM_OC_EnablePreload+0x4e>
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c1c:	d007      	beq.n	8001c2e <LL_TIM_OC_EnablePreload+0x4a>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c24:	d101      	bne.n	8001c2a <LL_TIM_OC_EnablePreload+0x46>
 8001c26:	2307      	movs	r3, #7
 8001c28:	e00e      	b.n	8001c48 <LL_TIM_OC_EnablePreload+0x64>
 8001c2a:	2308      	movs	r3, #8
 8001c2c:	e00c      	b.n	8001c48 <LL_TIM_OC_EnablePreload+0x64>
 8001c2e:	2306      	movs	r3, #6
 8001c30:	e00a      	b.n	8001c48 <LL_TIM_OC_EnablePreload+0x64>
 8001c32:	2305      	movs	r3, #5
 8001c34:	e008      	b.n	8001c48 <LL_TIM_OC_EnablePreload+0x64>
 8001c36:	2304      	movs	r3, #4
 8001c38:	e006      	b.n	8001c48 <LL_TIM_OC_EnablePreload+0x64>
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e004      	b.n	8001c48 <LL_TIM_OC_EnablePreload+0x64>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e002      	b.n	8001c48 <LL_TIM_OC_EnablePreload+0x64>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <LL_TIM_OC_EnablePreload+0x64>
 8001c46:	2300      	movs	r3, #0
 8001c48:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3318      	adds	r3, #24
 8001c4e:	4619      	mov	r1, r3
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <LL_TIM_OC_EnablePreload+0x98>)
 8001c54:	5cd3      	ldrb	r3, [r2, r3]
 8001c56:	440b      	add	r3, r1
 8001c58:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	4907      	ldr	r1, [pc, #28]	; (8001c80 <LL_TIM_OC_EnablePreload+0x9c>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	4619      	mov	r1, r3
 8001c66:	2308      	movs	r3, #8
 8001c68:	408b      	lsls	r3, r1
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	601a      	str	r2, [r3, #0]
}
 8001c70:	bf00      	nop
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	080058c0 	.word	0x080058c0
 8001c80:	080058cc 	.word	0x080058cc

08001c84 <LL_TIM_DisableExternalClock>:
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_TIM_SetClockSource>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001cb6:	f023 0307 	bic.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_TIM_SetTriggerOutput>:
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	605a      	str	r2, [r3, #4]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_TIM_DisableMasterSlaveMode>:
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	609a      	str	r2, [r3, #8]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_TIM_ConfigETR>:
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 423f 	bic.w	r2, r3, #48896	; 0xbf00
 8001d2a:	68b9      	ldr	r1, [r7, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4319      	orrs	r1, r3
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	430b      	orrs	r3, r1
 8001d34:	431a      	orrs	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	609a      	str	r2, [r3, #8]
}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <LL_TIM_SetOCRefClearInputSource>:
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f023 0208 	bic.w	r2, r3, #8
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_TIM_ClearFlag_UPDATE>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f06f 0201 	mvn.w	r2, #1
 8001d7a:	611a      	str	r2, [r3, #16]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_TIM_EnableIT_UPDATE>:
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f043 0201 	orr.w	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	60da      	str	r2, [r3, #12]
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f043 0201 	orr.w	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	615a      	str	r2, [r3, #20]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b085      	sub	sp, #20
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	041a      	lsls	r2, r3, #16
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	43d9      	mvns	r1, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	400b      	ands	r3, r1
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	619a      	str	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f7ff fdd9 	bl	80019f8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001e46:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001e4a:	f7ff fdbd 	bl	80019c8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e4e:	2003      	movs	r0, #3
 8001e50:	f7ff fbe6 	bl	8001620 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001e54:	f7ff fc08 	bl	8001668 <__NVIC_GetPriorityGrouping>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	210f      	movs	r1, #15
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fc58 	bl	8001714 <NVIC_EncodePriority>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4619      	mov	r1, r3
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff fc28 	bl	80016c0 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e70:	f000 f81c 	bl	8001eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e74:	f000 f95e 	bl	8002134 <MX_GPIO_Init>
  MX_TIM6_Init();
 8001e78:	f000 f8e6 	bl	8002048 <MX_TIM6_Init>
  MX_TIM3_Init();
 8001e7c:	f000 f868 	bl	8001f50 <MX_TIM3_Init>
  MX_TIM7_Init();
 8001e80:	f000 f916 	bl	80020b0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  	  time = START_TIME;
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <main+0x6c>)
 8001e86:	220f      	movs	r2, #15
 8001e88:	601a      	str	r2, [r3, #0]
  	  dma_init();
 8001e8a:	f7ff fb67 	bl	800155c <dma_init>
  	  enable_timer3();
 8001e8e:	f7ff fb33 	bl	80014f8 <enable_timer3>
  	  TM1637_gpio_init();
 8001e92:	f000 fe95 	bl	8002bc0 <TM1637_gpio_init>
  	  TM1637_Init();
 8001e96:	f000 fd47 	bl	8002928 <TM1637_Init>
  	  TM1637_SetBrightness(8);
 8001e9a:	2008      	movs	r0, #8
 8001e9c:	f000 fe02 	bl	8002aa4 <TM1637_SetBrightness>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	LedTest(2);
 8001ea0:	2002      	movs	r0, #2
 8001ea2:	f000 faf7 	bl	8002494 <LedTest>
 8001ea6:	e7fb      	b.n	8001ea0 <main+0x64>
 8001ea8:	2000033c 	.word	0x2000033c

08001eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f7ff fdb9 	bl	8001a28 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8001eb6:	bf00      	nop
 8001eb8:	f7ff fdca 	bl	8001a50 <LL_FLASH_GetLatency>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d1fa      	bne.n	8001eb8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001ec2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ec6:	f7ff fdd1 	bl	8001a6c <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8001eca:	bf00      	nop
 8001ecc:	f7ff fde2 	bl	8001a94 <LL_PWR_IsActiveFlag_VOS>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1fa      	bne.n	8001ecc <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 8001ed6:	f7ff fc51 	bl	800177c <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001eda:	bf00      	nop
 8001edc:	f7ff fc5e 	bl	800179c <LL_RCC_MSI_IsReady>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d1fa      	bne.n	8001edc <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8001ee6:	f7ff fc6b 	bl	80017c0 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8001eea:	2060      	movs	r0, #96	; 0x60
 8001eec:	f7ff fc78 	bl	80017e0 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7ff fc89 	bl	8001808 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 16, LL_RCC_PLLR_DIV_2);
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2210      	movs	r2, #16
 8001efa:	2100      	movs	r1, #0
 8001efc:	2001      	movs	r0, #1
 8001efe:	f7ff fd1b 	bl	8001938 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001f02:	f7ff fd39 	bl	8001978 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001f06:	f7ff fcf3 	bl	80018f0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001f0a:	bf00      	nop
 8001f0c:	f7ff fd00 	bl	8001910 <LL_RCC_PLL_IsReady>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d1fa      	bne.n	8001f0c <SystemClock_Config+0x60>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001f16:	2003      	movs	r0, #3
 8001f18:	f7ff fc8c 	bl	8001834 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001f1c:	bf00      	nop
 8001f1e:	f7ff fc9d 	bl	800185c <LL_RCC_GetSysClkSource>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b0c      	cmp	r3, #12
 8001f26:	d1fa      	bne.n	8001f1e <SystemClock_Config+0x72>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f7ff fca5 	bl	8001878 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f7ff fcb6 	bl	80018a0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001f34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f38:	f7ff fcc6 	bl	80018c8 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(32000000);
 8001f3c:	4803      	ldr	r0, [pc, #12]	; (8001f4c <SystemClock_Config+0xa0>)
 8001f3e:	f001 fcb1 	bl	80038a4 <LL_Init1msTick>

  LL_SetSystemCoreClock(32000000);
 8001f42:	4802      	ldr	r0, [pc, #8]	; (8001f4c <SystemClock_Config+0xa0>)
 8001f44:	f001 fcbc 	bl	80038c0 <LL_SetSystemCoreClock>
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	01e84800 	.word	0x01e84800

08001f50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b094      	sub	sp, #80	; 0x50
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001f56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
 8001f64:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001f66:	f107 031c 	add.w	r3, r7, #28
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f001 fdcd 	bl	8003b0e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	611a      	str	r2, [r3, #16]
 8001f82:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001f84:	2002      	movs	r0, #2
 8001f86:	f7ff fd1f 	bl	80019c8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 32-LL_TIM_IC_FILTER_FDIV1_N2;
 8001f92:	4b2b      	ldr	r3, [pc, #172]	; (8002040 <MX_TIM3_Init+0xf0>)
 8001f94:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001f96:	2300      	movs	r3, #0
 8001f98:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001f9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4828      	ldr	r0, [pc, #160]	; (8002044 <MX_TIM3_Init+0xf4>)
 8001fa2:	f001 f8b5 	bl	8003110 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001fa6:	4827      	ldr	r0, [pc, #156]	; (8002044 <MX_TIM3_Init+0xf4>)
 8001fa8:	f7ff fdab 	bl	8001b02 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001fac:	2100      	movs	r1, #0
 8001fae:	4825      	ldr	r0, [pc, #148]	; (8002044 <MX_TIM3_Init+0xf4>)
 8001fb0:	f7ff fe78 	bl	8001ca4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	4823      	ldr	r0, [pc, #140]	; (8002044 <MX_TIM3_Init+0xf4>)
 8001fb8:	f7ff fe14 	bl	8001be4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001fbc:	2360      	movs	r3, #96	; 0x60
 8001fbe:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	481a      	ldr	r0, [pc, #104]	; (8002044 <MX_TIM3_Init+0xf4>)
 8001fda:	f001 f92d 	bl	8003238 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001fde:	2101      	movs	r1, #1
 8001fe0:	4818      	ldr	r0, [pc, #96]	; (8002044 <MX_TIM3_Init+0xf4>)
 8001fe2:	f7ff fdad 	bl	8001b40 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM3, LL_TIM_OCREF_CLR_INT_NC);
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4816      	ldr	r0, [pc, #88]	; (8002044 <MX_TIM3_Init+0xf4>)
 8001fea:	f7ff feac 	bl	8001d46 <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM3);
 8001fee:	4815      	ldr	r0, [pc, #84]	; (8002044 <MX_TIM3_Init+0xf4>)
 8001ff0:	f7ff fe48 	bl	8001c84 <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM3, LL_TIM_ETR_POLARITY_NONINVERTED, LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4812      	ldr	r0, [pc, #72]	; (8002044 <MX_TIM3_Init+0xf4>)
 8001ffc:	f7ff fe8a 	bl	8001d14 <LL_TIM_ConfigETR>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002000:	2100      	movs	r1, #0
 8002002:	4810      	ldr	r0, [pc, #64]	; (8002044 <MX_TIM3_Init+0xf4>)
 8002004:	f7ff fe63 	bl	8001cce <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002008:	480e      	ldr	r0, [pc, #56]	; (8002044 <MX_TIM3_Init+0xf4>)
 800200a:	f7ff fe73 	bl	8001cf4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800200e:	2001      	movs	r0, #1
 8002010:	f7ff fcc2 	bl	8001998 <LL_AHB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PA6   ------> TIM3_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002014:	2340      	movs	r3, #64	; 0x40
 8002016:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002018:	2302      	movs	r3, #2
 800201a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002028:	2302      	movs	r3, #2
 800202a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	4619      	mov	r1, r3
 8002030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002034:	f000 ff6e 	bl	8002f14 <LL_GPIO_Init>

}
 8002038:	bf00      	nop
 800203a:	3750      	adds	r7, #80	; 0x50
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	fff00020 	.word	0xfff00020
 8002044:	40000400 	.word	0x40000400

08002048 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 800205c:	2010      	movs	r0, #16
 800205e:	f7ff fcb3 	bl	80019c8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 31;
 8002062:	231f      	movs	r3, #31
 8002064:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 800206a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800206e:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	4619      	mov	r1, r3
 8002074:	480d      	ldr	r0, [pc, #52]	; (80020ac <MX_TIM6_Init+0x64>)
 8002076:	f001 f84b 	bl	8003110 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM6);
 800207a:	480c      	ldr	r0, [pc, #48]	; (80020ac <MX_TIM6_Init+0x64>)
 800207c:	f7ff fd41 	bl	8001b02 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8002080:	2100      	movs	r1, #0
 8002082:	480a      	ldr	r0, [pc, #40]	; (80020ac <MX_TIM6_Init+0x64>)
 8002084:	f7ff fe23 	bl	8001cce <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8002088:	4808      	ldr	r0, [pc, #32]	; (80020ac <MX_TIM6_Init+0x64>)
 800208a:	f7ff fe33 	bl	8001cf4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */
 // LL_TIM_SetClockSource(TIM6, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_SetCounterMode(TIM6, LL_TIM_COUNTERMODE_UP);
 800208e:	2100      	movs	r1, #0
 8002090:	4806      	ldr	r0, [pc, #24]	; (80020ac <MX_TIM6_Init+0x64>)
 8002092:	f7ff fd23 	bl	8001adc <LL_TIM_SetCounterMode>
  LL_TIM_ClearFlag_UPDATE(TIM6);
 8002096:	4805      	ldr	r0, [pc, #20]	; (80020ac <MX_TIM6_Init+0x64>)
 8002098:	f7ff fe68 	bl	8001d6c <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableCounter(TIM6);
 800209c:	4803      	ldr	r0, [pc, #12]	; (80020ac <MX_TIM6_Init+0x64>)
 800209e:	f7ff fd0d 	bl	8001abc <LL_TIM_EnableCounter>

  /* USER CODE END TIM6_Init 2 */

}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40001000 	.word	0x40001000

080020b0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 80020c4:	2020      	movs	r0, #32
 80020c6:	f7ff fc7f 	bl	80019c8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 32000-LL_TIM_IC_FILTER_FDIV1_N2;
 80020ca:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80020ce:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1000-LL_TIM_IC_FILTER_FDIV1_N2;
 80020d4:	4b15      	ldr	r3, [pc, #84]	; (800212c <MX_TIM7_Init+0x7c>)
 80020d6:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	4619      	mov	r1, r3
 80020dc:	4814      	ldr	r0, [pc, #80]	; (8002130 <MX_TIM7_Init+0x80>)
 80020de:	f001 f817 	bl	8003110 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM7);
 80020e2:	4813      	ldr	r0, [pc, #76]	; (8002130 <MX_TIM7_Init+0x80>)
 80020e4:	f7ff fd0d 	bl	8001b02 <LL_TIM_DisableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 80020e8:	2100      	movs	r1, #0
 80020ea:	4811      	ldr	r0, [pc, #68]	; (8002130 <MX_TIM7_Init+0x80>)
 80020ec:	f7ff fdef 	bl	8001cce <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 80020f0:	480f      	ldr	r0, [pc, #60]	; (8002130 <MX_TIM7_Init+0x80>)
 80020f2:	f7ff fdff 	bl	8001cf4 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  LL_TIM_SetCounterMode(TIM7, LL_TIM_COUNTERMODE_UP);
 80020f6:	2100      	movs	r1, #0
 80020f8:	480d      	ldr	r0, [pc, #52]	; (8002130 <MX_TIM7_Init+0x80>)
 80020fa:	f7ff fcef 	bl	8001adc <LL_TIM_SetCounterMode>
  LL_TIM_GenerateEvent_UPDATE(TIM7);
 80020fe:	480c      	ldr	r0, [pc, #48]	; (8002130 <MX_TIM7_Init+0x80>)
 8002100:	f7ff fe65 	bl	8001dce <LL_TIM_GenerateEvent_UPDATE>
  LL_TIM_ClearFlag_UPDATE(TIM7);
 8002104:	480a      	ldr	r0, [pc, #40]	; (8002130 <MX_TIM7_Init+0x80>)
 8002106:	f7ff fe31 	bl	8001d6c <LL_TIM_ClearFlag_UPDATE>
  NVIC_SetPriority(TIM7_IRQn, 0);
 800210a:	2100      	movs	r1, #0
 800210c:	2037      	movs	r0, #55	; 0x37
 800210e:	f7ff fad7 	bl	80016c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 8002112:	2037      	movs	r0, #55	; 0x37
 8002114:	f7ff fab6 	bl	8001684 <__NVIC_EnableIRQ>
  LL_TIM_EnableIT_UPDATE(TIM7);
 8002118:	4805      	ldr	r0, [pc, #20]	; (8002130 <MX_TIM7_Init+0x80>)
 800211a:	f7ff fe48 	bl	8001dae <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM7);
 800211e:	4804      	ldr	r0, [pc, #16]	; (8002130 <MX_TIM7_Init+0x80>)
 8002120:	f7ff fccc 	bl	8001abc <LL_TIM_EnableCounter>
  /* USER CODE END TIM7_Init 2 */

}
 8002124:	bf00      	nop
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	fff003e8 	.word	0xfff003e8
 8002130:	40001400 	.word	0x40001400

08002134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213a:	463b      	mov	r3, r7
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
 8002148:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 800214a:	2080      	movs	r0, #128	; 0x80
 800214c:	f7ff fc24 	bl	8001998 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002150:	2001      	movs	r0, #1
 8002152:	f7ff fc21 	bl	8001998 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002156:	2004      	movs	r0, #4
 8002158:	f7ff fc1e 	bl	8001998 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(test_GPIO_Port, test_Pin);
 800215c:	2120      	movs	r1, #32
 800215e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002162:	f7ff fe44 	bl	8001dee <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Led_GPIO_Port, Led_Pin);
 8002166:	2180      	movs	r1, #128	; 0x80
 8002168:	4812      	ldr	r0, [pc, #72]	; (80021b4 <MX_GPIO_Init+0x80>)
 800216a:	f7ff fe40 	bl	8001dee <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = test_Pin;
 800216e:	2320      	movs	r3, #32
 8002170:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002172:	2301      	movs	r3, #1
 8002174:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(test_GPIO_Port, &GPIO_InitStruct);
 8002182:	463b      	mov	r3, r7
 8002184:	4619      	mov	r1, r3
 8002186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218a:	f000 fec3 	bl	8002f14 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Led_Pin;
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002192:	2301      	movs	r3, #1
 8002194:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002196:	2303      	movs	r3, #3
 8002198:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800219e:	2300      	movs	r3, #0
 80021a0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80021a2:	463b      	mov	r3, r7
 80021a4:	4619      	mov	r1, r3
 80021a6:	4803      	ldr	r0, [pc, #12]	; (80021b4 <MX_GPIO_Init+0x80>)
 80021a8:	f000 feb4 	bl	8002f14 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021ac:	bf00      	nop
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	48000800 	.word	0x48000800

080021b8 <Damian_Marudzi>:

/* USER CODE BEGIN 4 */

void Damian_Marudzi(uint32_t czas)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	LL_TIM_GenerateEvent_UPDATE(TIM6);
 80021c0:	480a      	ldr	r0, [pc, #40]	; (80021ec <Damian_Marudzi+0x34>)
 80021c2:	f7ff fe04 	bl	8001dce <LL_TIM_GenerateEvent_UPDATE>
	LL_TIM_ClearFlag_UPDATE(TIM6);
 80021c6:	4809      	ldr	r0, [pc, #36]	; (80021ec <Damian_Marudzi+0x34>)
 80021c8:	f7ff fdd0 	bl	8001d6c <LL_TIM_ClearFlag_UPDATE>
	LL_TIM_SetAutoReload(TIM6, czas);
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4807      	ldr	r0, [pc, #28]	; (80021ec <Damian_Marudzi+0x34>)
 80021d0:	f7ff fca7 	bl	8001b22 <LL_TIM_SetAutoReload>
	while(LL_TIM_IsActiveFlag_UPDATE(TIM6) == 0);
 80021d4:	bf00      	nop
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <Damian_Marudzi+0x34>)
 80021d8:	f7ff fdd6 	bl	8001d88 <LL_TIM_IsActiveFlag_UPDATE>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f9      	beq.n	80021d6 <Damian_Marudzi+0x1e>
}
 80021e2:	bf00      	nop
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40001000 	.word	0x40001000

080021f0 <WS2812_Send>:
void WS2812_Send (void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
	uint32_t color;
	Set_Brightness(2);
 80021fa:	2002      	movs	r0, #2
 80021fc:	f000 f86c 	bl	80022d8 <Set_Brightness>

	for (int i=0; i<50; i++)
 8002200:	2300      	movs	r3, #0
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	e00a      	b.n	800221c <WS2812_Send+0x2c>
	{
		pwmData[indx] = 0;
 8002206:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <WS2812_Send+0xe0>)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2100      	movs	r1, #0
 800220c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3301      	adds	r3, #1
 8002214:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	3301      	adds	r3, #1
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b31      	cmp	r3, #49	; 0x31
 8002220:	ddf1      	ble.n	8002206 <WS2812_Send+0x16>
	}

	for (int i= 0; i<MAX_LED; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	e036      	b.n	8002296 <WS2812_Send+0xa6>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8002228:	4a2a      	ldr	r2, [pc, #168]	; (80022d4 <WS2812_Send+0xe4>)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	785b      	ldrb	r3, [r3, #1]
 8002232:	041a      	lsls	r2, r3, #16
 8002234:	4927      	ldr	r1, [pc, #156]	; (80022d4 <WS2812_Send+0xe4>)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	789b      	ldrb	r3, [r3, #2]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	431a      	orrs	r2, r3
 8002242:	4924      	ldr	r1, [pc, #144]	; (80022d4 <WS2812_Send+0xe4>)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	78db      	ldrb	r3, [r3, #3]
 800224c:	4313      	orrs	r3, r2
 800224e:	603b      	str	r3, [r7, #0]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8002250:	2317      	movs	r3, #23
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	e019      	b.n	800228a <WS2812_Send+0x9a>
		{
			if (color&(1<<i))
 8002256:	2201      	movs	r2, #1
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	461a      	mov	r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	4013      	ands	r3, r2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <WS2812_Send+0x84>
			{
				pwmData[indx] = 27;  // 2/3 of 90
 8002268:	4a19      	ldr	r2, [pc, #100]	; (80022d0 <WS2812_Send+0xe0>)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	211b      	movs	r1, #27
 800226e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002272:	e004      	b.n	800227e <WS2812_Send+0x8e>
			}

			else pwmData[indx] = 13;  // 1/3 of 90
 8002274:	4a16      	ldr	r2, [pc, #88]	; (80022d0 <WS2812_Send+0xe0>)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	210d      	movs	r1, #13
 800227a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	3301      	adds	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	3b01      	subs	r3, #1
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	dae2      	bge.n	8002256 <WS2812_Send+0x66>
	for (int i= 0; i<MAX_LED; i++)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3301      	adds	r3, #1
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b07      	cmp	r3, #7
 800229a:	ddc5      	ble.n	8002228 <WS2812_Send+0x38>
		}

	}

	for (int i=0; i<50; i++)
 800229c:	2300      	movs	r3, #0
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	e00a      	b.n	80022b8 <WS2812_Send+0xc8>
	{
		pwmData[indx] = 0;
 80022a2:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <WS2812_Send+0xe0>)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2100      	movs	r1, #0
 80022a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	3301      	adds	r3, #1
 80022b0:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3301      	adds	r3, #1
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b31      	cmp	r3, #49	; 0x31
 80022bc:	ddf1      	ble.n	80022a2 <WS2812_Send+0xb2>
	}

	generate_signal(pwmData,sizeof(pwmData));
 80022be:	f44f 7112 	mov.w	r1, #584	; 0x248
 80022c2:	4803      	ldr	r0, [pc, #12]	; (80022d0 <WS2812_Send+0xe0>)
 80022c4:	f7ff f928 	bl	8001518 <generate_signal>
}
 80022c8:	bf00      	nop
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	200000f4 	.word	0x200000f4
 80022d4:	200000d4 	.word	0x200000d4

080022d8 <Set_Brightness>:
void Set_Brightness (int brightness)  // 0-45
{
 80022d8:	b5b0      	push	{r4, r5, r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b2d      	cmp	r3, #45	; 0x2d
 80022e4:	dd01      	ble.n	80022ea <Set_Brightness+0x12>
 80022e6:	232d      	movs	r3, #45	; 0x2d
 80022e8:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e060      	b.n	80023b2 <Set_Brightness+0xda>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 80022f0:	4a37      	ldr	r2, [pc, #220]	; (80023d0 <Set_Brightness+0xf8>)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80022f8:	4a36      	ldr	r2, [pc, #216]	; (80023d4 <Set_Brightness+0xfc>)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8002300:	2301      	movs	r3, #1
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	e04f      	b.n	80023a6 <Set_Brightness+0xce>
		{
			float angle = 90-brightness;  // in degrees
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800230c:	ee07 3a90 	vmov	s15, r3
 8002310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002314:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f7fe f90d 	bl	8000538 <__aeabi_f2d>
 800231e:	a32a      	add	r3, pc, #168	; (adr r3, 80023c8 <Set_Brightness+0xf0>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	f7fe f960 	bl	80005e8 <__aeabi_dmul>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <Set_Brightness+0x100>)
 8002336:	f7fe fa81 	bl	800083c <__aeabi_ddiv>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4610      	mov	r0, r2
 8002340:	4619      	mov	r1, r3
 8002342:	f7fe fc33 	bl	8000bac <__aeabi_d2f>
 8002346:	4603      	mov	r3, r0
 8002348:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 800234a:	4a21      	ldr	r2, [pc, #132]	; (80023d0 <Set_Brightness+0xf8>)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	441a      	add	r2, r3
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4413      	add	r3, r2
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe f8db 	bl	8000514 <__aeabi_i2d>
 800235e:	4604      	mov	r4, r0
 8002360:	460d      	mov	r5, r1
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f7fe f8e8 	bl	8000538 <__aeabi_f2d>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	ec43 2b10 	vmov	d0, r2, r3
 8002370:	f002 f9ee 	bl	8004750 <tan>
 8002374:	ec53 2b10 	vmov	r2, r3, d0
 8002378:	4620      	mov	r0, r4
 800237a:	4629      	mov	r1, r5
 800237c:	f7fe fa5e 	bl	800083c <__aeabi_ddiv>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4610      	mov	r0, r2
 8002386:	4619      	mov	r1, r3
 8002388:	f7fe fbf0 	bl	8000b6c <__aeabi_d2uiz>
 800238c:	4603      	mov	r3, r0
 800238e:	b2d9      	uxtb	r1, r3
 8002390:	4a10      	ldr	r2, [pc, #64]	; (80023d4 <Set_Brightness+0xfc>)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	441a      	add	r2, r3
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4413      	add	r3, r2
 800239c:	460a      	mov	r2, r1
 800239e:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	3301      	adds	r3, #1
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	ddac      	ble.n	8002306 <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	3301      	adds	r3, #1
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b07      	cmp	r3, #7
 80023b6:	dd9b      	ble.n	80022f0 <Set_Brightness+0x18>
		}
	}

#endif

}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bdb0      	pop	{r4, r5, r7, pc}
 80023c2:	bf00      	nop
 80023c4:	f3af 8000 	nop.w
 80023c8:	53c8d4f1 	.word	0x53c8d4f1
 80023cc:	400921fb 	.word	0x400921fb
 80023d0:	200000b4 	.word	0x200000b4
 80023d4:	200000d4 	.word	0x200000d4
 80023d8:	40668000 	.word	0x40668000

080023dc <Set_LED>:
void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	b2d9      	uxtb	r1, r3
 80023ee:	4a11      	ldr	r2, [pc, #68]	; (8002434 <Set_LED+0x58>)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	b2d9      	uxtb	r1, r3
 80023fa:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <Set_LED+0x58>)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	460a      	mov	r2, r1
 8002404:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	b2d9      	uxtb	r1, r3
 800240a:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <Set_LED+0x58>)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	460a      	mov	r2, r1
 8002414:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	b2d9      	uxtb	r1, r3
 800241a:	4a06      	ldr	r2, [pc, #24]	; (8002434 <Set_LED+0x58>)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	460a      	mov	r2, r1
 8002424:	70da      	strb	r2, [r3, #3]
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	200000b4 	.word	0x200000b4

08002438 <Reset_LED>:
void Reset_LED (void)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
	for (int i=0; i<MAX_LED; i++)
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]
 8002442:	e01a      	b.n	800247a <Reset_LED+0x42>
	{
		LED_Data[i][0] = i;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	b2d9      	uxtb	r1, r3
 8002448:	4a11      	ldr	r2, [pc, #68]	; (8002490 <Reset_LED+0x58>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[i][1] = 0;
 8002450:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <Reset_LED+0x58>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	2200      	movs	r2, #0
 800245a:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = 0;
 800245c:	4a0c      	ldr	r2, [pc, #48]	; (8002490 <Reset_LED+0x58>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	2200      	movs	r2, #0
 8002466:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = 0;
 8002468:	4a09      	ldr	r2, [pc, #36]	; (8002490 <Reset_LED+0x58>)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	2200      	movs	r2, #0
 8002472:	70da      	strb	r2, [r3, #3]
	for (int i=0; i<MAX_LED; i++)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3301      	adds	r3, #1
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b07      	cmp	r3, #7
 800247e:	dde1      	ble.n	8002444 <Reset_LED+0xc>
	}
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	200000b4 	.word	0x200000b4

08002494 <LedTest>:
void LedTest(int mode)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]

	switch(mode)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d003      	beq.n	80024aa <LedTest+0x16>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d033      	beq.n	8002510 <LedTest+0x7c>
				WS2812_Send();
				Damian_Marudzi(50000000);
			}
		break;
	}
}
 80024a8:	e075      	b.n	8002596 <LedTest+0x102>
			Set_LED(0, 255, 0, 0);
 80024aa:	2300      	movs	r3, #0
 80024ac:	2200      	movs	r2, #0
 80024ae:	21ff      	movs	r1, #255	; 0xff
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7ff ff93 	bl	80023dc <Set_LED>
			Set_LED(1, 0, 255, 0);
 80024b6:	2300      	movs	r3, #0
 80024b8:	22ff      	movs	r2, #255	; 0xff
 80024ba:	2100      	movs	r1, #0
 80024bc:	2001      	movs	r0, #1
 80024be:	f7ff ff8d 	bl	80023dc <Set_LED>
			Set_LED(2, 0, 0, 255);
 80024c2:	23ff      	movs	r3, #255	; 0xff
 80024c4:	2200      	movs	r2, #0
 80024c6:	2100      	movs	r1, #0
 80024c8:	2002      	movs	r0, #2
 80024ca:	f7ff ff87 	bl	80023dc <Set_LED>
			Set_LED(3, 255, 0, 0);
 80024ce:	2300      	movs	r3, #0
 80024d0:	2200      	movs	r2, #0
 80024d2:	21ff      	movs	r1, #255	; 0xff
 80024d4:	2003      	movs	r0, #3
 80024d6:	f7ff ff81 	bl	80023dc <Set_LED>
			Set_LED(4, 0, 255, 0);
 80024da:	2300      	movs	r3, #0
 80024dc:	22ff      	movs	r2, #255	; 0xff
 80024de:	2100      	movs	r1, #0
 80024e0:	2004      	movs	r0, #4
 80024e2:	f7ff ff7b 	bl	80023dc <Set_LED>
			Set_LED(5, 0, 0, 255);
 80024e6:	23ff      	movs	r3, #255	; 0xff
 80024e8:	2200      	movs	r2, #0
 80024ea:	2100      	movs	r1, #0
 80024ec:	2005      	movs	r0, #5
 80024ee:	f7ff ff75 	bl	80023dc <Set_LED>
			Set_LED(6, 255, 0, 191);
 80024f2:	23bf      	movs	r3, #191	; 0xbf
 80024f4:	2200      	movs	r2, #0
 80024f6:	21ff      	movs	r1, #255	; 0xff
 80024f8:	2006      	movs	r0, #6
 80024fa:	f7ff ff6f 	bl	80023dc <Set_LED>
			Set_LED(7, 255, 255, 0);
 80024fe:	2300      	movs	r3, #0
 8002500:	22ff      	movs	r2, #255	; 0xff
 8002502:	21ff      	movs	r1, #255	; 0xff
 8002504:	2007      	movs	r0, #7
 8002506:	f7ff ff69 	bl	80023dc <Set_LED>
			WS2812_Send();
 800250a:	f7ff fe71 	bl	80021f0 <WS2812_Send>
		break;
 800250e:	e042      	b.n	8002596 <LedTest+0x102>
			Reset_LED();
 8002510:	f7ff ff92 	bl	8002438 <Reset_LED>
			for(int i=0; i< MAX_LED; i++)
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	e039      	b.n	800258e <LedTest+0xfa>
				if(i!=0)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d006      	beq.n	800252e <LedTest+0x9a>
					Set_LED(i-1, 0, 0, 0);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1e58      	subs	r0, r3, #1
 8002524:	2300      	movs	r3, #0
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	f7ff ff57 	bl	80023dc <Set_LED>
				switch(i%3)
 800252e:	68f9      	ldr	r1, [r7, #12]
 8002530:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <LedTest+0x10c>)
 8002532:	fb83 3201 	smull	r3, r2, r3, r1
 8002536:	17cb      	asrs	r3, r1, #31
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	461a      	mov	r2, r3
 800253c:	0052      	lsls	r2, r2, #1
 800253e:	441a      	add	r2, r3
 8002540:	1a8b      	subs	r3, r1, r2
 8002542:	2b02      	cmp	r3, #2
 8002544:	d014      	beq.n	8002570 <LedTest+0xdc>
 8002546:	2b02      	cmp	r3, #2
 8002548:	dc19      	bgt.n	800257e <LedTest+0xea>
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <LedTest+0xc0>
 800254e:	2b01      	cmp	r3, #1
 8002550:	d007      	beq.n	8002562 <LedTest+0xce>
 8002552:	e014      	b.n	800257e <LedTest+0xea>
						Set_LED(i, 255, 0, 0);
 8002554:	2300      	movs	r3, #0
 8002556:	2200      	movs	r2, #0
 8002558:	21ff      	movs	r1, #255	; 0xff
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f7ff ff3e 	bl	80023dc <Set_LED>
						break;
 8002560:	e00d      	b.n	800257e <LedTest+0xea>
						Set_LED(i, 0, 255, 0);
 8002562:	2300      	movs	r3, #0
 8002564:	22ff      	movs	r2, #255	; 0xff
 8002566:	2100      	movs	r1, #0
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f7ff ff37 	bl	80023dc <Set_LED>
					break;
 800256e:	e006      	b.n	800257e <LedTest+0xea>
						Set_LED(i, 0, 0, 255);
 8002570:	23ff      	movs	r3, #255	; 0xff
 8002572:	2200      	movs	r2, #0
 8002574:	2100      	movs	r1, #0
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f7ff ff30 	bl	80023dc <Set_LED>
					break;
 800257c:	bf00      	nop
				WS2812_Send();
 800257e:	f7ff fe37 	bl	80021f0 <WS2812_Send>
				Damian_Marudzi(50000000);
 8002582:	4808      	ldr	r0, [pc, #32]	; (80025a4 <LedTest+0x110>)
 8002584:	f7ff fe18 	bl	80021b8 <Damian_Marudzi>
			for(int i=0; i< MAX_LED; i++)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	3301      	adds	r3, #1
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b07      	cmp	r3, #7
 8002592:	ddc2      	ble.n	800251a <LedTest+0x86>
		break;
 8002594:	bf00      	nop
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	55555556 	.word	0x55555556
 80025a4:	02faf080 	.word	0x02faf080

080025a8 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7) == 1)
 80025ac:	480f      	ldr	r0, [pc, #60]	; (80025ec <TIM7_IRQHandler+0x44>)
 80025ae:	f7ff fbeb 	bl	8001d88 <LL_TIM_IsActiveFlag_UPDATE>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d117      	bne.n	80025e8 <TIM7_IRQHandler+0x40>
	{
		LL_GPIO_TogglePin(test_GPIO_Port, test_Pin);
 80025b8:	2120      	movs	r1, #32
 80025ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025be:	f7ff fc24 	bl	8001e0a <LL_GPIO_TogglePin>
		LL_TIM_ClearFlag_UPDATE(TIM7);
 80025c2:	480a      	ldr	r0, [pc, #40]	; (80025ec <TIM7_IRQHandler+0x44>)
 80025c4:	f7ff fbd2 	bl	8001d6c <LL_TIM_ClearFlag_UPDATE>
		if(time>= DISPLAY_BLINK_TIME*-2)
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <TIM7_IRQHandler+0x48>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f113 0f06 	cmn.w	r3, #6
 80025d0:	db07      	blt.n	80025e2 <TIM7_IRQHandler+0x3a>
		{
			UpdateDisplay();
 80025d2:	f000 f80f 	bl	80025f4 <UpdateDisplay>
			time--;
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <TIM7_IRQHandler+0x48>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3b01      	subs	r3, #1
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <TIM7_IRQHandler+0x48>)
 80025de:	6013      	str	r3, [r2, #0]
		{
			TM1637_SetBrightness(0);
		}

	}
}
 80025e0:	e002      	b.n	80025e8 <TIM7_IRQHandler+0x40>
			TM1637_SetBrightness(0);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f000 fa5e 	bl	8002aa4 <TM1637_SetBrightness>
}
 80025e8:	bf00      	nop
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40001400 	.word	0x40001400
 80025f0:	2000033c 	.word	0x2000033c

080025f4 <UpdateDisplay>:

void UpdateDisplay()
{
 80025f4:	b5b0      	push	{r4, r5, r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
	uint32_t displayData = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	607b      	str	r3, [r7, #4]
	if(time<0 && time>= DISPLAY_BLINK_TIME*-2)
 80025fe:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <UpdateDisplay+0xb4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	da13      	bge.n	800262e <UpdateDisplay+0x3a>
 8002606:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <UpdateDisplay+0xb4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f113 0f06 	cmn.w	r3, #6
 800260e:	db0e      	blt.n	800262e <UpdateDisplay+0x3a>
	{
		if(time%2!=0)
 8002610:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <UpdateDisplay+0xb4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <UpdateDisplay+0x2e>
		{
			dziala();
 800261c:	f000 f9fa 	bl	8002a14 <dziala>
		}
		else
		{
			TM1637_DisplayDecimal(displayData,1);
		}
	  	return;
 8002620:	e03e      	b.n	80026a0 <UpdateDisplay+0xac>
			TM1637_DisplayDecimal(displayData,1);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2101      	movs	r1, #1
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f986 	bl	8002938 <TM1637_DisplayDecimal>
	  	return;
 800262c:	e038      	b.n	80026a0 <UpdateDisplay+0xac>
	}
	displayData = floor(time/60)*100+time%60;
 800262e:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <UpdateDisplay+0xb4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1e      	ldr	r2, [pc, #120]	; (80026ac <UpdateDisplay+0xb8>)
 8002634:	fb82 1203 	smull	r1, r2, r2, r3
 8002638:	441a      	add	r2, r3
 800263a:	1152      	asrs	r2, r2, #5
 800263c:	17db      	asrs	r3, r3, #31
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd ff67 	bl	8000514 <__aeabi_i2d>
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <UpdateDisplay+0xbc>)
 800264c:	f7fd ffcc 	bl	80005e8 <__aeabi_dmul>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4614      	mov	r4, r2
 8002656:	461d      	mov	r5, r3
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <UpdateDisplay+0xb4>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <UpdateDisplay+0xb8>)
 800265e:	fb83 1302 	smull	r1, r3, r3, r2
 8002662:	4413      	add	r3, r2
 8002664:	1159      	asrs	r1, r3, #5
 8002666:	17d3      	asrs	r3, r2, #31
 8002668:	1ac9      	subs	r1, r1, r3
 800266a:	460b      	mov	r3, r1
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	1a5b      	subs	r3, r3, r1
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	1ad1      	subs	r1, r2, r3
 8002674:	4608      	mov	r0, r1
 8002676:	f7fd ff4d 	bl	8000514 <__aeabi_i2d>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4620      	mov	r0, r4
 8002680:	4629      	mov	r1, r5
 8002682:	f7fd fdfb 	bl	800027c <__adddf3>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	f7fe fa6d 	bl	8000b6c <__aeabi_d2uiz>
 8002692:	4603      	mov	r3, r0
 8002694:	607b      	str	r3, [r7, #4]
	TM1637_DisplayDecimal(displayData,1);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2101      	movs	r1, #1
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f94c 	bl	8002938 <TM1637_DisplayDecimal>
}
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bdb0      	pop	{r4, r5, r7, pc}
 80026a6:	bf00      	nop
 80026a8:	2000033c 	.word	0x2000033c
 80026ac:	88888889 	.word	0x88888889
 80026b0:	40590000 	.word	0x40590000

080026b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026b8:	e7fe      	b.n	80026b8 <NMI_Handler+0x4>

080026ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026be:	e7fe      	b.n	80026be <HardFault_Handler+0x4>

080026c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <MemManage_Handler+0x4>

080026c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ca:	e7fe      	b.n	80026ca <BusFault_Handler+0x4>

080026cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <UsageFault_Handler+0x4>

080026d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ee:	b480      	push	{r7}
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	e00a      	b.n	8002732 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800271c:	f3af 8000 	nop.w
 8002720:	4601      	mov	r1, r0
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	60ba      	str	r2, [r7, #8]
 8002728:	b2ca      	uxtb	r2, r1
 800272a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	3301      	adds	r3, #1
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	429a      	cmp	r2, r3
 8002738:	dbf0      	blt.n	800271c <_read+0x12>
  }

  return len;
 800273a:	687b      	ldr	r3, [r7, #4]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	e009      	b.n	800276a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	60ba      	str	r2, [r7, #8]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	3301      	adds	r3, #1
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	429a      	cmp	r2, r3
 8002770:	dbf1      	blt.n	8002756 <_write+0x12>
  }
  return len;
 8002772:	687b      	ldr	r3, [r7, #4]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3718      	adds	r7, #24
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <_close>:

int _close(int file)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027a4:	605a      	str	r2, [r3, #4]
  return 0;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <_isatty>:

int _isatty(int file)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027bc:	2301      	movs	r3, #1
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b085      	sub	sp, #20
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027ec:	4a14      	ldr	r2, [pc, #80]	; (8002840 <_sbrk+0x5c>)
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <_sbrk+0x60>)
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f8:	4b13      	ldr	r3, [pc, #76]	; (8002848 <_sbrk+0x64>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d102      	bne.n	8002806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <_sbrk+0x64>)
 8002802:	4a12      	ldr	r2, [pc, #72]	; (800284c <_sbrk+0x68>)
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <_sbrk+0x64>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	429a      	cmp	r2, r3
 8002812:	d207      	bcs.n	8002824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002814:	f001 f9ca 	bl	8003bac <__errno>
 8002818:	4603      	mov	r3, r0
 800281a:	220c      	movs	r2, #12
 800281c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295
 8002822:	e009      	b.n	8002838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <_sbrk+0x64>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800282a:	4b07      	ldr	r3, [pc, #28]	; (8002848 <_sbrk+0x64>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	4a05      	ldr	r2, [pc, #20]	; (8002848 <_sbrk+0x64>)
 8002834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002836:	68fb      	ldr	r3, [r7, #12]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20018000 	.word	0x20018000
 8002844:	00000400 	.word	0x00000400
 8002848:	20000340 	.word	0x20000340
 800284c:	20000490 	.word	0x20000490

08002850 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <SystemInit+0x20>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	4a05      	ldr	r2, [pc, #20]	; (8002870 <SystemInit+0x20>)
 800285c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <LL_AHB2_GRP1_EnableClock>:
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800287c:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800287e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002880:	4907      	ldr	r1, [pc, #28]	; (80028a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4313      	orrs	r3, r2
 8002886:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800288a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4013      	ands	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	bf00      	nop
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	40021000 	.word	0x40021000

080028a4 <LL_GPIO_SetOutputPin>:
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	619a      	str	r2, [r3, #24]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_GPIO_ResetOutputPin>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <TM1637_ClkHigh>:
    0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, // 0-7
    0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, // 8-9, A-F
    0x00
};

void TM1637_ClkHigh(void){
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(CLK_GPIO_PORT, CLK_PIN);
 80028e0:	2180      	movs	r1, #128	; 0x80
 80028e2:	4802      	ldr	r0, [pc, #8]	; (80028ec <TM1637_ClkHigh+0x10>)
 80028e4:	f7ff ffde 	bl	80028a4 <LL_GPIO_SetOutputPin>
}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	48000800 	.word	0x48000800

080028f0 <TM1637_ClkLow>:

void TM1637_ClkLow(void){
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(CLK_GPIO_PORT, CLK_PIN);
 80028f4:	2180      	movs	r1, #128	; 0x80
 80028f6:	4802      	ldr	r0, [pc, #8]	; (8002900 <TM1637_ClkLow+0x10>)
 80028f8:	f7ff ffe2 	bl	80028c0 <LL_GPIO_ResetOutputPin>
}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	48000800 	.word	0x48000800

08002904 <TM1637_DataHigh>:

void TM1637_DataHigh(void){
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(DATA_GPIO_PORT, DATA_PIN);
 8002908:	2180      	movs	r1, #128	; 0x80
 800290a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800290e:	f7ff ffc9 	bl	80028a4 <LL_GPIO_SetOutputPin>
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}

08002916 <TM1637_DataLow>:

void TM1637_DataLow(void){
 8002916:	b580      	push	{r7, lr}
 8002918:	af00      	add	r7, sp, #0
    LL_GPIO_ResetOutputPin(DATA_GPIO_PORT, DATA_PIN);
 800291a:	2180      	movs	r1, #128	; 0x80
 800291c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002920:	f7ff ffce 	bl	80028c0 <LL_GPIO_ResetOutputPin>
}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}

08002928 <TM1637_Init>:
	}
}


void TM1637_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
    TM1637_SetBrightness(8);
 800292c:	2008      	movs	r0, #8
 800292e:	f000 f8b9 	bl	8002aa4 <TM1637_SetBrightness>
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <TM1637_DisplayDecimal>:

void TM1637_DisplayDecimal(int v, int displaySeparator)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	e032      	b.n	80029ae <TM1637_DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4b30      	ldr	r3, [pc, #192]	; (8002a0c <TM1637_DisplayDecimal+0xd4>)
 800294c:	fb83 2301 	smull	r2, r3, r3, r1
 8002950:	109a      	asrs	r2, r3, #2
 8002952:	17cb      	asrs	r3, r1, #31
 8002954:	1ad2      	subs	r2, r2, r3
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	1aca      	subs	r2, r1, r3
 8002960:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <TM1637_DisplayDecimal+0xd8>)
 8002962:	5c99      	ldrb	r1, [r3, r2]
 8002964:	f107 020c 	add.w	r2, r7, #12
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	4413      	add	r3, r2
 800296c:	460a      	mov	r2, r1
 800296e:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d110      	bne.n	8002998 <TM1637_DisplayDecimal+0x60>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00d      	beq.n	8002998 <TM1637_DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 800297c:	f107 020c 	add.w	r2, r7, #12
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	4413      	add	r3, r2
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800298a:	b2d9      	uxtb	r1, r3
 800298c:	f107 020c 	add.w	r2, r7, #12
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	4413      	add	r3, r2
 8002994:	460a      	mov	r2, r1
 8002996:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a1c      	ldr	r2, [pc, #112]	; (8002a0c <TM1637_DisplayDecimal+0xd4>)
 800299c:	fb82 1203 	smull	r1, r2, r2, r3
 80029a0:	1092      	asrs	r2, r2, #2
 80029a2:	17db      	asrs	r3, r3, #31
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3301      	adds	r3, #1
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	ddc9      	ble.n	8002948 <TM1637_DisplayDecimal+0x10>
    }

    TM1637_Start();
 80029b4:	f000 f88b 	bl	8002ace <TM1637_Start>
    TM1637_WriteByte(0x40);
 80029b8:	2040      	movs	r0, #64	; 0x40
 80029ba:	f000 f8ba 	bl	8002b32 <TM1637_WriteByte>
    TM1637_ReadResult();
 80029be:	f000 f8a8 	bl	8002b12 <TM1637_ReadResult>
    TM1637_Stop();
 80029c2:	f000 f891 	bl	8002ae8 <TM1637_Stop>

    TM1637_Start();
 80029c6:	f000 f882 	bl	8002ace <TM1637_Start>
    TM1637_WriteByte(0xc0);
 80029ca:	20c0      	movs	r0, #192	; 0xc0
 80029cc:	f000 f8b1 	bl	8002b32 <TM1637_WriteByte>
    TM1637_ReadResult();
 80029d0:	f000 f89f 	bl	8002b12 <TM1637_ReadResult>

    for (int i = 0; i < 4; ++i) {
 80029d4:	2300      	movs	r3, #0
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	e00e      	b.n	80029f8 <TM1637_DisplayDecimal+0xc0>
        TM1637_WriteByte(digitArr[3 - i]);
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f1c3 0303 	rsb	r3, r3, #3
 80029e0:	3318      	adds	r3, #24
 80029e2:	443b      	add	r3, r7
 80029e4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 f8a2 	bl	8002b32 <TM1637_WriteByte>
        TM1637_ReadResult();
 80029ee:	f000 f890 	bl	8002b12 <TM1637_ReadResult>
    for (int i = 0; i < 4; ++i) {
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	3301      	adds	r3, #1
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	dded      	ble.n	80029da <TM1637_DisplayDecimal+0xa2>
    }

    TM1637_Stop();
 80029fe:	f000 f873 	bl	8002ae8 <TM1637_Stop>
}
 8002a02:	bf00      	nop
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	66666667 	.word	0x66666667
 8002a10:	080058d8 	.word	0x080058d8

08002a14 <dziala>:

void dziala()
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e013      	b.n	8002a48 <dziala+0x34>
        digitArr[i] = 0x00;
 8002a20:	1d3a      	adds	r2, r7, #4
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4413      	add	r3, r2
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
        digitArr[i] |= 1 << 7;
 8002a2a:	1d3a      	adds	r2, r7, #4
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4413      	add	r3, r2
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a36:	b2d9      	uxtb	r1, r3
 8002a38:	1d3a      	adds	r2, r7, #4
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	460a      	mov	r2, r1
 8002a40:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; ++i) {
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3301      	adds	r3, #1
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	dde8      	ble.n	8002a20 <dziala+0xc>
    }

    TM1637_Start();
 8002a4e:	f000 f83e 	bl	8002ace <TM1637_Start>
    TM1637_WriteByte(0x40);
 8002a52:	2040      	movs	r0, #64	; 0x40
 8002a54:	f000 f86d 	bl	8002b32 <TM1637_WriteByte>
    TM1637_ReadResult();
 8002a58:	f000 f85b 	bl	8002b12 <TM1637_ReadResult>
    TM1637_Stop();
 8002a5c:	f000 f844 	bl	8002ae8 <TM1637_Stop>

    TM1637_Start();
 8002a60:	f000 f835 	bl	8002ace <TM1637_Start>
    TM1637_WriteByte(0xc0);
 8002a64:	20c0      	movs	r0, #192	; 0xc0
 8002a66:	f000 f864 	bl	8002b32 <TM1637_WriteByte>
    TM1637_ReadResult();
 8002a6a:	f000 f852 	bl	8002b12 <TM1637_ReadResult>

    for (int i = 0; i < 4; ++i) {
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	e00e      	b.n	8002a92 <dziala+0x7e>
        TM1637_WriteByte(digitArr[3 - i]);
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f1c3 0303 	rsb	r3, r3, #3
 8002a7a:	3310      	adds	r3, #16
 8002a7c:	443b      	add	r3, r7
 8002a7e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f855 	bl	8002b32 <TM1637_WriteByte>
        TM1637_ReadResult();
 8002a88:	f000 f843 	bl	8002b12 <TM1637_ReadResult>
    for (int i = 0; i < 4; ++i) {
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	dded      	ble.n	8002a74 <dziala+0x60>
    }

    TM1637_Stop();
 8002a98:	f000 f826 	bl	8002ae8 <TM1637_Stop>
}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <TM1637_SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void TM1637_SetBrightness(char brightness)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    TM1637_Start();
 8002aae:	f000 f80e 	bl	8002ace <TM1637_Start>
    TM1637_WriteByte(0x87 + brightness);
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	3b79      	subs	r3, #121	; 0x79
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f000 f83a 	bl	8002b32 <TM1637_WriteByte>
    TM1637_ReadResult();
 8002abe:	f000 f828 	bl	8002b12 <TM1637_ReadResult>
    TM1637_Stop();
 8002ac2:	f000 f811 	bl	8002ae8 <TM1637_Stop>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <TM1637_Start>:

void TM1637_Start(void)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	af00      	add	r7, sp, #0
    TM1637_ClkHigh();
 8002ad2:	f7ff ff03 	bl	80028dc <TM1637_ClkHigh>
    TM1637_DataHigh();
 8002ad6:	f7ff ff15 	bl	8002904 <TM1637_DataHigh>
    TM1637_DelayUsec(2);
 8002ada:	2002      	movs	r0, #2
 8002adc:	f000 f853 	bl	8002b86 <TM1637_DelayUsec>
    TM1637_DataLow();
 8002ae0:	f7ff ff19 	bl	8002916 <TM1637_DataLow>
}
 8002ae4:	bf00      	nop
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <TM1637_Stop>:

void TM1637_Stop(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 8002aec:	f7ff ff00 	bl	80028f0 <TM1637_ClkLow>
    TM1637_DelayUsec(2);
 8002af0:	2002      	movs	r0, #2
 8002af2:	f000 f848 	bl	8002b86 <TM1637_DelayUsec>
    TM1637_DataLow();
 8002af6:	f7ff ff0e 	bl	8002916 <TM1637_DataLow>
    TM1637_DelayUsec(2);
 8002afa:	2002      	movs	r0, #2
 8002afc:	f000 f843 	bl	8002b86 <TM1637_DelayUsec>
    TM1637_ClkHigh();
 8002b00:	f7ff feec 	bl	80028dc <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 8002b04:	2002      	movs	r0, #2
 8002b06:	f000 f83e 	bl	8002b86 <TM1637_DelayUsec>
    TM1637_DataHigh();
 8002b0a:	f7ff fefb 	bl	8002904 <TM1637_DataHigh>
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <TM1637_ReadResult>:

void TM1637_ReadResult(void)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 8002b16:	f7ff feeb 	bl	80028f0 <TM1637_ClkLow>
    TM1637_DelayUsec(5);
 8002b1a:	2005      	movs	r0, #5
 8002b1c:	f000 f833 	bl	8002b86 <TM1637_DelayUsec>

    TM1637_ClkHigh();
 8002b20:	f7ff fedc 	bl	80028dc <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 8002b24:	2002      	movs	r0, #2
 8002b26:	f000 f82e 	bl	8002b86 <TM1637_DelayUsec>
    TM1637_ClkLow();
 8002b2a:	f7ff fee1 	bl	80028f0 <TM1637_ClkLow>
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <TM1637_WriteByte>:

void TM1637_WriteByte(unsigned char b)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b084      	sub	sp, #16
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	4603      	mov	r3, r0
 8002b3a:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; ++i) {
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e019      	b.n	8002b76 <TM1637_WriteByte+0x44>
		TM1637_ClkLow();
 8002b42:	f7ff fed5 	bl	80028f0 <TM1637_ClkLow>
		if (b & 0x01) {
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <TM1637_WriteByte+0x24>
			TM1637_DataHigh();
 8002b50:	f7ff fed8 	bl	8002904 <TM1637_DataHigh>
 8002b54:	e001      	b.n	8002b5a <TM1637_WriteByte+0x28>
		}
		else {
			TM1637_DataLow();
 8002b56:	f7ff fede 	bl	8002916 <TM1637_DataLow>
		}
		TM1637_DelayUsec(3);
 8002b5a:	2003      	movs	r0, #3
 8002b5c:	f000 f813 	bl	8002b86 <TM1637_DelayUsec>
		b >>= 1;
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	085b      	lsrs	r3, r3, #1
 8002b64:	71fb      	strb	r3, [r7, #7]
		TM1637_ClkHigh();
 8002b66:	f7ff feb9 	bl	80028dc <TM1637_ClkHigh>
		TM1637_DelayUsec(3);
 8002b6a:	2003      	movs	r0, #3
 8002b6c:	f000 f80b 	bl	8002b86 <TM1637_DelayUsec>
	for (int i = 0; i < 8; ++i) {
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3301      	adds	r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b07      	cmp	r3, #7
 8002b7a:	dde2      	ble.n	8002b42 <TM1637_WriteByte+0x10>
	}
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <TM1637_DelayUsec>:

void TM1637_DelayUsec(unsigned int i)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b085      	sub	sp, #20
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 8002b8e:	e00d      	b.n	8002bac <TM1637_DelayUsec+0x26>
        for (int j = 0; j < 500; ++j) {
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	e003      	b.n	8002b9e <TM1637_DelayUsec+0x18>
					__NOP();
 8002b96:	bf00      	nop
        for (int j = 0; j < 500; ++j) {
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ba4:	dbf7      	blt.n	8002b96 <TM1637_DelayUsec+0x10>
    for (; i>0; i--) {
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1ee      	bne.n	8002b90 <TM1637_DelayUsec+0xa>
        }
    }
}
 8002bb2:	bf00      	nop
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <TM1637_gpio_init>:

void TM1637_gpio_init(){
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc6:	463b      	mov	r3, r7
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]
 8002bd4:	615a      	str	r2, [r3, #20]
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f7ff fe4c 	bl	8002874 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002bdc:	2004      	movs	r0, #4
 8002bde:	f7ff fe49 	bl	8002874 <LL_AHB2_GRP1_EnableClock>

	GPIO_InitStruct.Pin = DATA_PIN;
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002be6:	2301      	movs	r3, #1
 8002be8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002bea:	2302      	movs	r3, #2
 8002bec:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(DATA_GPIO_PORT, &GPIO_InitStruct);
 8002bf6:	463b      	mov	r3, r7
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bfe:	f000 f989 	bl	8002f14 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = CLK_PIN;
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002c06:	2301      	movs	r3, #1
 8002c08:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	60bb      	str	r3, [r7, #8]
 	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(CLK_GPIO_PORT, &GPIO_InitStruct);
 8002c16:	463b      	mov	r3, r7
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4803      	ldr	r0, [pc, #12]	; (8002c28 <TM1637_gpio_init+0x68>)
 8002c1c:	f000 f97a 	bl	8002f14 <LL_GPIO_Init>
}
 8002c20:	bf00      	nop
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	48000800 	.word	0x48000800

08002c2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c30:	f7ff fe0e 	bl	8002850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c34:	480c      	ldr	r0, [pc, #48]	; (8002c68 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c36:	490d      	ldr	r1, [pc, #52]	; (8002c6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c38:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <LoopForever+0xe>)
  movs r3, #0
 8002c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c3c:	e002      	b.n	8002c44 <LoopCopyDataInit>

08002c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c42:	3304      	adds	r3, #4

08002c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c48:	d3f9      	bcc.n	8002c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c4c:	4c0a      	ldr	r4, [pc, #40]	; (8002c78 <LoopForever+0x16>)
  movs r3, #0
 8002c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c50:	e001      	b.n	8002c56 <LoopFillZerobss>

08002c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c54:	3204      	adds	r2, #4

08002c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c58:	d3fb      	bcc.n	8002c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c5a:	f000 ffad 	bl	8003bb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c5e:	f7ff f8ed 	bl	8001e3c <main>

08002c62 <LoopForever>:

LoopForever:
    b LoopForever
 8002c62:	e7fe      	b.n	8002c62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c6c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002c70:	08005b00 	.word	0x08005b00
  ldr r2, =_sbss
 8002c74:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002c78:	20000490 	.word	0x20000490

08002c7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c7c:	e7fe      	b.n	8002c7c <ADC1_2_IRQHandler>

08002c7e <LL_GPIO_SetPinMode>:
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b08b      	sub	sp, #44	; 0x2c
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	fa93 f3a3 	rbit	r3, r3
 8002c98:	613b      	str	r3, [r7, #16]
  return result;
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002ca4:	2320      	movs	r3, #32
 8002ca6:	e003      	b.n	8002cb0 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	2103      	movs	r1, #3
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	401a      	ands	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	fa93 f3a3 	rbit	r3, r3
 8002cc6:	61fb      	str	r3, [r7, #28]
  return result;
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002cd2:	2320      	movs	r3, #32
 8002cd4:	e003      	b.n	8002cde <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	fab3 f383 	clz	r3, r3
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	601a      	str	r2, [r3, #0]
}
 8002cec:	bf00      	nop
 8002cee:	372c      	adds	r7, #44	; 0x2c
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_GPIO_SetPinOutputType>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	401a      	ands	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	431a      	orrs	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	605a      	str	r2, [r3, #4]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_GPIO_SetPinSpeed>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b08b      	sub	sp, #44	; 0x2c
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	613b      	str	r3, [r7, #16]
  return result;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002d4e:	2320      	movs	r3, #32
 8002d50:	e003      	b.n	8002d5a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	2103      	movs	r1, #3
 8002d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	401a      	ands	r2, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	61fb      	str	r3, [r7, #28]
  return result;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002d7c:	2320      	movs	r3, #32
 8002d7e:	e003      	b.n	8002d88 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d90:	431a      	orrs	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	609a      	str	r2, [r3, #8]
}
 8002d96:	bf00      	nop
 8002d98:	372c      	adds	r7, #44	; 0x2c
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <LL_GPIO_SetPinPull>:
{
 8002da2:	b480      	push	{r7}
 8002da4:	b08b      	sub	sp, #44	; 0x2c
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	613b      	str	r3, [r7, #16]
  return result;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002dc8:	2320      	movs	r3, #32
 8002dca:	e003      	b.n	8002dd4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	2103      	movs	r1, #3
 8002dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	401a      	ands	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	61fb      	str	r3, [r7, #28]
  return result;
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002df6:	2320      	movs	r3, #32
 8002df8:	e003      	b.n	8002e02 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	fab3 f383 	clz	r3, r3
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	60da      	str	r2, [r3, #12]
}
 8002e10:	bf00      	nop
 8002e12:	372c      	adds	r7, #44	; 0x2c
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_GPIO_SetAFPin_0_7>:
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b08b      	sub	sp, #44	; 0x2c
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a1a      	ldr	r2, [r3, #32]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	613b      	str	r3, [r7, #16]
  return result;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002e42:	2320      	movs	r3, #32
 8002e44:	e003      	b.n	8002e4e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	fab3 f383 	clz	r3, r3
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	210f      	movs	r1, #15
 8002e52:	fa01 f303 	lsl.w	r3, r1, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	401a      	ands	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	fa93 f3a3 	rbit	r3, r3
 8002e64:	61fb      	str	r3, [r7, #28]
  return result;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002e70:	2320      	movs	r3, #32
 8002e72:	e003      	b.n	8002e7c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	431a      	orrs	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	621a      	str	r2, [r3, #32]
}
 8002e8a:	bf00      	nop
 8002e8c:	372c      	adds	r7, #44	; 0x2c
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <LL_GPIO_SetAFPin_8_15>:
{
 8002e96:	b480      	push	{r7}
 8002e98:	b08b      	sub	sp, #44	; 0x2c
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	613b      	str	r3, [r7, #16]
  return result;
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	e003      	b.n	8002eca <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	210f      	movs	r1, #15
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	fa93 f3a3 	rbit	r3, r3
 8002ee2:	61fb      	str	r3, [r7, #28]
  return result;
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002eee:	2320      	movs	r3, #32
 8002ef0:	e003      	b.n	8002efa <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	431a      	orrs	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002f08:	bf00      	nop
 8002f0a:	372c      	adds	r7, #44	; 0x2c
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	60fb      	str	r3, [r7, #12]
  return result;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <LL_GPIO_Init+0x26>
    return 32U;
 8002f36:	2320      	movs	r3, #32
 8002f38:	e003      	b.n	8002f42 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002f44:	e048      	b.n	8002fd8 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d03a      	beq.n	8002fd2 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d003      	beq.n	8002f6c <LL_GPIO_Init+0x58>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d10e      	bne.n	8002f8a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	461a      	mov	r2, r3
 8002f72:	69b9      	ldr	r1, [r7, #24]
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff fed7 	bl	8002d28 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6819      	ldr	r1, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	461a      	mov	r2, r3
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff feb7 	bl	8002cf8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	69b9      	ldr	r1, [r7, #24]
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ff05 	bl	8002da2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d111      	bne.n	8002fc4 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	2bff      	cmp	r3, #255	; 0xff
 8002fa4:	d807      	bhi.n	8002fb6 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	461a      	mov	r2, r3
 8002fac:	69b9      	ldr	r1, [r7, #24]
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff ff34 	bl	8002e1c <LL_GPIO_SetAFPin_0_7>
 8002fb4:	e006      	b.n	8002fc4 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	69b9      	ldr	r1, [r7, #24]
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff ff69 	bl	8002e96 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	69b9      	ldr	r1, [r7, #24]
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff fe56 	bl	8002c7e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1af      	bne.n	8002f46 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3720      	adds	r7, #32
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <LL_TIM_SetPrescaler>:
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <LL_TIM_SetAutoReload>:
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_TIM_SetRepetitionCounter>:
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_TIM_OC_SetCompareCH1>:
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_TIM_OC_SetCompareCH2>:
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_TIM_OC_SetCompareCH3>:
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <LL_TIM_OC_SetCompareCH4>:
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <LL_TIM_OC_SetCompareCH5>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_TIM_OC_SetCompareCH6>:
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <LL_TIM_GenerateEvent_UPDATE>:
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f043 0201 	orr.w	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	615a      	str	r2, [r3, #20]
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a3d      	ldr	r2, [pc, #244]	; (8003218 <LL_TIM_Init+0x108>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d013      	beq.n	8003150 <LL_TIM_Init+0x40>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312e:	d00f      	beq.n	8003150 <LL_TIM_Init+0x40>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a3a      	ldr	r2, [pc, #232]	; (800321c <LL_TIM_Init+0x10c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00b      	beq.n	8003150 <LL_TIM_Init+0x40>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a39      	ldr	r2, [pc, #228]	; (8003220 <LL_TIM_Init+0x110>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d007      	beq.n	8003150 <LL_TIM_Init+0x40>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a38      	ldr	r2, [pc, #224]	; (8003224 <LL_TIM_Init+0x114>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d003      	beq.n	8003150 <LL_TIM_Init+0x40>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a37      	ldr	r2, [pc, #220]	; (8003228 <LL_TIM_Init+0x118>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d106      	bne.n	800315e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a2d      	ldr	r2, [pc, #180]	; (8003218 <LL_TIM_Init+0x108>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d01f      	beq.n	80031a6 <LL_TIM_Init+0x96>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316c:	d01b      	beq.n	80031a6 <LL_TIM_Init+0x96>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a2a      	ldr	r2, [pc, #168]	; (800321c <LL_TIM_Init+0x10c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d017      	beq.n	80031a6 <LL_TIM_Init+0x96>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a29      	ldr	r2, [pc, #164]	; (8003220 <LL_TIM_Init+0x110>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <LL_TIM_Init+0x96>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a28      	ldr	r2, [pc, #160]	; (8003224 <LL_TIM_Init+0x114>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00f      	beq.n	80031a6 <LL_TIM_Init+0x96>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a27      	ldr	r2, [pc, #156]	; (8003228 <LL_TIM_Init+0x118>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00b      	beq.n	80031a6 <LL_TIM_Init+0x96>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a26      	ldr	r2, [pc, #152]	; (800322c <LL_TIM_Init+0x11c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d007      	beq.n	80031a6 <LL_TIM_Init+0x96>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a25      	ldr	r2, [pc, #148]	; (8003230 <LL_TIM_Init+0x120>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d003      	beq.n	80031a6 <LL_TIM_Init+0x96>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a24      	ldr	r2, [pc, #144]	; (8003234 <LL_TIM_Init+0x124>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d106      	bne.n	80031b4 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	4619      	mov	r1, r3
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff ff23 	bl	800300c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	4619      	mov	r1, r3
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff ff0f 	bl	8002ff0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a10      	ldr	r2, [pc, #64]	; (8003218 <LL_TIM_Init+0x108>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00f      	beq.n	80031fa <LL_TIM_Init+0xea>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a12      	ldr	r2, [pc, #72]	; (8003228 <LL_TIM_Init+0x118>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00b      	beq.n	80031fa <LL_TIM_Init+0xea>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a11      	ldr	r2, [pc, #68]	; (800322c <LL_TIM_Init+0x11c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <LL_TIM_Init+0xea>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a10      	ldr	r2, [pc, #64]	; (8003230 <LL_TIM_Init+0x120>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d003      	beq.n	80031fa <LL_TIM_Init+0xea>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a0f      	ldr	r2, [pc, #60]	; (8003234 <LL_TIM_Init+0x124>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d105      	bne.n	8003206 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	4619      	mov	r1, r3
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff ff11 	bl	8003028 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff ff72 	bl	80030f0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40012c00 	.word	0x40012c00
 800321c:	40000400 	.word	0x40000400
 8003220:	40000800 	.word	0x40000800
 8003224:	40000c00 	.word	0x40000c00
 8003228:	40013400 	.word	0x40013400
 800322c:	40014000 	.word	0x40014000
 8003230:	40014400 	.word	0x40014400
 8003234:	40014800 	.word	0x40014800

08003238 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800324e:	d045      	beq.n	80032dc <LL_TIM_OC_Init+0xa4>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003256:	d848      	bhi.n	80032ea <LL_TIM_OC_Init+0xb2>
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800325e:	d036      	beq.n	80032ce <LL_TIM_OC_Init+0x96>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003266:	d840      	bhi.n	80032ea <LL_TIM_OC_Init+0xb2>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326e:	d027      	beq.n	80032c0 <LL_TIM_OC_Init+0x88>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003276:	d838      	bhi.n	80032ea <LL_TIM_OC_Init+0xb2>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800327e:	d018      	beq.n	80032b2 <LL_TIM_OC_Init+0x7a>
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003286:	d830      	bhi.n	80032ea <LL_TIM_OC_Init+0xb2>
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d003      	beq.n	8003296 <LL_TIM_OC_Init+0x5e>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b10      	cmp	r3, #16
 8003292:	d007      	beq.n	80032a4 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003294:	e029      	b.n	80032ea <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f82d 	bl	80032f8 <OC1Config>
 800329e:	4603      	mov	r3, r0
 80032a0:	75fb      	strb	r3, [r7, #23]
      break;
 80032a2:	e023      	b.n	80032ec <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f8a6 	bl	80033f8 <OC2Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	75fb      	strb	r3, [r7, #23]
      break;
 80032b0:	e01c      	b.n	80032ec <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f923 	bl	8003500 <OC3Config>
 80032ba:	4603      	mov	r3, r0
 80032bc:	75fb      	strb	r3, [r7, #23]
      break;
 80032be:	e015      	b.n	80032ec <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f9a0 	bl	8003608 <OC4Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	75fb      	strb	r3, [r7, #23]
      break;
 80032cc:	e00e      	b.n	80032ec <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fa05 	bl	80036e0 <OC5Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	75fb      	strb	r3, [r7, #23]
      break;
 80032da:	e007      	b.n	80032ec <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fa62 	bl	80037a8 <OC6Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	75fb      	strb	r3, [r7, #23]
      break;
 80032e8:	e000      	b.n	80032ec <LL_TIM_OC_Init+0xb4>
      break;
 80032ea:	bf00      	nop
  }

  return result;
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f023 0201 	bic.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0303 	bic.w	r3, r3, #3
 8003326:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800332e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f023 0202 	bic.w	r2, r3, #2
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f023 0201 	bic.w	r2, r3, #1
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a22      	ldr	r2, [pc, #136]	; (80033e4 <OC1Config+0xec>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00f      	beq.n	800337e <OC1Config+0x86>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a21      	ldr	r2, [pc, #132]	; (80033e8 <OC1Config+0xf0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00b      	beq.n	800337e <OC1Config+0x86>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a20      	ldr	r2, [pc, #128]	; (80033ec <OC1Config+0xf4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d007      	beq.n	800337e <OC1Config+0x86>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a1f      	ldr	r2, [pc, #124]	; (80033f0 <OC1Config+0xf8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d003      	beq.n	800337e <OC1Config+0x86>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a1e      	ldr	r2, [pc, #120]	; (80033f4 <OC1Config+0xfc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d11e      	bne.n	80033bc <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f023 0208 	bic.w	r2, r3, #8
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4313      	orrs	r3, r2
 800338c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f023 0204 	bic.w	r2, r3, #4
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4619      	mov	r1, r3
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff fe38 	bl	8003044 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40012c00 	.word	0x40012c00
 80033e8:	40013400 	.word	0x40013400
 80033ec:	40014000 	.word	0x40014000
 80033f0:	40014400 	.word	0x40014400
 80033f4:	40014800 	.word	0x40014800

080033f8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f023 0210 	bic.w	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800342e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	6812      	ldr	r2, [r2, #0]
 8003436:	0212      	lsls	r2, r2, #8
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f023 0220 	bic.w	r2, r3, #32
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	4313      	orrs	r3, r2
 800344a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f023 0210 	bic.w	r2, r3, #16
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a23      	ldr	r2, [pc, #140]	; (80034ec <OC2Config+0xf4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00f      	beq.n	8003484 <OC2Config+0x8c>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a22      	ldr	r2, [pc, #136]	; (80034f0 <OC2Config+0xf8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00b      	beq.n	8003484 <OC2Config+0x8c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a21      	ldr	r2, [pc, #132]	; (80034f4 <OC2Config+0xfc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d007      	beq.n	8003484 <OC2Config+0x8c>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a20      	ldr	r2, [pc, #128]	; (80034f8 <OC2Config+0x100>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d003      	beq.n	8003484 <OC2Config+0x8c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a1f      	ldr	r2, [pc, #124]	; (80034fc <OC2Config+0x104>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d11f      	bne.n	80034c4 <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	019b      	lsls	r3, r3, #6
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	019b      	lsls	r3, r3, #6
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4619      	mov	r1, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff fdc2 	bl	8003060 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40012c00 	.word	0x40012c00
 80034f0:	40013400 	.word	0x40013400
 80034f4:	40014000 	.word	0x40014000
 80034f8:	40014400 	.word	0x40014400
 80034fc:	40014800 	.word	0x40014800

08003500 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0303 	bic.w	r3, r3, #3
 800352e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	4313      	orrs	r3, r2
 8003550:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a23      	ldr	r2, [pc, #140]	; (80035f4 <OC3Config+0xf4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00f      	beq.n	800358a <OC3Config+0x8a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a22      	ldr	r2, [pc, #136]	; (80035f8 <OC3Config+0xf8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00b      	beq.n	800358a <OC3Config+0x8a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a21      	ldr	r2, [pc, #132]	; (80035fc <OC3Config+0xfc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d007      	beq.n	800358a <OC3Config+0x8a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a20      	ldr	r2, [pc, #128]	; (8003600 <OC3Config+0x100>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d003      	beq.n	800358a <OC3Config+0x8a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1f      	ldr	r2, [pc, #124]	; (8003604 <OC3Config+0x104>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d11f      	bne.n	80035ca <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	029b      	lsls	r3, r3, #10
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	029b      	lsls	r3, r3, #10
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	015b      	lsls	r3, r3, #5
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	4619      	mov	r1, r3
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff fd4d 	bl	800307c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40012c00 	.word	0x40012c00
 80035f8:	40013400 	.word	0x40013400
 80035fc:	40014000 	.word	0x40014000
 8003600:	40014400 	.word	0x40014400
 8003604:	40014800 	.word	0x40014800

08003608 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800363e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	0212      	lsls	r2, r2, #8
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	031b      	lsls	r3, r3, #12
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	031b      	lsls	r3, r3, #12
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a17      	ldr	r2, [pc, #92]	; (80036cc <OC4Config+0xc4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00f      	beq.n	8003694 <OC4Config+0x8c>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a16      	ldr	r2, [pc, #88]	; (80036d0 <OC4Config+0xc8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00b      	beq.n	8003694 <OC4Config+0x8c>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a15      	ldr	r2, [pc, #84]	; (80036d4 <OC4Config+0xcc>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d007      	beq.n	8003694 <OC4Config+0x8c>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a14      	ldr	r2, [pc, #80]	; (80036d8 <OC4Config+0xd0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d003      	beq.n	8003694 <OC4Config+0x8c>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a13      	ldr	r2, [pc, #76]	; (80036dc <OC4Config+0xd4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d107      	bne.n	80036a4 <OC4Config+0x9c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	019b      	lsls	r3, r3, #6
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4619      	mov	r1, r3
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff fcee 	bl	8003098 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40012c00 	.word	0x40012c00
 80036d0:	40013400 	.word	0x40013400
 80036d4:	40014000 	.word	0x40014000
 80036d8:	40014400 	.word	0x40014400
 80036dc:	40014800 	.word	0x40014800

080036e0 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003700:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	4313      	orrs	r3, r2
 8003712:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	041b      	lsls	r3, r3, #16
 8003720:	4313      	orrs	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	041b      	lsls	r3, r3, #16
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a17      	ldr	r2, [pc, #92]	; (8003794 <OC5Config+0xb4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00f      	beq.n	800375c <OC5Config+0x7c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a16      	ldr	r2, [pc, #88]	; (8003798 <OC5Config+0xb8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00b      	beq.n	800375c <OC5Config+0x7c>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a15      	ldr	r2, [pc, #84]	; (800379c <OC5Config+0xbc>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d007      	beq.n	800375c <OC5Config+0x7c>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a14      	ldr	r2, [pc, #80]	; (80037a0 <OC5Config+0xc0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d003      	beq.n	800375c <OC5Config+0x7c>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a13      	ldr	r2, [pc, #76]	; (80037a4 <OC5Config+0xc4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d109      	bne.n	8003770 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	021b      	lsls	r3, r3, #8
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	4619      	mov	r1, r3
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff fc99 	bl	80030b4 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40012c00 	.word	0x40012c00
 8003798:	40013400 	.word	0x40013400
 800379c:	40014000 	.word	0x40014000
 80037a0:	40014400 	.word	0x40014400
 80037a4:	40014800 	.word	0x40014800

080037a8 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	6812      	ldr	r2, [r2, #0]
 80037d8:	0212      	lsls	r2, r2, #8
 80037da:	4313      	orrs	r3, r2
 80037dc:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	051b      	lsls	r3, r3, #20
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	051b      	lsls	r3, r3, #20
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a16      	ldr	r2, [pc, #88]	; (800385c <OC6Config+0xb4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00f      	beq.n	8003826 <OC6Config+0x7e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a15      	ldr	r2, [pc, #84]	; (8003860 <OC6Config+0xb8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00b      	beq.n	8003826 <OC6Config+0x7e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a14      	ldr	r2, [pc, #80]	; (8003864 <OC6Config+0xbc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d007      	beq.n	8003826 <OC6Config+0x7e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a13      	ldr	r2, [pc, #76]	; (8003868 <OC6Config+0xc0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d003      	beq.n	8003826 <OC6Config+0x7e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a12      	ldr	r2, [pc, #72]	; (800386c <OC6Config+0xc4>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d109      	bne.n	800383a <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	029b      	lsls	r3, r3, #10
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff fc44 	bl	80030d4 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40012c00 	.word	0x40012c00
 8003860:	40013400 	.word	0x40013400
 8003864:	40014000 	.word	0x40014000
 8003868:	40014400 	.word	0x40014400
 800386c:	40014800 	.word	0x40014800

08003870 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003882:	4a07      	ldr	r2, [pc, #28]	; (80038a0 <LL_InitTick+0x30>)
 8003884:	3b01      	subs	r3, #1
 8003886:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003888:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <LL_InitTick+0x30>)
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800388e:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <LL_InitTick+0x30>)
 8003890:	2205      	movs	r2, #5
 8003892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	e000e010 	.word	0xe000e010

080038a4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80038ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ffdd 	bl	8003870 <LL_InitTick>
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80038c8:	4a04      	ldr	r2, [pc, #16]	; (80038dc <LL_SetSystemCoreClock+0x1c>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6013      	str	r3, [r2, #0]
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20000000 	.word	0x20000000

080038e0 <std>:
 80038e0:	2300      	movs	r3, #0
 80038e2:	b510      	push	{r4, lr}
 80038e4:	4604      	mov	r4, r0
 80038e6:	e9c0 3300 	strd	r3, r3, [r0]
 80038ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038ee:	6083      	str	r3, [r0, #8]
 80038f0:	8181      	strh	r1, [r0, #12]
 80038f2:	6643      	str	r3, [r0, #100]	; 0x64
 80038f4:	81c2      	strh	r2, [r0, #14]
 80038f6:	6183      	str	r3, [r0, #24]
 80038f8:	4619      	mov	r1, r3
 80038fa:	2208      	movs	r2, #8
 80038fc:	305c      	adds	r0, #92	; 0x5c
 80038fe:	f000 f906 	bl	8003b0e <memset>
 8003902:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <std+0x58>)
 8003904:	6263      	str	r3, [r4, #36]	; 0x24
 8003906:	4b0d      	ldr	r3, [pc, #52]	; (800393c <std+0x5c>)
 8003908:	62a3      	str	r3, [r4, #40]	; 0x28
 800390a:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <std+0x60>)
 800390c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800390e:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <std+0x64>)
 8003910:	6323      	str	r3, [r4, #48]	; 0x30
 8003912:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <std+0x68>)
 8003914:	6224      	str	r4, [r4, #32]
 8003916:	429c      	cmp	r4, r3
 8003918:	d006      	beq.n	8003928 <std+0x48>
 800391a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800391e:	4294      	cmp	r4, r2
 8003920:	d002      	beq.n	8003928 <std+0x48>
 8003922:	33d0      	adds	r3, #208	; 0xd0
 8003924:	429c      	cmp	r4, r3
 8003926:	d105      	bne.n	8003934 <std+0x54>
 8003928:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800392c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003930:	f000 b966 	b.w	8003c00 <__retarget_lock_init_recursive>
 8003934:	bd10      	pop	{r4, pc}
 8003936:	bf00      	nop
 8003938:	08003a89 	.word	0x08003a89
 800393c:	08003aab 	.word	0x08003aab
 8003940:	08003ae3 	.word	0x08003ae3
 8003944:	08003b07 	.word	0x08003b07
 8003948:	20000344 	.word	0x20000344

0800394c <stdio_exit_handler>:
 800394c:	4a02      	ldr	r2, [pc, #8]	; (8003958 <stdio_exit_handler+0xc>)
 800394e:	4903      	ldr	r1, [pc, #12]	; (800395c <stdio_exit_handler+0x10>)
 8003950:	4803      	ldr	r0, [pc, #12]	; (8003960 <stdio_exit_handler+0x14>)
 8003952:	f000 b869 	b.w	8003a28 <_fwalk_sglue>
 8003956:	bf00      	nop
 8003958:	20000004 	.word	0x20000004
 800395c:	080044ad 	.word	0x080044ad
 8003960:	20000010 	.word	0x20000010

08003964 <cleanup_stdio>:
 8003964:	6841      	ldr	r1, [r0, #4]
 8003966:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <cleanup_stdio+0x34>)
 8003968:	4299      	cmp	r1, r3
 800396a:	b510      	push	{r4, lr}
 800396c:	4604      	mov	r4, r0
 800396e:	d001      	beq.n	8003974 <cleanup_stdio+0x10>
 8003970:	f000 fd9c 	bl	80044ac <_fflush_r>
 8003974:	68a1      	ldr	r1, [r4, #8]
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <cleanup_stdio+0x38>)
 8003978:	4299      	cmp	r1, r3
 800397a:	d002      	beq.n	8003982 <cleanup_stdio+0x1e>
 800397c:	4620      	mov	r0, r4
 800397e:	f000 fd95 	bl	80044ac <_fflush_r>
 8003982:	68e1      	ldr	r1, [r4, #12]
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <cleanup_stdio+0x3c>)
 8003986:	4299      	cmp	r1, r3
 8003988:	d004      	beq.n	8003994 <cleanup_stdio+0x30>
 800398a:	4620      	mov	r0, r4
 800398c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003990:	f000 bd8c 	b.w	80044ac <_fflush_r>
 8003994:	bd10      	pop	{r4, pc}
 8003996:	bf00      	nop
 8003998:	20000344 	.word	0x20000344
 800399c:	200003ac 	.word	0x200003ac
 80039a0:	20000414 	.word	0x20000414

080039a4 <global_stdio_init.part.0>:
 80039a4:	b510      	push	{r4, lr}
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <global_stdio_init.part.0+0x30>)
 80039a8:	4c0b      	ldr	r4, [pc, #44]	; (80039d8 <global_stdio_init.part.0+0x34>)
 80039aa:	4a0c      	ldr	r2, [pc, #48]	; (80039dc <global_stdio_init.part.0+0x38>)
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	4620      	mov	r0, r4
 80039b0:	2200      	movs	r2, #0
 80039b2:	2104      	movs	r1, #4
 80039b4:	f7ff ff94 	bl	80038e0 <std>
 80039b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80039bc:	2201      	movs	r2, #1
 80039be:	2109      	movs	r1, #9
 80039c0:	f7ff ff8e 	bl	80038e0 <std>
 80039c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80039c8:	2202      	movs	r2, #2
 80039ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039ce:	2112      	movs	r1, #18
 80039d0:	f7ff bf86 	b.w	80038e0 <std>
 80039d4:	2000047c 	.word	0x2000047c
 80039d8:	20000344 	.word	0x20000344
 80039dc:	0800394d 	.word	0x0800394d

080039e0 <__sfp_lock_acquire>:
 80039e0:	4801      	ldr	r0, [pc, #4]	; (80039e8 <__sfp_lock_acquire+0x8>)
 80039e2:	f000 b90e 	b.w	8003c02 <__retarget_lock_acquire_recursive>
 80039e6:	bf00      	nop
 80039e8:	20000485 	.word	0x20000485

080039ec <__sfp_lock_release>:
 80039ec:	4801      	ldr	r0, [pc, #4]	; (80039f4 <__sfp_lock_release+0x8>)
 80039ee:	f000 b909 	b.w	8003c04 <__retarget_lock_release_recursive>
 80039f2:	bf00      	nop
 80039f4:	20000485 	.word	0x20000485

080039f8 <__sinit>:
 80039f8:	b510      	push	{r4, lr}
 80039fa:	4604      	mov	r4, r0
 80039fc:	f7ff fff0 	bl	80039e0 <__sfp_lock_acquire>
 8003a00:	6a23      	ldr	r3, [r4, #32]
 8003a02:	b11b      	cbz	r3, 8003a0c <__sinit+0x14>
 8003a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a08:	f7ff bff0 	b.w	80039ec <__sfp_lock_release>
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <__sinit+0x28>)
 8003a0e:	6223      	str	r3, [r4, #32]
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <__sinit+0x2c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f5      	bne.n	8003a04 <__sinit+0xc>
 8003a18:	f7ff ffc4 	bl	80039a4 <global_stdio_init.part.0>
 8003a1c:	e7f2      	b.n	8003a04 <__sinit+0xc>
 8003a1e:	bf00      	nop
 8003a20:	08003965 	.word	0x08003965
 8003a24:	2000047c 	.word	0x2000047c

08003a28 <_fwalk_sglue>:
 8003a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a2c:	4607      	mov	r7, r0
 8003a2e:	4688      	mov	r8, r1
 8003a30:	4614      	mov	r4, r2
 8003a32:	2600      	movs	r6, #0
 8003a34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a38:	f1b9 0901 	subs.w	r9, r9, #1
 8003a3c:	d505      	bpl.n	8003a4a <_fwalk_sglue+0x22>
 8003a3e:	6824      	ldr	r4, [r4, #0]
 8003a40:	2c00      	cmp	r4, #0
 8003a42:	d1f7      	bne.n	8003a34 <_fwalk_sglue+0xc>
 8003a44:	4630      	mov	r0, r6
 8003a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a4a:	89ab      	ldrh	r3, [r5, #12]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d907      	bls.n	8003a60 <_fwalk_sglue+0x38>
 8003a50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a54:	3301      	adds	r3, #1
 8003a56:	d003      	beq.n	8003a60 <_fwalk_sglue+0x38>
 8003a58:	4629      	mov	r1, r5
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	47c0      	blx	r8
 8003a5e:	4306      	orrs	r6, r0
 8003a60:	3568      	adds	r5, #104	; 0x68
 8003a62:	e7e9      	b.n	8003a38 <_fwalk_sglue+0x10>

08003a64 <iprintf>:
 8003a64:	b40f      	push	{r0, r1, r2, r3}
 8003a66:	b507      	push	{r0, r1, r2, lr}
 8003a68:	4906      	ldr	r1, [pc, #24]	; (8003a84 <iprintf+0x20>)
 8003a6a:	ab04      	add	r3, sp, #16
 8003a6c:	6808      	ldr	r0, [r1, #0]
 8003a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a72:	6881      	ldr	r1, [r0, #8]
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	f000 f9e9 	bl	8003e4c <_vfiprintf_r>
 8003a7a:	b003      	add	sp, #12
 8003a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a80:	b004      	add	sp, #16
 8003a82:	4770      	bx	lr
 8003a84:	2000005c 	.word	0x2000005c

08003a88 <__sread>:
 8003a88:	b510      	push	{r4, lr}
 8003a8a:	460c      	mov	r4, r1
 8003a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a90:	f000 f868 	bl	8003b64 <_read_r>
 8003a94:	2800      	cmp	r0, #0
 8003a96:	bfab      	itete	ge
 8003a98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a9a:	89a3      	ldrhlt	r3, [r4, #12]
 8003a9c:	181b      	addge	r3, r3, r0
 8003a9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003aa2:	bfac      	ite	ge
 8003aa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003aa6:	81a3      	strhlt	r3, [r4, #12]
 8003aa8:	bd10      	pop	{r4, pc}

08003aaa <__swrite>:
 8003aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aae:	461f      	mov	r7, r3
 8003ab0:	898b      	ldrh	r3, [r1, #12]
 8003ab2:	05db      	lsls	r3, r3, #23
 8003ab4:	4605      	mov	r5, r0
 8003ab6:	460c      	mov	r4, r1
 8003ab8:	4616      	mov	r6, r2
 8003aba:	d505      	bpl.n	8003ac8 <__swrite+0x1e>
 8003abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f000 f83c 	bl	8003b40 <_lseek_r>
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ad2:	81a3      	strh	r3, [r4, #12]
 8003ad4:	4632      	mov	r2, r6
 8003ad6:	463b      	mov	r3, r7
 8003ad8:	4628      	mov	r0, r5
 8003ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ade:	f000 b853 	b.w	8003b88 <_write_r>

08003ae2 <__sseek>:
 8003ae2:	b510      	push	{r4, lr}
 8003ae4:	460c      	mov	r4, r1
 8003ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aea:	f000 f829 	bl	8003b40 <_lseek_r>
 8003aee:	1c43      	adds	r3, r0, #1
 8003af0:	89a3      	ldrh	r3, [r4, #12]
 8003af2:	bf15      	itete	ne
 8003af4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003af6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003afa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003afe:	81a3      	strheq	r3, [r4, #12]
 8003b00:	bf18      	it	ne
 8003b02:	81a3      	strhne	r3, [r4, #12]
 8003b04:	bd10      	pop	{r4, pc}

08003b06 <__sclose>:
 8003b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b0a:	f000 b809 	b.w	8003b20 <_close_r>

08003b0e <memset>:
 8003b0e:	4402      	add	r2, r0
 8003b10:	4603      	mov	r3, r0
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d100      	bne.n	8003b18 <memset+0xa>
 8003b16:	4770      	bx	lr
 8003b18:	f803 1b01 	strb.w	r1, [r3], #1
 8003b1c:	e7f9      	b.n	8003b12 <memset+0x4>
	...

08003b20 <_close_r>:
 8003b20:	b538      	push	{r3, r4, r5, lr}
 8003b22:	4d06      	ldr	r5, [pc, #24]	; (8003b3c <_close_r+0x1c>)
 8003b24:	2300      	movs	r3, #0
 8003b26:	4604      	mov	r4, r0
 8003b28:	4608      	mov	r0, r1
 8003b2a:	602b      	str	r3, [r5, #0]
 8003b2c:	f7fe fe26 	bl	800277c <_close>
 8003b30:	1c43      	adds	r3, r0, #1
 8003b32:	d102      	bne.n	8003b3a <_close_r+0x1a>
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	b103      	cbz	r3, 8003b3a <_close_r+0x1a>
 8003b38:	6023      	str	r3, [r4, #0]
 8003b3a:	bd38      	pop	{r3, r4, r5, pc}
 8003b3c:	20000480 	.word	0x20000480

08003b40 <_lseek_r>:
 8003b40:	b538      	push	{r3, r4, r5, lr}
 8003b42:	4d07      	ldr	r5, [pc, #28]	; (8003b60 <_lseek_r+0x20>)
 8003b44:	4604      	mov	r4, r0
 8003b46:	4608      	mov	r0, r1
 8003b48:	4611      	mov	r1, r2
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	602a      	str	r2, [r5, #0]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f7fe fe3b 	bl	80027ca <_lseek>
 8003b54:	1c43      	adds	r3, r0, #1
 8003b56:	d102      	bne.n	8003b5e <_lseek_r+0x1e>
 8003b58:	682b      	ldr	r3, [r5, #0]
 8003b5a:	b103      	cbz	r3, 8003b5e <_lseek_r+0x1e>
 8003b5c:	6023      	str	r3, [r4, #0]
 8003b5e:	bd38      	pop	{r3, r4, r5, pc}
 8003b60:	20000480 	.word	0x20000480

08003b64 <_read_r>:
 8003b64:	b538      	push	{r3, r4, r5, lr}
 8003b66:	4d07      	ldr	r5, [pc, #28]	; (8003b84 <_read_r+0x20>)
 8003b68:	4604      	mov	r4, r0
 8003b6a:	4608      	mov	r0, r1
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	2200      	movs	r2, #0
 8003b70:	602a      	str	r2, [r5, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	f7fe fdc9 	bl	800270a <_read>
 8003b78:	1c43      	adds	r3, r0, #1
 8003b7a:	d102      	bne.n	8003b82 <_read_r+0x1e>
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	b103      	cbz	r3, 8003b82 <_read_r+0x1e>
 8003b80:	6023      	str	r3, [r4, #0]
 8003b82:	bd38      	pop	{r3, r4, r5, pc}
 8003b84:	20000480 	.word	0x20000480

08003b88 <_write_r>:
 8003b88:	b538      	push	{r3, r4, r5, lr}
 8003b8a:	4d07      	ldr	r5, [pc, #28]	; (8003ba8 <_write_r+0x20>)
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	4608      	mov	r0, r1
 8003b90:	4611      	mov	r1, r2
 8003b92:	2200      	movs	r2, #0
 8003b94:	602a      	str	r2, [r5, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	f7fe fdd4 	bl	8002744 <_write>
 8003b9c:	1c43      	adds	r3, r0, #1
 8003b9e:	d102      	bne.n	8003ba6 <_write_r+0x1e>
 8003ba0:	682b      	ldr	r3, [r5, #0]
 8003ba2:	b103      	cbz	r3, 8003ba6 <_write_r+0x1e>
 8003ba4:	6023      	str	r3, [r4, #0]
 8003ba6:	bd38      	pop	{r3, r4, r5, pc}
 8003ba8:	20000480 	.word	0x20000480

08003bac <__errno>:
 8003bac:	4b01      	ldr	r3, [pc, #4]	; (8003bb4 <__errno+0x8>)
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	2000005c 	.word	0x2000005c

08003bb8 <__libc_init_array>:
 8003bb8:	b570      	push	{r4, r5, r6, lr}
 8003bba:	4d0d      	ldr	r5, [pc, #52]	; (8003bf0 <__libc_init_array+0x38>)
 8003bbc:	4c0d      	ldr	r4, [pc, #52]	; (8003bf4 <__libc_init_array+0x3c>)
 8003bbe:	1b64      	subs	r4, r4, r5
 8003bc0:	10a4      	asrs	r4, r4, #2
 8003bc2:	2600      	movs	r6, #0
 8003bc4:	42a6      	cmp	r6, r4
 8003bc6:	d109      	bne.n	8003bdc <__libc_init_array+0x24>
 8003bc8:	4d0b      	ldr	r5, [pc, #44]	; (8003bf8 <__libc_init_array+0x40>)
 8003bca:	4c0c      	ldr	r4, [pc, #48]	; (8003bfc <__libc_init_array+0x44>)
 8003bcc:	f001 fe60 	bl	8005890 <_init>
 8003bd0:	1b64      	subs	r4, r4, r5
 8003bd2:	10a4      	asrs	r4, r4, #2
 8003bd4:	2600      	movs	r6, #0
 8003bd6:	42a6      	cmp	r6, r4
 8003bd8:	d105      	bne.n	8003be6 <__libc_init_array+0x2e>
 8003bda:	bd70      	pop	{r4, r5, r6, pc}
 8003bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be0:	4798      	blx	r3
 8003be2:	3601      	adds	r6, #1
 8003be4:	e7ee      	b.n	8003bc4 <__libc_init_array+0xc>
 8003be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bea:	4798      	blx	r3
 8003bec:	3601      	adds	r6, #1
 8003bee:	e7f2      	b.n	8003bd6 <__libc_init_array+0x1e>
 8003bf0:	08005af8 	.word	0x08005af8
 8003bf4:	08005af8 	.word	0x08005af8
 8003bf8:	08005af8 	.word	0x08005af8
 8003bfc:	08005afc 	.word	0x08005afc

08003c00 <__retarget_lock_init_recursive>:
 8003c00:	4770      	bx	lr

08003c02 <__retarget_lock_acquire_recursive>:
 8003c02:	4770      	bx	lr

08003c04 <__retarget_lock_release_recursive>:
 8003c04:	4770      	bx	lr
	...

08003c08 <_free_r>:
 8003c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c0a:	2900      	cmp	r1, #0
 8003c0c:	d044      	beq.n	8003c98 <_free_r+0x90>
 8003c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c12:	9001      	str	r0, [sp, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f1a1 0404 	sub.w	r4, r1, #4
 8003c1a:	bfb8      	it	lt
 8003c1c:	18e4      	addlt	r4, r4, r3
 8003c1e:	f000 f8df 	bl	8003de0 <__malloc_lock>
 8003c22:	4a1e      	ldr	r2, [pc, #120]	; (8003c9c <_free_r+0x94>)
 8003c24:	9801      	ldr	r0, [sp, #4]
 8003c26:	6813      	ldr	r3, [r2, #0]
 8003c28:	b933      	cbnz	r3, 8003c38 <_free_r+0x30>
 8003c2a:	6063      	str	r3, [r4, #4]
 8003c2c:	6014      	str	r4, [r2, #0]
 8003c2e:	b003      	add	sp, #12
 8003c30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c34:	f000 b8da 	b.w	8003dec <__malloc_unlock>
 8003c38:	42a3      	cmp	r3, r4
 8003c3a:	d908      	bls.n	8003c4e <_free_r+0x46>
 8003c3c:	6825      	ldr	r5, [r4, #0]
 8003c3e:	1961      	adds	r1, r4, r5
 8003c40:	428b      	cmp	r3, r1
 8003c42:	bf01      	itttt	eq
 8003c44:	6819      	ldreq	r1, [r3, #0]
 8003c46:	685b      	ldreq	r3, [r3, #4]
 8003c48:	1949      	addeq	r1, r1, r5
 8003c4a:	6021      	streq	r1, [r4, #0]
 8003c4c:	e7ed      	b.n	8003c2a <_free_r+0x22>
 8003c4e:	461a      	mov	r2, r3
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	b10b      	cbz	r3, 8003c58 <_free_r+0x50>
 8003c54:	42a3      	cmp	r3, r4
 8003c56:	d9fa      	bls.n	8003c4e <_free_r+0x46>
 8003c58:	6811      	ldr	r1, [r2, #0]
 8003c5a:	1855      	adds	r5, r2, r1
 8003c5c:	42a5      	cmp	r5, r4
 8003c5e:	d10b      	bne.n	8003c78 <_free_r+0x70>
 8003c60:	6824      	ldr	r4, [r4, #0]
 8003c62:	4421      	add	r1, r4
 8003c64:	1854      	adds	r4, r2, r1
 8003c66:	42a3      	cmp	r3, r4
 8003c68:	6011      	str	r1, [r2, #0]
 8003c6a:	d1e0      	bne.n	8003c2e <_free_r+0x26>
 8003c6c:	681c      	ldr	r4, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	6053      	str	r3, [r2, #4]
 8003c72:	440c      	add	r4, r1
 8003c74:	6014      	str	r4, [r2, #0]
 8003c76:	e7da      	b.n	8003c2e <_free_r+0x26>
 8003c78:	d902      	bls.n	8003c80 <_free_r+0x78>
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	6003      	str	r3, [r0, #0]
 8003c7e:	e7d6      	b.n	8003c2e <_free_r+0x26>
 8003c80:	6825      	ldr	r5, [r4, #0]
 8003c82:	1961      	adds	r1, r4, r5
 8003c84:	428b      	cmp	r3, r1
 8003c86:	bf04      	itt	eq
 8003c88:	6819      	ldreq	r1, [r3, #0]
 8003c8a:	685b      	ldreq	r3, [r3, #4]
 8003c8c:	6063      	str	r3, [r4, #4]
 8003c8e:	bf04      	itt	eq
 8003c90:	1949      	addeq	r1, r1, r5
 8003c92:	6021      	streq	r1, [r4, #0]
 8003c94:	6054      	str	r4, [r2, #4]
 8003c96:	e7ca      	b.n	8003c2e <_free_r+0x26>
 8003c98:	b003      	add	sp, #12
 8003c9a:	bd30      	pop	{r4, r5, pc}
 8003c9c:	20000488 	.word	0x20000488

08003ca0 <sbrk_aligned>:
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	4e0e      	ldr	r6, [pc, #56]	; (8003cdc <sbrk_aligned+0x3c>)
 8003ca4:	460c      	mov	r4, r1
 8003ca6:	6831      	ldr	r1, [r6, #0]
 8003ca8:	4605      	mov	r5, r0
 8003caa:	b911      	cbnz	r1, 8003cb2 <sbrk_aligned+0x12>
 8003cac:	f000 fcbc 	bl	8004628 <_sbrk_r>
 8003cb0:	6030      	str	r0, [r6, #0]
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	f000 fcb7 	bl	8004628 <_sbrk_r>
 8003cba:	1c43      	adds	r3, r0, #1
 8003cbc:	d00a      	beq.n	8003cd4 <sbrk_aligned+0x34>
 8003cbe:	1cc4      	adds	r4, r0, #3
 8003cc0:	f024 0403 	bic.w	r4, r4, #3
 8003cc4:	42a0      	cmp	r0, r4
 8003cc6:	d007      	beq.n	8003cd8 <sbrk_aligned+0x38>
 8003cc8:	1a21      	subs	r1, r4, r0
 8003cca:	4628      	mov	r0, r5
 8003ccc:	f000 fcac 	bl	8004628 <_sbrk_r>
 8003cd0:	3001      	adds	r0, #1
 8003cd2:	d101      	bne.n	8003cd8 <sbrk_aligned+0x38>
 8003cd4:	f04f 34ff 	mov.w	r4, #4294967295
 8003cd8:	4620      	mov	r0, r4
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
 8003cdc:	2000048c 	.word	0x2000048c

08003ce0 <_malloc_r>:
 8003ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ce4:	1ccd      	adds	r5, r1, #3
 8003ce6:	f025 0503 	bic.w	r5, r5, #3
 8003cea:	3508      	adds	r5, #8
 8003cec:	2d0c      	cmp	r5, #12
 8003cee:	bf38      	it	cc
 8003cf0:	250c      	movcc	r5, #12
 8003cf2:	2d00      	cmp	r5, #0
 8003cf4:	4607      	mov	r7, r0
 8003cf6:	db01      	blt.n	8003cfc <_malloc_r+0x1c>
 8003cf8:	42a9      	cmp	r1, r5
 8003cfa:	d905      	bls.n	8003d08 <_malloc_r+0x28>
 8003cfc:	230c      	movs	r3, #12
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	2600      	movs	r6, #0
 8003d02:	4630      	mov	r0, r6
 8003d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003ddc <_malloc_r+0xfc>
 8003d0c:	f000 f868 	bl	8003de0 <__malloc_lock>
 8003d10:	f8d8 3000 	ldr.w	r3, [r8]
 8003d14:	461c      	mov	r4, r3
 8003d16:	bb5c      	cbnz	r4, 8003d70 <_malloc_r+0x90>
 8003d18:	4629      	mov	r1, r5
 8003d1a:	4638      	mov	r0, r7
 8003d1c:	f7ff ffc0 	bl	8003ca0 <sbrk_aligned>
 8003d20:	1c43      	adds	r3, r0, #1
 8003d22:	4604      	mov	r4, r0
 8003d24:	d155      	bne.n	8003dd2 <_malloc_r+0xf2>
 8003d26:	f8d8 4000 	ldr.w	r4, [r8]
 8003d2a:	4626      	mov	r6, r4
 8003d2c:	2e00      	cmp	r6, #0
 8003d2e:	d145      	bne.n	8003dbc <_malloc_r+0xdc>
 8003d30:	2c00      	cmp	r4, #0
 8003d32:	d048      	beq.n	8003dc6 <_malloc_r+0xe6>
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	4631      	mov	r1, r6
 8003d38:	4638      	mov	r0, r7
 8003d3a:	eb04 0903 	add.w	r9, r4, r3
 8003d3e:	f000 fc73 	bl	8004628 <_sbrk_r>
 8003d42:	4581      	cmp	r9, r0
 8003d44:	d13f      	bne.n	8003dc6 <_malloc_r+0xe6>
 8003d46:	6821      	ldr	r1, [r4, #0]
 8003d48:	1a6d      	subs	r5, r5, r1
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	4638      	mov	r0, r7
 8003d4e:	f7ff ffa7 	bl	8003ca0 <sbrk_aligned>
 8003d52:	3001      	adds	r0, #1
 8003d54:	d037      	beq.n	8003dc6 <_malloc_r+0xe6>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	442b      	add	r3, r5
 8003d5a:	6023      	str	r3, [r4, #0]
 8003d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d038      	beq.n	8003dd6 <_malloc_r+0xf6>
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	42a2      	cmp	r2, r4
 8003d68:	d12b      	bne.n	8003dc2 <_malloc_r+0xe2>
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	e00f      	b.n	8003d90 <_malloc_r+0xb0>
 8003d70:	6822      	ldr	r2, [r4, #0]
 8003d72:	1b52      	subs	r2, r2, r5
 8003d74:	d41f      	bmi.n	8003db6 <_malloc_r+0xd6>
 8003d76:	2a0b      	cmp	r2, #11
 8003d78:	d917      	bls.n	8003daa <_malloc_r+0xca>
 8003d7a:	1961      	adds	r1, r4, r5
 8003d7c:	42a3      	cmp	r3, r4
 8003d7e:	6025      	str	r5, [r4, #0]
 8003d80:	bf18      	it	ne
 8003d82:	6059      	strne	r1, [r3, #4]
 8003d84:	6863      	ldr	r3, [r4, #4]
 8003d86:	bf08      	it	eq
 8003d88:	f8c8 1000 	streq.w	r1, [r8]
 8003d8c:	5162      	str	r2, [r4, r5]
 8003d8e:	604b      	str	r3, [r1, #4]
 8003d90:	4638      	mov	r0, r7
 8003d92:	f104 060b 	add.w	r6, r4, #11
 8003d96:	f000 f829 	bl	8003dec <__malloc_unlock>
 8003d9a:	f026 0607 	bic.w	r6, r6, #7
 8003d9e:	1d23      	adds	r3, r4, #4
 8003da0:	1af2      	subs	r2, r6, r3
 8003da2:	d0ae      	beq.n	8003d02 <_malloc_r+0x22>
 8003da4:	1b9b      	subs	r3, r3, r6
 8003da6:	50a3      	str	r3, [r4, r2]
 8003da8:	e7ab      	b.n	8003d02 <_malloc_r+0x22>
 8003daa:	42a3      	cmp	r3, r4
 8003dac:	6862      	ldr	r2, [r4, #4]
 8003dae:	d1dd      	bne.n	8003d6c <_malloc_r+0x8c>
 8003db0:	f8c8 2000 	str.w	r2, [r8]
 8003db4:	e7ec      	b.n	8003d90 <_malloc_r+0xb0>
 8003db6:	4623      	mov	r3, r4
 8003db8:	6864      	ldr	r4, [r4, #4]
 8003dba:	e7ac      	b.n	8003d16 <_malloc_r+0x36>
 8003dbc:	4634      	mov	r4, r6
 8003dbe:	6876      	ldr	r6, [r6, #4]
 8003dc0:	e7b4      	b.n	8003d2c <_malloc_r+0x4c>
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	e7cc      	b.n	8003d60 <_malloc_r+0x80>
 8003dc6:	230c      	movs	r3, #12
 8003dc8:	603b      	str	r3, [r7, #0]
 8003dca:	4638      	mov	r0, r7
 8003dcc:	f000 f80e 	bl	8003dec <__malloc_unlock>
 8003dd0:	e797      	b.n	8003d02 <_malloc_r+0x22>
 8003dd2:	6025      	str	r5, [r4, #0]
 8003dd4:	e7dc      	b.n	8003d90 <_malloc_r+0xb0>
 8003dd6:	605b      	str	r3, [r3, #4]
 8003dd8:	deff      	udf	#255	; 0xff
 8003dda:	bf00      	nop
 8003ddc:	20000488 	.word	0x20000488

08003de0 <__malloc_lock>:
 8003de0:	4801      	ldr	r0, [pc, #4]	; (8003de8 <__malloc_lock+0x8>)
 8003de2:	f7ff bf0e 	b.w	8003c02 <__retarget_lock_acquire_recursive>
 8003de6:	bf00      	nop
 8003de8:	20000484 	.word	0x20000484

08003dec <__malloc_unlock>:
 8003dec:	4801      	ldr	r0, [pc, #4]	; (8003df4 <__malloc_unlock+0x8>)
 8003dee:	f7ff bf09 	b.w	8003c04 <__retarget_lock_release_recursive>
 8003df2:	bf00      	nop
 8003df4:	20000484 	.word	0x20000484

08003df8 <__sfputc_r>:
 8003df8:	6893      	ldr	r3, [r2, #8]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	b410      	push	{r4}
 8003e00:	6093      	str	r3, [r2, #8]
 8003e02:	da08      	bge.n	8003e16 <__sfputc_r+0x1e>
 8003e04:	6994      	ldr	r4, [r2, #24]
 8003e06:	42a3      	cmp	r3, r4
 8003e08:	db01      	blt.n	8003e0e <__sfputc_r+0x16>
 8003e0a:	290a      	cmp	r1, #10
 8003e0c:	d103      	bne.n	8003e16 <__sfputc_r+0x1e>
 8003e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e12:	f000 bb73 	b.w	80044fc <__swbuf_r>
 8003e16:	6813      	ldr	r3, [r2, #0]
 8003e18:	1c58      	adds	r0, r3, #1
 8003e1a:	6010      	str	r0, [r2, #0]
 8003e1c:	7019      	strb	r1, [r3, #0]
 8003e1e:	4608      	mov	r0, r1
 8003e20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <__sfputs_r>:
 8003e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e28:	4606      	mov	r6, r0
 8003e2a:	460f      	mov	r7, r1
 8003e2c:	4614      	mov	r4, r2
 8003e2e:	18d5      	adds	r5, r2, r3
 8003e30:	42ac      	cmp	r4, r5
 8003e32:	d101      	bne.n	8003e38 <__sfputs_r+0x12>
 8003e34:	2000      	movs	r0, #0
 8003e36:	e007      	b.n	8003e48 <__sfputs_r+0x22>
 8003e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e3c:	463a      	mov	r2, r7
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f7ff ffda 	bl	8003df8 <__sfputc_r>
 8003e44:	1c43      	adds	r3, r0, #1
 8003e46:	d1f3      	bne.n	8003e30 <__sfputs_r+0xa>
 8003e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e4c <_vfiprintf_r>:
 8003e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e50:	460d      	mov	r5, r1
 8003e52:	b09d      	sub	sp, #116	; 0x74
 8003e54:	4614      	mov	r4, r2
 8003e56:	4698      	mov	r8, r3
 8003e58:	4606      	mov	r6, r0
 8003e5a:	b118      	cbz	r0, 8003e64 <_vfiprintf_r+0x18>
 8003e5c:	6a03      	ldr	r3, [r0, #32]
 8003e5e:	b90b      	cbnz	r3, 8003e64 <_vfiprintf_r+0x18>
 8003e60:	f7ff fdca 	bl	80039f8 <__sinit>
 8003e64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e66:	07d9      	lsls	r1, r3, #31
 8003e68:	d405      	bmi.n	8003e76 <_vfiprintf_r+0x2a>
 8003e6a:	89ab      	ldrh	r3, [r5, #12]
 8003e6c:	059a      	lsls	r2, r3, #22
 8003e6e:	d402      	bmi.n	8003e76 <_vfiprintf_r+0x2a>
 8003e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e72:	f7ff fec6 	bl	8003c02 <__retarget_lock_acquire_recursive>
 8003e76:	89ab      	ldrh	r3, [r5, #12]
 8003e78:	071b      	lsls	r3, r3, #28
 8003e7a:	d501      	bpl.n	8003e80 <_vfiprintf_r+0x34>
 8003e7c:	692b      	ldr	r3, [r5, #16]
 8003e7e:	b99b      	cbnz	r3, 8003ea8 <_vfiprintf_r+0x5c>
 8003e80:	4629      	mov	r1, r5
 8003e82:	4630      	mov	r0, r6
 8003e84:	f000 fb78 	bl	8004578 <__swsetup_r>
 8003e88:	b170      	cbz	r0, 8003ea8 <_vfiprintf_r+0x5c>
 8003e8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e8c:	07dc      	lsls	r4, r3, #31
 8003e8e:	d504      	bpl.n	8003e9a <_vfiprintf_r+0x4e>
 8003e90:	f04f 30ff 	mov.w	r0, #4294967295
 8003e94:	b01d      	add	sp, #116	; 0x74
 8003e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e9a:	89ab      	ldrh	r3, [r5, #12]
 8003e9c:	0598      	lsls	r0, r3, #22
 8003e9e:	d4f7      	bmi.n	8003e90 <_vfiprintf_r+0x44>
 8003ea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ea2:	f7ff feaf 	bl	8003c04 <__retarget_lock_release_recursive>
 8003ea6:	e7f3      	b.n	8003e90 <_vfiprintf_r+0x44>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8003eac:	2320      	movs	r3, #32
 8003eae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003eb6:	2330      	movs	r3, #48	; 0x30
 8003eb8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800406c <_vfiprintf_r+0x220>
 8003ebc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ec0:	f04f 0901 	mov.w	r9, #1
 8003ec4:	4623      	mov	r3, r4
 8003ec6:	469a      	mov	sl, r3
 8003ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ecc:	b10a      	cbz	r2, 8003ed2 <_vfiprintf_r+0x86>
 8003ece:	2a25      	cmp	r2, #37	; 0x25
 8003ed0:	d1f9      	bne.n	8003ec6 <_vfiprintf_r+0x7a>
 8003ed2:	ebba 0b04 	subs.w	fp, sl, r4
 8003ed6:	d00b      	beq.n	8003ef0 <_vfiprintf_r+0xa4>
 8003ed8:	465b      	mov	r3, fp
 8003eda:	4622      	mov	r2, r4
 8003edc:	4629      	mov	r1, r5
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f7ff ffa1 	bl	8003e26 <__sfputs_r>
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	f000 80a9 	beq.w	800403c <_vfiprintf_r+0x1f0>
 8003eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003eec:	445a      	add	r2, fp
 8003eee:	9209      	str	r2, [sp, #36]	; 0x24
 8003ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80a1 	beq.w	800403c <_vfiprintf_r+0x1f0>
 8003efa:	2300      	movs	r3, #0
 8003efc:	f04f 32ff 	mov.w	r2, #4294967295
 8003f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f04:	f10a 0a01 	add.w	sl, sl, #1
 8003f08:	9304      	str	r3, [sp, #16]
 8003f0a:	9307      	str	r3, [sp, #28]
 8003f0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f10:	931a      	str	r3, [sp, #104]	; 0x68
 8003f12:	4654      	mov	r4, sl
 8003f14:	2205      	movs	r2, #5
 8003f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f1a:	4854      	ldr	r0, [pc, #336]	; (800406c <_vfiprintf_r+0x220>)
 8003f1c:	f7fc f958 	bl	80001d0 <memchr>
 8003f20:	9a04      	ldr	r2, [sp, #16]
 8003f22:	b9d8      	cbnz	r0, 8003f5c <_vfiprintf_r+0x110>
 8003f24:	06d1      	lsls	r1, r2, #27
 8003f26:	bf44      	itt	mi
 8003f28:	2320      	movmi	r3, #32
 8003f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f2e:	0713      	lsls	r3, r2, #28
 8003f30:	bf44      	itt	mi
 8003f32:	232b      	movmi	r3, #43	; 0x2b
 8003f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f38:	f89a 3000 	ldrb.w	r3, [sl]
 8003f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f3e:	d015      	beq.n	8003f6c <_vfiprintf_r+0x120>
 8003f40:	9a07      	ldr	r2, [sp, #28]
 8003f42:	4654      	mov	r4, sl
 8003f44:	2000      	movs	r0, #0
 8003f46:	f04f 0c0a 	mov.w	ip, #10
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f50:	3b30      	subs	r3, #48	; 0x30
 8003f52:	2b09      	cmp	r3, #9
 8003f54:	d94d      	bls.n	8003ff2 <_vfiprintf_r+0x1a6>
 8003f56:	b1b0      	cbz	r0, 8003f86 <_vfiprintf_r+0x13a>
 8003f58:	9207      	str	r2, [sp, #28]
 8003f5a:	e014      	b.n	8003f86 <_vfiprintf_r+0x13a>
 8003f5c:	eba0 0308 	sub.w	r3, r0, r8
 8003f60:	fa09 f303 	lsl.w	r3, r9, r3
 8003f64:	4313      	orrs	r3, r2
 8003f66:	9304      	str	r3, [sp, #16]
 8003f68:	46a2      	mov	sl, r4
 8003f6a:	e7d2      	b.n	8003f12 <_vfiprintf_r+0xc6>
 8003f6c:	9b03      	ldr	r3, [sp, #12]
 8003f6e:	1d19      	adds	r1, r3, #4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	9103      	str	r1, [sp, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bfbb      	ittet	lt
 8003f78:	425b      	neglt	r3, r3
 8003f7a:	f042 0202 	orrlt.w	r2, r2, #2
 8003f7e:	9307      	strge	r3, [sp, #28]
 8003f80:	9307      	strlt	r3, [sp, #28]
 8003f82:	bfb8      	it	lt
 8003f84:	9204      	strlt	r2, [sp, #16]
 8003f86:	7823      	ldrb	r3, [r4, #0]
 8003f88:	2b2e      	cmp	r3, #46	; 0x2e
 8003f8a:	d10c      	bne.n	8003fa6 <_vfiprintf_r+0x15a>
 8003f8c:	7863      	ldrb	r3, [r4, #1]
 8003f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f90:	d134      	bne.n	8003ffc <_vfiprintf_r+0x1b0>
 8003f92:	9b03      	ldr	r3, [sp, #12]
 8003f94:	1d1a      	adds	r2, r3, #4
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	9203      	str	r2, [sp, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bfb8      	it	lt
 8003f9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fa2:	3402      	adds	r4, #2
 8003fa4:	9305      	str	r3, [sp, #20]
 8003fa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800407c <_vfiprintf_r+0x230>
 8003faa:	7821      	ldrb	r1, [r4, #0]
 8003fac:	2203      	movs	r2, #3
 8003fae:	4650      	mov	r0, sl
 8003fb0:	f7fc f90e 	bl	80001d0 <memchr>
 8003fb4:	b138      	cbz	r0, 8003fc6 <_vfiprintf_r+0x17a>
 8003fb6:	9b04      	ldr	r3, [sp, #16]
 8003fb8:	eba0 000a 	sub.w	r0, r0, sl
 8003fbc:	2240      	movs	r2, #64	; 0x40
 8003fbe:	4082      	lsls	r2, r0
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	3401      	adds	r4, #1
 8003fc4:	9304      	str	r3, [sp, #16]
 8003fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fca:	4829      	ldr	r0, [pc, #164]	; (8004070 <_vfiprintf_r+0x224>)
 8003fcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fd0:	2206      	movs	r2, #6
 8003fd2:	f7fc f8fd 	bl	80001d0 <memchr>
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	d03f      	beq.n	800405a <_vfiprintf_r+0x20e>
 8003fda:	4b26      	ldr	r3, [pc, #152]	; (8004074 <_vfiprintf_r+0x228>)
 8003fdc:	bb1b      	cbnz	r3, 8004026 <_vfiprintf_r+0x1da>
 8003fde:	9b03      	ldr	r3, [sp, #12]
 8003fe0:	3307      	adds	r3, #7
 8003fe2:	f023 0307 	bic.w	r3, r3, #7
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	9303      	str	r3, [sp, #12]
 8003fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fec:	443b      	add	r3, r7
 8003fee:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff0:	e768      	b.n	8003ec4 <_vfiprintf_r+0x78>
 8003ff2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	e7a6      	b.n	8003f4a <_vfiprintf_r+0xfe>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	3401      	adds	r4, #1
 8004000:	9305      	str	r3, [sp, #20]
 8004002:	4619      	mov	r1, r3
 8004004:	f04f 0c0a 	mov.w	ip, #10
 8004008:	4620      	mov	r0, r4
 800400a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800400e:	3a30      	subs	r2, #48	; 0x30
 8004010:	2a09      	cmp	r2, #9
 8004012:	d903      	bls.n	800401c <_vfiprintf_r+0x1d0>
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0c6      	beq.n	8003fa6 <_vfiprintf_r+0x15a>
 8004018:	9105      	str	r1, [sp, #20]
 800401a:	e7c4      	b.n	8003fa6 <_vfiprintf_r+0x15a>
 800401c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004020:	4604      	mov	r4, r0
 8004022:	2301      	movs	r3, #1
 8004024:	e7f0      	b.n	8004008 <_vfiprintf_r+0x1bc>
 8004026:	ab03      	add	r3, sp, #12
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	462a      	mov	r2, r5
 800402c:	4b12      	ldr	r3, [pc, #72]	; (8004078 <_vfiprintf_r+0x22c>)
 800402e:	a904      	add	r1, sp, #16
 8004030:	4630      	mov	r0, r6
 8004032:	f3af 8000 	nop.w
 8004036:	4607      	mov	r7, r0
 8004038:	1c78      	adds	r0, r7, #1
 800403a:	d1d6      	bne.n	8003fea <_vfiprintf_r+0x19e>
 800403c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800403e:	07d9      	lsls	r1, r3, #31
 8004040:	d405      	bmi.n	800404e <_vfiprintf_r+0x202>
 8004042:	89ab      	ldrh	r3, [r5, #12]
 8004044:	059a      	lsls	r2, r3, #22
 8004046:	d402      	bmi.n	800404e <_vfiprintf_r+0x202>
 8004048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800404a:	f7ff fddb 	bl	8003c04 <__retarget_lock_release_recursive>
 800404e:	89ab      	ldrh	r3, [r5, #12]
 8004050:	065b      	lsls	r3, r3, #25
 8004052:	f53f af1d 	bmi.w	8003e90 <_vfiprintf_r+0x44>
 8004056:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004058:	e71c      	b.n	8003e94 <_vfiprintf_r+0x48>
 800405a:	ab03      	add	r3, sp, #12
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	462a      	mov	r2, r5
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <_vfiprintf_r+0x22c>)
 8004062:	a904      	add	r1, sp, #16
 8004064:	4630      	mov	r0, r6
 8004066:	f000 f879 	bl	800415c <_printf_i>
 800406a:	e7e4      	b.n	8004036 <_vfiprintf_r+0x1ea>
 800406c:	080058e9 	.word	0x080058e9
 8004070:	080058f3 	.word	0x080058f3
 8004074:	00000000 	.word	0x00000000
 8004078:	08003e27 	.word	0x08003e27
 800407c:	080058ef 	.word	0x080058ef

08004080 <_printf_common>:
 8004080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004084:	4616      	mov	r6, r2
 8004086:	4699      	mov	r9, r3
 8004088:	688a      	ldr	r2, [r1, #8]
 800408a:	690b      	ldr	r3, [r1, #16]
 800408c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004090:	4293      	cmp	r3, r2
 8004092:	bfb8      	it	lt
 8004094:	4613      	movlt	r3, r2
 8004096:	6033      	str	r3, [r6, #0]
 8004098:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800409c:	4607      	mov	r7, r0
 800409e:	460c      	mov	r4, r1
 80040a0:	b10a      	cbz	r2, 80040a6 <_printf_common+0x26>
 80040a2:	3301      	adds	r3, #1
 80040a4:	6033      	str	r3, [r6, #0]
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	0699      	lsls	r1, r3, #26
 80040aa:	bf42      	ittt	mi
 80040ac:	6833      	ldrmi	r3, [r6, #0]
 80040ae:	3302      	addmi	r3, #2
 80040b0:	6033      	strmi	r3, [r6, #0]
 80040b2:	6825      	ldr	r5, [r4, #0]
 80040b4:	f015 0506 	ands.w	r5, r5, #6
 80040b8:	d106      	bne.n	80040c8 <_printf_common+0x48>
 80040ba:	f104 0a19 	add.w	sl, r4, #25
 80040be:	68e3      	ldr	r3, [r4, #12]
 80040c0:	6832      	ldr	r2, [r6, #0]
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	42ab      	cmp	r3, r5
 80040c6:	dc26      	bgt.n	8004116 <_printf_common+0x96>
 80040c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040cc:	1e13      	subs	r3, r2, #0
 80040ce:	6822      	ldr	r2, [r4, #0]
 80040d0:	bf18      	it	ne
 80040d2:	2301      	movne	r3, #1
 80040d4:	0692      	lsls	r2, r2, #26
 80040d6:	d42b      	bmi.n	8004130 <_printf_common+0xb0>
 80040d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040dc:	4649      	mov	r1, r9
 80040de:	4638      	mov	r0, r7
 80040e0:	47c0      	blx	r8
 80040e2:	3001      	adds	r0, #1
 80040e4:	d01e      	beq.n	8004124 <_printf_common+0xa4>
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	6922      	ldr	r2, [r4, #16]
 80040ea:	f003 0306 	and.w	r3, r3, #6
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	bf02      	ittt	eq
 80040f2:	68e5      	ldreq	r5, [r4, #12]
 80040f4:	6833      	ldreq	r3, [r6, #0]
 80040f6:	1aed      	subeq	r5, r5, r3
 80040f8:	68a3      	ldr	r3, [r4, #8]
 80040fa:	bf0c      	ite	eq
 80040fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004100:	2500      	movne	r5, #0
 8004102:	4293      	cmp	r3, r2
 8004104:	bfc4      	itt	gt
 8004106:	1a9b      	subgt	r3, r3, r2
 8004108:	18ed      	addgt	r5, r5, r3
 800410a:	2600      	movs	r6, #0
 800410c:	341a      	adds	r4, #26
 800410e:	42b5      	cmp	r5, r6
 8004110:	d11a      	bne.n	8004148 <_printf_common+0xc8>
 8004112:	2000      	movs	r0, #0
 8004114:	e008      	b.n	8004128 <_printf_common+0xa8>
 8004116:	2301      	movs	r3, #1
 8004118:	4652      	mov	r2, sl
 800411a:	4649      	mov	r1, r9
 800411c:	4638      	mov	r0, r7
 800411e:	47c0      	blx	r8
 8004120:	3001      	adds	r0, #1
 8004122:	d103      	bne.n	800412c <_printf_common+0xac>
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800412c:	3501      	adds	r5, #1
 800412e:	e7c6      	b.n	80040be <_printf_common+0x3e>
 8004130:	18e1      	adds	r1, r4, r3
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	2030      	movs	r0, #48	; 0x30
 8004136:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800413a:	4422      	add	r2, r4
 800413c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004140:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004144:	3302      	adds	r3, #2
 8004146:	e7c7      	b.n	80040d8 <_printf_common+0x58>
 8004148:	2301      	movs	r3, #1
 800414a:	4622      	mov	r2, r4
 800414c:	4649      	mov	r1, r9
 800414e:	4638      	mov	r0, r7
 8004150:	47c0      	blx	r8
 8004152:	3001      	adds	r0, #1
 8004154:	d0e6      	beq.n	8004124 <_printf_common+0xa4>
 8004156:	3601      	adds	r6, #1
 8004158:	e7d9      	b.n	800410e <_printf_common+0x8e>
	...

0800415c <_printf_i>:
 800415c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004160:	7e0f      	ldrb	r7, [r1, #24]
 8004162:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004164:	2f78      	cmp	r7, #120	; 0x78
 8004166:	4691      	mov	r9, r2
 8004168:	4680      	mov	r8, r0
 800416a:	460c      	mov	r4, r1
 800416c:	469a      	mov	sl, r3
 800416e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004172:	d807      	bhi.n	8004184 <_printf_i+0x28>
 8004174:	2f62      	cmp	r7, #98	; 0x62
 8004176:	d80a      	bhi.n	800418e <_printf_i+0x32>
 8004178:	2f00      	cmp	r7, #0
 800417a:	f000 80d4 	beq.w	8004326 <_printf_i+0x1ca>
 800417e:	2f58      	cmp	r7, #88	; 0x58
 8004180:	f000 80c0 	beq.w	8004304 <_printf_i+0x1a8>
 8004184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004188:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800418c:	e03a      	b.n	8004204 <_printf_i+0xa8>
 800418e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004192:	2b15      	cmp	r3, #21
 8004194:	d8f6      	bhi.n	8004184 <_printf_i+0x28>
 8004196:	a101      	add	r1, pc, #4	; (adr r1, 800419c <_printf_i+0x40>)
 8004198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800419c:	080041f5 	.word	0x080041f5
 80041a0:	08004209 	.word	0x08004209
 80041a4:	08004185 	.word	0x08004185
 80041a8:	08004185 	.word	0x08004185
 80041ac:	08004185 	.word	0x08004185
 80041b0:	08004185 	.word	0x08004185
 80041b4:	08004209 	.word	0x08004209
 80041b8:	08004185 	.word	0x08004185
 80041bc:	08004185 	.word	0x08004185
 80041c0:	08004185 	.word	0x08004185
 80041c4:	08004185 	.word	0x08004185
 80041c8:	0800430d 	.word	0x0800430d
 80041cc:	08004235 	.word	0x08004235
 80041d0:	080042c7 	.word	0x080042c7
 80041d4:	08004185 	.word	0x08004185
 80041d8:	08004185 	.word	0x08004185
 80041dc:	0800432f 	.word	0x0800432f
 80041e0:	08004185 	.word	0x08004185
 80041e4:	08004235 	.word	0x08004235
 80041e8:	08004185 	.word	0x08004185
 80041ec:	08004185 	.word	0x08004185
 80041f0:	080042cf 	.word	0x080042cf
 80041f4:	682b      	ldr	r3, [r5, #0]
 80041f6:	1d1a      	adds	r2, r3, #4
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	602a      	str	r2, [r5, #0]
 80041fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004204:	2301      	movs	r3, #1
 8004206:	e09f      	b.n	8004348 <_printf_i+0x1ec>
 8004208:	6820      	ldr	r0, [r4, #0]
 800420a:	682b      	ldr	r3, [r5, #0]
 800420c:	0607      	lsls	r7, r0, #24
 800420e:	f103 0104 	add.w	r1, r3, #4
 8004212:	6029      	str	r1, [r5, #0]
 8004214:	d501      	bpl.n	800421a <_printf_i+0xbe>
 8004216:	681e      	ldr	r6, [r3, #0]
 8004218:	e003      	b.n	8004222 <_printf_i+0xc6>
 800421a:	0646      	lsls	r6, r0, #25
 800421c:	d5fb      	bpl.n	8004216 <_printf_i+0xba>
 800421e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004222:	2e00      	cmp	r6, #0
 8004224:	da03      	bge.n	800422e <_printf_i+0xd2>
 8004226:	232d      	movs	r3, #45	; 0x2d
 8004228:	4276      	negs	r6, r6
 800422a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800422e:	485a      	ldr	r0, [pc, #360]	; (8004398 <_printf_i+0x23c>)
 8004230:	230a      	movs	r3, #10
 8004232:	e012      	b.n	800425a <_printf_i+0xfe>
 8004234:	682b      	ldr	r3, [r5, #0]
 8004236:	6820      	ldr	r0, [r4, #0]
 8004238:	1d19      	adds	r1, r3, #4
 800423a:	6029      	str	r1, [r5, #0]
 800423c:	0605      	lsls	r5, r0, #24
 800423e:	d501      	bpl.n	8004244 <_printf_i+0xe8>
 8004240:	681e      	ldr	r6, [r3, #0]
 8004242:	e002      	b.n	800424a <_printf_i+0xee>
 8004244:	0641      	lsls	r1, r0, #25
 8004246:	d5fb      	bpl.n	8004240 <_printf_i+0xe4>
 8004248:	881e      	ldrh	r6, [r3, #0]
 800424a:	4853      	ldr	r0, [pc, #332]	; (8004398 <_printf_i+0x23c>)
 800424c:	2f6f      	cmp	r7, #111	; 0x6f
 800424e:	bf0c      	ite	eq
 8004250:	2308      	moveq	r3, #8
 8004252:	230a      	movne	r3, #10
 8004254:	2100      	movs	r1, #0
 8004256:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800425a:	6865      	ldr	r5, [r4, #4]
 800425c:	60a5      	str	r5, [r4, #8]
 800425e:	2d00      	cmp	r5, #0
 8004260:	bfa2      	ittt	ge
 8004262:	6821      	ldrge	r1, [r4, #0]
 8004264:	f021 0104 	bicge.w	r1, r1, #4
 8004268:	6021      	strge	r1, [r4, #0]
 800426a:	b90e      	cbnz	r6, 8004270 <_printf_i+0x114>
 800426c:	2d00      	cmp	r5, #0
 800426e:	d04b      	beq.n	8004308 <_printf_i+0x1ac>
 8004270:	4615      	mov	r5, r2
 8004272:	fbb6 f1f3 	udiv	r1, r6, r3
 8004276:	fb03 6711 	mls	r7, r3, r1, r6
 800427a:	5dc7      	ldrb	r7, [r0, r7]
 800427c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004280:	4637      	mov	r7, r6
 8004282:	42bb      	cmp	r3, r7
 8004284:	460e      	mov	r6, r1
 8004286:	d9f4      	bls.n	8004272 <_printf_i+0x116>
 8004288:	2b08      	cmp	r3, #8
 800428a:	d10b      	bne.n	80042a4 <_printf_i+0x148>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	07de      	lsls	r6, r3, #31
 8004290:	d508      	bpl.n	80042a4 <_printf_i+0x148>
 8004292:	6923      	ldr	r3, [r4, #16]
 8004294:	6861      	ldr	r1, [r4, #4]
 8004296:	4299      	cmp	r1, r3
 8004298:	bfde      	ittt	le
 800429a:	2330      	movle	r3, #48	; 0x30
 800429c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042a4:	1b52      	subs	r2, r2, r5
 80042a6:	6122      	str	r2, [r4, #16]
 80042a8:	f8cd a000 	str.w	sl, [sp]
 80042ac:	464b      	mov	r3, r9
 80042ae:	aa03      	add	r2, sp, #12
 80042b0:	4621      	mov	r1, r4
 80042b2:	4640      	mov	r0, r8
 80042b4:	f7ff fee4 	bl	8004080 <_printf_common>
 80042b8:	3001      	adds	r0, #1
 80042ba:	d14a      	bne.n	8004352 <_printf_i+0x1f6>
 80042bc:	f04f 30ff 	mov.w	r0, #4294967295
 80042c0:	b004      	add	sp, #16
 80042c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	f043 0320 	orr.w	r3, r3, #32
 80042cc:	6023      	str	r3, [r4, #0]
 80042ce:	4833      	ldr	r0, [pc, #204]	; (800439c <_printf_i+0x240>)
 80042d0:	2778      	movs	r7, #120	; 0x78
 80042d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	6829      	ldr	r1, [r5, #0]
 80042da:	061f      	lsls	r7, r3, #24
 80042dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80042e0:	d402      	bmi.n	80042e8 <_printf_i+0x18c>
 80042e2:	065f      	lsls	r7, r3, #25
 80042e4:	bf48      	it	mi
 80042e6:	b2b6      	uxthmi	r6, r6
 80042e8:	07df      	lsls	r7, r3, #31
 80042ea:	bf48      	it	mi
 80042ec:	f043 0320 	orrmi.w	r3, r3, #32
 80042f0:	6029      	str	r1, [r5, #0]
 80042f2:	bf48      	it	mi
 80042f4:	6023      	strmi	r3, [r4, #0]
 80042f6:	b91e      	cbnz	r6, 8004300 <_printf_i+0x1a4>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	f023 0320 	bic.w	r3, r3, #32
 80042fe:	6023      	str	r3, [r4, #0]
 8004300:	2310      	movs	r3, #16
 8004302:	e7a7      	b.n	8004254 <_printf_i+0xf8>
 8004304:	4824      	ldr	r0, [pc, #144]	; (8004398 <_printf_i+0x23c>)
 8004306:	e7e4      	b.n	80042d2 <_printf_i+0x176>
 8004308:	4615      	mov	r5, r2
 800430a:	e7bd      	b.n	8004288 <_printf_i+0x12c>
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	6826      	ldr	r6, [r4, #0]
 8004310:	6961      	ldr	r1, [r4, #20]
 8004312:	1d18      	adds	r0, r3, #4
 8004314:	6028      	str	r0, [r5, #0]
 8004316:	0635      	lsls	r5, r6, #24
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	d501      	bpl.n	8004320 <_printf_i+0x1c4>
 800431c:	6019      	str	r1, [r3, #0]
 800431e:	e002      	b.n	8004326 <_printf_i+0x1ca>
 8004320:	0670      	lsls	r0, r6, #25
 8004322:	d5fb      	bpl.n	800431c <_printf_i+0x1c0>
 8004324:	8019      	strh	r1, [r3, #0]
 8004326:	2300      	movs	r3, #0
 8004328:	6123      	str	r3, [r4, #16]
 800432a:	4615      	mov	r5, r2
 800432c:	e7bc      	b.n	80042a8 <_printf_i+0x14c>
 800432e:	682b      	ldr	r3, [r5, #0]
 8004330:	1d1a      	adds	r2, r3, #4
 8004332:	602a      	str	r2, [r5, #0]
 8004334:	681d      	ldr	r5, [r3, #0]
 8004336:	6862      	ldr	r2, [r4, #4]
 8004338:	2100      	movs	r1, #0
 800433a:	4628      	mov	r0, r5
 800433c:	f7fb ff48 	bl	80001d0 <memchr>
 8004340:	b108      	cbz	r0, 8004346 <_printf_i+0x1ea>
 8004342:	1b40      	subs	r0, r0, r5
 8004344:	6060      	str	r0, [r4, #4]
 8004346:	6863      	ldr	r3, [r4, #4]
 8004348:	6123      	str	r3, [r4, #16]
 800434a:	2300      	movs	r3, #0
 800434c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004350:	e7aa      	b.n	80042a8 <_printf_i+0x14c>
 8004352:	6923      	ldr	r3, [r4, #16]
 8004354:	462a      	mov	r2, r5
 8004356:	4649      	mov	r1, r9
 8004358:	4640      	mov	r0, r8
 800435a:	47d0      	blx	sl
 800435c:	3001      	adds	r0, #1
 800435e:	d0ad      	beq.n	80042bc <_printf_i+0x160>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	079b      	lsls	r3, r3, #30
 8004364:	d413      	bmi.n	800438e <_printf_i+0x232>
 8004366:	68e0      	ldr	r0, [r4, #12]
 8004368:	9b03      	ldr	r3, [sp, #12]
 800436a:	4298      	cmp	r0, r3
 800436c:	bfb8      	it	lt
 800436e:	4618      	movlt	r0, r3
 8004370:	e7a6      	b.n	80042c0 <_printf_i+0x164>
 8004372:	2301      	movs	r3, #1
 8004374:	4632      	mov	r2, r6
 8004376:	4649      	mov	r1, r9
 8004378:	4640      	mov	r0, r8
 800437a:	47d0      	blx	sl
 800437c:	3001      	adds	r0, #1
 800437e:	d09d      	beq.n	80042bc <_printf_i+0x160>
 8004380:	3501      	adds	r5, #1
 8004382:	68e3      	ldr	r3, [r4, #12]
 8004384:	9903      	ldr	r1, [sp, #12]
 8004386:	1a5b      	subs	r3, r3, r1
 8004388:	42ab      	cmp	r3, r5
 800438a:	dcf2      	bgt.n	8004372 <_printf_i+0x216>
 800438c:	e7eb      	b.n	8004366 <_printf_i+0x20a>
 800438e:	2500      	movs	r5, #0
 8004390:	f104 0619 	add.w	r6, r4, #25
 8004394:	e7f5      	b.n	8004382 <_printf_i+0x226>
 8004396:	bf00      	nop
 8004398:	080058fa 	.word	0x080058fa
 800439c:	0800590b 	.word	0x0800590b

080043a0 <__sflush_r>:
 80043a0:	898a      	ldrh	r2, [r1, #12]
 80043a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043a6:	4605      	mov	r5, r0
 80043a8:	0710      	lsls	r0, r2, #28
 80043aa:	460c      	mov	r4, r1
 80043ac:	d458      	bmi.n	8004460 <__sflush_r+0xc0>
 80043ae:	684b      	ldr	r3, [r1, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	dc05      	bgt.n	80043c0 <__sflush_r+0x20>
 80043b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	dc02      	bgt.n	80043c0 <__sflush_r+0x20>
 80043ba:	2000      	movs	r0, #0
 80043bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043c2:	2e00      	cmp	r6, #0
 80043c4:	d0f9      	beq.n	80043ba <__sflush_r+0x1a>
 80043c6:	2300      	movs	r3, #0
 80043c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043cc:	682f      	ldr	r7, [r5, #0]
 80043ce:	6a21      	ldr	r1, [r4, #32]
 80043d0:	602b      	str	r3, [r5, #0]
 80043d2:	d032      	beq.n	800443a <__sflush_r+0x9a>
 80043d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043d6:	89a3      	ldrh	r3, [r4, #12]
 80043d8:	075a      	lsls	r2, r3, #29
 80043da:	d505      	bpl.n	80043e8 <__sflush_r+0x48>
 80043dc:	6863      	ldr	r3, [r4, #4]
 80043de:	1ac0      	subs	r0, r0, r3
 80043e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043e2:	b10b      	cbz	r3, 80043e8 <__sflush_r+0x48>
 80043e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043e6:	1ac0      	subs	r0, r0, r3
 80043e8:	2300      	movs	r3, #0
 80043ea:	4602      	mov	r2, r0
 80043ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043ee:	6a21      	ldr	r1, [r4, #32]
 80043f0:	4628      	mov	r0, r5
 80043f2:	47b0      	blx	r6
 80043f4:	1c43      	adds	r3, r0, #1
 80043f6:	89a3      	ldrh	r3, [r4, #12]
 80043f8:	d106      	bne.n	8004408 <__sflush_r+0x68>
 80043fa:	6829      	ldr	r1, [r5, #0]
 80043fc:	291d      	cmp	r1, #29
 80043fe:	d82b      	bhi.n	8004458 <__sflush_r+0xb8>
 8004400:	4a29      	ldr	r2, [pc, #164]	; (80044a8 <__sflush_r+0x108>)
 8004402:	410a      	asrs	r2, r1
 8004404:	07d6      	lsls	r6, r2, #31
 8004406:	d427      	bmi.n	8004458 <__sflush_r+0xb8>
 8004408:	2200      	movs	r2, #0
 800440a:	6062      	str	r2, [r4, #4]
 800440c:	04d9      	lsls	r1, r3, #19
 800440e:	6922      	ldr	r2, [r4, #16]
 8004410:	6022      	str	r2, [r4, #0]
 8004412:	d504      	bpl.n	800441e <__sflush_r+0x7e>
 8004414:	1c42      	adds	r2, r0, #1
 8004416:	d101      	bne.n	800441c <__sflush_r+0x7c>
 8004418:	682b      	ldr	r3, [r5, #0]
 800441a:	b903      	cbnz	r3, 800441e <__sflush_r+0x7e>
 800441c:	6560      	str	r0, [r4, #84]	; 0x54
 800441e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004420:	602f      	str	r7, [r5, #0]
 8004422:	2900      	cmp	r1, #0
 8004424:	d0c9      	beq.n	80043ba <__sflush_r+0x1a>
 8004426:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800442a:	4299      	cmp	r1, r3
 800442c:	d002      	beq.n	8004434 <__sflush_r+0x94>
 800442e:	4628      	mov	r0, r5
 8004430:	f7ff fbea 	bl	8003c08 <_free_r>
 8004434:	2000      	movs	r0, #0
 8004436:	6360      	str	r0, [r4, #52]	; 0x34
 8004438:	e7c0      	b.n	80043bc <__sflush_r+0x1c>
 800443a:	2301      	movs	r3, #1
 800443c:	4628      	mov	r0, r5
 800443e:	47b0      	blx	r6
 8004440:	1c41      	adds	r1, r0, #1
 8004442:	d1c8      	bne.n	80043d6 <__sflush_r+0x36>
 8004444:	682b      	ldr	r3, [r5, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0c5      	beq.n	80043d6 <__sflush_r+0x36>
 800444a:	2b1d      	cmp	r3, #29
 800444c:	d001      	beq.n	8004452 <__sflush_r+0xb2>
 800444e:	2b16      	cmp	r3, #22
 8004450:	d101      	bne.n	8004456 <__sflush_r+0xb6>
 8004452:	602f      	str	r7, [r5, #0]
 8004454:	e7b1      	b.n	80043ba <__sflush_r+0x1a>
 8004456:	89a3      	ldrh	r3, [r4, #12]
 8004458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800445c:	81a3      	strh	r3, [r4, #12]
 800445e:	e7ad      	b.n	80043bc <__sflush_r+0x1c>
 8004460:	690f      	ldr	r7, [r1, #16]
 8004462:	2f00      	cmp	r7, #0
 8004464:	d0a9      	beq.n	80043ba <__sflush_r+0x1a>
 8004466:	0793      	lsls	r3, r2, #30
 8004468:	680e      	ldr	r6, [r1, #0]
 800446a:	bf08      	it	eq
 800446c:	694b      	ldreq	r3, [r1, #20]
 800446e:	600f      	str	r7, [r1, #0]
 8004470:	bf18      	it	ne
 8004472:	2300      	movne	r3, #0
 8004474:	eba6 0807 	sub.w	r8, r6, r7
 8004478:	608b      	str	r3, [r1, #8]
 800447a:	f1b8 0f00 	cmp.w	r8, #0
 800447e:	dd9c      	ble.n	80043ba <__sflush_r+0x1a>
 8004480:	6a21      	ldr	r1, [r4, #32]
 8004482:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004484:	4643      	mov	r3, r8
 8004486:	463a      	mov	r2, r7
 8004488:	4628      	mov	r0, r5
 800448a:	47b0      	blx	r6
 800448c:	2800      	cmp	r0, #0
 800448e:	dc06      	bgt.n	800449e <__sflush_r+0xfe>
 8004490:	89a3      	ldrh	r3, [r4, #12]
 8004492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004496:	81a3      	strh	r3, [r4, #12]
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	e78e      	b.n	80043bc <__sflush_r+0x1c>
 800449e:	4407      	add	r7, r0
 80044a0:	eba8 0800 	sub.w	r8, r8, r0
 80044a4:	e7e9      	b.n	800447a <__sflush_r+0xda>
 80044a6:	bf00      	nop
 80044a8:	dfbffffe 	.word	0xdfbffffe

080044ac <_fflush_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	690b      	ldr	r3, [r1, #16]
 80044b0:	4605      	mov	r5, r0
 80044b2:	460c      	mov	r4, r1
 80044b4:	b913      	cbnz	r3, 80044bc <_fflush_r+0x10>
 80044b6:	2500      	movs	r5, #0
 80044b8:	4628      	mov	r0, r5
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	b118      	cbz	r0, 80044c6 <_fflush_r+0x1a>
 80044be:	6a03      	ldr	r3, [r0, #32]
 80044c0:	b90b      	cbnz	r3, 80044c6 <_fflush_r+0x1a>
 80044c2:	f7ff fa99 	bl	80039f8 <__sinit>
 80044c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f3      	beq.n	80044b6 <_fflush_r+0xa>
 80044ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80044d0:	07d0      	lsls	r0, r2, #31
 80044d2:	d404      	bmi.n	80044de <_fflush_r+0x32>
 80044d4:	0599      	lsls	r1, r3, #22
 80044d6:	d402      	bmi.n	80044de <_fflush_r+0x32>
 80044d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044da:	f7ff fb92 	bl	8003c02 <__retarget_lock_acquire_recursive>
 80044de:	4628      	mov	r0, r5
 80044e0:	4621      	mov	r1, r4
 80044e2:	f7ff ff5d 	bl	80043a0 <__sflush_r>
 80044e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044e8:	07da      	lsls	r2, r3, #31
 80044ea:	4605      	mov	r5, r0
 80044ec:	d4e4      	bmi.n	80044b8 <_fflush_r+0xc>
 80044ee:	89a3      	ldrh	r3, [r4, #12]
 80044f0:	059b      	lsls	r3, r3, #22
 80044f2:	d4e1      	bmi.n	80044b8 <_fflush_r+0xc>
 80044f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044f6:	f7ff fb85 	bl	8003c04 <__retarget_lock_release_recursive>
 80044fa:	e7dd      	b.n	80044b8 <_fflush_r+0xc>

080044fc <__swbuf_r>:
 80044fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fe:	460e      	mov	r6, r1
 8004500:	4614      	mov	r4, r2
 8004502:	4605      	mov	r5, r0
 8004504:	b118      	cbz	r0, 800450e <__swbuf_r+0x12>
 8004506:	6a03      	ldr	r3, [r0, #32]
 8004508:	b90b      	cbnz	r3, 800450e <__swbuf_r+0x12>
 800450a:	f7ff fa75 	bl	80039f8 <__sinit>
 800450e:	69a3      	ldr	r3, [r4, #24]
 8004510:	60a3      	str	r3, [r4, #8]
 8004512:	89a3      	ldrh	r3, [r4, #12]
 8004514:	071a      	lsls	r2, r3, #28
 8004516:	d525      	bpl.n	8004564 <__swbuf_r+0x68>
 8004518:	6923      	ldr	r3, [r4, #16]
 800451a:	b31b      	cbz	r3, 8004564 <__swbuf_r+0x68>
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	6922      	ldr	r2, [r4, #16]
 8004520:	1a98      	subs	r0, r3, r2
 8004522:	6963      	ldr	r3, [r4, #20]
 8004524:	b2f6      	uxtb	r6, r6
 8004526:	4283      	cmp	r3, r0
 8004528:	4637      	mov	r7, r6
 800452a:	dc04      	bgt.n	8004536 <__swbuf_r+0x3a>
 800452c:	4621      	mov	r1, r4
 800452e:	4628      	mov	r0, r5
 8004530:	f7ff ffbc 	bl	80044ac <_fflush_r>
 8004534:	b9e0      	cbnz	r0, 8004570 <__swbuf_r+0x74>
 8004536:	68a3      	ldr	r3, [r4, #8]
 8004538:	3b01      	subs	r3, #1
 800453a:	60a3      	str	r3, [r4, #8]
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	6022      	str	r2, [r4, #0]
 8004542:	701e      	strb	r6, [r3, #0]
 8004544:	6962      	ldr	r2, [r4, #20]
 8004546:	1c43      	adds	r3, r0, #1
 8004548:	429a      	cmp	r2, r3
 800454a:	d004      	beq.n	8004556 <__swbuf_r+0x5a>
 800454c:	89a3      	ldrh	r3, [r4, #12]
 800454e:	07db      	lsls	r3, r3, #31
 8004550:	d506      	bpl.n	8004560 <__swbuf_r+0x64>
 8004552:	2e0a      	cmp	r6, #10
 8004554:	d104      	bne.n	8004560 <__swbuf_r+0x64>
 8004556:	4621      	mov	r1, r4
 8004558:	4628      	mov	r0, r5
 800455a:	f7ff ffa7 	bl	80044ac <_fflush_r>
 800455e:	b938      	cbnz	r0, 8004570 <__swbuf_r+0x74>
 8004560:	4638      	mov	r0, r7
 8004562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004564:	4621      	mov	r1, r4
 8004566:	4628      	mov	r0, r5
 8004568:	f000 f806 	bl	8004578 <__swsetup_r>
 800456c:	2800      	cmp	r0, #0
 800456e:	d0d5      	beq.n	800451c <__swbuf_r+0x20>
 8004570:	f04f 37ff 	mov.w	r7, #4294967295
 8004574:	e7f4      	b.n	8004560 <__swbuf_r+0x64>
	...

08004578 <__swsetup_r>:
 8004578:	b538      	push	{r3, r4, r5, lr}
 800457a:	4b2a      	ldr	r3, [pc, #168]	; (8004624 <__swsetup_r+0xac>)
 800457c:	4605      	mov	r5, r0
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	460c      	mov	r4, r1
 8004582:	b118      	cbz	r0, 800458c <__swsetup_r+0x14>
 8004584:	6a03      	ldr	r3, [r0, #32]
 8004586:	b90b      	cbnz	r3, 800458c <__swsetup_r+0x14>
 8004588:	f7ff fa36 	bl	80039f8 <__sinit>
 800458c:	89a3      	ldrh	r3, [r4, #12]
 800458e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004592:	0718      	lsls	r0, r3, #28
 8004594:	d422      	bmi.n	80045dc <__swsetup_r+0x64>
 8004596:	06d9      	lsls	r1, r3, #27
 8004598:	d407      	bmi.n	80045aa <__swsetup_r+0x32>
 800459a:	2309      	movs	r3, #9
 800459c:	602b      	str	r3, [r5, #0]
 800459e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80045a2:	81a3      	strh	r3, [r4, #12]
 80045a4:	f04f 30ff 	mov.w	r0, #4294967295
 80045a8:	e034      	b.n	8004614 <__swsetup_r+0x9c>
 80045aa:	0758      	lsls	r0, r3, #29
 80045ac:	d512      	bpl.n	80045d4 <__swsetup_r+0x5c>
 80045ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045b0:	b141      	cbz	r1, 80045c4 <__swsetup_r+0x4c>
 80045b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045b6:	4299      	cmp	r1, r3
 80045b8:	d002      	beq.n	80045c0 <__swsetup_r+0x48>
 80045ba:	4628      	mov	r0, r5
 80045bc:	f7ff fb24 	bl	8003c08 <_free_r>
 80045c0:	2300      	movs	r3, #0
 80045c2:	6363      	str	r3, [r4, #52]	; 0x34
 80045c4:	89a3      	ldrh	r3, [r4, #12]
 80045c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045ca:	81a3      	strh	r3, [r4, #12]
 80045cc:	2300      	movs	r3, #0
 80045ce:	6063      	str	r3, [r4, #4]
 80045d0:	6923      	ldr	r3, [r4, #16]
 80045d2:	6023      	str	r3, [r4, #0]
 80045d4:	89a3      	ldrh	r3, [r4, #12]
 80045d6:	f043 0308 	orr.w	r3, r3, #8
 80045da:	81a3      	strh	r3, [r4, #12]
 80045dc:	6923      	ldr	r3, [r4, #16]
 80045de:	b94b      	cbnz	r3, 80045f4 <__swsetup_r+0x7c>
 80045e0:	89a3      	ldrh	r3, [r4, #12]
 80045e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ea:	d003      	beq.n	80045f4 <__swsetup_r+0x7c>
 80045ec:	4621      	mov	r1, r4
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 f850 	bl	8004694 <__smakebuf_r>
 80045f4:	89a0      	ldrh	r0, [r4, #12]
 80045f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045fa:	f010 0301 	ands.w	r3, r0, #1
 80045fe:	d00a      	beq.n	8004616 <__swsetup_r+0x9e>
 8004600:	2300      	movs	r3, #0
 8004602:	60a3      	str	r3, [r4, #8]
 8004604:	6963      	ldr	r3, [r4, #20]
 8004606:	425b      	negs	r3, r3
 8004608:	61a3      	str	r3, [r4, #24]
 800460a:	6923      	ldr	r3, [r4, #16]
 800460c:	b943      	cbnz	r3, 8004620 <__swsetup_r+0xa8>
 800460e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004612:	d1c4      	bne.n	800459e <__swsetup_r+0x26>
 8004614:	bd38      	pop	{r3, r4, r5, pc}
 8004616:	0781      	lsls	r1, r0, #30
 8004618:	bf58      	it	pl
 800461a:	6963      	ldrpl	r3, [r4, #20]
 800461c:	60a3      	str	r3, [r4, #8]
 800461e:	e7f4      	b.n	800460a <__swsetup_r+0x92>
 8004620:	2000      	movs	r0, #0
 8004622:	e7f7      	b.n	8004614 <__swsetup_r+0x9c>
 8004624:	2000005c 	.word	0x2000005c

08004628 <_sbrk_r>:
 8004628:	b538      	push	{r3, r4, r5, lr}
 800462a:	4d06      	ldr	r5, [pc, #24]	; (8004644 <_sbrk_r+0x1c>)
 800462c:	2300      	movs	r3, #0
 800462e:	4604      	mov	r4, r0
 8004630:	4608      	mov	r0, r1
 8004632:	602b      	str	r3, [r5, #0]
 8004634:	f7fe f8d6 	bl	80027e4 <_sbrk>
 8004638:	1c43      	adds	r3, r0, #1
 800463a:	d102      	bne.n	8004642 <_sbrk_r+0x1a>
 800463c:	682b      	ldr	r3, [r5, #0]
 800463e:	b103      	cbz	r3, 8004642 <_sbrk_r+0x1a>
 8004640:	6023      	str	r3, [r4, #0]
 8004642:	bd38      	pop	{r3, r4, r5, pc}
 8004644:	20000480 	.word	0x20000480

08004648 <__swhatbuf_r>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	460c      	mov	r4, r1
 800464c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004650:	2900      	cmp	r1, #0
 8004652:	b096      	sub	sp, #88	; 0x58
 8004654:	4615      	mov	r5, r2
 8004656:	461e      	mov	r6, r3
 8004658:	da0d      	bge.n	8004676 <__swhatbuf_r+0x2e>
 800465a:	89a3      	ldrh	r3, [r4, #12]
 800465c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004660:	f04f 0100 	mov.w	r1, #0
 8004664:	bf0c      	ite	eq
 8004666:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800466a:	2340      	movne	r3, #64	; 0x40
 800466c:	2000      	movs	r0, #0
 800466e:	6031      	str	r1, [r6, #0]
 8004670:	602b      	str	r3, [r5, #0]
 8004672:	b016      	add	sp, #88	; 0x58
 8004674:	bd70      	pop	{r4, r5, r6, pc}
 8004676:	466a      	mov	r2, sp
 8004678:	f000 f848 	bl	800470c <_fstat_r>
 800467c:	2800      	cmp	r0, #0
 800467e:	dbec      	blt.n	800465a <__swhatbuf_r+0x12>
 8004680:	9901      	ldr	r1, [sp, #4]
 8004682:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004686:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800468a:	4259      	negs	r1, r3
 800468c:	4159      	adcs	r1, r3
 800468e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004692:	e7eb      	b.n	800466c <__swhatbuf_r+0x24>

08004694 <__smakebuf_r>:
 8004694:	898b      	ldrh	r3, [r1, #12]
 8004696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004698:	079d      	lsls	r5, r3, #30
 800469a:	4606      	mov	r6, r0
 800469c:	460c      	mov	r4, r1
 800469e:	d507      	bpl.n	80046b0 <__smakebuf_r+0x1c>
 80046a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046a4:	6023      	str	r3, [r4, #0]
 80046a6:	6123      	str	r3, [r4, #16]
 80046a8:	2301      	movs	r3, #1
 80046aa:	6163      	str	r3, [r4, #20]
 80046ac:	b002      	add	sp, #8
 80046ae:	bd70      	pop	{r4, r5, r6, pc}
 80046b0:	ab01      	add	r3, sp, #4
 80046b2:	466a      	mov	r2, sp
 80046b4:	f7ff ffc8 	bl	8004648 <__swhatbuf_r>
 80046b8:	9900      	ldr	r1, [sp, #0]
 80046ba:	4605      	mov	r5, r0
 80046bc:	4630      	mov	r0, r6
 80046be:	f7ff fb0f 	bl	8003ce0 <_malloc_r>
 80046c2:	b948      	cbnz	r0, 80046d8 <__smakebuf_r+0x44>
 80046c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046c8:	059a      	lsls	r2, r3, #22
 80046ca:	d4ef      	bmi.n	80046ac <__smakebuf_r+0x18>
 80046cc:	f023 0303 	bic.w	r3, r3, #3
 80046d0:	f043 0302 	orr.w	r3, r3, #2
 80046d4:	81a3      	strh	r3, [r4, #12]
 80046d6:	e7e3      	b.n	80046a0 <__smakebuf_r+0xc>
 80046d8:	89a3      	ldrh	r3, [r4, #12]
 80046da:	6020      	str	r0, [r4, #0]
 80046dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e0:	81a3      	strh	r3, [r4, #12]
 80046e2:	9b00      	ldr	r3, [sp, #0]
 80046e4:	6163      	str	r3, [r4, #20]
 80046e6:	9b01      	ldr	r3, [sp, #4]
 80046e8:	6120      	str	r0, [r4, #16]
 80046ea:	b15b      	cbz	r3, 8004704 <__smakebuf_r+0x70>
 80046ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046f0:	4630      	mov	r0, r6
 80046f2:	f000 f81d 	bl	8004730 <_isatty_r>
 80046f6:	b128      	cbz	r0, 8004704 <__smakebuf_r+0x70>
 80046f8:	89a3      	ldrh	r3, [r4, #12]
 80046fa:	f023 0303 	bic.w	r3, r3, #3
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	81a3      	strh	r3, [r4, #12]
 8004704:	89a3      	ldrh	r3, [r4, #12]
 8004706:	431d      	orrs	r5, r3
 8004708:	81a5      	strh	r5, [r4, #12]
 800470a:	e7cf      	b.n	80046ac <__smakebuf_r+0x18>

0800470c <_fstat_r>:
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	4d07      	ldr	r5, [pc, #28]	; (800472c <_fstat_r+0x20>)
 8004710:	2300      	movs	r3, #0
 8004712:	4604      	mov	r4, r0
 8004714:	4608      	mov	r0, r1
 8004716:	4611      	mov	r1, r2
 8004718:	602b      	str	r3, [r5, #0]
 800471a:	f7fe f83b 	bl	8002794 <_fstat>
 800471e:	1c43      	adds	r3, r0, #1
 8004720:	d102      	bne.n	8004728 <_fstat_r+0x1c>
 8004722:	682b      	ldr	r3, [r5, #0]
 8004724:	b103      	cbz	r3, 8004728 <_fstat_r+0x1c>
 8004726:	6023      	str	r3, [r4, #0]
 8004728:	bd38      	pop	{r3, r4, r5, pc}
 800472a:	bf00      	nop
 800472c:	20000480 	.word	0x20000480

08004730 <_isatty_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4d06      	ldr	r5, [pc, #24]	; (800474c <_isatty_r+0x1c>)
 8004734:	2300      	movs	r3, #0
 8004736:	4604      	mov	r4, r0
 8004738:	4608      	mov	r0, r1
 800473a:	602b      	str	r3, [r5, #0]
 800473c:	f7fe f83a 	bl	80027b4 <_isatty>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	d102      	bne.n	800474a <_isatty_r+0x1a>
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	b103      	cbz	r3, 800474a <_isatty_r+0x1a>
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	bd38      	pop	{r3, r4, r5, pc}
 800474c:	20000480 	.word	0x20000480

08004750 <tan>:
 8004750:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004752:	ec53 2b10 	vmov	r2, r3, d0
 8004756:	4816      	ldr	r0, [pc, #88]	; (80047b0 <tan+0x60>)
 8004758:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800475c:	4281      	cmp	r1, r0
 800475e:	dc07      	bgt.n	8004770 <tan+0x20>
 8004760:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80047a8 <tan+0x58>
 8004764:	2001      	movs	r0, #1
 8004766:	b005      	add	sp, #20
 8004768:	f85d eb04 	ldr.w	lr, [sp], #4
 800476c:	f000 b824 	b.w	80047b8 <__kernel_tan>
 8004770:	4810      	ldr	r0, [pc, #64]	; (80047b4 <tan+0x64>)
 8004772:	4281      	cmp	r1, r0
 8004774:	dd09      	ble.n	800478a <tan+0x3a>
 8004776:	ee10 0a10 	vmov	r0, s0
 800477a:	4619      	mov	r1, r3
 800477c:	f7fb fd7c 	bl	8000278 <__aeabi_dsub>
 8004780:	ec41 0b10 	vmov	d0, r0, r1
 8004784:	b005      	add	sp, #20
 8004786:	f85d fb04 	ldr.w	pc, [sp], #4
 800478a:	4668      	mov	r0, sp
 800478c:	f000 fa20 	bl	8004bd0 <__ieee754_rem_pio2>
 8004790:	0040      	lsls	r0, r0, #1
 8004792:	f000 0002 	and.w	r0, r0, #2
 8004796:	ed9d 1b02 	vldr	d1, [sp, #8]
 800479a:	ed9d 0b00 	vldr	d0, [sp]
 800479e:	f1c0 0001 	rsb	r0, r0, #1
 80047a2:	f000 f809 	bl	80047b8 <__kernel_tan>
 80047a6:	e7ed      	b.n	8004784 <tan+0x34>
	...
 80047b0:	3fe921fb 	.word	0x3fe921fb
 80047b4:	7fefffff 	.word	0x7fefffff

080047b8 <__kernel_tan>:
 80047b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047bc:	ed2d 8b06 	vpush	{d8-d10}
 80047c0:	ec5b ab10 	vmov	sl, fp, d0
 80047c4:	4be0      	ldr	r3, [pc, #896]	; (8004b48 <__kernel_tan+0x390>)
 80047c6:	b083      	sub	sp, #12
 80047c8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80047cc:	429f      	cmp	r7, r3
 80047ce:	ec59 8b11 	vmov	r8, r9, d1
 80047d2:	4606      	mov	r6, r0
 80047d4:	f8cd b000 	str.w	fp, [sp]
 80047d8:	dc61      	bgt.n	800489e <__kernel_tan+0xe6>
 80047da:	ee10 0a10 	vmov	r0, s0
 80047de:	4659      	mov	r1, fp
 80047e0:	f7fc f99c 	bl	8000b1c <__aeabi_d2iz>
 80047e4:	4605      	mov	r5, r0
 80047e6:	2800      	cmp	r0, #0
 80047e8:	f040 8083 	bne.w	80048f2 <__kernel_tan+0x13a>
 80047ec:	1c73      	adds	r3, r6, #1
 80047ee:	4652      	mov	r2, sl
 80047f0:	4313      	orrs	r3, r2
 80047f2:	433b      	orrs	r3, r7
 80047f4:	d112      	bne.n	800481c <__kernel_tan+0x64>
 80047f6:	ec4b ab10 	vmov	d0, sl, fp
 80047fa:	f000 fbef 	bl	8004fdc <fabs>
 80047fe:	49d3      	ldr	r1, [pc, #844]	; (8004b4c <__kernel_tan+0x394>)
 8004800:	ec53 2b10 	vmov	r2, r3, d0
 8004804:	2000      	movs	r0, #0
 8004806:	f7fc f819 	bl	800083c <__aeabi_ddiv>
 800480a:	4682      	mov	sl, r0
 800480c:	468b      	mov	fp, r1
 800480e:	ec4b ab10 	vmov	d0, sl, fp
 8004812:	b003      	add	sp, #12
 8004814:	ecbd 8b06 	vpop	{d8-d10}
 8004818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800481c:	2e01      	cmp	r6, #1
 800481e:	d0f6      	beq.n	800480e <__kernel_tan+0x56>
 8004820:	4642      	mov	r2, r8
 8004822:	464b      	mov	r3, r9
 8004824:	4650      	mov	r0, sl
 8004826:	4659      	mov	r1, fp
 8004828:	f7fb fd28 	bl	800027c <__adddf3>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	460f      	mov	r7, r1
 8004832:	2000      	movs	r0, #0
 8004834:	49c6      	ldr	r1, [pc, #792]	; (8004b50 <__kernel_tan+0x398>)
 8004836:	f7fc f801 	bl	800083c <__aeabi_ddiv>
 800483a:	e9cd 0100 	strd	r0, r1, [sp]
 800483e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004842:	462e      	mov	r6, r5
 8004844:	4652      	mov	r2, sl
 8004846:	462c      	mov	r4, r5
 8004848:	4630      	mov	r0, r6
 800484a:	461d      	mov	r5, r3
 800484c:	4639      	mov	r1, r7
 800484e:	465b      	mov	r3, fp
 8004850:	f7fb fd12 	bl	8000278 <__aeabi_dsub>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4640      	mov	r0, r8
 800485a:	4649      	mov	r1, r9
 800485c:	f7fb fd0c 	bl	8000278 <__aeabi_dsub>
 8004860:	4632      	mov	r2, r6
 8004862:	462b      	mov	r3, r5
 8004864:	f7fb fec0 	bl	80005e8 <__aeabi_dmul>
 8004868:	4632      	mov	r2, r6
 800486a:	4680      	mov	r8, r0
 800486c:	4689      	mov	r9, r1
 800486e:	462b      	mov	r3, r5
 8004870:	4630      	mov	r0, r6
 8004872:	4639      	mov	r1, r7
 8004874:	f7fb feb8 	bl	80005e8 <__aeabi_dmul>
 8004878:	4bb4      	ldr	r3, [pc, #720]	; (8004b4c <__kernel_tan+0x394>)
 800487a:	2200      	movs	r2, #0
 800487c:	f7fb fcfe 	bl	800027c <__adddf3>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4640      	mov	r0, r8
 8004886:	4649      	mov	r1, r9
 8004888:	f7fb fcf8 	bl	800027c <__adddf3>
 800488c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004890:	f7fb feaa 	bl	80005e8 <__aeabi_dmul>
 8004894:	4622      	mov	r2, r4
 8004896:	462b      	mov	r3, r5
 8004898:	f7fb fcf0 	bl	800027c <__adddf3>
 800489c:	e7b5      	b.n	800480a <__kernel_tan+0x52>
 800489e:	4bad      	ldr	r3, [pc, #692]	; (8004b54 <__kernel_tan+0x39c>)
 80048a0:	429f      	cmp	r7, r3
 80048a2:	dd26      	ble.n	80048f2 <__kernel_tan+0x13a>
 80048a4:	9b00      	ldr	r3, [sp, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	da09      	bge.n	80048be <__kernel_tan+0x106>
 80048aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80048ae:	469b      	mov	fp, r3
 80048b0:	ee10 aa10 	vmov	sl, s0
 80048b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80048b8:	ee11 8a10 	vmov	r8, s2
 80048bc:	4699      	mov	r9, r3
 80048be:	4652      	mov	r2, sl
 80048c0:	465b      	mov	r3, fp
 80048c2:	a183      	add	r1, pc, #524	; (adr r1, 8004ad0 <__kernel_tan+0x318>)
 80048c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048c8:	f7fb fcd6 	bl	8000278 <__aeabi_dsub>
 80048cc:	4642      	mov	r2, r8
 80048ce:	464b      	mov	r3, r9
 80048d0:	4604      	mov	r4, r0
 80048d2:	460d      	mov	r5, r1
 80048d4:	a180      	add	r1, pc, #512	; (adr r1, 8004ad8 <__kernel_tan+0x320>)
 80048d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048da:	f7fb fccd 	bl	8000278 <__aeabi_dsub>
 80048de:	4622      	mov	r2, r4
 80048e0:	462b      	mov	r3, r5
 80048e2:	f7fb fccb 	bl	800027c <__adddf3>
 80048e6:	f04f 0800 	mov.w	r8, #0
 80048ea:	4682      	mov	sl, r0
 80048ec:	468b      	mov	fp, r1
 80048ee:	f04f 0900 	mov.w	r9, #0
 80048f2:	4652      	mov	r2, sl
 80048f4:	465b      	mov	r3, fp
 80048f6:	4650      	mov	r0, sl
 80048f8:	4659      	mov	r1, fp
 80048fa:	f7fb fe75 	bl	80005e8 <__aeabi_dmul>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	ec43 2b18 	vmov	d8, r2, r3
 8004906:	f7fb fe6f 	bl	80005e8 <__aeabi_dmul>
 800490a:	ec53 2b18 	vmov	r2, r3, d8
 800490e:	4604      	mov	r4, r0
 8004910:	460d      	mov	r5, r1
 8004912:	4650      	mov	r0, sl
 8004914:	4659      	mov	r1, fp
 8004916:	f7fb fe67 	bl	80005e8 <__aeabi_dmul>
 800491a:	a371      	add	r3, pc, #452	; (adr r3, 8004ae0 <__kernel_tan+0x328>)
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	ec41 0b19 	vmov	d9, r0, r1
 8004924:	4620      	mov	r0, r4
 8004926:	4629      	mov	r1, r5
 8004928:	f7fb fe5e 	bl	80005e8 <__aeabi_dmul>
 800492c:	a36e      	add	r3, pc, #440	; (adr r3, 8004ae8 <__kernel_tan+0x330>)
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	f7fb fca3 	bl	800027c <__adddf3>
 8004936:	4622      	mov	r2, r4
 8004938:	462b      	mov	r3, r5
 800493a:	f7fb fe55 	bl	80005e8 <__aeabi_dmul>
 800493e:	a36c      	add	r3, pc, #432	; (adr r3, 8004af0 <__kernel_tan+0x338>)
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f7fb fc9a 	bl	800027c <__adddf3>
 8004948:	4622      	mov	r2, r4
 800494a:	462b      	mov	r3, r5
 800494c:	f7fb fe4c 	bl	80005e8 <__aeabi_dmul>
 8004950:	a369      	add	r3, pc, #420	; (adr r3, 8004af8 <__kernel_tan+0x340>)
 8004952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004956:	f7fb fc91 	bl	800027c <__adddf3>
 800495a:	4622      	mov	r2, r4
 800495c:	462b      	mov	r3, r5
 800495e:	f7fb fe43 	bl	80005e8 <__aeabi_dmul>
 8004962:	a367      	add	r3, pc, #412	; (adr r3, 8004b00 <__kernel_tan+0x348>)
 8004964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004968:	f7fb fc88 	bl	800027c <__adddf3>
 800496c:	4622      	mov	r2, r4
 800496e:	462b      	mov	r3, r5
 8004970:	f7fb fe3a 	bl	80005e8 <__aeabi_dmul>
 8004974:	a364      	add	r3, pc, #400	; (adr r3, 8004b08 <__kernel_tan+0x350>)
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f7fb fc7f 	bl	800027c <__adddf3>
 800497e:	ec53 2b18 	vmov	r2, r3, d8
 8004982:	f7fb fe31 	bl	80005e8 <__aeabi_dmul>
 8004986:	a362      	add	r3, pc, #392	; (adr r3, 8004b10 <__kernel_tan+0x358>)
 8004988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498c:	ec41 0b1a 	vmov	d10, r0, r1
 8004990:	4620      	mov	r0, r4
 8004992:	4629      	mov	r1, r5
 8004994:	f7fb fe28 	bl	80005e8 <__aeabi_dmul>
 8004998:	a35f      	add	r3, pc, #380	; (adr r3, 8004b18 <__kernel_tan+0x360>)
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	f7fb fc6d 	bl	800027c <__adddf3>
 80049a2:	4622      	mov	r2, r4
 80049a4:	462b      	mov	r3, r5
 80049a6:	f7fb fe1f 	bl	80005e8 <__aeabi_dmul>
 80049aa:	a35d      	add	r3, pc, #372	; (adr r3, 8004b20 <__kernel_tan+0x368>)
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	f7fb fc64 	bl	800027c <__adddf3>
 80049b4:	4622      	mov	r2, r4
 80049b6:	462b      	mov	r3, r5
 80049b8:	f7fb fe16 	bl	80005e8 <__aeabi_dmul>
 80049bc:	a35a      	add	r3, pc, #360	; (adr r3, 8004b28 <__kernel_tan+0x370>)
 80049be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c2:	f7fb fc5b 	bl	800027c <__adddf3>
 80049c6:	4622      	mov	r2, r4
 80049c8:	462b      	mov	r3, r5
 80049ca:	f7fb fe0d 	bl	80005e8 <__aeabi_dmul>
 80049ce:	a358      	add	r3, pc, #352	; (adr r3, 8004b30 <__kernel_tan+0x378>)
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f7fb fc52 	bl	800027c <__adddf3>
 80049d8:	4622      	mov	r2, r4
 80049da:	462b      	mov	r3, r5
 80049dc:	f7fb fe04 	bl	80005e8 <__aeabi_dmul>
 80049e0:	a355      	add	r3, pc, #340	; (adr r3, 8004b38 <__kernel_tan+0x380>)
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	f7fb fc49 	bl	800027c <__adddf3>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	ec51 0b1a 	vmov	r0, r1, d10
 80049f2:	f7fb fc43 	bl	800027c <__adddf3>
 80049f6:	ec53 2b19 	vmov	r2, r3, d9
 80049fa:	f7fb fdf5 	bl	80005e8 <__aeabi_dmul>
 80049fe:	4642      	mov	r2, r8
 8004a00:	464b      	mov	r3, r9
 8004a02:	f7fb fc3b 	bl	800027c <__adddf3>
 8004a06:	ec53 2b18 	vmov	r2, r3, d8
 8004a0a:	f7fb fded 	bl	80005e8 <__aeabi_dmul>
 8004a0e:	4642      	mov	r2, r8
 8004a10:	464b      	mov	r3, r9
 8004a12:	f7fb fc33 	bl	800027c <__adddf3>
 8004a16:	a34a      	add	r3, pc, #296	; (adr r3, 8004b40 <__kernel_tan+0x388>)
 8004a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	460d      	mov	r5, r1
 8004a20:	ec51 0b19 	vmov	r0, r1, d9
 8004a24:	f7fb fde0 	bl	80005e8 <__aeabi_dmul>
 8004a28:	4622      	mov	r2, r4
 8004a2a:	462b      	mov	r3, r5
 8004a2c:	f7fb fc26 	bl	800027c <__adddf3>
 8004a30:	460b      	mov	r3, r1
 8004a32:	ec41 0b18 	vmov	d8, r0, r1
 8004a36:	4602      	mov	r2, r0
 8004a38:	4659      	mov	r1, fp
 8004a3a:	4650      	mov	r0, sl
 8004a3c:	f7fb fc1e 	bl	800027c <__adddf3>
 8004a40:	4b44      	ldr	r3, [pc, #272]	; (8004b54 <__kernel_tan+0x39c>)
 8004a42:	429f      	cmp	r7, r3
 8004a44:	4604      	mov	r4, r0
 8004a46:	460d      	mov	r5, r1
 8004a48:	f340 8086 	ble.w	8004b58 <__kernel_tan+0x3a0>
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	f7fb fd61 	bl	8000514 <__aeabi_i2d>
 8004a52:	4622      	mov	r2, r4
 8004a54:	4680      	mov	r8, r0
 8004a56:	4689      	mov	r9, r1
 8004a58:	462b      	mov	r3, r5
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	f7fb fdc3 	bl	80005e8 <__aeabi_dmul>
 8004a62:	4642      	mov	r2, r8
 8004a64:	4606      	mov	r6, r0
 8004a66:	460f      	mov	r7, r1
 8004a68:	464b      	mov	r3, r9
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	f7fb fc05 	bl	800027c <__adddf3>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4630      	mov	r0, r6
 8004a78:	4639      	mov	r1, r7
 8004a7a:	f7fb fedf 	bl	800083c <__aeabi_ddiv>
 8004a7e:	ec53 2b18 	vmov	r2, r3, d8
 8004a82:	f7fb fbf9 	bl	8000278 <__aeabi_dsub>
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4650      	mov	r0, sl
 8004a8c:	4659      	mov	r1, fp
 8004a8e:	f7fb fbf3 	bl	8000278 <__aeabi_dsub>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	f7fb fbf1 	bl	800027c <__adddf3>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4640      	mov	r0, r8
 8004aa0:	4649      	mov	r1, r9
 8004aa2:	f7fb fbe9 	bl	8000278 <__aeabi_dsub>
 8004aa6:	9b00      	ldr	r3, [sp, #0]
 8004aa8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8004aac:	f00a 0a02 	and.w	sl, sl, #2
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	f1ca 0001 	rsb	r0, sl, #1
 8004ab6:	460d      	mov	r5, r1
 8004ab8:	f7fb fd2c 	bl	8000514 <__aeabi_i2d>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	f7fb fd90 	bl	80005e8 <__aeabi_dmul>
 8004ac8:	e69f      	b.n	800480a <__kernel_tan+0x52>
 8004aca:	bf00      	nop
 8004acc:	f3af 8000 	nop.w
 8004ad0:	54442d18 	.word	0x54442d18
 8004ad4:	3fe921fb 	.word	0x3fe921fb
 8004ad8:	33145c07 	.word	0x33145c07
 8004adc:	3c81a626 	.word	0x3c81a626
 8004ae0:	74bf7ad4 	.word	0x74bf7ad4
 8004ae4:	3efb2a70 	.word	0x3efb2a70
 8004ae8:	32f0a7e9 	.word	0x32f0a7e9
 8004aec:	3f12b80f 	.word	0x3f12b80f
 8004af0:	1a8d1068 	.word	0x1a8d1068
 8004af4:	3f3026f7 	.word	0x3f3026f7
 8004af8:	fee08315 	.word	0xfee08315
 8004afc:	3f57dbc8 	.word	0x3f57dbc8
 8004b00:	e96e8493 	.word	0xe96e8493
 8004b04:	3f8226e3 	.word	0x3f8226e3
 8004b08:	1bb341fe 	.word	0x1bb341fe
 8004b0c:	3faba1ba 	.word	0x3faba1ba
 8004b10:	db605373 	.word	0xdb605373
 8004b14:	bef375cb 	.word	0xbef375cb
 8004b18:	a03792a6 	.word	0xa03792a6
 8004b1c:	3f147e88 	.word	0x3f147e88
 8004b20:	f2f26501 	.word	0xf2f26501
 8004b24:	3f4344d8 	.word	0x3f4344d8
 8004b28:	c9560328 	.word	0xc9560328
 8004b2c:	3f6d6d22 	.word	0x3f6d6d22
 8004b30:	8406d637 	.word	0x8406d637
 8004b34:	3f9664f4 	.word	0x3f9664f4
 8004b38:	1110fe7a 	.word	0x1110fe7a
 8004b3c:	3fc11111 	.word	0x3fc11111
 8004b40:	55555563 	.word	0x55555563
 8004b44:	3fd55555 	.word	0x3fd55555
 8004b48:	3e2fffff 	.word	0x3e2fffff
 8004b4c:	3ff00000 	.word	0x3ff00000
 8004b50:	bff00000 	.word	0xbff00000
 8004b54:	3fe59427 	.word	0x3fe59427
 8004b58:	2e01      	cmp	r6, #1
 8004b5a:	d02f      	beq.n	8004bbc <__kernel_tan+0x404>
 8004b5c:	460f      	mov	r7, r1
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4689      	mov	r9, r1
 8004b64:	2000      	movs	r0, #0
 8004b66:	4917      	ldr	r1, [pc, #92]	; (8004bc4 <__kernel_tan+0x40c>)
 8004b68:	f7fb fe68 	bl	800083c <__aeabi_ddiv>
 8004b6c:	2600      	movs	r6, #0
 8004b6e:	e9cd 0100 	strd	r0, r1, [sp]
 8004b72:	4652      	mov	r2, sl
 8004b74:	465b      	mov	r3, fp
 8004b76:	4630      	mov	r0, r6
 8004b78:	4639      	mov	r1, r7
 8004b7a:	f7fb fb7d 	bl	8000278 <__aeabi_dsub>
 8004b7e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	ec51 0b18 	vmov	r0, r1, d8
 8004b8a:	f7fb fb75 	bl	8000278 <__aeabi_dsub>
 8004b8e:	4632      	mov	r2, r6
 8004b90:	462b      	mov	r3, r5
 8004b92:	f7fb fd29 	bl	80005e8 <__aeabi_dmul>
 8004b96:	46b0      	mov	r8, r6
 8004b98:	460f      	mov	r7, r1
 8004b9a:	4642      	mov	r2, r8
 8004b9c:	462b      	mov	r3, r5
 8004b9e:	4634      	mov	r4, r6
 8004ba0:	4649      	mov	r1, r9
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	4640      	mov	r0, r8
 8004ba6:	f7fb fd1f 	bl	80005e8 <__aeabi_dmul>
 8004baa:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <__kernel_tan+0x410>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	f7fb fb65 	bl	800027c <__adddf3>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	4639      	mov	r1, r7
 8004bba:	e665      	b.n	8004888 <__kernel_tan+0xd0>
 8004bbc:	4682      	mov	sl, r0
 8004bbe:	468b      	mov	fp, r1
 8004bc0:	e625      	b.n	800480e <__kernel_tan+0x56>
 8004bc2:	bf00      	nop
 8004bc4:	bff00000 	.word	0xbff00000
 8004bc8:	3ff00000 	.word	0x3ff00000
 8004bcc:	00000000 	.word	0x00000000

08004bd0 <__ieee754_rem_pio2>:
 8004bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd4:	ed2d 8b02 	vpush	{d8}
 8004bd8:	ec55 4b10 	vmov	r4, r5, d0
 8004bdc:	4bca      	ldr	r3, [pc, #808]	; (8004f08 <__ieee754_rem_pio2+0x338>)
 8004bde:	b08b      	sub	sp, #44	; 0x2c
 8004be0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004be4:	4598      	cmp	r8, r3
 8004be6:	4682      	mov	sl, r0
 8004be8:	9502      	str	r5, [sp, #8]
 8004bea:	dc08      	bgt.n	8004bfe <__ieee754_rem_pio2+0x2e>
 8004bec:	2200      	movs	r2, #0
 8004bee:	2300      	movs	r3, #0
 8004bf0:	ed80 0b00 	vstr	d0, [r0]
 8004bf4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004bf8:	f04f 0b00 	mov.w	fp, #0
 8004bfc:	e028      	b.n	8004c50 <__ieee754_rem_pio2+0x80>
 8004bfe:	4bc3      	ldr	r3, [pc, #780]	; (8004f0c <__ieee754_rem_pio2+0x33c>)
 8004c00:	4598      	cmp	r8, r3
 8004c02:	dc78      	bgt.n	8004cf6 <__ieee754_rem_pio2+0x126>
 8004c04:	9b02      	ldr	r3, [sp, #8]
 8004c06:	4ec2      	ldr	r6, [pc, #776]	; (8004f10 <__ieee754_rem_pio2+0x340>)
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	ee10 0a10 	vmov	r0, s0
 8004c0e:	a3b0      	add	r3, pc, #704	; (adr r3, 8004ed0 <__ieee754_rem_pio2+0x300>)
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	4629      	mov	r1, r5
 8004c16:	dd39      	ble.n	8004c8c <__ieee754_rem_pio2+0xbc>
 8004c18:	f7fb fb2e 	bl	8000278 <__aeabi_dsub>
 8004c1c:	45b0      	cmp	r8, r6
 8004c1e:	4604      	mov	r4, r0
 8004c20:	460d      	mov	r5, r1
 8004c22:	d01b      	beq.n	8004c5c <__ieee754_rem_pio2+0x8c>
 8004c24:	a3ac      	add	r3, pc, #688	; (adr r3, 8004ed8 <__ieee754_rem_pio2+0x308>)
 8004c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2a:	f7fb fb25 	bl	8000278 <__aeabi_dsub>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	e9ca 2300 	strd	r2, r3, [sl]
 8004c36:	4620      	mov	r0, r4
 8004c38:	4629      	mov	r1, r5
 8004c3a:	f7fb fb1d 	bl	8000278 <__aeabi_dsub>
 8004c3e:	a3a6      	add	r3, pc, #664	; (adr r3, 8004ed8 <__ieee754_rem_pio2+0x308>)
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	f7fb fb18 	bl	8000278 <__aeabi_dsub>
 8004c48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004c4c:	f04f 0b01 	mov.w	fp, #1
 8004c50:	4658      	mov	r0, fp
 8004c52:	b00b      	add	sp, #44	; 0x2c
 8004c54:	ecbd 8b02 	vpop	{d8}
 8004c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c5c:	a3a0      	add	r3, pc, #640	; (adr r3, 8004ee0 <__ieee754_rem_pio2+0x310>)
 8004c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c62:	f7fb fb09 	bl	8000278 <__aeabi_dsub>
 8004c66:	a3a0      	add	r3, pc, #640	; (adr r3, 8004ee8 <__ieee754_rem_pio2+0x318>)
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	460d      	mov	r5, r1
 8004c70:	f7fb fb02 	bl	8000278 <__aeabi_dsub>
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	e9ca 2300 	strd	r2, r3, [sl]
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	4629      	mov	r1, r5
 8004c80:	f7fb fafa 	bl	8000278 <__aeabi_dsub>
 8004c84:	a398      	add	r3, pc, #608	; (adr r3, 8004ee8 <__ieee754_rem_pio2+0x318>)
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	e7db      	b.n	8004c44 <__ieee754_rem_pio2+0x74>
 8004c8c:	f7fb faf6 	bl	800027c <__adddf3>
 8004c90:	45b0      	cmp	r8, r6
 8004c92:	4604      	mov	r4, r0
 8004c94:	460d      	mov	r5, r1
 8004c96:	d016      	beq.n	8004cc6 <__ieee754_rem_pio2+0xf6>
 8004c98:	a38f      	add	r3, pc, #572	; (adr r3, 8004ed8 <__ieee754_rem_pio2+0x308>)
 8004c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9e:	f7fb faed 	bl	800027c <__adddf3>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	e9ca 2300 	strd	r2, r3, [sl]
 8004caa:	4620      	mov	r0, r4
 8004cac:	4629      	mov	r1, r5
 8004cae:	f7fb fae3 	bl	8000278 <__aeabi_dsub>
 8004cb2:	a389      	add	r3, pc, #548	; (adr r3, 8004ed8 <__ieee754_rem_pio2+0x308>)
 8004cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb8:	f7fb fae0 	bl	800027c <__adddf3>
 8004cbc:	f04f 3bff 	mov.w	fp, #4294967295
 8004cc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004cc4:	e7c4      	b.n	8004c50 <__ieee754_rem_pio2+0x80>
 8004cc6:	a386      	add	r3, pc, #536	; (adr r3, 8004ee0 <__ieee754_rem_pio2+0x310>)
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	f7fb fad6 	bl	800027c <__adddf3>
 8004cd0:	a385      	add	r3, pc, #532	; (adr r3, 8004ee8 <__ieee754_rem_pio2+0x318>)
 8004cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	460d      	mov	r5, r1
 8004cda:	f7fb facf 	bl	800027c <__adddf3>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	e9ca 2300 	strd	r2, r3, [sl]
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	4629      	mov	r1, r5
 8004cea:	f7fb fac5 	bl	8000278 <__aeabi_dsub>
 8004cee:	a37e      	add	r3, pc, #504	; (adr r3, 8004ee8 <__ieee754_rem_pio2+0x318>)
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	e7e0      	b.n	8004cb8 <__ieee754_rem_pio2+0xe8>
 8004cf6:	4b87      	ldr	r3, [pc, #540]	; (8004f14 <__ieee754_rem_pio2+0x344>)
 8004cf8:	4598      	cmp	r8, r3
 8004cfa:	f300 80d8 	bgt.w	8004eae <__ieee754_rem_pio2+0x2de>
 8004cfe:	f000 f96d 	bl	8004fdc <fabs>
 8004d02:	ec55 4b10 	vmov	r4, r5, d0
 8004d06:	ee10 0a10 	vmov	r0, s0
 8004d0a:	a379      	add	r3, pc, #484	; (adr r3, 8004ef0 <__ieee754_rem_pio2+0x320>)
 8004d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d10:	4629      	mov	r1, r5
 8004d12:	f7fb fc69 	bl	80005e8 <__aeabi_dmul>
 8004d16:	4b80      	ldr	r3, [pc, #512]	; (8004f18 <__ieee754_rem_pio2+0x348>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f7fb faaf 	bl	800027c <__adddf3>
 8004d1e:	f7fb fefd 	bl	8000b1c <__aeabi_d2iz>
 8004d22:	4683      	mov	fp, r0
 8004d24:	f7fb fbf6 	bl	8000514 <__aeabi_i2d>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	ec43 2b18 	vmov	d8, r2, r3
 8004d30:	a367      	add	r3, pc, #412	; (adr r3, 8004ed0 <__ieee754_rem_pio2+0x300>)
 8004d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d36:	f7fb fc57 	bl	80005e8 <__aeabi_dmul>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4620      	mov	r0, r4
 8004d40:	4629      	mov	r1, r5
 8004d42:	f7fb fa99 	bl	8000278 <__aeabi_dsub>
 8004d46:	a364      	add	r3, pc, #400	; (adr r3, 8004ed8 <__ieee754_rem_pio2+0x308>)
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	4606      	mov	r6, r0
 8004d4e:	460f      	mov	r7, r1
 8004d50:	ec51 0b18 	vmov	r0, r1, d8
 8004d54:	f7fb fc48 	bl	80005e8 <__aeabi_dmul>
 8004d58:	f1bb 0f1f 	cmp.w	fp, #31
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	460d      	mov	r5, r1
 8004d60:	dc0d      	bgt.n	8004d7e <__ieee754_rem_pio2+0x1ae>
 8004d62:	4b6e      	ldr	r3, [pc, #440]	; (8004f1c <__ieee754_rem_pio2+0x34c>)
 8004d64:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d6c:	4543      	cmp	r3, r8
 8004d6e:	d006      	beq.n	8004d7e <__ieee754_rem_pio2+0x1ae>
 8004d70:	4622      	mov	r2, r4
 8004d72:	462b      	mov	r3, r5
 8004d74:	4630      	mov	r0, r6
 8004d76:	4639      	mov	r1, r7
 8004d78:	f7fb fa7e 	bl	8000278 <__aeabi_dsub>
 8004d7c:	e00e      	b.n	8004d9c <__ieee754_rem_pio2+0x1cc>
 8004d7e:	462b      	mov	r3, r5
 8004d80:	4622      	mov	r2, r4
 8004d82:	4630      	mov	r0, r6
 8004d84:	4639      	mov	r1, r7
 8004d86:	f7fb fa77 	bl	8000278 <__aeabi_dsub>
 8004d8a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004d8e:	9303      	str	r3, [sp, #12]
 8004d90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004d94:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	dc02      	bgt.n	8004da2 <__ieee754_rem_pio2+0x1d2>
 8004d9c:	e9ca 0100 	strd	r0, r1, [sl]
 8004da0:	e039      	b.n	8004e16 <__ieee754_rem_pio2+0x246>
 8004da2:	a34f      	add	r3, pc, #316	; (adr r3, 8004ee0 <__ieee754_rem_pio2+0x310>)
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	ec51 0b18 	vmov	r0, r1, d8
 8004dac:	f7fb fc1c 	bl	80005e8 <__aeabi_dmul>
 8004db0:	4604      	mov	r4, r0
 8004db2:	460d      	mov	r5, r1
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4630      	mov	r0, r6
 8004dba:	4639      	mov	r1, r7
 8004dbc:	f7fb fa5c 	bl	8000278 <__aeabi_dsub>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4680      	mov	r8, r0
 8004dc6:	4689      	mov	r9, r1
 8004dc8:	4630      	mov	r0, r6
 8004dca:	4639      	mov	r1, r7
 8004dcc:	f7fb fa54 	bl	8000278 <__aeabi_dsub>
 8004dd0:	4622      	mov	r2, r4
 8004dd2:	462b      	mov	r3, r5
 8004dd4:	f7fb fa50 	bl	8000278 <__aeabi_dsub>
 8004dd8:	a343      	add	r3, pc, #268	; (adr r3, 8004ee8 <__ieee754_rem_pio2+0x318>)
 8004dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dde:	4604      	mov	r4, r0
 8004de0:	460d      	mov	r5, r1
 8004de2:	ec51 0b18 	vmov	r0, r1, d8
 8004de6:	f7fb fbff 	bl	80005e8 <__aeabi_dmul>
 8004dea:	4622      	mov	r2, r4
 8004dec:	462b      	mov	r3, r5
 8004dee:	f7fb fa43 	bl	8000278 <__aeabi_dsub>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4604      	mov	r4, r0
 8004df8:	460d      	mov	r5, r1
 8004dfa:	4640      	mov	r0, r8
 8004dfc:	4649      	mov	r1, r9
 8004dfe:	f7fb fa3b 	bl	8000278 <__aeabi_dsub>
 8004e02:	9a03      	ldr	r2, [sp, #12]
 8004e04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b31      	cmp	r3, #49	; 0x31
 8004e0c:	dc24      	bgt.n	8004e58 <__ieee754_rem_pio2+0x288>
 8004e0e:	e9ca 0100 	strd	r0, r1, [sl]
 8004e12:	4646      	mov	r6, r8
 8004e14:	464f      	mov	r7, r9
 8004e16:	e9da 8900 	ldrd	r8, r9, [sl]
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	4639      	mov	r1, r7
 8004e22:	f7fb fa29 	bl	8000278 <__aeabi_dsub>
 8004e26:	462b      	mov	r3, r5
 8004e28:	4622      	mov	r2, r4
 8004e2a:	f7fb fa25 	bl	8000278 <__aeabi_dsub>
 8004e2e:	9b02      	ldr	r3, [sp, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004e36:	f6bf af0b 	bge.w	8004c50 <__ieee754_rem_pio2+0x80>
 8004e3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004e3e:	f8ca 3004 	str.w	r3, [sl, #4]
 8004e42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e46:	f8ca 8000 	str.w	r8, [sl]
 8004e4a:	f8ca 0008 	str.w	r0, [sl, #8]
 8004e4e:	f8ca 300c 	str.w	r3, [sl, #12]
 8004e52:	f1cb 0b00 	rsb	fp, fp, #0
 8004e56:	e6fb      	b.n	8004c50 <__ieee754_rem_pio2+0x80>
 8004e58:	a327      	add	r3, pc, #156	; (adr r3, 8004ef8 <__ieee754_rem_pio2+0x328>)
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	ec51 0b18 	vmov	r0, r1, d8
 8004e62:	f7fb fbc1 	bl	80005e8 <__aeabi_dmul>
 8004e66:	4604      	mov	r4, r0
 8004e68:	460d      	mov	r5, r1
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4640      	mov	r0, r8
 8004e70:	4649      	mov	r1, r9
 8004e72:	f7fb fa01 	bl	8000278 <__aeabi_dsub>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4606      	mov	r6, r0
 8004e7c:	460f      	mov	r7, r1
 8004e7e:	4640      	mov	r0, r8
 8004e80:	4649      	mov	r1, r9
 8004e82:	f7fb f9f9 	bl	8000278 <__aeabi_dsub>
 8004e86:	4622      	mov	r2, r4
 8004e88:	462b      	mov	r3, r5
 8004e8a:	f7fb f9f5 	bl	8000278 <__aeabi_dsub>
 8004e8e:	a31c      	add	r3, pc, #112	; (adr r3, 8004f00 <__ieee754_rem_pio2+0x330>)
 8004e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e94:	4604      	mov	r4, r0
 8004e96:	460d      	mov	r5, r1
 8004e98:	ec51 0b18 	vmov	r0, r1, d8
 8004e9c:	f7fb fba4 	bl	80005e8 <__aeabi_dmul>
 8004ea0:	4622      	mov	r2, r4
 8004ea2:	462b      	mov	r3, r5
 8004ea4:	f7fb f9e8 	bl	8000278 <__aeabi_dsub>
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	460d      	mov	r5, r1
 8004eac:	e760      	b.n	8004d70 <__ieee754_rem_pio2+0x1a0>
 8004eae:	4b1c      	ldr	r3, [pc, #112]	; (8004f20 <__ieee754_rem_pio2+0x350>)
 8004eb0:	4598      	cmp	r8, r3
 8004eb2:	dd37      	ble.n	8004f24 <__ieee754_rem_pio2+0x354>
 8004eb4:	ee10 2a10 	vmov	r2, s0
 8004eb8:	462b      	mov	r3, r5
 8004eba:	4620      	mov	r0, r4
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	f7fb f9db 	bl	8000278 <__aeabi_dsub>
 8004ec2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004ec6:	e9ca 0100 	strd	r0, r1, [sl]
 8004eca:	e695      	b.n	8004bf8 <__ieee754_rem_pio2+0x28>
 8004ecc:	f3af 8000 	nop.w
 8004ed0:	54400000 	.word	0x54400000
 8004ed4:	3ff921fb 	.word	0x3ff921fb
 8004ed8:	1a626331 	.word	0x1a626331
 8004edc:	3dd0b461 	.word	0x3dd0b461
 8004ee0:	1a600000 	.word	0x1a600000
 8004ee4:	3dd0b461 	.word	0x3dd0b461
 8004ee8:	2e037073 	.word	0x2e037073
 8004eec:	3ba3198a 	.word	0x3ba3198a
 8004ef0:	6dc9c883 	.word	0x6dc9c883
 8004ef4:	3fe45f30 	.word	0x3fe45f30
 8004ef8:	2e000000 	.word	0x2e000000
 8004efc:	3ba3198a 	.word	0x3ba3198a
 8004f00:	252049c1 	.word	0x252049c1
 8004f04:	397b839a 	.word	0x397b839a
 8004f08:	3fe921fb 	.word	0x3fe921fb
 8004f0c:	4002d97b 	.word	0x4002d97b
 8004f10:	3ff921fb 	.word	0x3ff921fb
 8004f14:	413921fb 	.word	0x413921fb
 8004f18:	3fe00000 	.word	0x3fe00000
 8004f1c:	0800591c 	.word	0x0800591c
 8004f20:	7fefffff 	.word	0x7fefffff
 8004f24:	ea4f 5628 	mov.w	r6, r8, asr #20
 8004f28:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8004f2c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8004f30:	4620      	mov	r0, r4
 8004f32:	460d      	mov	r5, r1
 8004f34:	f7fb fdf2 	bl	8000b1c <__aeabi_d2iz>
 8004f38:	f7fb faec 	bl	8000514 <__aeabi_i2d>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4620      	mov	r0, r4
 8004f42:	4629      	mov	r1, r5
 8004f44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f48:	f7fb f996 	bl	8000278 <__aeabi_dsub>
 8004f4c:	4b21      	ldr	r3, [pc, #132]	; (8004fd4 <__ieee754_rem_pio2+0x404>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f7fb fb4a 	bl	80005e8 <__aeabi_dmul>
 8004f54:	460d      	mov	r5, r1
 8004f56:	4604      	mov	r4, r0
 8004f58:	f7fb fde0 	bl	8000b1c <__aeabi_d2iz>
 8004f5c:	f7fb fada 	bl	8000514 <__aeabi_i2d>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4620      	mov	r0, r4
 8004f66:	4629      	mov	r1, r5
 8004f68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f6c:	f7fb f984 	bl	8000278 <__aeabi_dsub>
 8004f70:	4b18      	ldr	r3, [pc, #96]	; (8004fd4 <__ieee754_rem_pio2+0x404>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	f7fb fb38 	bl	80005e8 <__aeabi_dmul>
 8004f78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004f7c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8004f80:	2703      	movs	r7, #3
 8004f82:	2400      	movs	r4, #0
 8004f84:	2500      	movs	r5, #0
 8004f86:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8004f8a:	4622      	mov	r2, r4
 8004f8c:	462b      	mov	r3, r5
 8004f8e:	46b9      	mov	r9, r7
 8004f90:	3f01      	subs	r7, #1
 8004f92:	f7fb fd91 	bl	8000ab8 <__aeabi_dcmpeq>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d1f5      	bne.n	8004f86 <__ieee754_rem_pio2+0x3b6>
 8004f9a:	4b0f      	ldr	r3, [pc, #60]	; (8004fd8 <__ieee754_rem_pio2+0x408>)
 8004f9c:	9301      	str	r3, [sp, #4]
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	4632      	mov	r2, r6
 8004fa4:	464b      	mov	r3, r9
 8004fa6:	4651      	mov	r1, sl
 8004fa8:	a804      	add	r0, sp, #16
 8004faa:	f000 f821 	bl	8004ff0 <__kernel_rem_pio2>
 8004fae:	9b02      	ldr	r3, [sp, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	4683      	mov	fp, r0
 8004fb4:	f6bf ae4c 	bge.w	8004c50 <__ieee754_rem_pio2+0x80>
 8004fb8:	e9da 2100 	ldrd	r2, r1, [sl]
 8004fbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fc0:	e9ca 2300 	strd	r2, r3, [sl]
 8004fc4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004fc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fcc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004fd0:	e73f      	b.n	8004e52 <__ieee754_rem_pio2+0x282>
 8004fd2:	bf00      	nop
 8004fd4:	41700000 	.word	0x41700000
 8004fd8:	0800599c 	.word	0x0800599c

08004fdc <fabs>:
 8004fdc:	ec51 0b10 	vmov	r0, r1, d0
 8004fe0:	ee10 2a10 	vmov	r2, s0
 8004fe4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004fe8:	ec43 2b10 	vmov	d0, r2, r3
 8004fec:	4770      	bx	lr
	...

08004ff0 <__kernel_rem_pio2>:
 8004ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff4:	ed2d 8b02 	vpush	{d8}
 8004ff8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004ffc:	f112 0f14 	cmn.w	r2, #20
 8005000:	9306      	str	r3, [sp, #24]
 8005002:	9104      	str	r1, [sp, #16]
 8005004:	4bc2      	ldr	r3, [pc, #776]	; (8005310 <__kernel_rem_pio2+0x320>)
 8005006:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005008:	9009      	str	r0, [sp, #36]	; 0x24
 800500a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	9b06      	ldr	r3, [sp, #24]
 8005012:	f103 33ff 	add.w	r3, r3, #4294967295
 8005016:	bfa8      	it	ge
 8005018:	1ed4      	subge	r4, r2, #3
 800501a:	9305      	str	r3, [sp, #20]
 800501c:	bfb2      	itee	lt
 800501e:	2400      	movlt	r4, #0
 8005020:	2318      	movge	r3, #24
 8005022:	fb94 f4f3 	sdivge	r4, r4, r3
 8005026:	f06f 0317 	mvn.w	r3, #23
 800502a:	fb04 3303 	mla	r3, r4, r3, r3
 800502e:	eb03 0a02 	add.w	sl, r3, r2
 8005032:	9b00      	ldr	r3, [sp, #0]
 8005034:	9a05      	ldr	r2, [sp, #20]
 8005036:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8005300 <__kernel_rem_pio2+0x310>
 800503a:	eb03 0802 	add.w	r8, r3, r2
 800503e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005040:	1aa7      	subs	r7, r4, r2
 8005042:	ae20      	add	r6, sp, #128	; 0x80
 8005044:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005048:	2500      	movs	r5, #0
 800504a:	4545      	cmp	r5, r8
 800504c:	dd13      	ble.n	8005076 <__kernel_rem_pio2+0x86>
 800504e:	9b06      	ldr	r3, [sp, #24]
 8005050:	aa20      	add	r2, sp, #128	; 0x80
 8005052:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005056:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800505a:	f04f 0800 	mov.w	r8, #0
 800505e:	9b00      	ldr	r3, [sp, #0]
 8005060:	4598      	cmp	r8, r3
 8005062:	dc31      	bgt.n	80050c8 <__kernel_rem_pio2+0xd8>
 8005064:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8005300 <__kernel_rem_pio2+0x310>
 8005068:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800506c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005070:	462f      	mov	r7, r5
 8005072:	2600      	movs	r6, #0
 8005074:	e01b      	b.n	80050ae <__kernel_rem_pio2+0xbe>
 8005076:	42ef      	cmn	r7, r5
 8005078:	d407      	bmi.n	800508a <__kernel_rem_pio2+0x9a>
 800507a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800507e:	f7fb fa49 	bl	8000514 <__aeabi_i2d>
 8005082:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005086:	3501      	adds	r5, #1
 8005088:	e7df      	b.n	800504a <__kernel_rem_pio2+0x5a>
 800508a:	ec51 0b18 	vmov	r0, r1, d8
 800508e:	e7f8      	b.n	8005082 <__kernel_rem_pio2+0x92>
 8005090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005094:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005098:	f7fb faa6 	bl	80005e8 <__aeabi_dmul>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050a4:	f7fb f8ea 	bl	800027c <__adddf3>
 80050a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050ac:	3601      	adds	r6, #1
 80050ae:	9b05      	ldr	r3, [sp, #20]
 80050b0:	429e      	cmp	r6, r3
 80050b2:	f1a7 0708 	sub.w	r7, r7, #8
 80050b6:	ddeb      	ble.n	8005090 <__kernel_rem_pio2+0xa0>
 80050b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80050bc:	f108 0801 	add.w	r8, r8, #1
 80050c0:	ecab 7b02 	vstmia	fp!, {d7}
 80050c4:	3508      	adds	r5, #8
 80050c6:	e7ca      	b.n	800505e <__kernel_rem_pio2+0x6e>
 80050c8:	9b00      	ldr	r3, [sp, #0]
 80050ca:	aa0c      	add	r2, sp, #48	; 0x30
 80050cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80050d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80050d2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80050d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80050d8:	9c00      	ldr	r4, [sp, #0]
 80050da:	930a      	str	r3, [sp, #40]	; 0x28
 80050dc:	00e3      	lsls	r3, r4, #3
 80050de:	9308      	str	r3, [sp, #32]
 80050e0:	ab98      	add	r3, sp, #608	; 0x260
 80050e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80050e6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80050ea:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80050ee:	ab70      	add	r3, sp, #448	; 0x1c0
 80050f0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80050f4:	46c3      	mov	fp, r8
 80050f6:	46a1      	mov	r9, r4
 80050f8:	f1b9 0f00 	cmp.w	r9, #0
 80050fc:	f1a5 0508 	sub.w	r5, r5, #8
 8005100:	dc77      	bgt.n	80051f2 <__kernel_rem_pio2+0x202>
 8005102:	ec47 6b10 	vmov	d0, r6, r7
 8005106:	4650      	mov	r0, sl
 8005108:	f000 fac2 	bl	8005690 <scalbn>
 800510c:	ec57 6b10 	vmov	r6, r7, d0
 8005110:	2200      	movs	r2, #0
 8005112:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005116:	ee10 0a10 	vmov	r0, s0
 800511a:	4639      	mov	r1, r7
 800511c:	f7fb fa64 	bl	80005e8 <__aeabi_dmul>
 8005120:	ec41 0b10 	vmov	d0, r0, r1
 8005124:	f000 fb34 	bl	8005790 <floor>
 8005128:	4b7a      	ldr	r3, [pc, #488]	; (8005314 <__kernel_rem_pio2+0x324>)
 800512a:	ec51 0b10 	vmov	r0, r1, d0
 800512e:	2200      	movs	r2, #0
 8005130:	f7fb fa5a 	bl	80005e8 <__aeabi_dmul>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4630      	mov	r0, r6
 800513a:	4639      	mov	r1, r7
 800513c:	f7fb f89c 	bl	8000278 <__aeabi_dsub>
 8005140:	460f      	mov	r7, r1
 8005142:	4606      	mov	r6, r0
 8005144:	f7fb fcea 	bl	8000b1c <__aeabi_d2iz>
 8005148:	9002      	str	r0, [sp, #8]
 800514a:	f7fb f9e3 	bl	8000514 <__aeabi_i2d>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	4630      	mov	r0, r6
 8005154:	4639      	mov	r1, r7
 8005156:	f7fb f88f 	bl	8000278 <__aeabi_dsub>
 800515a:	f1ba 0f00 	cmp.w	sl, #0
 800515e:	4606      	mov	r6, r0
 8005160:	460f      	mov	r7, r1
 8005162:	dd6d      	ble.n	8005240 <__kernel_rem_pio2+0x250>
 8005164:	1e61      	subs	r1, r4, #1
 8005166:	ab0c      	add	r3, sp, #48	; 0x30
 8005168:	9d02      	ldr	r5, [sp, #8]
 800516a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800516e:	f1ca 0018 	rsb	r0, sl, #24
 8005172:	fa43 f200 	asr.w	r2, r3, r0
 8005176:	4415      	add	r5, r2
 8005178:	4082      	lsls	r2, r0
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	aa0c      	add	r2, sp, #48	; 0x30
 800517e:	9502      	str	r5, [sp, #8]
 8005180:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005184:	f1ca 0217 	rsb	r2, sl, #23
 8005188:	fa43 fb02 	asr.w	fp, r3, r2
 800518c:	f1bb 0f00 	cmp.w	fp, #0
 8005190:	dd65      	ble.n	800525e <__kernel_rem_pio2+0x26e>
 8005192:	9b02      	ldr	r3, [sp, #8]
 8005194:	2200      	movs	r2, #0
 8005196:	3301      	adds	r3, #1
 8005198:	9302      	str	r3, [sp, #8]
 800519a:	4615      	mov	r5, r2
 800519c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80051a0:	4294      	cmp	r4, r2
 80051a2:	f300 809f 	bgt.w	80052e4 <__kernel_rem_pio2+0x2f4>
 80051a6:	f1ba 0f00 	cmp.w	sl, #0
 80051aa:	dd07      	ble.n	80051bc <__kernel_rem_pio2+0x1cc>
 80051ac:	f1ba 0f01 	cmp.w	sl, #1
 80051b0:	f000 80c1 	beq.w	8005336 <__kernel_rem_pio2+0x346>
 80051b4:	f1ba 0f02 	cmp.w	sl, #2
 80051b8:	f000 80c7 	beq.w	800534a <__kernel_rem_pio2+0x35a>
 80051bc:	f1bb 0f02 	cmp.w	fp, #2
 80051c0:	d14d      	bne.n	800525e <__kernel_rem_pio2+0x26e>
 80051c2:	4632      	mov	r2, r6
 80051c4:	463b      	mov	r3, r7
 80051c6:	4954      	ldr	r1, [pc, #336]	; (8005318 <__kernel_rem_pio2+0x328>)
 80051c8:	2000      	movs	r0, #0
 80051ca:	f7fb f855 	bl	8000278 <__aeabi_dsub>
 80051ce:	4606      	mov	r6, r0
 80051d0:	460f      	mov	r7, r1
 80051d2:	2d00      	cmp	r5, #0
 80051d4:	d043      	beq.n	800525e <__kernel_rem_pio2+0x26e>
 80051d6:	4650      	mov	r0, sl
 80051d8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8005308 <__kernel_rem_pio2+0x318>
 80051dc:	f000 fa58 	bl	8005690 <scalbn>
 80051e0:	4630      	mov	r0, r6
 80051e2:	4639      	mov	r1, r7
 80051e4:	ec53 2b10 	vmov	r2, r3, d0
 80051e8:	f7fb f846 	bl	8000278 <__aeabi_dsub>
 80051ec:	4606      	mov	r6, r0
 80051ee:	460f      	mov	r7, r1
 80051f0:	e035      	b.n	800525e <__kernel_rem_pio2+0x26e>
 80051f2:	4b4a      	ldr	r3, [pc, #296]	; (800531c <__kernel_rem_pio2+0x32c>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	4630      	mov	r0, r6
 80051f8:	4639      	mov	r1, r7
 80051fa:	f7fb f9f5 	bl	80005e8 <__aeabi_dmul>
 80051fe:	f7fb fc8d 	bl	8000b1c <__aeabi_d2iz>
 8005202:	f7fb f987 	bl	8000514 <__aeabi_i2d>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	ec43 2b18 	vmov	d8, r2, r3
 800520e:	4b44      	ldr	r3, [pc, #272]	; (8005320 <__kernel_rem_pio2+0x330>)
 8005210:	2200      	movs	r2, #0
 8005212:	f7fb f9e9 	bl	80005e8 <__aeabi_dmul>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4630      	mov	r0, r6
 800521c:	4639      	mov	r1, r7
 800521e:	f7fb f82b 	bl	8000278 <__aeabi_dsub>
 8005222:	f7fb fc7b 	bl	8000b1c <__aeabi_d2iz>
 8005226:	e9d5 2300 	ldrd	r2, r3, [r5]
 800522a:	f84b 0b04 	str.w	r0, [fp], #4
 800522e:	ec51 0b18 	vmov	r0, r1, d8
 8005232:	f7fb f823 	bl	800027c <__adddf3>
 8005236:	f109 39ff 	add.w	r9, r9, #4294967295
 800523a:	4606      	mov	r6, r0
 800523c:	460f      	mov	r7, r1
 800523e:	e75b      	b.n	80050f8 <__kernel_rem_pio2+0x108>
 8005240:	d106      	bne.n	8005250 <__kernel_rem_pio2+0x260>
 8005242:	1e63      	subs	r3, r4, #1
 8005244:	aa0c      	add	r2, sp, #48	; 0x30
 8005246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800524a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800524e:	e79d      	b.n	800518c <__kernel_rem_pio2+0x19c>
 8005250:	4b34      	ldr	r3, [pc, #208]	; (8005324 <__kernel_rem_pio2+0x334>)
 8005252:	2200      	movs	r2, #0
 8005254:	f7fb fc4e 	bl	8000af4 <__aeabi_dcmpge>
 8005258:	2800      	cmp	r0, #0
 800525a:	d140      	bne.n	80052de <__kernel_rem_pio2+0x2ee>
 800525c:	4683      	mov	fp, r0
 800525e:	2200      	movs	r2, #0
 8005260:	2300      	movs	r3, #0
 8005262:	4630      	mov	r0, r6
 8005264:	4639      	mov	r1, r7
 8005266:	f7fb fc27 	bl	8000ab8 <__aeabi_dcmpeq>
 800526a:	2800      	cmp	r0, #0
 800526c:	f000 80c1 	beq.w	80053f2 <__kernel_rem_pio2+0x402>
 8005270:	1e65      	subs	r5, r4, #1
 8005272:	462b      	mov	r3, r5
 8005274:	2200      	movs	r2, #0
 8005276:	9900      	ldr	r1, [sp, #0]
 8005278:	428b      	cmp	r3, r1
 800527a:	da6d      	bge.n	8005358 <__kernel_rem_pio2+0x368>
 800527c:	2a00      	cmp	r2, #0
 800527e:	f000 808a 	beq.w	8005396 <__kernel_rem_pio2+0x3a6>
 8005282:	ab0c      	add	r3, sp, #48	; 0x30
 8005284:	f1aa 0a18 	sub.w	sl, sl, #24
 8005288:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 80ae 	beq.w	80053ee <__kernel_rem_pio2+0x3fe>
 8005292:	4650      	mov	r0, sl
 8005294:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8005308 <__kernel_rem_pio2+0x318>
 8005298:	f000 f9fa 	bl	8005690 <scalbn>
 800529c:	1c6b      	adds	r3, r5, #1
 800529e:	00da      	lsls	r2, r3, #3
 80052a0:	9205      	str	r2, [sp, #20]
 80052a2:	ec57 6b10 	vmov	r6, r7, d0
 80052a6:	aa70      	add	r2, sp, #448	; 0x1c0
 80052a8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800531c <__kernel_rem_pio2+0x32c>
 80052ac:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80052b0:	462c      	mov	r4, r5
 80052b2:	f04f 0800 	mov.w	r8, #0
 80052b6:	2c00      	cmp	r4, #0
 80052b8:	f280 80d4 	bge.w	8005464 <__kernel_rem_pio2+0x474>
 80052bc:	462c      	mov	r4, r5
 80052be:	2c00      	cmp	r4, #0
 80052c0:	f2c0 8102 	blt.w	80054c8 <__kernel_rem_pio2+0x4d8>
 80052c4:	4b18      	ldr	r3, [pc, #96]	; (8005328 <__kernel_rem_pio2+0x338>)
 80052c6:	461e      	mov	r6, r3
 80052c8:	ab70      	add	r3, sp, #448	; 0x1c0
 80052ca:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80052ce:	1b2b      	subs	r3, r5, r4
 80052d0:	f04f 0900 	mov.w	r9, #0
 80052d4:	f04f 0a00 	mov.w	sl, #0
 80052d8:	2700      	movs	r7, #0
 80052da:	9306      	str	r3, [sp, #24]
 80052dc:	e0e6      	b.n	80054ac <__kernel_rem_pio2+0x4bc>
 80052de:	f04f 0b02 	mov.w	fp, #2
 80052e2:	e756      	b.n	8005192 <__kernel_rem_pio2+0x1a2>
 80052e4:	f8d8 3000 	ldr.w	r3, [r8]
 80052e8:	bb05      	cbnz	r5, 800532c <__kernel_rem_pio2+0x33c>
 80052ea:	b123      	cbz	r3, 80052f6 <__kernel_rem_pio2+0x306>
 80052ec:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80052f0:	f8c8 3000 	str.w	r3, [r8]
 80052f4:	2301      	movs	r3, #1
 80052f6:	3201      	adds	r2, #1
 80052f8:	f108 0804 	add.w	r8, r8, #4
 80052fc:	461d      	mov	r5, r3
 80052fe:	e74f      	b.n	80051a0 <__kernel_rem_pio2+0x1b0>
	...
 800530c:	3ff00000 	.word	0x3ff00000
 8005310:	08005ae8 	.word	0x08005ae8
 8005314:	40200000 	.word	0x40200000
 8005318:	3ff00000 	.word	0x3ff00000
 800531c:	3e700000 	.word	0x3e700000
 8005320:	41700000 	.word	0x41700000
 8005324:	3fe00000 	.word	0x3fe00000
 8005328:	08005aa8 	.word	0x08005aa8
 800532c:	1acb      	subs	r3, r1, r3
 800532e:	f8c8 3000 	str.w	r3, [r8]
 8005332:	462b      	mov	r3, r5
 8005334:	e7df      	b.n	80052f6 <__kernel_rem_pio2+0x306>
 8005336:	1e62      	subs	r2, r4, #1
 8005338:	ab0c      	add	r3, sp, #48	; 0x30
 800533a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800533e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005342:	a90c      	add	r1, sp, #48	; 0x30
 8005344:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005348:	e738      	b.n	80051bc <__kernel_rem_pio2+0x1cc>
 800534a:	1e62      	subs	r2, r4, #1
 800534c:	ab0c      	add	r3, sp, #48	; 0x30
 800534e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005352:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005356:	e7f4      	b.n	8005342 <__kernel_rem_pio2+0x352>
 8005358:	a90c      	add	r1, sp, #48	; 0x30
 800535a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800535e:	3b01      	subs	r3, #1
 8005360:	430a      	orrs	r2, r1
 8005362:	e788      	b.n	8005276 <__kernel_rem_pio2+0x286>
 8005364:	3301      	adds	r3, #1
 8005366:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800536a:	2900      	cmp	r1, #0
 800536c:	d0fa      	beq.n	8005364 <__kernel_rem_pio2+0x374>
 800536e:	9a08      	ldr	r2, [sp, #32]
 8005370:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8005374:	446a      	add	r2, sp
 8005376:	3a98      	subs	r2, #152	; 0x98
 8005378:	9208      	str	r2, [sp, #32]
 800537a:	9a06      	ldr	r2, [sp, #24]
 800537c:	a920      	add	r1, sp, #128	; 0x80
 800537e:	18a2      	adds	r2, r4, r2
 8005380:	18e3      	adds	r3, r4, r3
 8005382:	f104 0801 	add.w	r8, r4, #1
 8005386:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800538a:	9302      	str	r3, [sp, #8]
 800538c:	9b02      	ldr	r3, [sp, #8]
 800538e:	4543      	cmp	r3, r8
 8005390:	da04      	bge.n	800539c <__kernel_rem_pio2+0x3ac>
 8005392:	461c      	mov	r4, r3
 8005394:	e6a2      	b.n	80050dc <__kernel_rem_pio2+0xec>
 8005396:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005398:	2301      	movs	r3, #1
 800539a:	e7e4      	b.n	8005366 <__kernel_rem_pio2+0x376>
 800539c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800539e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80053a2:	f7fb f8b7 	bl	8000514 <__aeabi_i2d>
 80053a6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80053aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ac:	46ab      	mov	fp, r5
 80053ae:	461c      	mov	r4, r3
 80053b0:	f04f 0900 	mov.w	r9, #0
 80053b4:	2600      	movs	r6, #0
 80053b6:	2700      	movs	r7, #0
 80053b8:	9b05      	ldr	r3, [sp, #20]
 80053ba:	4599      	cmp	r9, r3
 80053bc:	dd06      	ble.n	80053cc <__kernel_rem_pio2+0x3dc>
 80053be:	9b08      	ldr	r3, [sp, #32]
 80053c0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80053c4:	f108 0801 	add.w	r8, r8, #1
 80053c8:	9308      	str	r3, [sp, #32]
 80053ca:	e7df      	b.n	800538c <__kernel_rem_pio2+0x39c>
 80053cc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80053d0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80053d4:	f7fb f908 	bl	80005e8 <__aeabi_dmul>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4630      	mov	r0, r6
 80053de:	4639      	mov	r1, r7
 80053e0:	f7fa ff4c 	bl	800027c <__adddf3>
 80053e4:	f109 0901 	add.w	r9, r9, #1
 80053e8:	4606      	mov	r6, r0
 80053ea:	460f      	mov	r7, r1
 80053ec:	e7e4      	b.n	80053b8 <__kernel_rem_pio2+0x3c8>
 80053ee:	3d01      	subs	r5, #1
 80053f0:	e747      	b.n	8005282 <__kernel_rem_pio2+0x292>
 80053f2:	ec47 6b10 	vmov	d0, r6, r7
 80053f6:	f1ca 0000 	rsb	r0, sl, #0
 80053fa:	f000 f949 	bl	8005690 <scalbn>
 80053fe:	ec57 6b10 	vmov	r6, r7, d0
 8005402:	4ba0      	ldr	r3, [pc, #640]	; (8005684 <__kernel_rem_pio2+0x694>)
 8005404:	ee10 0a10 	vmov	r0, s0
 8005408:	2200      	movs	r2, #0
 800540a:	4639      	mov	r1, r7
 800540c:	f7fb fb72 	bl	8000af4 <__aeabi_dcmpge>
 8005410:	b1f8      	cbz	r0, 8005452 <__kernel_rem_pio2+0x462>
 8005412:	4b9d      	ldr	r3, [pc, #628]	; (8005688 <__kernel_rem_pio2+0x698>)
 8005414:	2200      	movs	r2, #0
 8005416:	4630      	mov	r0, r6
 8005418:	4639      	mov	r1, r7
 800541a:	f7fb f8e5 	bl	80005e8 <__aeabi_dmul>
 800541e:	f7fb fb7d 	bl	8000b1c <__aeabi_d2iz>
 8005422:	4680      	mov	r8, r0
 8005424:	f7fb f876 	bl	8000514 <__aeabi_i2d>
 8005428:	4b96      	ldr	r3, [pc, #600]	; (8005684 <__kernel_rem_pio2+0x694>)
 800542a:	2200      	movs	r2, #0
 800542c:	f7fb f8dc 	bl	80005e8 <__aeabi_dmul>
 8005430:	460b      	mov	r3, r1
 8005432:	4602      	mov	r2, r0
 8005434:	4639      	mov	r1, r7
 8005436:	4630      	mov	r0, r6
 8005438:	f7fa ff1e 	bl	8000278 <__aeabi_dsub>
 800543c:	f7fb fb6e 	bl	8000b1c <__aeabi_d2iz>
 8005440:	1c65      	adds	r5, r4, #1
 8005442:	ab0c      	add	r3, sp, #48	; 0x30
 8005444:	f10a 0a18 	add.w	sl, sl, #24
 8005448:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800544c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005450:	e71f      	b.n	8005292 <__kernel_rem_pio2+0x2a2>
 8005452:	4630      	mov	r0, r6
 8005454:	4639      	mov	r1, r7
 8005456:	f7fb fb61 	bl	8000b1c <__aeabi_d2iz>
 800545a:	ab0c      	add	r3, sp, #48	; 0x30
 800545c:	4625      	mov	r5, r4
 800545e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005462:	e716      	b.n	8005292 <__kernel_rem_pio2+0x2a2>
 8005464:	ab0c      	add	r3, sp, #48	; 0x30
 8005466:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800546a:	f7fb f853 	bl	8000514 <__aeabi_i2d>
 800546e:	4632      	mov	r2, r6
 8005470:	463b      	mov	r3, r7
 8005472:	f7fb f8b9 	bl	80005e8 <__aeabi_dmul>
 8005476:	4642      	mov	r2, r8
 8005478:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800547c:	464b      	mov	r3, r9
 800547e:	4630      	mov	r0, r6
 8005480:	4639      	mov	r1, r7
 8005482:	f7fb f8b1 	bl	80005e8 <__aeabi_dmul>
 8005486:	3c01      	subs	r4, #1
 8005488:	4606      	mov	r6, r0
 800548a:	460f      	mov	r7, r1
 800548c:	e713      	b.n	80052b6 <__kernel_rem_pio2+0x2c6>
 800548e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8005492:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8005496:	f7fb f8a7 	bl	80005e8 <__aeabi_dmul>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4648      	mov	r0, r9
 80054a0:	4651      	mov	r1, sl
 80054a2:	f7fa feeb 	bl	800027c <__adddf3>
 80054a6:	3701      	adds	r7, #1
 80054a8:	4681      	mov	r9, r0
 80054aa:	468a      	mov	sl, r1
 80054ac:	9b00      	ldr	r3, [sp, #0]
 80054ae:	429f      	cmp	r7, r3
 80054b0:	dc02      	bgt.n	80054b8 <__kernel_rem_pio2+0x4c8>
 80054b2:	9b06      	ldr	r3, [sp, #24]
 80054b4:	429f      	cmp	r7, r3
 80054b6:	ddea      	ble.n	800548e <__kernel_rem_pio2+0x49e>
 80054b8:	9a06      	ldr	r2, [sp, #24]
 80054ba:	ab48      	add	r3, sp, #288	; 0x120
 80054bc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80054c0:	e9c6 9a00 	strd	r9, sl, [r6]
 80054c4:	3c01      	subs	r4, #1
 80054c6:	e6fa      	b.n	80052be <__kernel_rem_pio2+0x2ce>
 80054c8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	dc0b      	bgt.n	80054e6 <__kernel_rem_pio2+0x4f6>
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	dc39      	bgt.n	8005546 <__kernel_rem_pio2+0x556>
 80054d2:	d05d      	beq.n	8005590 <__kernel_rem_pio2+0x5a0>
 80054d4:	9b02      	ldr	r3, [sp, #8]
 80054d6:	f003 0007 	and.w	r0, r3, #7
 80054da:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80054de:	ecbd 8b02 	vpop	{d8}
 80054e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80054e8:	2b03      	cmp	r3, #3
 80054ea:	d1f3      	bne.n	80054d4 <__kernel_rem_pio2+0x4e4>
 80054ec:	9b05      	ldr	r3, [sp, #20]
 80054ee:	9500      	str	r5, [sp, #0]
 80054f0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80054f4:	eb0d 0403 	add.w	r4, sp, r3
 80054f8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80054fc:	46a2      	mov	sl, r4
 80054fe:	9b00      	ldr	r3, [sp, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	f1aa 0a08 	sub.w	sl, sl, #8
 8005506:	dc69      	bgt.n	80055dc <__kernel_rem_pio2+0x5ec>
 8005508:	46aa      	mov	sl, r5
 800550a:	f1ba 0f01 	cmp.w	sl, #1
 800550e:	f1a4 0408 	sub.w	r4, r4, #8
 8005512:	f300 8083 	bgt.w	800561c <__kernel_rem_pio2+0x62c>
 8005516:	9c05      	ldr	r4, [sp, #20]
 8005518:	ab48      	add	r3, sp, #288	; 0x120
 800551a:	441c      	add	r4, r3
 800551c:	2000      	movs	r0, #0
 800551e:	2100      	movs	r1, #0
 8005520:	2d01      	cmp	r5, #1
 8005522:	f300 809a 	bgt.w	800565a <__kernel_rem_pio2+0x66a>
 8005526:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800552a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800552e:	f1bb 0f00 	cmp.w	fp, #0
 8005532:	f040 8098 	bne.w	8005666 <__kernel_rem_pio2+0x676>
 8005536:	9b04      	ldr	r3, [sp, #16]
 8005538:	e9c3 7800 	strd	r7, r8, [r3]
 800553c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005540:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005544:	e7c6      	b.n	80054d4 <__kernel_rem_pio2+0x4e4>
 8005546:	9e05      	ldr	r6, [sp, #20]
 8005548:	ab48      	add	r3, sp, #288	; 0x120
 800554a:	441e      	add	r6, r3
 800554c:	462c      	mov	r4, r5
 800554e:	2000      	movs	r0, #0
 8005550:	2100      	movs	r1, #0
 8005552:	2c00      	cmp	r4, #0
 8005554:	da33      	bge.n	80055be <__kernel_rem_pio2+0x5ce>
 8005556:	f1bb 0f00 	cmp.w	fp, #0
 800555a:	d036      	beq.n	80055ca <__kernel_rem_pio2+0x5da>
 800555c:	4602      	mov	r2, r0
 800555e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005562:	9c04      	ldr	r4, [sp, #16]
 8005564:	e9c4 2300 	strd	r2, r3, [r4]
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005570:	f7fa fe82 	bl	8000278 <__aeabi_dsub>
 8005574:	ae4a      	add	r6, sp, #296	; 0x128
 8005576:	2401      	movs	r4, #1
 8005578:	42a5      	cmp	r5, r4
 800557a:	da29      	bge.n	80055d0 <__kernel_rem_pio2+0x5e0>
 800557c:	f1bb 0f00 	cmp.w	fp, #0
 8005580:	d002      	beq.n	8005588 <__kernel_rem_pio2+0x598>
 8005582:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005586:	4619      	mov	r1, r3
 8005588:	9b04      	ldr	r3, [sp, #16]
 800558a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800558e:	e7a1      	b.n	80054d4 <__kernel_rem_pio2+0x4e4>
 8005590:	9c05      	ldr	r4, [sp, #20]
 8005592:	ab48      	add	r3, sp, #288	; 0x120
 8005594:	441c      	add	r4, r3
 8005596:	2000      	movs	r0, #0
 8005598:	2100      	movs	r1, #0
 800559a:	2d00      	cmp	r5, #0
 800559c:	da09      	bge.n	80055b2 <__kernel_rem_pio2+0x5c2>
 800559e:	f1bb 0f00 	cmp.w	fp, #0
 80055a2:	d002      	beq.n	80055aa <__kernel_rem_pio2+0x5ba>
 80055a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055a8:	4619      	mov	r1, r3
 80055aa:	9b04      	ldr	r3, [sp, #16]
 80055ac:	e9c3 0100 	strd	r0, r1, [r3]
 80055b0:	e790      	b.n	80054d4 <__kernel_rem_pio2+0x4e4>
 80055b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80055b6:	f7fa fe61 	bl	800027c <__adddf3>
 80055ba:	3d01      	subs	r5, #1
 80055bc:	e7ed      	b.n	800559a <__kernel_rem_pio2+0x5aa>
 80055be:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80055c2:	f7fa fe5b 	bl	800027c <__adddf3>
 80055c6:	3c01      	subs	r4, #1
 80055c8:	e7c3      	b.n	8005552 <__kernel_rem_pio2+0x562>
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	e7c8      	b.n	8005562 <__kernel_rem_pio2+0x572>
 80055d0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80055d4:	f7fa fe52 	bl	800027c <__adddf3>
 80055d8:	3401      	adds	r4, #1
 80055da:	e7cd      	b.n	8005578 <__kernel_rem_pio2+0x588>
 80055dc:	e9da 8900 	ldrd	r8, r9, [sl]
 80055e0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80055e4:	9b00      	ldr	r3, [sp, #0]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	4632      	mov	r2, r6
 80055ec:	463b      	mov	r3, r7
 80055ee:	4640      	mov	r0, r8
 80055f0:	4649      	mov	r1, r9
 80055f2:	f7fa fe43 	bl	800027c <__adddf3>
 80055f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4640      	mov	r0, r8
 8005600:	4649      	mov	r1, r9
 8005602:	f7fa fe39 	bl	8000278 <__aeabi_dsub>
 8005606:	4632      	mov	r2, r6
 8005608:	463b      	mov	r3, r7
 800560a:	f7fa fe37 	bl	800027c <__adddf3>
 800560e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005612:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005616:	ed8a 7b00 	vstr	d7, [sl]
 800561a:	e770      	b.n	80054fe <__kernel_rem_pio2+0x50e>
 800561c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005620:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005624:	4640      	mov	r0, r8
 8005626:	4632      	mov	r2, r6
 8005628:	463b      	mov	r3, r7
 800562a:	4649      	mov	r1, r9
 800562c:	f7fa fe26 	bl	800027c <__adddf3>
 8005630:	e9cd 0100 	strd	r0, r1, [sp]
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4640      	mov	r0, r8
 800563a:	4649      	mov	r1, r9
 800563c:	f7fa fe1c 	bl	8000278 <__aeabi_dsub>
 8005640:	4632      	mov	r2, r6
 8005642:	463b      	mov	r3, r7
 8005644:	f7fa fe1a 	bl	800027c <__adddf3>
 8005648:	ed9d 7b00 	vldr	d7, [sp]
 800564c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005650:	ed84 7b00 	vstr	d7, [r4]
 8005654:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005658:	e757      	b.n	800550a <__kernel_rem_pio2+0x51a>
 800565a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800565e:	f7fa fe0d 	bl	800027c <__adddf3>
 8005662:	3d01      	subs	r5, #1
 8005664:	e75c      	b.n	8005520 <__kernel_rem_pio2+0x530>
 8005666:	9b04      	ldr	r3, [sp, #16]
 8005668:	9a04      	ldr	r2, [sp, #16]
 800566a:	601f      	str	r7, [r3, #0]
 800566c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005670:	605c      	str	r4, [r3, #4]
 8005672:	609d      	str	r5, [r3, #8]
 8005674:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005678:	60d3      	str	r3, [r2, #12]
 800567a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800567e:	6110      	str	r0, [r2, #16]
 8005680:	6153      	str	r3, [r2, #20]
 8005682:	e727      	b.n	80054d4 <__kernel_rem_pio2+0x4e4>
 8005684:	41700000 	.word	0x41700000
 8005688:	3e700000 	.word	0x3e700000
 800568c:	00000000 	.word	0x00000000

08005690 <scalbn>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	ec55 4b10 	vmov	r4, r5, d0
 8005696:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800569a:	4606      	mov	r6, r0
 800569c:	462b      	mov	r3, r5
 800569e:	b999      	cbnz	r1, 80056c8 <scalbn+0x38>
 80056a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80056a4:	4323      	orrs	r3, r4
 80056a6:	d03f      	beq.n	8005728 <scalbn+0x98>
 80056a8:	4b35      	ldr	r3, [pc, #212]	; (8005780 <scalbn+0xf0>)
 80056aa:	4629      	mov	r1, r5
 80056ac:	ee10 0a10 	vmov	r0, s0
 80056b0:	2200      	movs	r2, #0
 80056b2:	f7fa ff99 	bl	80005e8 <__aeabi_dmul>
 80056b6:	4b33      	ldr	r3, [pc, #204]	; (8005784 <scalbn+0xf4>)
 80056b8:	429e      	cmp	r6, r3
 80056ba:	4604      	mov	r4, r0
 80056bc:	460d      	mov	r5, r1
 80056be:	da10      	bge.n	80056e2 <scalbn+0x52>
 80056c0:	a327      	add	r3, pc, #156	; (adr r3, 8005760 <scalbn+0xd0>)
 80056c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c6:	e01f      	b.n	8005708 <scalbn+0x78>
 80056c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80056cc:	4291      	cmp	r1, r2
 80056ce:	d10c      	bne.n	80056ea <scalbn+0x5a>
 80056d0:	ee10 2a10 	vmov	r2, s0
 80056d4:	4620      	mov	r0, r4
 80056d6:	4629      	mov	r1, r5
 80056d8:	f7fa fdd0 	bl	800027c <__adddf3>
 80056dc:	4604      	mov	r4, r0
 80056de:	460d      	mov	r5, r1
 80056e0:	e022      	b.n	8005728 <scalbn+0x98>
 80056e2:	460b      	mov	r3, r1
 80056e4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80056e8:	3936      	subs	r1, #54	; 0x36
 80056ea:	f24c 3250 	movw	r2, #50000	; 0xc350
 80056ee:	4296      	cmp	r6, r2
 80056f0:	dd0d      	ble.n	800570e <scalbn+0x7e>
 80056f2:	2d00      	cmp	r5, #0
 80056f4:	a11c      	add	r1, pc, #112	; (adr r1, 8005768 <scalbn+0xd8>)
 80056f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056fa:	da02      	bge.n	8005702 <scalbn+0x72>
 80056fc:	a11c      	add	r1, pc, #112	; (adr r1, 8005770 <scalbn+0xe0>)
 80056fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005702:	a319      	add	r3, pc, #100	; (adr r3, 8005768 <scalbn+0xd8>)
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	f7fa ff6e 	bl	80005e8 <__aeabi_dmul>
 800570c:	e7e6      	b.n	80056dc <scalbn+0x4c>
 800570e:	1872      	adds	r2, r6, r1
 8005710:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005714:	428a      	cmp	r2, r1
 8005716:	dcec      	bgt.n	80056f2 <scalbn+0x62>
 8005718:	2a00      	cmp	r2, #0
 800571a:	dd08      	ble.n	800572e <scalbn+0x9e>
 800571c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005720:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005724:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005728:	ec45 4b10 	vmov	d0, r4, r5
 800572c:	bd70      	pop	{r4, r5, r6, pc}
 800572e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005732:	da08      	bge.n	8005746 <scalbn+0xb6>
 8005734:	2d00      	cmp	r5, #0
 8005736:	a10a      	add	r1, pc, #40	; (adr r1, 8005760 <scalbn+0xd0>)
 8005738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800573c:	dac0      	bge.n	80056c0 <scalbn+0x30>
 800573e:	a10e      	add	r1, pc, #56	; (adr r1, 8005778 <scalbn+0xe8>)
 8005740:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005744:	e7bc      	b.n	80056c0 <scalbn+0x30>
 8005746:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800574a:	3236      	adds	r2, #54	; 0x36
 800574c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005750:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005754:	4620      	mov	r0, r4
 8005756:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <scalbn+0xf8>)
 8005758:	2200      	movs	r2, #0
 800575a:	e7d5      	b.n	8005708 <scalbn+0x78>
 800575c:	f3af 8000 	nop.w
 8005760:	c2f8f359 	.word	0xc2f8f359
 8005764:	01a56e1f 	.word	0x01a56e1f
 8005768:	8800759c 	.word	0x8800759c
 800576c:	7e37e43c 	.word	0x7e37e43c
 8005770:	8800759c 	.word	0x8800759c
 8005774:	fe37e43c 	.word	0xfe37e43c
 8005778:	c2f8f359 	.word	0xc2f8f359
 800577c:	81a56e1f 	.word	0x81a56e1f
 8005780:	43500000 	.word	0x43500000
 8005784:	ffff3cb0 	.word	0xffff3cb0
 8005788:	3c900000 	.word	0x3c900000
 800578c:	00000000 	.word	0x00000000

08005790 <floor>:
 8005790:	ec51 0b10 	vmov	r0, r1, d0
 8005794:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800579c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80057a0:	2e13      	cmp	r6, #19
 80057a2:	ee10 5a10 	vmov	r5, s0
 80057a6:	ee10 8a10 	vmov	r8, s0
 80057aa:	460c      	mov	r4, r1
 80057ac:	dc31      	bgt.n	8005812 <floor+0x82>
 80057ae:	2e00      	cmp	r6, #0
 80057b0:	da14      	bge.n	80057dc <floor+0x4c>
 80057b2:	a333      	add	r3, pc, #204	; (adr r3, 8005880 <floor+0xf0>)
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f7fa fd60 	bl	800027c <__adddf3>
 80057bc:	2200      	movs	r2, #0
 80057be:	2300      	movs	r3, #0
 80057c0:	f7fb f9a2 	bl	8000b08 <__aeabi_dcmpgt>
 80057c4:	b138      	cbz	r0, 80057d6 <floor+0x46>
 80057c6:	2c00      	cmp	r4, #0
 80057c8:	da53      	bge.n	8005872 <floor+0xe2>
 80057ca:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80057ce:	4325      	orrs	r5, r4
 80057d0:	d052      	beq.n	8005878 <floor+0xe8>
 80057d2:	4c2d      	ldr	r4, [pc, #180]	; (8005888 <floor+0xf8>)
 80057d4:	2500      	movs	r5, #0
 80057d6:	4621      	mov	r1, r4
 80057d8:	4628      	mov	r0, r5
 80057da:	e024      	b.n	8005826 <floor+0x96>
 80057dc:	4f2b      	ldr	r7, [pc, #172]	; (800588c <floor+0xfc>)
 80057de:	4137      	asrs	r7, r6
 80057e0:	ea01 0307 	and.w	r3, r1, r7
 80057e4:	4303      	orrs	r3, r0
 80057e6:	d01e      	beq.n	8005826 <floor+0x96>
 80057e8:	a325      	add	r3, pc, #148	; (adr r3, 8005880 <floor+0xf0>)
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	f7fa fd45 	bl	800027c <__adddf3>
 80057f2:	2200      	movs	r2, #0
 80057f4:	2300      	movs	r3, #0
 80057f6:	f7fb f987 	bl	8000b08 <__aeabi_dcmpgt>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	d0eb      	beq.n	80057d6 <floor+0x46>
 80057fe:	2c00      	cmp	r4, #0
 8005800:	bfbe      	ittt	lt
 8005802:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005806:	4133      	asrlt	r3, r6
 8005808:	18e4      	addlt	r4, r4, r3
 800580a:	ea24 0407 	bic.w	r4, r4, r7
 800580e:	2500      	movs	r5, #0
 8005810:	e7e1      	b.n	80057d6 <floor+0x46>
 8005812:	2e33      	cmp	r6, #51	; 0x33
 8005814:	dd0b      	ble.n	800582e <floor+0x9e>
 8005816:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800581a:	d104      	bne.n	8005826 <floor+0x96>
 800581c:	ee10 2a10 	vmov	r2, s0
 8005820:	460b      	mov	r3, r1
 8005822:	f7fa fd2b 	bl	800027c <__adddf3>
 8005826:	ec41 0b10 	vmov	d0, r0, r1
 800582a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800582e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8005832:	f04f 37ff 	mov.w	r7, #4294967295
 8005836:	40df      	lsrs	r7, r3
 8005838:	4238      	tst	r0, r7
 800583a:	d0f4      	beq.n	8005826 <floor+0x96>
 800583c:	a310      	add	r3, pc, #64	; (adr r3, 8005880 <floor+0xf0>)
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	f7fa fd1b 	bl	800027c <__adddf3>
 8005846:	2200      	movs	r2, #0
 8005848:	2300      	movs	r3, #0
 800584a:	f7fb f95d 	bl	8000b08 <__aeabi_dcmpgt>
 800584e:	2800      	cmp	r0, #0
 8005850:	d0c1      	beq.n	80057d6 <floor+0x46>
 8005852:	2c00      	cmp	r4, #0
 8005854:	da0a      	bge.n	800586c <floor+0xdc>
 8005856:	2e14      	cmp	r6, #20
 8005858:	d101      	bne.n	800585e <floor+0xce>
 800585a:	3401      	adds	r4, #1
 800585c:	e006      	b.n	800586c <floor+0xdc>
 800585e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005862:	2301      	movs	r3, #1
 8005864:	40b3      	lsls	r3, r6
 8005866:	441d      	add	r5, r3
 8005868:	45a8      	cmp	r8, r5
 800586a:	d8f6      	bhi.n	800585a <floor+0xca>
 800586c:	ea25 0507 	bic.w	r5, r5, r7
 8005870:	e7b1      	b.n	80057d6 <floor+0x46>
 8005872:	2500      	movs	r5, #0
 8005874:	462c      	mov	r4, r5
 8005876:	e7ae      	b.n	80057d6 <floor+0x46>
 8005878:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800587c:	e7ab      	b.n	80057d6 <floor+0x46>
 800587e:	bf00      	nop
 8005880:	8800759c 	.word	0x8800759c
 8005884:	7e37e43c 	.word	0x7e37e43c
 8005888:	bff00000 	.word	0xbff00000
 800588c:	000fffff 	.word	0x000fffff

08005890 <_init>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	bf00      	nop
 8005894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005896:	bc08      	pop	{r3}
 8005898:	469e      	mov	lr, r3
 800589a:	4770      	bx	lr

0800589c <_fini>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	bf00      	nop
 80058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a2:	bc08      	pop	{r3}
 80058a4:	469e      	mov	lr, r3
 80058a6:	4770      	bx	lr
